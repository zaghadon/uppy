"use strict";

var _excluded = ["data", "rowHeight", "renderRow", "overscanCount"],
    _excluded2 = ["childFactory", "transitionLeave", "transitionName", "transitionAppear", "transitionEnter", "transitionLeaveTimeout", "transitionEnterTimeout", "transitionAppearTimeout", "component"];

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _wrapNativeSuper2(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper2 = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction2(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct2(Class, arguments, _getPrototypeOf2(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf2(Wrapper, Class); }; return _wrapNativeSuper2(Class); }

function _construct2(Parent, args, Class) { if (_isNativeReflectConstruct2()) { _construct2 = Reflect.construct; } else { _construct2 = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf2(instance, Class.prototype); return instance; }; } return _construct2.apply(null, arguments); }

function _isNativeReflectConstruct2() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction2(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _getPrototypeOf2(o) { _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf2(o); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray2(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray2(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray2(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray2(o, minLen); }

function _arrayLikeToArray2(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass2(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _assertThisInitialized2(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf2(subClass, superClass); }

function _setPrototypeOf2(o, p) { _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf2(o, p); }

(function (f) {
  if (typeof exports === "object" && typeof module !== "undefined") {
    module.exports = f();
  } else if (typeof define === "function" && define.amd) {
    define([], f);
  } else {
    var g;

    if (typeof window !== "undefined") {
      g = window;
    } else if (typeof global !== "undefined") {
      g = global;
    } else if (typeof self !== "undefined") {
      g = self;
    } else {
      g = this;
    }

    g.Uppywithpolyfills = f();
  }
})(function () {
  var define, module, exports;
  return function () {
    function r(e, n, t) {
      function o(i, f) {
        if (!n[i]) {
          if (!e[i]) {
            var c = "function" == typeof require && require;
            if (!f && c) return c(i, !0);
            if (u) return u(i, !0);
            var a = new Error("Cannot find module '" + i + "'");
            throw a.code = "MODULE_NOT_FOUND", a;
          }

          var p = n[i] = {
            exports: {}
          };
          e[i][0].call(p.exports, function (r) {
            var n = e[i][1][r];
            return o(n || r);
          }, p, p.exports, r, e, n, t);
        }

        return n[i].exports;
      }

      for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) {
        o(t[i]);
      }

      return o;
    }

    return r;
  }()({
    1: [function (require, module, exports) {
      // Adapted from https://github.com/Flet/prettier-bytes/
      // Changing 1000 bytes to 1024, so we can keep uppercase KB vs kB
      // ISC License (c) Dan Flettre https://github.com/Flet/prettier-bytes/blob/master/LICENSE
      module.exports = function prettierBytes(num) {
        if (typeof num !== 'number' || isNaN(num)) {
          throw new TypeError('Expected a number, got ' + typeof num);
        }

        var neg = num < 0;
        var units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

        if (neg) {
          num = -num;
        }

        if (num < 1) {
          return (neg ? '-' : '') + num + ' B';
        }

        var exponent = Math.min(Math.floor(Math.log(num) / Math.log(1024)), units.length - 1);
        num = Number(num / Math.pow(1024, exponent));
        var unit = units[exponent];

        if (num >= 10 || num % 1 === 0) {
          // Do not show decimals when the number is two-digit, or if the number has no
          // decimal component.
          return (neg ? '-' : '') + num.toFixed(0) + ' ' + unit;
        } else {
          return (neg ? '-' : '') + num.toFixed(1) + ' ' + unit;
        }
      };
    }, {}],
    2: [function (require, module, exports) {
      (function (global) {
        (function () {
          (function (factory) {
            typeof define === 'function' && define.amd ? define(factory) : factory();
          })(function () {
            'use strict';

            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }

            function _defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }

            function _createClass(Constructor, protoProps, staticProps) {
              if (protoProps) _defineProperties(Constructor.prototype, protoProps);
              if (staticProps) _defineProperties(Constructor, staticProps);
              return Constructor;
            }

            function _inherits(subClass, superClass) {
              if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function");
              }

              subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                  value: subClass,
                  writable: true,
                  configurable: true
                }
              });
              if (superClass) _setPrototypeOf(subClass, superClass);
            }

            function _getPrototypeOf(o) {
              _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                return o.__proto__ || Object.getPrototypeOf(o);
              };
              return _getPrototypeOf(o);
            }

            function _setPrototypeOf(o, p) {
              _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                o.__proto__ = p;
                return o;
              };

              return _setPrototypeOf(o, p);
            }

            function _isNativeReflectConstruct() {
              if (typeof Reflect === "undefined" || !Reflect.construct) return false;
              if (Reflect.construct.sham) return false;
              if (typeof Proxy === "function") return true;

              try {
                Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
                return true;
              } catch (e) {
                return false;
              }
            }

            function _assertThisInitialized(self) {
              if (self === void 0) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              }

              return self;
            }

            function _possibleConstructorReturn(self, call) {
              if (call && (typeof call === "object" || typeof call === "function")) {
                return call;
              }

              return _assertThisInitialized(self);
            }

            function _createSuper(Derived) {
              var hasNativeReflectConstruct = _isNativeReflectConstruct();

              return function _createSuperInternal() {
                var Super = _getPrototypeOf(Derived),
                    result;

                if (hasNativeReflectConstruct) {
                  var NewTarget = _getPrototypeOf(this).constructor;

                  result = Reflect.construct(Super, arguments, NewTarget);
                } else {
                  result = Super.apply(this, arguments);
                }

                return _possibleConstructorReturn(this, result);
              };
            }

            function _superPropBase(object, property) {
              while (!Object.prototype.hasOwnProperty.call(object, property)) {
                object = _getPrototypeOf(object);
                if (object === null) break;
              }

              return object;
            }

            function _get(target, property, receiver) {
              if (typeof Reflect !== "undefined" && Reflect.get) {
                _get = Reflect.get;
              } else {
                _get = function _get(target, property, receiver) {
                  var base = _superPropBase(target, property);

                  if (!base) return;
                  var desc = Object.getOwnPropertyDescriptor(base, property);

                  if (desc.get) {
                    return desc.get.call(receiver);
                  }

                  return desc.value;
                };
              }

              return _get(target, property, receiver || target);
            }

            var Emitter = /*#__PURE__*/function () {
              function Emitter() {
                _classCallCheck(this, Emitter);

                Object.defineProperty(this, 'listeners', {
                  value: {},
                  writable: true,
                  configurable: true
                });
              }

              _createClass(Emitter, [{
                key: "addEventListener",
                value: function addEventListener(type, callback, options) {
                  if (!(type in this.listeners)) {
                    this.listeners[type] = [];
                  }

                  this.listeners[type].push({
                    callback: callback,
                    options: options
                  });
                }
              }, {
                key: "removeEventListener",
                value: function removeEventListener(type, callback) {
                  if (!(type in this.listeners)) {
                    return;
                  }

                  var stack = this.listeners[type];

                  for (var i = 0, l = stack.length; i < l; i++) {
                    if (stack[i].callback === callback) {
                      stack.splice(i, 1);
                      return;
                    }
                  }
                }
              }, {
                key: "dispatchEvent",
                value: function dispatchEvent(event) {
                  if (!(event.type in this.listeners)) {
                    return;
                  }

                  var stack = this.listeners[event.type];
                  var stackToCall = stack.slice();

                  for (var i = 0, l = stackToCall.length; i < l; i++) {
                    var listener = stackToCall[i];

                    try {
                      listener.callback.call(this, event);
                    } catch (e) {
                      Promise.resolve().then(function () {
                        throw e;
                      });
                    }

                    if (listener.options && listener.options.once) {
                      this.removeEventListener(event.type, listener.callback);
                    }
                  }

                  return !event.defaultPrevented;
                }
              }]);

              return Emitter;
            }();

            var AbortSignal = /*#__PURE__*/function (_Emitter) {
              _inherits(AbortSignal, _Emitter);

              var _super = _createSuper(AbortSignal);

              function AbortSignal() {
                var _this;

                _classCallCheck(this, AbortSignal);

                _this = _super.call(this); // Some versions of babel does not transpile super() correctly for IE <= 10, if the parent
                // constructor has failed to run, then "this.listeners" will still be undefined and then we call
                // the parent constructor directly instead as a workaround. For general details, see babel bug:
                // https://github.com/babel/babel/issues/3041
                // This hack was added as a fix for the issue described here:
                // https://github.com/Financial-Times/polyfill-library/pull/59#issuecomment-477558042

                if (!_this.listeners) {
                  Emitter.call(_assertThisInitialized(_this));
                } // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
                // we want Object.keys(new AbortController().signal) to be [] for compat with the native impl


                Object.defineProperty(_assertThisInitialized(_this), 'aborted', {
                  value: false,
                  writable: true,
                  configurable: true
                });
                Object.defineProperty(_assertThisInitialized(_this), 'onabort', {
                  value: null,
                  writable: true,
                  configurable: true
                });
                return _this;
              }

              _createClass(AbortSignal, [{
                key: "toString",
                value: function toString() {
                  return '[object AbortSignal]';
                }
              }, {
                key: "dispatchEvent",
                value: function dispatchEvent(event) {
                  if (event.type === 'abort') {
                    this.aborted = true;

                    if (typeof this.onabort === 'function') {
                      this.onabort.call(this, event);
                    }
                  }

                  _get(_getPrototypeOf(AbortSignal.prototype), "dispatchEvent", this).call(this, event);
                }
              }]);

              return AbortSignal;
            }(Emitter);

            var AbortController = /*#__PURE__*/function () {
              function AbortController() {
                _classCallCheck(this, AbortController); // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
                // we want Object.keys(new AbortController()) to be [] for compat with the native impl


                Object.defineProperty(this, 'signal', {
                  value: new AbortSignal(),
                  writable: true,
                  configurable: true
                });
              }

              _createClass(AbortController, [{
                key: "abort",
                value: function abort() {
                  var event;

                  try {
                    event = new Event('abort');
                  } catch (e) {
                    if (typeof document !== 'undefined') {
                      if (!document.createEvent) {
                        // For Internet Explorer 8:
                        event = document.createEventObject();
                        event.type = 'abort';
                      } else {
                        // For Internet Explorer 11:
                        event = document.createEvent('Event');
                        event.initEvent('abort', false, false);
                      }
                    } else {
                      // Fallback where document isn't available:
                      event = {
                        type: 'abort',
                        bubbles: false,
                        cancelable: false
                      };
                    }
                  }

                  this.signal.dispatchEvent(event);
                }
              }, {
                key: "toString",
                value: function toString() {
                  return '[object AbortController]';
                }
              }]);

              return AbortController;
            }();

            if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
              // These are necessary to make sure that we get correct output for:
              // Object.prototype.toString.call(new AbortController())
              AbortController.prototype[Symbol.toStringTag] = 'AbortController';
              AbortSignal.prototype[Symbol.toStringTag] = 'AbortSignal';
            }

            function polyfillNeeded(self) {
              if (self.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
                console.log('__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill');
                return true;
              } // Note that the "unfetch" minimal fetch polyfill defines fetch() without
              // defining window.Request, and this polyfill need to work on top of unfetch
              // so the below feature detection needs the !self.AbortController part.
              // The Request.prototype check is also needed because Safari versions 11.1.2
              // up to and including 12.1.x has a window.AbortController present but still
              // does NOT correctly implement abortable fetch:
              // https://bugs.webkit.org/show_bug.cgi?id=174980#c2


              return typeof self.Request === 'function' && !self.Request.prototype.hasOwnProperty('signal') || !self.AbortController;
            }
            /**
             * Note: the "fetch.Request" default value is available for fetch imported from
             * the "node-fetch" package and not in browsers. This is OK since browsers
             * will be importing umd-polyfill.js from that path "self" is passed the
             * decorator so the default value will not be used (because browsers that define
             * fetch also has Request). One quirky setup where self.fetch exists but
             * self.Request does not is when the "unfetch" minimal fetch polyfill is used
             * on top of IE11; for this case the browser will try to use the fetch.Request
             * default value which in turn will be undefined but then then "if (Request)"
             * will ensure that you get a patched fetch but still no Request (as expected).
             * @param {fetch, Request = fetch.Request}
             * @returns {fetch: abortableFetch, Request: AbortableRequest}
             */


            function abortableFetchDecorator(patchTargets) {
              if ('function' === typeof patchTargets) {
                patchTargets = {
                  fetch: patchTargets
                };
              }

              var _patchTargets = patchTargets,
                  fetch = _patchTargets.fetch,
                  _patchTargets$Request = _patchTargets.Request,
                  NativeRequest = _patchTargets$Request === void 0 ? fetch.Request : _patchTargets$Request,
                  NativeAbortController = _patchTargets.AbortController,
                  _patchTargets$__FORCE = _patchTargets.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL,
                  __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL = _patchTargets$__FORCE === void 0 ? false : _patchTargets$__FORCE;

              if (!polyfillNeeded({
                fetch: fetch,
                Request: NativeRequest,
                AbortController: NativeAbortController,
                __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL: __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL
              })) {
                return {
                  fetch: fetch,
                  Request: Request
                };
              }

              var Request = NativeRequest; // Note that the "unfetch" minimal fetch polyfill defines fetch() without
              // defining window.Request, and this polyfill need to work on top of unfetch
              // hence we only patch it if it's available. Also we don't patch it if signal
              // is already available on the Request prototype because in this case support
              // is present and the patching below can cause a crash since it assigns to
              // request.signal which is technically a read-only property. This latter error
              // happens when you run the main5.js node-fetch example in the repo
              // "abortcontroller-polyfill-examples". The exact error is:
              //   request.signal = init.signal;
              //   ^
              // TypeError: Cannot set property signal of #<Request> which has only a getter

              if (Request && !Request.prototype.hasOwnProperty('signal') || __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
                Request = function Request(input, init) {
                  var signal;

                  if (init && init.signal) {
                    signal = init.signal; // Never pass init.signal to the native Request implementation when the polyfill has
                    // been installed because if we're running on top of a browser with a
                    // working native AbortController (i.e. the polyfill was installed due to
                    // __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL being set), then passing our
                    // fake AbortSignal to the native fetch will trigger:
                    // TypeError: Failed to construct 'Request': member signal is not of type AbortSignal.

                    delete init.signal;
                  }

                  var request = new NativeRequest(input, init);

                  if (signal) {
                    Object.defineProperty(request, 'signal', {
                      writable: false,
                      enumerable: false,
                      configurable: true,
                      value: signal
                    });
                  }

                  return request;
                };

                Request.prototype = NativeRequest.prototype;
              }

              var realFetch = fetch;

              var abortableFetch = function abortableFetch(input, init) {
                var signal = Request && Request.prototype.isPrototypeOf(input) ? input.signal : init ? init.signal : undefined;

                if (signal) {
                  var abortError;

                  try {
                    abortError = new DOMException('Aborted', 'AbortError');
                  } catch (err) {
                    // IE 11 does not support calling the DOMException constructor, use a
                    // regular error object on it instead.
                    abortError = new Error('Aborted');
                    abortError.name = 'AbortError';
                  } // Return early if already aborted, thus avoiding making an HTTP request


                  if (signal.aborted) {
                    return Promise.reject(abortError);
                  } // Turn an event into a promise, reject it once `abort` is dispatched


                  var cancellation = new Promise(function (_, reject) {
                    signal.addEventListener('abort', function () {
                      return reject(abortError);
                    }, {
                      once: true
                    });
                  });

                  if (init && init.signal) {
                    // Never pass .signal to the native implementation when the polyfill has
                    // been installed because if we're running on top of a browser with a
                    // working native AbortController (i.e. the polyfill was installed due to
                    // __FORCE_INSTALL_ABORTCONTROLLER_POLYFILL being set), then passing our
                    // fake AbortSignal to the native fetch will trigger:
                    // TypeError: Failed to execute 'fetch' on 'Window': member signal is not of type AbortSignal.
                    delete init.signal;
                  } // Return the fastest promise (don't need to wait for request to finish)


                  return Promise.race([cancellation, realFetch(input, init)]);
                }

                return realFetch(input, init);
              };

              return {
                fetch: abortableFetch,
                Request: Request
              };
            }

            (function (self) {
              if (!polyfillNeeded(self)) {
                return;
              }

              if (!self.fetch) {
                console.warn('fetch() is not available, cannot install abortcontroller-polyfill');
                return;
              }

              var _abortableFetch = abortableFetchDecorator(self),
                  fetch = _abortableFetch.fetch,
                  Request = _abortableFetch.Request;

              self.fetch = fetch;
              self.Request = Request;
              Object.defineProperty(self, 'AbortController', {
                writable: true,
                enumerable: false,
                configurable: true,
                value: AbortController
              });
              Object.defineProperty(self, 'AbortSignal', {
                writable: true,
                enumerable: false,
                configurable: true,
                value: AbortSignal
              });
            })(typeof self !== 'undefined' ? self : global);
          });
        }).call(this);
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    3: [function (require, module, exports) {
      /**
       * Expose `Backoff`.
       */
      module.exports = Backoff;
      /**
       * Initialize backoff timer with `opts`.
       *
       * - `min` initial timeout in milliseconds [100]
       * - `max` max timeout [10000]
       * - `jitter` [0]
       * - `factor` [2]
       *
       * @param {Object} opts
       * @api public
       */

      function Backoff(opts) {
        opts = opts || {};
        this.ms = opts.min || 100;
        this.max = opts.max || 10000;
        this.factor = opts.factor || 2;
        this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
        this.attempts = 0;
      }
      /**
       * Return the backoff duration.
       *
       * @return {Number}
       * @api public
       */


      Backoff.prototype.duration = function () {
        var ms = this.ms * Math.pow(this.factor, this.attempts++);

        if (this.jitter) {
          var rand = Math.random();
          var deviation = Math.floor(rand * this.jitter * ms);
          ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
        }

        return Math.min(ms, this.max) | 0;
      };
      /**
       * Reset the number of attempts.
       *
       * @api public
       */


      Backoff.prototype.reset = function () {
        this.attempts = 0;
      };
      /**
       * Set the minimum duration
       *
       * @api public
       */


      Backoff.prototype.setMin = function (min) {
        this.ms = min;
      };
      /**
       * Set the maximum duration
       *
       * @api public
       */


      Backoff.prototype.setMax = function (max) {
        this.max = max;
      };
      /**
       * Set the jitter
       *
       * @api public
       */


      Backoff.prototype.setJitter = function (jitter) {
        this.jitter = jitter;
      };
    }, {}],
    4: [function (require, module, exports) {
      /*
       * base64-arraybuffer
       * https://github.com/niklasvh/base64-arraybuffer
       *
       * Copyright (c) 2012 Niklas von Hertzen
       * Licensed under the MIT license.
       */
      (function (chars) {
        "use strict";

        exports.encode = function (arraybuffer) {
          var bytes = new Uint8Array(arraybuffer),
              i,
              len = bytes.length,
              base64 = "";

          for (i = 0; i < len; i += 3) {
            base64 += chars[bytes[i] >> 2];
            base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
            base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
            base64 += chars[bytes[i + 2] & 63];
          }

          if (len % 3 === 2) {
            base64 = base64.substring(0, base64.length - 1) + "=";
          } else if (len % 3 === 1) {
            base64 = base64.substring(0, base64.length - 2) + "==";
          }

          return base64;
        };

        exports.decode = function (base64) {
          var bufferLength = base64.length * 0.75,
              len = base64.length,
              i,
              p = 0,
              encoded1,
              encoded2,
              encoded3,
              encoded4;

          if (base64[base64.length - 1] === "=") {
            bufferLength--;

            if (base64[base64.length - 2] === "=") {
              bufferLength--;
            }
          }

          var arraybuffer = new ArrayBuffer(bufferLength),
              bytes = new Uint8Array(arraybuffer);

          for (i = 0; i < len; i += 4) {
            encoded1 = chars.indexOf(base64[i]);
            encoded2 = chars.indexOf(base64[i + 1]);
            encoded3 = chars.indexOf(base64[i + 2]);
            encoded4 = chars.indexOf(base64[i + 3]);
            bytes[p++] = encoded1 << 2 | encoded2 >> 4;
            bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
            bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
          }

          return arraybuffer;
        };
      })("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
    }, {}],
    5: [function (require, module, exports) {
      'use strict';

      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      } // Support decoding URL-safe base64 strings, as Node.js does.
      // See: https://en.wikipedia.org/wiki/Base64#URL_applications


      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;

      function getLens(b64) {
        var len = b64.length;

        if (len % 4 > 0) {
          throw new Error('Invalid string. Length must be a multiple of 4');
        } // Trim off extra bytes after placeholder bytes are found
        // See: https://github.com/beatgammit/base64-js/issues/42


        var validLen = b64.indexOf('=');
        if (validLen === -1) validLen = len;
        var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      } // base64 is 4/3 + up to two characters of the original data


      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }

      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }

      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0; // if there are placeholders, only get up to the last complete 4 chars

        var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i;

        for (i = 0; i < len; i += 4) {
          tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
          arr[curByte++] = tmp >> 16 & 0xFF;
          arr[curByte++] = tmp >> 8 & 0xFF;
          arr[curByte++] = tmp & 0xFF;
        }

        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
          arr[curByte++] = tmp & 0xFF;
        }

        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 0xFF;
          arr[curByte++] = tmp & 0xFF;
        }

        return arr;
      }

      function tripletToBase64(num) {
        return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
      }

      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];

        for (var i = start; i < end; i += 3) {
          tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
          output.push(tripletToBase64(tmp));
        }

        return output.join('');
      }

      function fromByteArray(uint8) {
        var tmp;
        var len = uint8.length;
        var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes

        var parts = [];
        var maxChunkLength = 16383; // must be multiple of 3
        // go through the array every three bytes, we'll deal with trailing stuff later

        for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
          parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
        } // pad the end with zeros, but make sure to not forget the extra bytes


        if (extraBytes === 1) {
          tmp = uint8[len - 1];
          parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
        } else if (extraBytes === 2) {
          tmp = (uint8[len - 2] << 8) + uint8[len - 1];
          parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
        }

        return parts.join('');
      }
    }, {}],
    6: [function (require, module, exports) {
      (function (Buffer) {
        (function () {
          /*!
           * The buffer module from node.js, for the browser.
           *
           * @author   Feross Aboukhadijeh <https://feross.org>
           * @license  MIT
           */

          /* eslint-disable no-proto */
          'use strict';

          var base64 = require('base64-js');

          var ieee754 = require('ieee754');

          exports.Buffer = Buffer;
          exports.SlowBuffer = SlowBuffer;
          exports.INSPECT_MAX_BYTES = 50;
          var K_MAX_LENGTH = 0x7fffffff;
          exports.kMaxLength = K_MAX_LENGTH;
          /**
           * If `Buffer.TYPED_ARRAY_SUPPORT`:
           *   === true    Use Uint8Array implementation (fastest)
           *   === false   Print warning and recommend using `buffer` v4.x which has an Object
           *               implementation (most compatible, even IE6)
           *
           * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
           * Opera 11.6+, iOS 4.2+.
           *
           * We report that the browser does not support typed arrays if the are not subclassable
           * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
           * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
           * for __proto__ and has a buggy typed array implementation.
           */

          Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();

          if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
            console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
          }

          function typedArraySupport() {
            // Can typed array instances can be augmented?
            try {
              var arr = new Uint8Array(1);
              arr.__proto__ = {
                __proto__: Uint8Array.prototype,
                foo: function foo() {
                  return 42;
                }
              };
              return arr.foo() === 42;
            } catch (e) {
              return false;
            }
          }

          Object.defineProperty(Buffer.prototype, 'parent', {
            enumerable: true,
            get: function get() {
              if (!Buffer.isBuffer(this)) return undefined;
              return this.buffer;
            }
          });
          Object.defineProperty(Buffer.prototype, 'offset', {
            enumerable: true,
            get: function get() {
              if (!Buffer.isBuffer(this)) return undefined;
              return this.byteOffset;
            }
          });

          function createBuffer(length) {
            if (length > K_MAX_LENGTH) {
              throw new RangeError('The value "' + length + '" is invalid for option "size"');
            } // Return an augmented `Uint8Array` instance


            var buf = new Uint8Array(length);
            buf.__proto__ = Buffer.prototype;
            return buf;
          }
          /**
           * The Buffer constructor returns instances of `Uint8Array` that have their
           * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
           * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
           * and the `Uint8Array` methods. Square bracket notation works as expected -- it
           * returns a single octet.
           *
           * The `Uint8Array` prototype remains unmodified.
           */


          function Buffer(arg, encodingOrOffset, length) {
            // Common case.
            if (typeof arg === 'number') {
              if (typeof encodingOrOffset === 'string') {
                throw new TypeError('The "string" argument must be of type string. Received type number');
              }

              return allocUnsafe(arg);
            }

            return from(arg, encodingOrOffset, length);
          } // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97


          if (typeof Symbol !== 'undefined' && Symbol.species != null && Buffer[Symbol.species] === Buffer) {
            Object.defineProperty(Buffer, Symbol.species, {
              value: null,
              configurable: true,
              enumerable: false,
              writable: false
            });
          }

          Buffer.poolSize = 8192; // not used by this implementation

          function from(value, encodingOrOffset, length) {
            if (typeof value === 'string') {
              return fromString(value, encodingOrOffset);
            }

            if (ArrayBuffer.isView(value)) {
              return fromArrayLike(value);
            }

            if (value == null) {
              throw TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
            }

            if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
              return fromArrayBuffer(value, encodingOrOffset, length);
            }

            if (typeof value === 'number') {
              throw new TypeError('The "value" argument must not be of type number. Received type number');
            }

            var valueOf = value.valueOf && value.valueOf();

            if (valueOf != null && valueOf !== value) {
              return Buffer.from(valueOf, encodingOrOffset, length);
            }

            var b = fromObject(value);
            if (b) return b;

            if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
              return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
            }

            throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);
          }
          /**
           * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
           * if value is a number.
           * Buffer.from(str[, encoding])
           * Buffer.from(array)
           * Buffer.from(buffer)
           * Buffer.from(arrayBuffer[, byteOffset[, length]])
           **/


          Buffer.from = function (value, encodingOrOffset, length) {
            return from(value, encodingOrOffset, length);
          }; // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
          // https://github.com/feross/buffer/pull/148


          Buffer.prototype.__proto__ = Uint8Array.prototype;
          Buffer.__proto__ = Uint8Array;

          function assertSize(size) {
            if (typeof size !== 'number') {
              throw new TypeError('"size" argument must be of type number');
            } else if (size < 0) {
              throw new RangeError('The value "' + size + '" is invalid for option "size"');
            }
          }

          function alloc(size, fill, encoding) {
            assertSize(size);

            if (size <= 0) {
              return createBuffer(size);
            }

            if (fill !== undefined) {
              // Only pay attention to encoding if it's a string. This
              // prevents accidentally sending in a number that would
              // be interpretted as a start offset.
              return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
            }

            return createBuffer(size);
          }
          /**
           * Creates a new filled Buffer instance.
           * alloc(size[, fill[, encoding]])
           **/


          Buffer.alloc = function (size, fill, encoding) {
            return alloc(size, fill, encoding);
          };

          function allocUnsafe(size) {
            assertSize(size);
            return createBuffer(size < 0 ? 0 : checked(size) | 0);
          }
          /**
           * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
           * */


          Buffer.allocUnsafe = function (size) {
            return allocUnsafe(size);
          };
          /**
           * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
           */


          Buffer.allocUnsafeSlow = function (size) {
            return allocUnsafe(size);
          };

          function fromString(string, encoding) {
            if (typeof encoding !== 'string' || encoding === '') {
              encoding = 'utf8';
            }

            if (!Buffer.isEncoding(encoding)) {
              throw new TypeError('Unknown encoding: ' + encoding);
            }

            var length = byteLength(string, encoding) | 0;
            var buf = createBuffer(length);
            var actual = buf.write(string, encoding);

            if (actual !== length) {
              // Writing a hex string, for example, that contains invalid characters will
              // cause everything after the first invalid character to be ignored. (e.g.
              // 'abxxcd' will be treated as 'ab')
              buf = buf.slice(0, actual);
            }

            return buf;
          }

          function fromArrayLike(array) {
            var length = array.length < 0 ? 0 : checked(array.length) | 0;
            var buf = createBuffer(length);

            for (var i = 0; i < length; i += 1) {
              buf[i] = array[i] & 255;
            }

            return buf;
          }

          function fromArrayBuffer(array, byteOffset, length) {
            if (byteOffset < 0 || array.byteLength < byteOffset) {
              throw new RangeError('"offset" is outside of buffer bounds');
            }

            if (array.byteLength < byteOffset + (length || 0)) {
              throw new RangeError('"length" is outside of buffer bounds');
            }

            var buf;

            if (byteOffset === undefined && length === undefined) {
              buf = new Uint8Array(array);
            } else if (length === undefined) {
              buf = new Uint8Array(array, byteOffset);
            } else {
              buf = new Uint8Array(array, byteOffset, length);
            } // Return an augmented `Uint8Array` instance


            buf.__proto__ = Buffer.prototype;
            return buf;
          }

          function fromObject(obj) {
            if (Buffer.isBuffer(obj)) {
              var len = checked(obj.length) | 0;
              var buf = createBuffer(len);

              if (buf.length === 0) {
                return buf;
              }

              obj.copy(buf, 0, 0, len);
              return buf;
            }

            if (obj.length !== undefined) {
              if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                return createBuffer(0);
              }

              return fromArrayLike(obj);
            }

            if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
              return fromArrayLike(obj.data);
            }
          }

          function checked(length) {
            // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
            // length is NaN (which is otherwise coerced to zero.)
            if (length >= K_MAX_LENGTH) {
              throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
            }

            return length | 0;
          }

          function SlowBuffer(length) {
            if (+length != length) {
              // eslint-disable-line eqeqeq
              length = 0;
            }

            return Buffer.alloc(+length);
          }

          Buffer.isBuffer = function isBuffer(b) {
            return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false
          };

          Buffer.compare = function compare(a, b) {
            if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
            if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);

            if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
              throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
            }

            if (a === b) return 0;
            var x = a.length;
            var y = b.length;

            for (var i = 0, len = Math.min(x, y); i < len; ++i) {
              if (a[i] !== b[i]) {
                x = a[i];
                y = b[i];
                break;
              }
            }

            if (x < y) return -1;
            if (y < x) return 1;
            return 0;
          };

          Buffer.isEncoding = function isEncoding(encoding) {
            switch (String(encoding).toLowerCase()) {
              case 'hex':
              case 'utf8':
              case 'utf-8':
              case 'ascii':
              case 'latin1':
              case 'binary':
              case 'base64':
              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return true;

              default:
                return false;
            }
          };

          Buffer.concat = function concat(list, length) {
            if (!Array.isArray(list)) {
              throw new TypeError('"list" argument must be an Array of Buffers');
            }

            if (list.length === 0) {
              return Buffer.alloc(0);
            }

            var i;

            if (length === undefined) {
              length = 0;

              for (i = 0; i < list.length; ++i) {
                length += list[i].length;
              }
            }

            var buffer = Buffer.allocUnsafe(length);
            var pos = 0;

            for (i = 0; i < list.length; ++i) {
              var buf = list[i];

              if (isInstance(buf, Uint8Array)) {
                buf = Buffer.from(buf);
              }

              if (!Buffer.isBuffer(buf)) {
                throw new TypeError('"list" argument must be an Array of Buffers');
              }

              buf.copy(buffer, pos);
              pos += buf.length;
            }

            return buffer;
          };

          function byteLength(string, encoding) {
            if (Buffer.isBuffer(string)) {
              return string.length;
            }

            if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
              return string.byteLength;
            }

            if (typeof string !== 'string') {
              throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + typeof string);
            }

            var len = string.length;
            var mustMatch = arguments.length > 2 && arguments[2] === true;
            if (!mustMatch && len === 0) return 0; // Use a for loop to avoid recursion

            var loweredCase = false;

            for (;;) {
              switch (encoding) {
                case 'ascii':
                case 'latin1':
                case 'binary':
                  return len;

                case 'utf8':
                case 'utf-8':
                  return utf8ToBytes(string).length;

                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return len * 2;

                case 'hex':
                  return len >>> 1;

                case 'base64':
                  return base64ToBytes(string).length;

                default:
                  if (loweredCase) {
                    return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8
                  }

                  encoding = ('' + encoding).toLowerCase();
                  loweredCase = true;
              }
            }
          }

          Buffer.byteLength = byteLength;

          function slowToString(encoding, start, end) {
            var loweredCase = false; // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
            // property of a typed array.
            // This behaves neither like String nor Uint8Array in that we set start/end
            // to their upper/lower bounds if the value passed is out of range.
            // undefined is handled specially as per ECMA-262 6th Edition,
            // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.

            if (start === undefined || start < 0) {
              start = 0;
            } // Return early if start > this.length. Done here to prevent potential uint32
            // coercion fail below.


            if (start > this.length) {
              return '';
            }

            if (end === undefined || end > this.length) {
              end = this.length;
            }

            if (end <= 0) {
              return '';
            } // Force coersion to uint32. This will also coerce falsey/NaN values to 0.


            end >>>= 0;
            start >>>= 0;

            if (end <= start) {
              return '';
            }

            if (!encoding) encoding = 'utf8';

            while (true) {
              switch (encoding) {
                case 'hex':
                  return hexSlice(this, start, end);

                case 'utf8':
                case 'utf-8':
                  return utf8Slice(this, start, end);

                case 'ascii':
                  return asciiSlice(this, start, end);

                case 'latin1':
                case 'binary':
                  return latin1Slice(this, start, end);

                case 'base64':
                  return base64Slice(this, start, end);

                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return utf16leSlice(this, start, end);

                default:
                  if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                  encoding = (encoding + '').toLowerCase();
                  loweredCase = true;
              }
            }
          } // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
          // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
          // reliably in a browserify context because there could be multiple different
          // copies of the 'buffer' package in use. This method works even for Buffer
          // instances that were created from another copy of the `buffer` package.
          // See: https://github.com/feross/buffer/issues/154


          Buffer.prototype._isBuffer = true;

          function swap(b, n, m) {
            var i = b[n];
            b[n] = b[m];
            b[m] = i;
          }

          Buffer.prototype.swap16 = function swap16() {
            var len = this.length;

            if (len % 2 !== 0) {
              throw new RangeError('Buffer size must be a multiple of 16-bits');
            }

            for (var i = 0; i < len; i += 2) {
              swap(this, i, i + 1);
            }

            return this;
          };

          Buffer.prototype.swap32 = function swap32() {
            var len = this.length;

            if (len % 4 !== 0) {
              throw new RangeError('Buffer size must be a multiple of 32-bits');
            }

            for (var i = 0; i < len; i += 4) {
              swap(this, i, i + 3);
              swap(this, i + 1, i + 2);
            }

            return this;
          };

          Buffer.prototype.swap64 = function swap64() {
            var len = this.length;

            if (len % 8 !== 0) {
              throw new RangeError('Buffer size must be a multiple of 64-bits');
            }

            for (var i = 0; i < len; i += 8) {
              swap(this, i, i + 7);
              swap(this, i + 1, i + 6);
              swap(this, i + 2, i + 5);
              swap(this, i + 3, i + 4);
            }

            return this;
          };

          Buffer.prototype.toString = function toString() {
            var length = this.length;
            if (length === 0) return '';
            if (arguments.length === 0) return utf8Slice(this, 0, length);
            return slowToString.apply(this, arguments);
          };

          Buffer.prototype.toLocaleString = Buffer.prototype.toString;

          Buffer.prototype.equals = function equals(b) {
            if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
            if (this === b) return true;
            return Buffer.compare(this, b) === 0;
          };

          Buffer.prototype.inspect = function inspect() {
            var str = '';
            var max = exports.INSPECT_MAX_BYTES;
            str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
            if (this.length > max) str += ' ... ';
            return '<Buffer ' + str + '>';
          };

          Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
            if (isInstance(target, Uint8Array)) {
              target = Buffer.from(target, target.offset, target.byteLength);
            }

            if (!Buffer.isBuffer(target)) {
              throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + typeof target);
            }

            if (start === undefined) {
              start = 0;
            }

            if (end === undefined) {
              end = target ? target.length : 0;
            }

            if (thisStart === undefined) {
              thisStart = 0;
            }

            if (thisEnd === undefined) {
              thisEnd = this.length;
            }

            if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
              throw new RangeError('out of range index');
            }

            if (thisStart >= thisEnd && start >= end) {
              return 0;
            }

            if (thisStart >= thisEnd) {
              return -1;
            }

            if (start >= end) {
              return 1;
            }

            start >>>= 0;
            end >>>= 0;
            thisStart >>>= 0;
            thisEnd >>>= 0;
            if (this === target) return 0;
            var x = thisEnd - thisStart;
            var y = end - start;
            var len = Math.min(x, y);
            var thisCopy = this.slice(thisStart, thisEnd);
            var targetCopy = target.slice(start, end);

            for (var i = 0; i < len; ++i) {
              if (thisCopy[i] !== targetCopy[i]) {
                x = thisCopy[i];
                y = targetCopy[i];
                break;
              }
            }

            if (x < y) return -1;
            if (y < x) return 1;
            return 0;
          }; // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
          // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
          //
          // Arguments:
          // - buffer - a Buffer to search
          // - val - a string, Buffer, or number
          // - byteOffset - an index into `buffer`; will be clamped to an int32
          // - encoding - an optional encoding, relevant is val is a string
          // - dir - true for indexOf, false for lastIndexOf


          function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
            // Empty buffer means no match
            if (buffer.length === 0) return -1; // Normalize byteOffset

            if (typeof byteOffset === 'string') {
              encoding = byteOffset;
              byteOffset = 0;
            } else if (byteOffset > 0x7fffffff) {
              byteOffset = 0x7fffffff;
            } else if (byteOffset < -0x80000000) {
              byteOffset = -0x80000000;
            }

            byteOffset = +byteOffset; // Coerce to Number.

            if (numberIsNaN(byteOffset)) {
              // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
              byteOffset = dir ? 0 : buffer.length - 1;
            } // Normalize byteOffset: negative offsets start from the end of the buffer


            if (byteOffset < 0) byteOffset = buffer.length + byteOffset;

            if (byteOffset >= buffer.length) {
              if (dir) return -1;else byteOffset = buffer.length - 1;
            } else if (byteOffset < 0) {
              if (dir) byteOffset = 0;else return -1;
            } // Normalize val


            if (typeof val === 'string') {
              val = Buffer.from(val, encoding);
            } // Finally, search either indexOf (if dir is true) or lastIndexOf


            if (Buffer.isBuffer(val)) {
              // Special case: looking for empty string/buffer always fails
              if (val.length === 0) {
                return -1;
              }

              return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
            } else if (typeof val === 'number') {
              val = val & 0xFF; // Search for a byte value [0-255]

              if (typeof Uint8Array.prototype.indexOf === 'function') {
                if (dir) {
                  return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                } else {
                  return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                }
              }

              return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
            }

            throw new TypeError('val must be string, number or Buffer');
          }

          function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
            var indexSize = 1;
            var arrLength = arr.length;
            var valLength = val.length;

            if (encoding !== undefined) {
              encoding = String(encoding).toLowerCase();

              if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
                if (arr.length < 2 || val.length < 2) {
                  return -1;
                }

                indexSize = 2;
                arrLength /= 2;
                valLength /= 2;
                byteOffset /= 2;
              }
            }

            function read(buf, i) {
              if (indexSize === 1) {
                return buf[i];
              } else {
                return buf.readUInt16BE(i * indexSize);
              }
            }

            var i;

            if (dir) {
              var foundIndex = -1;

              for (i = byteOffset; i < arrLength; i++) {
                if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                  if (foundIndex === -1) foundIndex = i;
                  if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
                } else {
                  if (foundIndex !== -1) i -= i - foundIndex;
                  foundIndex = -1;
                }
              }
            } else {
              if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;

              for (i = byteOffset; i >= 0; i--) {
                var found = true;

                for (var j = 0; j < valLength; j++) {
                  if (read(arr, i + j) !== read(val, j)) {
                    found = false;
                    break;
                  }
                }

                if (found) return i;
              }
            }

            return -1;
          }

          Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
            return this.indexOf(val, byteOffset, encoding) !== -1;
          };

          Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
          };

          Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
          };

          function hexWrite(buf, string, offset, length) {
            offset = Number(offset) || 0;
            var remaining = buf.length - offset;

            if (!length) {
              length = remaining;
            } else {
              length = Number(length);

              if (length > remaining) {
                length = remaining;
              }
            }

            var strLen = string.length;

            if (length > strLen / 2) {
              length = strLen / 2;
            }

            for (var i = 0; i < length; ++i) {
              var parsed = parseInt(string.substr(i * 2, 2), 16);
              if (numberIsNaN(parsed)) return i;
              buf[offset + i] = parsed;
            }

            return i;
          }

          function utf8Write(buf, string, offset, length) {
            return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
          }

          function asciiWrite(buf, string, offset, length) {
            return blitBuffer(asciiToBytes(string), buf, offset, length);
          }

          function latin1Write(buf, string, offset, length) {
            return asciiWrite(buf, string, offset, length);
          }

          function base64Write(buf, string, offset, length) {
            return blitBuffer(base64ToBytes(string), buf, offset, length);
          }

          function ucs2Write(buf, string, offset, length) {
            return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
          }

          Buffer.prototype.write = function write(string, offset, length, encoding) {
            // Buffer#write(string)
            if (offset === undefined) {
              encoding = 'utf8';
              length = this.length;
              offset = 0; // Buffer#write(string, encoding)
            } else if (length === undefined && typeof offset === 'string') {
              encoding = offset;
              length = this.length;
              offset = 0; // Buffer#write(string, offset[, length][, encoding])
            } else if (isFinite(offset)) {
              offset = offset >>> 0;

              if (isFinite(length)) {
                length = length >>> 0;
                if (encoding === undefined) encoding = 'utf8';
              } else {
                encoding = length;
                length = undefined;
              }
            } else {
              throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
            }

            var remaining = this.length - offset;
            if (length === undefined || length > remaining) length = remaining;

            if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
              throw new RangeError('Attempt to write outside buffer bounds');
            }

            if (!encoding) encoding = 'utf8';
            var loweredCase = false;

            for (;;) {
              switch (encoding) {
                case 'hex':
                  return hexWrite(this, string, offset, length);

                case 'utf8':
                case 'utf-8':
                  return utf8Write(this, string, offset, length);

                case 'ascii':
                  return asciiWrite(this, string, offset, length);

                case 'latin1':
                case 'binary':
                  return latin1Write(this, string, offset, length);

                case 'base64':
                  // Warning: maxLength not taken into account in base64Write
                  return base64Write(this, string, offset, length);

                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return ucs2Write(this, string, offset, length);

                default:
                  if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                  encoding = ('' + encoding).toLowerCase();
                  loweredCase = true;
              }
            }
          };

          Buffer.prototype.toJSON = function toJSON() {
            return {
              type: 'Buffer',
              data: Array.prototype.slice.call(this._arr || this, 0)
            };
          };

          function base64Slice(buf, start, end) {
            if (start === 0 && end === buf.length) {
              return base64.fromByteArray(buf);
            } else {
              return base64.fromByteArray(buf.slice(start, end));
            }
          }

          function utf8Slice(buf, start, end) {
            end = Math.min(buf.length, end);
            var res = [];
            var i = start;

            while (i < end) {
              var firstByte = buf[i];
              var codePoint = null;
              var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

              if (i + bytesPerSequence <= end) {
                var secondByte, thirdByte, fourthByte, tempCodePoint;

                switch (bytesPerSequence) {
                  case 1:
                    if (firstByte < 0x80) {
                      codePoint = firstByte;
                    }

                    break;

                  case 2:
                    secondByte = buf[i + 1];

                    if ((secondByte & 0xC0) === 0x80) {
                      tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;

                      if (tempCodePoint > 0x7F) {
                        codePoint = tempCodePoint;
                      }
                    }

                    break;

                  case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];

                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                      tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;

                      if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                        codePoint = tempCodePoint;
                      }
                    }

                    break;

                  case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];

                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                      tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;

                      if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                        codePoint = tempCodePoint;
                      }
                    }

                }
              }

              if (codePoint === null) {
                // we did not generate a valid codePoint so insert a
                // replacement char (U+FFFD) and advance only 1 byte
                codePoint = 0xFFFD;
                bytesPerSequence = 1;
              } else if (codePoint > 0xFFFF) {
                // encode to utf16 (surrogate pair dance)
                codePoint -= 0x10000;
                res.push(codePoint >>> 10 & 0x3FF | 0xD800);
                codePoint = 0xDC00 | codePoint & 0x3FF;
              }

              res.push(codePoint);
              i += bytesPerSequence;
            }

            return decodeCodePointsArray(res);
          } // Based on http://stackoverflow.com/a/22747272/680742, the browser with
          // the lowest limit is Chrome, with 0x10000 args.
          // We go 1 magnitude less, for safety


          var MAX_ARGUMENTS_LENGTH = 0x1000;

          function decodeCodePointsArray(codePoints) {
            var len = codePoints.length;

            if (len <= MAX_ARGUMENTS_LENGTH) {
              return String.fromCharCode.apply(String, codePoints); // avoid extra slice()
            } // Decode in chunks to avoid "call stack size exceeded".


            var res = '';
            var i = 0;

            while (i < len) {
              res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
            }

            return res;
          }

          function asciiSlice(buf, start, end) {
            var ret = '';
            end = Math.min(buf.length, end);

            for (var i = start; i < end; ++i) {
              ret += String.fromCharCode(buf[i] & 0x7F);
            }

            return ret;
          }

          function latin1Slice(buf, start, end) {
            var ret = '';
            end = Math.min(buf.length, end);

            for (var i = start; i < end; ++i) {
              ret += String.fromCharCode(buf[i]);
            }

            return ret;
          }

          function hexSlice(buf, start, end) {
            var len = buf.length;
            if (!start || start < 0) start = 0;
            if (!end || end < 0 || end > len) end = len;
            var out = '';

            for (var i = start; i < end; ++i) {
              out += toHex(buf[i]);
            }

            return out;
          }

          function utf16leSlice(buf, start, end) {
            var bytes = buf.slice(start, end);
            var res = '';

            for (var i = 0; i < bytes.length; i += 2) {
              res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
            }

            return res;
          }

          Buffer.prototype.slice = function slice(start, end) {
            var len = this.length;
            start = ~~start;
            end = end === undefined ? len : ~~end;

            if (start < 0) {
              start += len;
              if (start < 0) start = 0;
            } else if (start > len) {
              start = len;
            }

            if (end < 0) {
              end += len;
              if (end < 0) end = 0;
            } else if (end > len) {
              end = len;
            }

            if (end < start) end = start;
            var newBuf = this.subarray(start, end); // Return an augmented `Uint8Array` instance

            newBuf.__proto__ = Buffer.prototype;
            return newBuf;
          };
          /*
           * Need to make sure that buffer isn't trying to write out of bounds.
           */


          function checkOffset(offset, ext, length) {
            if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
            if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
          }

          Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);
            var val = this[offset];
            var mul = 1;
            var i = 0;

            while (++i < byteLength && (mul *= 0x100)) {
              val += this[offset + i] * mul;
            }

            return val;
          };

          Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;

            if (!noAssert) {
              checkOffset(offset, byteLength, this.length);
            }

            var val = this[offset + --byteLength];
            var mul = 1;

            while (byteLength > 0 && (mul *= 0x100)) {
              val += this[offset + --byteLength] * mul;
            }

            return val;
          };

          Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 1, this.length);
            return this[offset];
          };

          Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 2, this.length);
            return this[offset] | this[offset + 1] << 8;
          };

          Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 2, this.length);
            return this[offset] << 8 | this[offset + 1];
          };

          Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 4, this.length);
            return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
          };

          Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 4, this.length);
            return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
          };

          Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);
            var val = this[offset];
            var mul = 1;
            var i = 0;

            while (++i < byteLength && (mul *= 0x100)) {
              val += this[offset + i] * mul;
            }

            mul *= 0x80;
            if (val >= mul) val -= Math.pow(2, 8 * byteLength);
            return val;
          };

          Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;
            if (!noAssert) checkOffset(offset, byteLength, this.length);
            var i = byteLength;
            var mul = 1;
            var val = this[offset + --i];

            while (i > 0 && (mul *= 0x100)) {
              val += this[offset + --i] * mul;
            }

            mul *= 0x80;
            if (val >= mul) val -= Math.pow(2, 8 * byteLength);
            return val;
          };

          Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 1, this.length);
            if (!(this[offset] & 0x80)) return this[offset];
            return (0xff - this[offset] + 1) * -1;
          };

          Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 2, this.length);
            var val = this[offset] | this[offset + 1] << 8;
            return val & 0x8000 ? val | 0xFFFF0000 : val;
          };

          Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 2, this.length);
            var val = this[offset + 1] | this[offset] << 8;
            return val & 0x8000 ? val | 0xFFFF0000 : val;
          };

          Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 4, this.length);
            return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
          };

          Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 4, this.length);
            return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
          };

          Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 4, this.length);
            return ieee754.read(this, offset, true, 23, 4);
          };

          Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 4, this.length);
            return ieee754.read(this, offset, false, 23, 4);
          };

          Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 8, this.length);
            return ieee754.read(this, offset, true, 52, 8);
          };

          Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
            offset = offset >>> 0;
            if (!noAssert) checkOffset(offset, 8, this.length);
            return ieee754.read(this, offset, false, 52, 8);
          };

          function checkInt(buf, value, offset, ext, max, min) {
            if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
            if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
            if (offset + ext > buf.length) throw new RangeError('Index out of range');
          }

          Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
            value = +value;
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;

            if (!noAssert) {
              var maxBytes = Math.pow(2, 8 * byteLength) - 1;
              checkInt(this, value, offset, byteLength, maxBytes, 0);
            }

            var mul = 1;
            var i = 0;
            this[offset] = value & 0xFF;

            while (++i < byteLength && (mul *= 0x100)) {
              this[offset + i] = value / mul & 0xFF;
            }

            return offset + byteLength;
          };

          Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
            value = +value;
            offset = offset >>> 0;
            byteLength = byteLength >>> 0;

            if (!noAssert) {
              var maxBytes = Math.pow(2, 8 * byteLength) - 1;
              checkInt(this, value, offset, byteLength, maxBytes, 0);
            }

            var i = byteLength - 1;
            var mul = 1;
            this[offset + i] = value & 0xFF;

            while (--i >= 0 && (mul *= 0x100)) {
              this[offset + i] = value / mul & 0xFF;
            }

            return offset + byteLength;
          };

          Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
            this[offset] = value & 0xff;
            return offset + 1;
          };

          Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
            return offset + 2;
          };

          Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
            this[offset] = value >>> 8;
            this[offset + 1] = value & 0xff;
            return offset + 2;
          };

          Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
            this[offset + 3] = value >>> 24;
            this[offset + 2] = value >>> 16;
            this[offset + 1] = value >>> 8;
            this[offset] = value & 0xff;
            return offset + 4;
          };

          Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
            this[offset] = value >>> 24;
            this[offset + 1] = value >>> 16;
            this[offset + 2] = value >>> 8;
            this[offset + 3] = value & 0xff;
            return offset + 4;
          };

          Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
            value = +value;
            offset = offset >>> 0;

            if (!noAssert) {
              var limit = Math.pow(2, 8 * byteLength - 1);
              checkInt(this, value, offset, byteLength, limit - 1, -limit);
            }

            var i = 0;
            var mul = 1;
            var sub = 0;
            this[offset] = value & 0xFF;

            while (++i < byteLength && (mul *= 0x100)) {
              if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                sub = 1;
              }

              this[offset + i] = (value / mul >> 0) - sub & 0xFF;
            }

            return offset + byteLength;
          };

          Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
            value = +value;
            offset = offset >>> 0;

            if (!noAssert) {
              var limit = Math.pow(2, 8 * byteLength - 1);
              checkInt(this, value, offset, byteLength, limit - 1, -limit);
            }

            var i = byteLength - 1;
            var mul = 1;
            var sub = 0;
            this[offset + i] = value & 0xFF;

            while (--i >= 0 && (mul *= 0x100)) {
              if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                sub = 1;
              }

              this[offset + i] = (value / mul >> 0) - sub & 0xFF;
            }

            return offset + byteLength;
          };

          Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
            if (value < 0) value = 0xff + value + 1;
            this[offset] = value & 0xff;
            return offset + 1;
          };

          Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
            return offset + 2;
          };

          Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
            this[offset] = value >>> 8;
            this[offset + 1] = value & 0xff;
            return offset + 2;
          };

          Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
            this[offset] = value & 0xff;
            this[offset + 1] = value >>> 8;
            this[offset + 2] = value >>> 16;
            this[offset + 3] = value >>> 24;
            return offset + 4;
          };

          Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
            value = +value;
            offset = offset >>> 0;
            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
            if (value < 0) value = 0xffffffff + value + 1;
            this[offset] = value >>> 24;
            this[offset + 1] = value >>> 16;
            this[offset + 2] = value >>> 8;
            this[offset + 3] = value & 0xff;
            return offset + 4;
          };

          function checkIEEE754(buf, value, offset, ext, max, min) {
            if (offset + ext > buf.length) throw new RangeError('Index out of range');
            if (offset < 0) throw new RangeError('Index out of range');
          }

          function writeFloat(buf, value, offset, littleEndian, noAssert) {
            value = +value;
            offset = offset >>> 0;

            if (!noAssert) {
              checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
            }

            ieee754.write(buf, value, offset, littleEndian, 23, 4);
            return offset + 4;
          }

          Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
            return writeFloat(this, value, offset, true, noAssert);
          };

          Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
            return writeFloat(this, value, offset, false, noAssert);
          };

          function writeDouble(buf, value, offset, littleEndian, noAssert) {
            value = +value;
            offset = offset >>> 0;

            if (!noAssert) {
              checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
            }

            ieee754.write(buf, value, offset, littleEndian, 52, 8);
            return offset + 8;
          }

          Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
            return writeDouble(this, value, offset, true, noAssert);
          };

          Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
            return writeDouble(this, value, offset, false, noAssert);
          }; // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)


          Buffer.prototype.copy = function copy(target, targetStart, start, end) {
            if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
            if (!start) start = 0;
            if (!end && end !== 0) end = this.length;
            if (targetStart >= target.length) targetStart = target.length;
            if (!targetStart) targetStart = 0;
            if (end > 0 && end < start) end = start; // Copy 0 bytes; we're done

            if (end === start) return 0;
            if (target.length === 0 || this.length === 0) return 0; // Fatal error conditions

            if (targetStart < 0) {
              throw new RangeError('targetStart out of bounds');
            }

            if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
            if (end < 0) throw new RangeError('sourceEnd out of bounds'); // Are we oob?

            if (end > this.length) end = this.length;

            if (target.length - targetStart < end - start) {
              end = target.length - targetStart + start;
            }

            var len = end - start;

            if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
              // Use built-in when available, missing from IE11
              this.copyWithin(targetStart, start, end);
            } else if (this === target && start < targetStart && targetStart < end) {
              // descending copy from end
              for (var i = len - 1; i >= 0; --i) {
                target[i + targetStart] = this[i + start];
              }
            } else {
              Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
            }

            return len;
          }; // Usage:
          //    buffer.fill(number[, offset[, end]])
          //    buffer.fill(buffer[, offset[, end]])
          //    buffer.fill(string[, offset[, end]][, encoding])


          Buffer.prototype.fill = function fill(val, start, end, encoding) {
            // Handle string cases:
            if (typeof val === 'string') {
              if (typeof start === 'string') {
                encoding = start;
                start = 0;
                end = this.length;
              } else if (typeof end === 'string') {
                encoding = end;
                end = this.length;
              }

              if (encoding !== undefined && typeof encoding !== 'string') {
                throw new TypeError('encoding must be a string');
              }

              if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                throw new TypeError('Unknown encoding: ' + encoding);
              }

              if (val.length === 1) {
                var code = val.charCodeAt(0);

                if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {
                  // Fast path: If `val` fits into a single byte, use that numeric value.
                  val = code;
                }
              }
            } else if (typeof val === 'number') {
              val = val & 255;
            } // Invalid ranges are not set to a default, so can range check early.


            if (start < 0 || this.length < start || this.length < end) {
              throw new RangeError('Out of range index');
            }

            if (end <= start) {
              return this;
            }

            start = start >>> 0;
            end = end === undefined ? this.length : end >>> 0;
            if (!val) val = 0;
            var i;

            if (typeof val === 'number') {
              for (i = start; i < end; ++i) {
                this[i] = val;
              }
            } else {
              var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
              var len = bytes.length;

              if (len === 0) {
                throw new TypeError('The value "' + val + '" is invalid for argument "value"');
              }

              for (i = 0; i < end - start; ++i) {
                this[i + start] = bytes[i % len];
              }
            }

            return this;
          }; // HELPER FUNCTIONS
          // ================


          var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

          function base64clean(str) {
            // Node takes equal signs as end of the Base64 encoding
            str = str.split('=')[0]; // Node strips out invalid characters like \n and \t from the string, base64-js does not

            str = str.trim().replace(INVALID_BASE64_RE, ''); // Node converts strings with length < 2 to ''

            if (str.length < 2) return ''; // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not

            while (str.length % 4 !== 0) {
              str = str + '=';
            }

            return str;
          }

          function toHex(n) {
            if (n < 16) return '0' + n.toString(16);
            return n.toString(16);
          }

          function utf8ToBytes(string, units) {
            units = units || Infinity;
            var codePoint;
            var length = string.length;
            var leadSurrogate = null;
            var bytes = [];

            for (var i = 0; i < length; ++i) {
              codePoint = string.charCodeAt(i); // is surrogate component

              if (codePoint > 0xD7FF && codePoint < 0xE000) {
                // last char was a lead
                if (!leadSurrogate) {
                  // no lead yet
                  if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                  } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                  } // valid lead


                  leadSurrogate = codePoint;
                  continue;
                } // 2 leads in a row


                if (codePoint < 0xDC00) {
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                  leadSurrogate = codePoint;
                  continue;
                } // valid surrogate pair


                codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
              } else if (leadSurrogate) {
                // valid bmp char, but last char was a lead
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              }

              leadSurrogate = null; // encode utf8

              if (codePoint < 0x80) {
                if ((units -= 1) < 0) break;
                bytes.push(codePoint);
              } else if (codePoint < 0x800) {
                if ((units -= 2) < 0) break;
                bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
              } else if (codePoint < 0x10000) {
                if ((units -= 3) < 0) break;
                bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
              } else if (codePoint < 0x110000) {
                if ((units -= 4) < 0) break;
                bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
              } else {
                throw new Error('Invalid code point');
              }
            }

            return bytes;
          }

          function asciiToBytes(str) {
            var byteArray = [];

            for (var i = 0; i < str.length; ++i) {
              // Node's code seems to be doing this and not & 0x7F..
              byteArray.push(str.charCodeAt(i) & 0xFF);
            }

            return byteArray;
          }

          function utf16leToBytes(str, units) {
            var c, hi, lo;
            var byteArray = [];

            for (var i = 0; i < str.length; ++i) {
              if ((units -= 2) < 0) break;
              c = str.charCodeAt(i);
              hi = c >> 8;
              lo = c % 256;
              byteArray.push(lo);
              byteArray.push(hi);
            }

            return byteArray;
          }

          function base64ToBytes(str) {
            return base64.toByteArray(base64clean(str));
          }

          function blitBuffer(src, dst, offset, length) {
            for (var i = 0; i < length; ++i) {
              if (i + offset >= dst.length || i >= src.length) break;
              dst[i + offset] = src[i];
            }

            return i;
          } // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
          // the `instanceof` check but they should be treated as of that type.
          // See: https://github.com/feross/buffer/issues/166


          function isInstance(obj, type) {
            return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
          }

          function numberIsNaN(obj) {
            // For IE11 support
            return obj !== obj; // eslint-disable-line no-self-compare
          }
        }).call(this);
      }).call(this, require("buffer").Buffer);
    }, {
      "base64-js": 5,
      "buffer": 6,
      "ieee754": 583
    }],
    7: [function (require, module, exports) {
      /*!
        Copyright (c) 2018 Jed Watson.
        Licensed under the MIT License (MIT), see
        http://jedwatson.github.io/classnames
      */

      /* global define */
      (function () {
        'use strict';

        var hasOwn = {}.hasOwnProperty;

        function classNames() {
          var classes = [];

          for (var i = 0; i < arguments.length; i++) {
            var arg = arguments[i];
            if (!arg) continue;
            var argType = typeof arg;

            if (argType === 'string' || argType === 'number') {
              classes.push(arg);
            } else if (Array.isArray(arg)) {
              if (arg.length) {
                var inner = classNames.apply(null, arg);

                if (inner) {
                  classes.push(inner);
                }
              }
            } else if (argType === 'object') {
              if (arg.toString === Object.prototype.toString) {
                for (var key in arg) {
                  if (hasOwn.call(arg, key) && arg[key]) {
                    classes.push(key);
                  }
                }
              } else {
                classes.push(arg.toString());
              }
            }
          }

          return classes.join(' ');
        }

        if (typeof module !== 'undefined' && module.exports) {
          classNames.default = classNames;
          module.exports = classNames;
        } else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
          // register as 'classnames', consistent with npm package name
          define('classnames', [], function () {
            return classNames;
          });
        } else {
          window.classNames = classNames;
        }
      })();
    }, {}],
    8: [function (require, module, exports) {
      /**
       * Expose `Emitter`.
       */
      if (typeof module !== 'undefined') {
        module.exports = Emitter;
      }
      /**
       * Initialize a new `Emitter`.
       *
       * @api public
       */


      function Emitter(obj) {
        if (obj) return mixin(obj);
      }

      ;
      /**
       * Mixin the emitter properties.
       *
       * @param {Object} obj
       * @return {Object}
       * @api private
       */

      function mixin(obj) {
        for (var key in Emitter.prototype) {
          obj[key] = Emitter.prototype[key];
        }

        return obj;
      }
      /**
       * Listen on the given `event` with `fn`.
       *
       * @param {String} event
       * @param {Function} fn
       * @return {Emitter}
       * @api public
       */


      Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
        this._callbacks = this._callbacks || {};
        (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
        return this;
      };
      /**
       * Adds an `event` listener that will be invoked a single
       * time then automatically removed.
       *
       * @param {String} event
       * @param {Function} fn
       * @return {Emitter}
       * @api public
       */


      Emitter.prototype.once = function (event, fn) {
        function on() {
          this.off(event, on);
          fn.apply(this, arguments);
        }

        on.fn = fn;
        this.on(event, on);
        return this;
      };
      /**
       * Remove the given callback for `event` or all
       * registered callbacks.
       *
       * @param {String} event
       * @param {Function} fn
       * @return {Emitter}
       * @api public
       */


      Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
        this._callbacks = this._callbacks || {}; // all

        if (0 == arguments.length) {
          this._callbacks = {};
          return this;
        } // specific event


        var callbacks = this._callbacks['$' + event];
        if (!callbacks) return this; // remove all handlers

        if (1 == arguments.length) {
          delete this._callbacks['$' + event];
          return this;
        } // remove specific handler


        var cb;

        for (var i = 0; i < callbacks.length; i++) {
          cb = callbacks[i];

          if (cb === fn || cb.fn === fn) {
            callbacks.splice(i, 1);
            break;
          }
        } // Remove event specific arrays for event types that no
        // one is subscribed for to avoid memory leak.


        if (callbacks.length === 0) {
          delete this._callbacks['$' + event];
        }

        return this;
      };
      /**
       * Emit `event` with the given args.
       *
       * @param {String} event
       * @param {Mixed} ...
       * @return {Emitter}
       */


      Emitter.prototype.emit = function (event) {
        this._callbacks = this._callbacks || {};
        var args = new Array(arguments.length - 1),
            callbacks = this._callbacks['$' + event];

        for (var i = 1; i < arguments.length; i++) {
          args[i - 1] = arguments[i];
        }

        if (callbacks) {
          callbacks = callbacks.slice(0);

          for (var i = 0, len = callbacks.length; i < len; ++i) {
            callbacks[i].apply(this, args);
          }
        }

        return this;
      };
      /**
       * Return array of callbacks for `event`.
       *
       * @param {String} event
       * @return {Array}
       * @api public
       */


      Emitter.prototype.listeners = function (event) {
        this._callbacks = this._callbacks || {};
        return this._callbacks['$' + event] || [];
      };
      /**
       * Check if this emitter has `event` handlers.
       *
       * @param {String} event
       * @return {Boolean}
       * @api public
       */


      Emitter.prototype.hasListeners = function (event) {
        return !!this.listeners(event).length;
      };
    }, {}],
    9: [function (require, module, exports) {
      require('../modules/es.symbol');

      require('../modules/es.symbol.description');

      require('../modules/es.symbol.async-iterator');

      require('../modules/es.symbol.has-instance');

      require('../modules/es.symbol.is-concat-spreadable');

      require('../modules/es.symbol.iterator');

      require('../modules/es.symbol.match');

      require('../modules/es.symbol.match-all');

      require('../modules/es.symbol.replace');

      require('../modules/es.symbol.search');

      require('../modules/es.symbol.species');

      require('../modules/es.symbol.split');

      require('../modules/es.symbol.to-primitive');

      require('../modules/es.symbol.to-string-tag');

      require('../modules/es.symbol.unscopables');

      require('../modules/es.aggregate-error');

      require('../modules/es.array.concat');

      require('../modules/es.array.copy-within');

      require('../modules/es.array.every');

      require('../modules/es.array.fill');

      require('../modules/es.array.filter');

      require('../modules/es.array.find');

      require('../modules/es.array.find-index');

      require('../modules/es.array.flat');

      require('../modules/es.array.flat-map');

      require('../modules/es.array.for-each');

      require('../modules/es.array.from');

      require('../modules/es.array.includes');

      require('../modules/es.array.index-of');

      require('../modules/es.array.is-array');

      require('../modules/es.array.iterator');

      require('../modules/es.array.join');

      require('../modules/es.array.last-index-of');

      require('../modules/es.array.map');

      require('../modules/es.array.of');

      require('../modules/es.array.reduce');

      require('../modules/es.array.reduce-right');

      require('../modules/es.array.reverse');

      require('../modules/es.array.slice');

      require('../modules/es.array.some');

      require('../modules/es.array.sort');

      require('../modules/es.array.species');

      require('../modules/es.array.splice');

      require('../modules/es.array.unscopables.flat');

      require('../modules/es.array.unscopables.flat-map');

      require('../modules/es.array-buffer.constructor');

      require('../modules/es.array-buffer.is-view');

      require('../modules/es.array-buffer.slice');

      require('../modules/es.data-view');

      require('../modules/es.date.get-year');

      require('../modules/es.date.now');

      require('../modules/es.date.set-year');

      require('../modules/es.date.to-gmt-string');

      require('../modules/es.date.to-iso-string');

      require('../modules/es.date.to-json');

      require('../modules/es.date.to-primitive');

      require('../modules/es.date.to-string');

      require('../modules/es.escape');

      require('../modules/es.function.bind');

      require('../modules/es.function.has-instance');

      require('../modules/es.function.name');

      require('../modules/es.global-this');

      require('../modules/es.json.stringify');

      require('../modules/es.json.to-string-tag');

      require('../modules/es.map');

      require('../modules/es.math.acosh');

      require('../modules/es.math.asinh');

      require('../modules/es.math.atanh');

      require('../modules/es.math.cbrt');

      require('../modules/es.math.clz32');

      require('../modules/es.math.cosh');

      require('../modules/es.math.expm1');

      require('../modules/es.math.fround');

      require('../modules/es.math.hypot');

      require('../modules/es.math.imul');

      require('../modules/es.math.log10');

      require('../modules/es.math.log1p');

      require('../modules/es.math.log2');

      require('../modules/es.math.sign');

      require('../modules/es.math.sinh');

      require('../modules/es.math.tanh');

      require('../modules/es.math.to-string-tag');

      require('../modules/es.math.trunc');

      require('../modules/es.number.constructor');

      require('../modules/es.number.epsilon');

      require('../modules/es.number.is-finite');

      require('../modules/es.number.is-integer');

      require('../modules/es.number.is-nan');

      require('../modules/es.number.is-safe-integer');

      require('../modules/es.number.max-safe-integer');

      require('../modules/es.number.min-safe-integer');

      require('../modules/es.number.parse-float');

      require('../modules/es.number.parse-int');

      require('../modules/es.number.to-fixed');

      require('../modules/es.number.to-precision');

      require('../modules/es.object.assign');

      require('../modules/es.object.create');

      require('../modules/es.object.define-getter');

      require('../modules/es.object.define-properties');

      require('../modules/es.object.define-property');

      require('../modules/es.object.define-setter');

      require('../modules/es.object.entries');

      require('../modules/es.object.freeze');

      require('../modules/es.object.from-entries');

      require('../modules/es.object.get-own-property-descriptor');

      require('../modules/es.object.get-own-property-descriptors');

      require('../modules/es.object.get-own-property-names');

      require('../modules/es.object.get-prototype-of');

      require('../modules/es.object.is');

      require('../modules/es.object.is-extensible');

      require('../modules/es.object.is-frozen');

      require('../modules/es.object.is-sealed');

      require('../modules/es.object.keys');

      require('../modules/es.object.lookup-getter');

      require('../modules/es.object.lookup-setter');

      require('../modules/es.object.prevent-extensions');

      require('../modules/es.object.seal');

      require('../modules/es.object.set-prototype-of');

      require('../modules/es.object.to-string');

      require('../modules/es.object.values');

      require('../modules/es.parse-float');

      require('../modules/es.parse-int');

      require('../modules/es.promise');

      require('../modules/es.promise.all-settled');

      require('../modules/es.promise.any');

      require('../modules/es.promise.finally');

      require('../modules/es.reflect.apply');

      require('../modules/es.reflect.construct');

      require('../modules/es.reflect.define-property');

      require('../modules/es.reflect.delete-property');

      require('../modules/es.reflect.get');

      require('../modules/es.reflect.get-own-property-descriptor');

      require('../modules/es.reflect.get-prototype-of');

      require('../modules/es.reflect.has');

      require('../modules/es.reflect.is-extensible');

      require('../modules/es.reflect.own-keys');

      require('../modules/es.reflect.prevent-extensions');

      require('../modules/es.reflect.set');

      require('../modules/es.reflect.set-prototype-of');

      require('../modules/es.reflect.to-string-tag');

      require('../modules/es.regexp.constructor');

      require('../modules/es.regexp.dot-all');

      require('../modules/es.regexp.exec');

      require('../modules/es.regexp.flags');

      require('../modules/es.regexp.sticky');

      require('../modules/es.regexp.test');

      require('../modules/es.regexp.to-string');

      require('../modules/es.set');

      require('../modules/es.string.code-point-at');

      require('../modules/es.string.ends-with');

      require('../modules/es.string.from-code-point');

      require('../modules/es.string.includes');

      require('../modules/es.string.iterator');

      require('../modules/es.string.match');

      require('../modules/es.string.match-all');

      require('../modules/es.string.pad-end');

      require('../modules/es.string.pad-start');

      require('../modules/es.string.raw');

      require('../modules/es.string.repeat');

      require('../modules/es.string.replace');

      require('../modules/es.string.replace-all');

      require('../modules/es.string.search');

      require('../modules/es.string.split');

      require('../modules/es.string.starts-with');

      require('../modules/es.string.substr');

      require('../modules/es.string.trim');

      require('../modules/es.string.trim-end');

      require('../modules/es.string.trim-start');

      require('../modules/es.string.anchor');

      require('../modules/es.string.big');

      require('../modules/es.string.blink');

      require('../modules/es.string.bold');

      require('../modules/es.string.fixed');

      require('../modules/es.string.fontcolor');

      require('../modules/es.string.fontsize');

      require('../modules/es.string.italics');

      require('../modules/es.string.link');

      require('../modules/es.string.small');

      require('../modules/es.string.strike');

      require('../modules/es.string.sub');

      require('../modules/es.string.sup');

      require('../modules/es.typed-array.float32-array');

      require('../modules/es.typed-array.float64-array');

      require('../modules/es.typed-array.int8-array');

      require('../modules/es.typed-array.int16-array');

      require('../modules/es.typed-array.int32-array');

      require('../modules/es.typed-array.uint8-array');

      require('../modules/es.typed-array.uint8-clamped-array');

      require('../modules/es.typed-array.uint16-array');

      require('../modules/es.typed-array.uint32-array');

      require('../modules/es.typed-array.copy-within');

      require('../modules/es.typed-array.every');

      require('../modules/es.typed-array.fill');

      require('../modules/es.typed-array.filter');

      require('../modules/es.typed-array.find');

      require('../modules/es.typed-array.find-index');

      require('../modules/es.typed-array.for-each');

      require('../modules/es.typed-array.from');

      require('../modules/es.typed-array.includes');

      require('../modules/es.typed-array.index-of');

      require('../modules/es.typed-array.iterator');

      require('../modules/es.typed-array.join');

      require('../modules/es.typed-array.last-index-of');

      require('../modules/es.typed-array.map');

      require('../modules/es.typed-array.of');

      require('../modules/es.typed-array.reduce');

      require('../modules/es.typed-array.reduce-right');

      require('../modules/es.typed-array.reverse');

      require('../modules/es.typed-array.set');

      require('../modules/es.typed-array.slice');

      require('../modules/es.typed-array.some');

      require('../modules/es.typed-array.sort');

      require('../modules/es.typed-array.subarray');

      require('../modules/es.typed-array.to-locale-string');

      require('../modules/es.typed-array.to-string');

      require('../modules/es.unescape');

      require('../modules/es.weak-map');

      require('../modules/es.weak-set');

      require('../modules/esnext.aggregate-error');

      require('../modules/esnext.array.at');

      require('../modules/esnext.array.filter-out');

      require('../modules/esnext.array.find-last');

      require('../modules/esnext.array.find-last-index');

      require('../modules/esnext.array.is-template-object');

      require('../modules/esnext.array.last-index');

      require('../modules/esnext.array.last-item');

      require('../modules/esnext.array.unique-by');

      require('../modules/esnext.async-iterator.constructor');

      require('../modules/esnext.async-iterator.as-indexed-pairs');

      require('../modules/esnext.async-iterator.drop');

      require('../modules/esnext.async-iterator.every');

      require('../modules/esnext.async-iterator.filter');

      require('../modules/esnext.async-iterator.find');

      require('../modules/esnext.async-iterator.flat-map');

      require('../modules/esnext.async-iterator.for-each');

      require('../modules/esnext.async-iterator.from');

      require('../modules/esnext.async-iterator.map');

      require('../modules/esnext.async-iterator.reduce');

      require('../modules/esnext.async-iterator.some');

      require('../modules/esnext.async-iterator.take');

      require('../modules/esnext.async-iterator.to-array');

      require('../modules/esnext.bigint.range');

      require('../modules/esnext.composite-key');

      require('../modules/esnext.composite-symbol');

      require('../modules/esnext.global-this');

      require('../modules/esnext.iterator.constructor');

      require('../modules/esnext.iterator.as-indexed-pairs');

      require('../modules/esnext.iterator.drop');

      require('../modules/esnext.iterator.every');

      require('../modules/esnext.iterator.filter');

      require('../modules/esnext.iterator.find');

      require('../modules/esnext.iterator.flat-map');

      require('../modules/esnext.iterator.for-each');

      require('../modules/esnext.iterator.from');

      require('../modules/esnext.iterator.map');

      require('../modules/esnext.iterator.reduce');

      require('../modules/esnext.iterator.some');

      require('../modules/esnext.iterator.take');

      require('../modules/esnext.iterator.to-array');

      require('../modules/esnext.map.delete-all');

      require('../modules/esnext.map.emplace');

      require('../modules/esnext.map.every');

      require('../modules/esnext.map.filter');

      require('../modules/esnext.map.find');

      require('../modules/esnext.map.find-key');

      require('../modules/esnext.map.from');

      require('../modules/esnext.map.group-by');

      require('../modules/esnext.map.includes');

      require('../modules/esnext.map.key-by');

      require('../modules/esnext.map.key-of');

      require('../modules/esnext.map.map-keys');

      require('../modules/esnext.map.map-values');

      require('../modules/esnext.map.merge');

      require('../modules/esnext.map.of');

      require('../modules/esnext.map.reduce');

      require('../modules/esnext.map.some');

      require('../modules/esnext.map.update');

      require('../modules/esnext.map.update-or-insert');

      require('../modules/esnext.map.upsert');

      require('../modules/esnext.math.clamp');

      require('../modules/esnext.math.deg-per-rad');

      require('../modules/esnext.math.degrees');

      require('../modules/esnext.math.fscale');

      require('../modules/esnext.math.iaddh');

      require('../modules/esnext.math.imulh');

      require('../modules/esnext.math.isubh');

      require('../modules/esnext.math.rad-per-deg');

      require('../modules/esnext.math.radians');

      require('../modules/esnext.math.scale');

      require('../modules/esnext.math.seeded-prng');

      require('../modules/esnext.math.signbit');

      require('../modules/esnext.math.umulh');

      require('../modules/esnext.number.from-string');

      require('../modules/esnext.number.range');

      require('../modules/esnext.object.has-own');

      require('../modules/esnext.object.iterate-entries');

      require('../modules/esnext.object.iterate-keys');

      require('../modules/esnext.object.iterate-values');

      require('../modules/esnext.observable');

      require('../modules/esnext.promise.all-settled');

      require('../modules/esnext.promise.any');

      require('../modules/esnext.promise.try');

      require('../modules/esnext.reflect.define-metadata');

      require('../modules/esnext.reflect.delete-metadata');

      require('../modules/esnext.reflect.get-metadata');

      require('../modules/esnext.reflect.get-metadata-keys');

      require('../modules/esnext.reflect.get-own-metadata');

      require('../modules/esnext.reflect.get-own-metadata-keys');

      require('../modules/esnext.reflect.has-metadata');

      require('../modules/esnext.reflect.has-own-metadata');

      require('../modules/esnext.reflect.metadata');

      require('../modules/esnext.set.add-all');

      require('../modules/esnext.set.delete-all');

      require('../modules/esnext.set.difference');

      require('../modules/esnext.set.every');

      require('../modules/esnext.set.filter');

      require('../modules/esnext.set.find');

      require('../modules/esnext.set.from');

      require('../modules/esnext.set.intersection');

      require('../modules/esnext.set.is-disjoint-from');

      require('../modules/esnext.set.is-subset-of');

      require('../modules/esnext.set.is-superset-of');

      require('../modules/esnext.set.join');

      require('../modules/esnext.set.map');

      require('../modules/esnext.set.of');

      require('../modules/esnext.set.reduce');

      require('../modules/esnext.set.some');

      require('../modules/esnext.set.symmetric-difference');

      require('../modules/esnext.set.union');

      require('../modules/esnext.string.at');

      require('../modules/esnext.string.code-points');

      require('../modules/esnext.string.match-all');

      require('../modules/esnext.string.replace-all');

      require('../modules/esnext.symbol.async-dispose');

      require('../modules/esnext.symbol.dispose');

      require('../modules/esnext.symbol.matcher');

      require('../modules/esnext.symbol.metadata');

      require('../modules/esnext.symbol.observable');

      require('../modules/esnext.symbol.pattern-match');

      require('../modules/esnext.symbol.replace-all');

      require('../modules/esnext.typed-array.at');

      require('../modules/esnext.typed-array.filter-out');

      require('../modules/esnext.typed-array.find-last');

      require('../modules/esnext.typed-array.find-last-index');

      require('../modules/esnext.typed-array.unique-by');

      require('../modules/esnext.weak-map.delete-all');

      require('../modules/esnext.weak-map.from');

      require('../modules/esnext.weak-map.of');

      require('../modules/esnext.weak-map.emplace');

      require('../modules/esnext.weak-map.upsert');

      require('../modules/esnext.weak-set.add-all');

      require('../modules/esnext.weak-set.delete-all');

      require('../modules/esnext.weak-set.from');

      require('../modules/esnext.weak-set.of');

      require('../modules/web.dom-collections.for-each');

      require('../modules/web.dom-collections.iterator');

      require('../modules/web.immediate');

      require('../modules/web.queue-microtask');

      require('../modules/web.timers');

      require('../modules/web.url');

      require('../modules/web.url.to-json');

      require('../modules/web.url-search-params');

      module.exports = require('../internals/path');
    }, {
      "../internals/path": 148,
      "../modules/es.aggregate-error": 199,
      "../modules/es.array-buffer.constructor": 200,
      "../modules/es.array-buffer.is-view": 201,
      "../modules/es.array-buffer.slice": 202,
      "../modules/es.array.concat": 203,
      "../modules/es.array.copy-within": 204,
      "../modules/es.array.every": 205,
      "../modules/es.array.fill": 206,
      "../modules/es.array.filter": 207,
      "../modules/es.array.find": 209,
      "../modules/es.array.find-index": 208,
      "../modules/es.array.flat": 211,
      "../modules/es.array.flat-map": 210,
      "../modules/es.array.for-each": 212,
      "../modules/es.array.from": 213,
      "../modules/es.array.includes": 214,
      "../modules/es.array.index-of": 215,
      "../modules/es.array.is-array": 216,
      "../modules/es.array.iterator": 217,
      "../modules/es.array.join": 218,
      "../modules/es.array.last-index-of": 219,
      "../modules/es.array.map": 220,
      "../modules/es.array.of": 221,
      "../modules/es.array.reduce": 223,
      "../modules/es.array.reduce-right": 222,
      "../modules/es.array.reverse": 224,
      "../modules/es.array.slice": 225,
      "../modules/es.array.some": 226,
      "../modules/es.array.sort": 227,
      "../modules/es.array.species": 228,
      "../modules/es.array.splice": 229,
      "../modules/es.array.unscopables.flat": 231,
      "../modules/es.array.unscopables.flat-map": 230,
      "../modules/es.data-view": 232,
      "../modules/es.date.get-year": 233,
      "../modules/es.date.now": 234,
      "../modules/es.date.set-year": 235,
      "../modules/es.date.to-gmt-string": 236,
      "../modules/es.date.to-iso-string": 237,
      "../modules/es.date.to-json": 238,
      "../modules/es.date.to-primitive": 239,
      "../modules/es.date.to-string": 240,
      "../modules/es.escape": 241,
      "../modules/es.function.bind": 242,
      "../modules/es.function.has-instance": 243,
      "../modules/es.function.name": 244,
      "../modules/es.global-this": 245,
      "../modules/es.json.stringify": 246,
      "../modules/es.json.to-string-tag": 247,
      "../modules/es.map": 248,
      "../modules/es.math.acosh": 249,
      "../modules/es.math.asinh": 250,
      "../modules/es.math.atanh": 251,
      "../modules/es.math.cbrt": 252,
      "../modules/es.math.clz32": 253,
      "../modules/es.math.cosh": 254,
      "../modules/es.math.expm1": 255,
      "../modules/es.math.fround": 256,
      "../modules/es.math.hypot": 257,
      "../modules/es.math.imul": 258,
      "../modules/es.math.log10": 259,
      "../modules/es.math.log1p": 260,
      "../modules/es.math.log2": 261,
      "../modules/es.math.sign": 262,
      "../modules/es.math.sinh": 263,
      "../modules/es.math.tanh": 264,
      "../modules/es.math.to-string-tag": 265,
      "../modules/es.math.trunc": 266,
      "../modules/es.number.constructor": 267,
      "../modules/es.number.epsilon": 268,
      "../modules/es.number.is-finite": 269,
      "../modules/es.number.is-integer": 270,
      "../modules/es.number.is-nan": 271,
      "../modules/es.number.is-safe-integer": 272,
      "../modules/es.number.max-safe-integer": 273,
      "../modules/es.number.min-safe-integer": 274,
      "../modules/es.number.parse-float": 275,
      "../modules/es.number.parse-int": 276,
      "../modules/es.number.to-fixed": 277,
      "../modules/es.number.to-precision": 278,
      "../modules/es.object.assign": 279,
      "../modules/es.object.create": 280,
      "../modules/es.object.define-getter": 281,
      "../modules/es.object.define-properties": 282,
      "../modules/es.object.define-property": 283,
      "../modules/es.object.define-setter": 284,
      "../modules/es.object.entries": 285,
      "../modules/es.object.freeze": 286,
      "../modules/es.object.from-entries": 287,
      "../modules/es.object.get-own-property-descriptor": 288,
      "../modules/es.object.get-own-property-descriptors": 289,
      "../modules/es.object.get-own-property-names": 290,
      "../modules/es.object.get-prototype-of": 291,
      "../modules/es.object.is": 295,
      "../modules/es.object.is-extensible": 292,
      "../modules/es.object.is-frozen": 293,
      "../modules/es.object.is-sealed": 294,
      "../modules/es.object.keys": 296,
      "../modules/es.object.lookup-getter": 297,
      "../modules/es.object.lookup-setter": 298,
      "../modules/es.object.prevent-extensions": 299,
      "../modules/es.object.seal": 300,
      "../modules/es.object.set-prototype-of": 301,
      "../modules/es.object.to-string": 302,
      "../modules/es.object.values": 303,
      "../modules/es.parse-float": 304,
      "../modules/es.parse-int": 305,
      "../modules/es.promise": 309,
      "../modules/es.promise.all-settled": 306,
      "../modules/es.promise.any": 307,
      "../modules/es.promise.finally": 308,
      "../modules/es.reflect.apply": 310,
      "../modules/es.reflect.construct": 311,
      "../modules/es.reflect.define-property": 312,
      "../modules/es.reflect.delete-property": 313,
      "../modules/es.reflect.get": 316,
      "../modules/es.reflect.get-own-property-descriptor": 314,
      "../modules/es.reflect.get-prototype-of": 315,
      "../modules/es.reflect.has": 317,
      "../modules/es.reflect.is-extensible": 318,
      "../modules/es.reflect.own-keys": 319,
      "../modules/es.reflect.prevent-extensions": 320,
      "../modules/es.reflect.set": 322,
      "../modules/es.reflect.set-prototype-of": 321,
      "../modules/es.reflect.to-string-tag": 323,
      "../modules/es.regexp.constructor": 324,
      "../modules/es.regexp.dot-all": 325,
      "../modules/es.regexp.exec": 326,
      "../modules/es.regexp.flags": 327,
      "../modules/es.regexp.sticky": 328,
      "../modules/es.regexp.test": 329,
      "../modules/es.regexp.to-string": 330,
      "../modules/es.set": 331,
      "../modules/es.string.anchor": 332,
      "../modules/es.string.big": 333,
      "../modules/es.string.blink": 334,
      "../modules/es.string.bold": 335,
      "../modules/es.string.code-point-at": 336,
      "../modules/es.string.ends-with": 337,
      "../modules/es.string.fixed": 338,
      "../modules/es.string.fontcolor": 339,
      "../modules/es.string.fontsize": 340,
      "../modules/es.string.from-code-point": 341,
      "../modules/es.string.includes": 342,
      "../modules/es.string.italics": 343,
      "../modules/es.string.iterator": 344,
      "../modules/es.string.link": 345,
      "../modules/es.string.match": 347,
      "../modules/es.string.match-all": 346,
      "../modules/es.string.pad-end": 348,
      "../modules/es.string.pad-start": 349,
      "../modules/es.string.raw": 350,
      "../modules/es.string.repeat": 351,
      "../modules/es.string.replace": 353,
      "../modules/es.string.replace-all": 352,
      "../modules/es.string.search": 354,
      "../modules/es.string.small": 355,
      "../modules/es.string.split": 356,
      "../modules/es.string.starts-with": 357,
      "../modules/es.string.strike": 358,
      "../modules/es.string.sub": 359,
      "../modules/es.string.substr": 360,
      "../modules/es.string.sup": 361,
      "../modules/es.string.trim": 364,
      "../modules/es.string.trim-end": 362,
      "../modules/es.string.trim-start": 363,
      "../modules/es.symbol": 370,
      "../modules/es.symbol.async-iterator": 365,
      "../modules/es.symbol.description": 366,
      "../modules/es.symbol.has-instance": 367,
      "../modules/es.symbol.is-concat-spreadable": 368,
      "../modules/es.symbol.iterator": 369,
      "../modules/es.symbol.match": 372,
      "../modules/es.symbol.match-all": 371,
      "../modules/es.symbol.replace": 373,
      "../modules/es.symbol.search": 374,
      "../modules/es.symbol.species": 375,
      "../modules/es.symbol.split": 376,
      "../modules/es.symbol.to-primitive": 377,
      "../modules/es.symbol.to-string-tag": 378,
      "../modules/es.symbol.unscopables": 379,
      "../modules/es.typed-array.copy-within": 380,
      "../modules/es.typed-array.every": 381,
      "../modules/es.typed-array.fill": 382,
      "../modules/es.typed-array.filter": 383,
      "../modules/es.typed-array.find": 385,
      "../modules/es.typed-array.find-index": 384,
      "../modules/es.typed-array.float32-array": 386,
      "../modules/es.typed-array.float64-array": 387,
      "../modules/es.typed-array.for-each": 388,
      "../modules/es.typed-array.from": 389,
      "../modules/es.typed-array.includes": 390,
      "../modules/es.typed-array.index-of": 391,
      "../modules/es.typed-array.int16-array": 392,
      "../modules/es.typed-array.int32-array": 393,
      "../modules/es.typed-array.int8-array": 394,
      "../modules/es.typed-array.iterator": 395,
      "../modules/es.typed-array.join": 396,
      "../modules/es.typed-array.last-index-of": 397,
      "../modules/es.typed-array.map": 398,
      "../modules/es.typed-array.of": 399,
      "../modules/es.typed-array.reduce": 401,
      "../modules/es.typed-array.reduce-right": 400,
      "../modules/es.typed-array.reverse": 402,
      "../modules/es.typed-array.set": 403,
      "../modules/es.typed-array.slice": 404,
      "../modules/es.typed-array.some": 405,
      "../modules/es.typed-array.sort": 406,
      "../modules/es.typed-array.subarray": 407,
      "../modules/es.typed-array.to-locale-string": 408,
      "../modules/es.typed-array.to-string": 409,
      "../modules/es.typed-array.uint16-array": 410,
      "../modules/es.typed-array.uint32-array": 411,
      "../modules/es.typed-array.uint8-array": 412,
      "../modules/es.typed-array.uint8-clamped-array": 413,
      "../modules/es.unescape": 414,
      "../modules/es.weak-map": 415,
      "../modules/es.weak-set": 416,
      "../modules/esnext.aggregate-error": 417,
      "../modules/esnext.array.at": 418,
      "../modules/esnext.array.filter-out": 419,
      "../modules/esnext.array.find-last": 421,
      "../modules/esnext.array.find-last-index": 420,
      "../modules/esnext.array.is-template-object": 422,
      "../modules/esnext.array.last-index": 423,
      "../modules/esnext.array.last-item": 424,
      "../modules/esnext.array.unique-by": 425,
      "../modules/esnext.async-iterator.as-indexed-pairs": 426,
      "../modules/esnext.async-iterator.constructor": 427,
      "../modules/esnext.async-iterator.drop": 428,
      "../modules/esnext.async-iterator.every": 429,
      "../modules/esnext.async-iterator.filter": 430,
      "../modules/esnext.async-iterator.find": 431,
      "../modules/esnext.async-iterator.flat-map": 432,
      "../modules/esnext.async-iterator.for-each": 433,
      "../modules/esnext.async-iterator.from": 434,
      "../modules/esnext.async-iterator.map": 435,
      "../modules/esnext.async-iterator.reduce": 436,
      "../modules/esnext.async-iterator.some": 437,
      "../modules/esnext.async-iterator.take": 438,
      "../modules/esnext.async-iterator.to-array": 439,
      "../modules/esnext.bigint.range": 440,
      "../modules/esnext.composite-key": 441,
      "../modules/esnext.composite-symbol": 442,
      "../modules/esnext.global-this": 443,
      "../modules/esnext.iterator.as-indexed-pairs": 444,
      "../modules/esnext.iterator.constructor": 445,
      "../modules/esnext.iterator.drop": 446,
      "../modules/esnext.iterator.every": 447,
      "../modules/esnext.iterator.filter": 448,
      "../modules/esnext.iterator.find": 449,
      "../modules/esnext.iterator.flat-map": 450,
      "../modules/esnext.iterator.for-each": 451,
      "../modules/esnext.iterator.from": 452,
      "../modules/esnext.iterator.map": 453,
      "../modules/esnext.iterator.reduce": 454,
      "../modules/esnext.iterator.some": 455,
      "../modules/esnext.iterator.take": 456,
      "../modules/esnext.iterator.to-array": 457,
      "../modules/esnext.map.delete-all": 458,
      "../modules/esnext.map.emplace": 459,
      "../modules/esnext.map.every": 460,
      "../modules/esnext.map.filter": 461,
      "../modules/esnext.map.find": 463,
      "../modules/esnext.map.find-key": 462,
      "../modules/esnext.map.from": 464,
      "../modules/esnext.map.group-by": 465,
      "../modules/esnext.map.includes": 466,
      "../modules/esnext.map.key-by": 467,
      "../modules/esnext.map.key-of": 468,
      "../modules/esnext.map.map-keys": 469,
      "../modules/esnext.map.map-values": 470,
      "../modules/esnext.map.merge": 471,
      "../modules/esnext.map.of": 472,
      "../modules/esnext.map.reduce": 473,
      "../modules/esnext.map.some": 474,
      "../modules/esnext.map.update": 476,
      "../modules/esnext.map.update-or-insert": 475,
      "../modules/esnext.map.upsert": 477,
      "../modules/esnext.math.clamp": 478,
      "../modules/esnext.math.deg-per-rad": 479,
      "../modules/esnext.math.degrees": 480,
      "../modules/esnext.math.fscale": 481,
      "../modules/esnext.math.iaddh": 482,
      "../modules/esnext.math.imulh": 483,
      "../modules/esnext.math.isubh": 484,
      "../modules/esnext.math.rad-per-deg": 485,
      "../modules/esnext.math.radians": 486,
      "../modules/esnext.math.scale": 487,
      "../modules/esnext.math.seeded-prng": 488,
      "../modules/esnext.math.signbit": 489,
      "../modules/esnext.math.umulh": 490,
      "../modules/esnext.number.from-string": 491,
      "../modules/esnext.number.range": 492,
      "../modules/esnext.object.has-own": 493,
      "../modules/esnext.object.iterate-entries": 494,
      "../modules/esnext.object.iterate-keys": 495,
      "../modules/esnext.object.iterate-values": 496,
      "../modules/esnext.observable": 497,
      "../modules/esnext.promise.all-settled": 498,
      "../modules/esnext.promise.any": 499,
      "../modules/esnext.promise.try": 500,
      "../modules/esnext.reflect.define-metadata": 501,
      "../modules/esnext.reflect.delete-metadata": 502,
      "../modules/esnext.reflect.get-metadata": 504,
      "../modules/esnext.reflect.get-metadata-keys": 503,
      "../modules/esnext.reflect.get-own-metadata": 506,
      "../modules/esnext.reflect.get-own-metadata-keys": 505,
      "../modules/esnext.reflect.has-metadata": 507,
      "../modules/esnext.reflect.has-own-metadata": 508,
      "../modules/esnext.reflect.metadata": 509,
      "../modules/esnext.set.add-all": 510,
      "../modules/esnext.set.delete-all": 511,
      "../modules/esnext.set.difference": 512,
      "../modules/esnext.set.every": 513,
      "../modules/esnext.set.filter": 514,
      "../modules/esnext.set.find": 515,
      "../modules/esnext.set.from": 516,
      "../modules/esnext.set.intersection": 517,
      "../modules/esnext.set.is-disjoint-from": 518,
      "../modules/esnext.set.is-subset-of": 519,
      "../modules/esnext.set.is-superset-of": 520,
      "../modules/esnext.set.join": 521,
      "../modules/esnext.set.map": 522,
      "../modules/esnext.set.of": 523,
      "../modules/esnext.set.reduce": 524,
      "../modules/esnext.set.some": 525,
      "../modules/esnext.set.symmetric-difference": 526,
      "../modules/esnext.set.union": 527,
      "../modules/esnext.string.at": 528,
      "../modules/esnext.string.code-points": 529,
      "../modules/esnext.string.match-all": 530,
      "../modules/esnext.string.replace-all": 531,
      "../modules/esnext.symbol.async-dispose": 532,
      "../modules/esnext.symbol.dispose": 533,
      "../modules/esnext.symbol.matcher": 534,
      "../modules/esnext.symbol.metadata": 535,
      "../modules/esnext.symbol.observable": 536,
      "../modules/esnext.symbol.pattern-match": 537,
      "../modules/esnext.symbol.replace-all": 538,
      "../modules/esnext.typed-array.at": 539,
      "../modules/esnext.typed-array.filter-out": 540,
      "../modules/esnext.typed-array.find-last": 542,
      "../modules/esnext.typed-array.find-last-index": 541,
      "../modules/esnext.typed-array.unique-by": 543,
      "../modules/esnext.weak-map.delete-all": 544,
      "../modules/esnext.weak-map.emplace": 545,
      "../modules/esnext.weak-map.from": 546,
      "../modules/esnext.weak-map.of": 547,
      "../modules/esnext.weak-map.upsert": 548,
      "../modules/esnext.weak-set.add-all": 549,
      "../modules/esnext.weak-set.delete-all": 550,
      "../modules/esnext.weak-set.from": 551,
      "../modules/esnext.weak-set.of": 552,
      "../modules/web.dom-collections.for-each": 553,
      "../modules/web.dom-collections.iterator": 554,
      "../modules/web.immediate": 555,
      "../modules/web.queue-microtask": 556,
      "../modules/web.timers": 557,
      "../modules/web.url": 559,
      "../modules/web.url-search-params": 558,
      "../modules/web.url.to-json": 560
    }],
    10: [function (require, module, exports) {
      module.exports = require('./features');
    }, {
      "./features": 9
    }],
    11: [function (require, module, exports) {
      module.exports = function (it) {
        if (typeof it != 'function') {
          throw TypeError(String(it) + ' is not a function');
        }

        return it;
      };
    }, {}],
    12: [function (require, module, exports) {
      var isObject = require('../internals/is-object');

      module.exports = function (it) {
        if (!isObject(it) && it !== null) {
          throw TypeError("Can't set " + String(it) + ' as a prototype');
        }

        return it;
      };
    }, {
      "../internals/is-object": 104
    }],
    13: [function (require, module, exports) {
      var wellKnownSymbol = require('../internals/well-known-symbol');

      var create = require('../internals/object-create');

      var definePropertyModule = require('../internals/object-define-property');

      var UNSCOPABLES = wellKnownSymbol('unscopables');
      var ArrayPrototype = Array.prototype; // Array.prototype[@@unscopables]
      // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

      if (ArrayPrototype[UNSCOPABLES] == undefined) {
        definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
          configurable: true,
          value: create(null)
        });
      } // add a key to Array.prototype[@@unscopables]


      module.exports = function (key) {
        ArrayPrototype[UNSCOPABLES][key] = true;
      };
    }, {
      "../internals/object-create": 131,
      "../internals/object-define-property": 133,
      "../internals/well-known-symbol": 197
    }],
    14: [function (require, module, exports) {
      'use strict';

      var charAt = require('../internals/string-multibyte').charAt; // `AdvanceStringIndex` abstract operation
      // https://tc39.es/ecma262/#sec-advancestringindex


      module.exports = function (S, index, unicode) {
        return index + (unicode ? charAt(S, index).length : 1);
      };
    }, {
      "../internals/string-multibyte": 171
    }],
    15: [function (require, module, exports) {
      module.exports = function (it, Constructor, name) {
        if (!(it instanceof Constructor)) {
          throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
        }

        return it;
      };
    }, {}],
    16: [function (require, module, exports) {
      var isObject = require('../internals/is-object');

      module.exports = function (it) {
        if (!isObject(it)) {
          throw TypeError(String(it) + ' is not an object');
        }

        return it;
      };
    }, {
      "../internals/is-object": 104
    }],
    17: [function (require, module, exports) {
      // eslint-disable-next-line es/no-typed-arrays -- safe
      module.exports = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined';
    }, {}],
    18: [function (require, module, exports) {
      'use strict';

      var NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-native');

      var DESCRIPTORS = require('../internals/descriptors');

      var global = require('../internals/global');

      var isObject = require('../internals/is-object');

      var has = require('../internals/has');

      var classof = require('../internals/classof');

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var redefine = require('../internals/redefine');

      var defineProperty = require('../internals/object-define-property').f;

      var getPrototypeOf = require('../internals/object-get-prototype-of');

      var setPrototypeOf = require('../internals/object-set-prototype-of');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var uid = require('../internals/uid');

      var Int8Array = global.Int8Array;
      var Int8ArrayPrototype = Int8Array && Int8Array.prototype;
      var Uint8ClampedArray = global.Uint8ClampedArray;
      var Uint8ClampedArrayPrototype = Uint8ClampedArray && Uint8ClampedArray.prototype;
      var TypedArray = Int8Array && getPrototypeOf(Int8Array);
      var TypedArrayPrototype = Int8ArrayPrototype && getPrototypeOf(Int8ArrayPrototype);
      var ObjectPrototype = Object.prototype;
      var isPrototypeOf = ObjectPrototype.isPrototypeOf;
      var TO_STRING_TAG = wellKnownSymbol('toStringTag');
      var TYPED_ARRAY_TAG = uid('TYPED_ARRAY_TAG'); // Fixing native typed arrays in Opera Presto crashes the browser, see #595

      var NATIVE_ARRAY_BUFFER_VIEWS = NATIVE_ARRAY_BUFFER && !!setPrototypeOf && classof(global.opera) !== 'Opera';
      var TYPED_ARRAY_TAG_REQIRED = false;
      var NAME;
      var TypedArrayConstructorsList = {
        Int8Array: 1,
        Uint8Array: 1,
        Uint8ClampedArray: 1,
        Int16Array: 2,
        Uint16Array: 2,
        Int32Array: 4,
        Uint32Array: 4,
        Float32Array: 4,
        Float64Array: 8
      };
      var BigIntArrayConstructorsList = {
        BigInt64Array: 8,
        BigUint64Array: 8
      };

      var isView = function isView(it) {
        if (!isObject(it)) return false;
        var klass = classof(it);
        return klass === 'DataView' || has(TypedArrayConstructorsList, klass) || has(BigIntArrayConstructorsList, klass);
      };

      var isTypedArray = function isTypedArray(it) {
        if (!isObject(it)) return false;
        var klass = classof(it);
        return has(TypedArrayConstructorsList, klass) || has(BigIntArrayConstructorsList, klass);
      };

      var aTypedArray = function aTypedArray(it) {
        if (isTypedArray(it)) return it;
        throw TypeError('Target is not a typed array');
      };

      var aTypedArrayConstructor = function aTypedArrayConstructor(C) {
        if (setPrototypeOf) {
          if (isPrototypeOf.call(TypedArray, C)) return C;
        } else for (var ARRAY in TypedArrayConstructorsList) {
          if (has(TypedArrayConstructorsList, NAME)) {
            var TypedArrayConstructor = global[ARRAY];

            if (TypedArrayConstructor && (C === TypedArrayConstructor || isPrototypeOf.call(TypedArrayConstructor, C))) {
              return C;
            }
          }
        }

        throw TypeError('Target is not a typed array constructor');
      };

      var exportTypedArrayMethod = function exportTypedArrayMethod(KEY, property, forced) {
        if (!DESCRIPTORS) return;
        if (forced) for (var ARRAY in TypedArrayConstructorsList) {
          var TypedArrayConstructor = global[ARRAY];
          if (TypedArrayConstructor && has(TypedArrayConstructor.prototype, KEY)) try {
            delete TypedArrayConstructor.prototype[KEY];
          } catch (error) {
            /* empty */
          }
        }

        if (!TypedArrayPrototype[KEY] || forced) {
          redefine(TypedArrayPrototype, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && Int8ArrayPrototype[KEY] || property);
        }
      };

      var exportTypedArrayStaticMethod = function exportTypedArrayStaticMethod(KEY, property, forced) {
        var ARRAY, TypedArrayConstructor;
        if (!DESCRIPTORS) return;

        if (setPrototypeOf) {
          if (forced) for (ARRAY in TypedArrayConstructorsList) {
            TypedArrayConstructor = global[ARRAY];
            if (TypedArrayConstructor && has(TypedArrayConstructor, KEY)) try {
              delete TypedArrayConstructor[KEY];
            } catch (error) {
              /* empty */
            }
          }

          if (!TypedArray[KEY] || forced) {
            // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
            try {
              return redefine(TypedArray, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS && TypedArray[KEY] || property);
            } catch (error) {
              /* empty */
            }
          } else return;
        }

        for (ARRAY in TypedArrayConstructorsList) {
          TypedArrayConstructor = global[ARRAY];

          if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
            redefine(TypedArrayConstructor, KEY, property);
          }
        }
      };

      for (NAME in TypedArrayConstructorsList) {
        if (!global[NAME]) NATIVE_ARRAY_BUFFER_VIEWS = false;
      } // WebKit bug - typed arrays constructors prototype is Object.prototype


      if (!NATIVE_ARRAY_BUFFER_VIEWS || typeof TypedArray != 'function' || TypedArray === Function.prototype) {
        // eslint-disable-next-line no-shadow -- safe
        TypedArray = function TypedArray() {
          throw TypeError('Incorrect invocation');
        };

        if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
          if (global[NAME]) setPrototypeOf(global[NAME], TypedArray);
        }
      }

      if (!NATIVE_ARRAY_BUFFER_VIEWS || !TypedArrayPrototype || TypedArrayPrototype === ObjectPrototype) {
        TypedArrayPrototype = TypedArray.prototype;
        if (NATIVE_ARRAY_BUFFER_VIEWS) for (NAME in TypedArrayConstructorsList) {
          if (global[NAME]) setPrototypeOf(global[NAME].prototype, TypedArrayPrototype);
        }
      } // WebKit bug - one more object in Uint8ClampedArray prototype chain


      if (NATIVE_ARRAY_BUFFER_VIEWS && getPrototypeOf(Uint8ClampedArrayPrototype) !== TypedArrayPrototype) {
        setPrototypeOf(Uint8ClampedArrayPrototype, TypedArrayPrototype);
      }

      if (DESCRIPTORS && !has(TypedArrayPrototype, TO_STRING_TAG)) {
        TYPED_ARRAY_TAG_REQIRED = true;
        defineProperty(TypedArrayPrototype, TO_STRING_TAG, {
          get: function get() {
            return isObject(this) ? this[TYPED_ARRAY_TAG] : undefined;
          }
        });

        for (NAME in TypedArrayConstructorsList) {
          if (global[NAME]) {
            createNonEnumerableProperty(global[NAME], TYPED_ARRAY_TAG, NAME);
          }
        }
      }

      module.exports = {
        NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS,
        TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQIRED && TYPED_ARRAY_TAG,
        aTypedArray: aTypedArray,
        aTypedArrayConstructor: aTypedArrayConstructor,
        exportTypedArrayMethod: exportTypedArrayMethod,
        exportTypedArrayStaticMethod: exportTypedArrayStaticMethod,
        isView: isView,
        isTypedArray: isTypedArray,
        TypedArray: TypedArray,
        TypedArrayPrototype: TypedArrayPrototype
      };
    }, {
      "../internals/array-buffer-native": 17,
      "../internals/classof": 40,
      "../internals/create-non-enumerable-property": 54,
      "../internals/descriptors": 61,
      "../internals/global": 88,
      "../internals/has": 89,
      "../internals/is-object": 104,
      "../internals/object-define-property": 133,
      "../internals/object-get-prototype-of": 138,
      "../internals/object-set-prototype-of": 144,
      "../internals/redefine": 152,
      "../internals/uid": 194,
      "../internals/well-known-symbol": 197
    }],
    19: [function (require, module, exports) {
      'use strict';

      var global = require('../internals/global');

      var DESCRIPTORS = require('../internals/descriptors');

      var NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-native');

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var redefineAll = require('../internals/redefine-all');

      var fails = require('../internals/fails');

      var anInstance = require('../internals/an-instance');

      var toInteger = require('../internals/to-integer');

      var toLength = require('../internals/to-length');

      var toIndex = require('../internals/to-index');

      var IEEE754 = require('../internals/ieee754');

      var getPrototypeOf = require('../internals/object-get-prototype-of');

      var setPrototypeOf = require('../internals/object-set-prototype-of');

      var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;

      var defineProperty = require('../internals/object-define-property').f;

      var arrayFill = require('../internals/array-fill');

      var setToStringTag = require('../internals/set-to-string-tag');

      var InternalStateModule = require('../internals/internal-state');

      var getInternalState = InternalStateModule.get;
      var setInternalState = InternalStateModule.set;
      var ARRAY_BUFFER = 'ArrayBuffer';
      var DATA_VIEW = 'DataView';
      var PROTOTYPE = 'prototype';
      var WRONG_LENGTH = 'Wrong length';
      var WRONG_INDEX = 'Wrong index';
      var NativeArrayBuffer = global[ARRAY_BUFFER];
      var $ArrayBuffer = NativeArrayBuffer;
      var $DataView = global[DATA_VIEW];
      var $DataViewPrototype = $DataView && $DataView[PROTOTYPE];
      var ObjectPrototype = Object.prototype;
      var RangeError = global.RangeError;
      var packIEEE754 = IEEE754.pack;
      var unpackIEEE754 = IEEE754.unpack;

      var packInt8 = function packInt8(number) {
        return [number & 0xFF];
      };

      var packInt16 = function packInt16(number) {
        return [number & 0xFF, number >> 8 & 0xFF];
      };

      var packInt32 = function packInt32(number) {
        return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
      };

      var unpackInt32 = function unpackInt32(buffer) {
        return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
      };

      var packFloat32 = function packFloat32(number) {
        return packIEEE754(number, 23, 4);
      };

      var packFloat64 = function packFloat64(number) {
        return packIEEE754(number, 52, 8);
      };

      var addGetter = function addGetter(Constructor, key) {
        defineProperty(Constructor[PROTOTYPE], key, {
          get: function get() {
            return getInternalState(this)[key];
          }
        });
      };

      var get = function get(view, count, index, isLittleEndian) {
        var intIndex = toIndex(index);
        var store = getInternalState(view);
        if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
        var bytes = getInternalState(store.buffer).bytes;
        var start = intIndex + store.byteOffset;
        var pack = bytes.slice(start, start + count);
        return isLittleEndian ? pack : pack.reverse();
      };

      var set = function set(view, count, index, conversion, value, isLittleEndian) {
        var intIndex = toIndex(index);
        var store = getInternalState(view);
        if (intIndex + count > store.byteLength) throw RangeError(WRONG_INDEX);
        var bytes = getInternalState(store.buffer).bytes;
        var start = intIndex + store.byteOffset;
        var pack = conversion(+value);

        for (var i = 0; i < count; i++) {
          bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
        }
      };

      if (!NATIVE_ARRAY_BUFFER) {
        $ArrayBuffer = function ArrayBuffer(length) {
          anInstance(this, $ArrayBuffer, ARRAY_BUFFER);
          var byteLength = toIndex(length);
          setInternalState(this, {
            bytes: arrayFill.call(new Array(byteLength), 0),
            byteLength: byteLength
          });
          if (!DESCRIPTORS) this.byteLength = byteLength;
        };

        $DataView = function DataView(buffer, byteOffset, byteLength) {
          anInstance(this, $DataView, DATA_VIEW);
          anInstance(buffer, $ArrayBuffer, DATA_VIEW);
          var bufferLength = getInternalState(buffer).byteLength;
          var offset = toInteger(byteOffset);
          if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset');
          byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
          if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
          setInternalState(this, {
            buffer: buffer,
            byteLength: byteLength,
            byteOffset: offset
          });

          if (!DESCRIPTORS) {
            this.buffer = buffer;
            this.byteLength = byteLength;
            this.byteOffset = offset;
          }
        };

        if (DESCRIPTORS) {
          addGetter($ArrayBuffer, 'byteLength');
          addGetter($DataView, 'buffer');
          addGetter($DataView, 'byteLength');
          addGetter($DataView, 'byteOffset');
        }

        redefineAll($DataView[PROTOTYPE], {
          getInt8: function getInt8(byteOffset) {
            return get(this, 1, byteOffset)[0] << 24 >> 24;
          },
          getUint8: function getUint8(byteOffset) {
            return get(this, 1, byteOffset)[0];
          },
          getInt16: function getInt16(byteOffset
          /* , littleEndian */
          ) {
            var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
            return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
          },
          getUint16: function getUint16(byteOffset
          /* , littleEndian */
          ) {
            var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
            return bytes[1] << 8 | bytes[0];
          },
          getInt32: function getInt32(byteOffset
          /* , littleEndian */
          ) {
            return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
          },
          getUint32: function getUint32(byteOffset
          /* , littleEndian */
          ) {
            return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
          },
          getFloat32: function getFloat32(byteOffset
          /* , littleEndian */
          ) {
            return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
          },
          getFloat64: function getFloat64(byteOffset
          /* , littleEndian */
          ) {
            return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
          },
          setInt8: function setInt8(byteOffset, value) {
            set(this, 1, byteOffset, packInt8, value);
          },
          setUint8: function setUint8(byteOffset, value) {
            set(this, 1, byteOffset, packInt8, value);
          },
          setInt16: function setInt16(byteOffset, value
          /* , littleEndian */
          ) {
            set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
          },
          setUint16: function setUint16(byteOffset, value
          /* , littleEndian */
          ) {
            set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
          },
          setInt32: function setInt32(byteOffset, value
          /* , littleEndian */
          ) {
            set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
          },
          setUint32: function setUint32(byteOffset, value
          /* , littleEndian */
          ) {
            set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
          },
          setFloat32: function setFloat32(byteOffset, value
          /* , littleEndian */
          ) {
            set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
          },
          setFloat64: function setFloat64(byteOffset, value
          /* , littleEndian */
          ) {
            set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
          }
        });
      } else {
        /* eslint-disable no-new -- required for testing */
        if (!fails(function () {
          NativeArrayBuffer(1);
        }) || !fails(function () {
          new NativeArrayBuffer(-1);
        }) || fails(function () {
          new NativeArrayBuffer();
          new NativeArrayBuffer(1.5);
          new NativeArrayBuffer(NaN);
          return NativeArrayBuffer.name != ARRAY_BUFFER;
        })) {
          /* eslint-enable no-new -- required for testing */
          $ArrayBuffer = function ArrayBuffer(length) {
            anInstance(this, $ArrayBuffer);
            return new NativeArrayBuffer(toIndex(length));
          };

          var ArrayBufferPrototype = $ArrayBuffer[PROTOTYPE] = NativeArrayBuffer[PROTOTYPE];

          for (var keys = getOwnPropertyNames(NativeArrayBuffer), j = 0, key; keys.length > j;) {
            if (!((key = keys[j++]) in $ArrayBuffer)) {
              createNonEnumerableProperty($ArrayBuffer, key, NativeArrayBuffer[key]);
            }
          }

          ArrayBufferPrototype.constructor = $ArrayBuffer;
        } // WebKit bug - the same parent prototype for typed arrays and data view


        if (setPrototypeOf && getPrototypeOf($DataViewPrototype) !== ObjectPrototype) {
          setPrototypeOf($DataViewPrototype, ObjectPrototype);
        } // iOS Safari 7.x bug


        var testView = new $DataView(new $ArrayBuffer(2));
        var $setInt8 = $DataViewPrototype.setInt8;
        testView.setInt8(0, 2147483648);
        testView.setInt8(1, 2147483649);
        if (testView.getInt8(0) || !testView.getInt8(1)) redefineAll($DataViewPrototype, {
          setInt8: function setInt8(byteOffset, value) {
            $setInt8.call(this, byteOffset, value << 24 >> 24);
          },
          setUint8: function setUint8(byteOffset, value) {
            $setInt8.call(this, byteOffset, value << 24 >> 24);
          }
        }, {
          unsafe: true
        });
      }

      setToStringTag($ArrayBuffer, ARRAY_BUFFER);
      setToStringTag($DataView, DATA_VIEW);
      module.exports = {
        ArrayBuffer: $ArrayBuffer,
        DataView: $DataView
      };
    }, {
      "../internals/an-instance": 15,
      "../internals/array-buffer-native": 17,
      "../internals/array-fill": 21,
      "../internals/create-non-enumerable-property": 54,
      "../internals/descriptors": 61,
      "../internals/fails": 75,
      "../internals/global": 88,
      "../internals/ieee754": 94,
      "../internals/internal-state": 99,
      "../internals/object-define-property": 133,
      "../internals/object-get-own-property-names": 136,
      "../internals/object-get-prototype-of": 138,
      "../internals/object-set-prototype-of": 144,
      "../internals/redefine-all": 151,
      "../internals/set-to-string-tag": 165,
      "../internals/to-index": 181,
      "../internals/to-integer": 183,
      "../internals/to-length": 184
    }],
    20: [function (require, module, exports) {
      'use strict';

      var toObject = require('../internals/to-object');

      var toAbsoluteIndex = require('../internals/to-absolute-index');

      var toLength = require('../internals/to-length');

      var min = Math.min; // `Array.prototype.copyWithin` method implementation
      // https://tc39.es/ecma262/#sec-array.prototype.copywithin
      // eslint-disable-next-line es/no-array-prototype-copywithin -- safe

      module.exports = [].copyWithin || function copyWithin(target
      /* = 0 */
      , start
      /* = 0, end = @length */
      ) {
        var O = toObject(this);
        var len = toLength(O.length);
        var to = toAbsoluteIndex(target, len);
        var from = toAbsoluteIndex(start, len);
        var end = arguments.length > 2 ? arguments[2] : undefined;
        var count = min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);
        var inc = 1;

        if (from < to && to < from + count) {
          inc = -1;
          from += count - 1;
          to += count - 1;
        }

        while (count-- > 0) {
          if (from in O) O[to] = O[from];else delete O[to];
          to += inc;
          from += inc;
        }

        return O;
      };
    }, {
      "../internals/to-absolute-index": 180,
      "../internals/to-length": 184,
      "../internals/to-object": 185
    }],
    21: [function (require, module, exports) {
      'use strict';

      var toObject = require('../internals/to-object');

      var toAbsoluteIndex = require('../internals/to-absolute-index');

      var toLength = require('../internals/to-length'); // `Array.prototype.fill` method implementation
      // https://tc39.es/ecma262/#sec-array.prototype.fill


      module.exports = function fill(value
      /* , start = 0, end = @length */
      ) {
        var O = toObject(this);
        var length = toLength(O.length);
        var argumentsLength = arguments.length;
        var index = toAbsoluteIndex(argumentsLength > 1 ? arguments[1] : undefined, length);
        var end = argumentsLength > 2 ? arguments[2] : undefined;
        var endPos = end === undefined ? length : toAbsoluteIndex(end, length);

        while (endPos > index) {
          O[index++] = value;
        }

        return O;
      };
    }, {
      "../internals/to-absolute-index": 180,
      "../internals/to-length": 184,
      "../internals/to-object": 185
    }],
    22: [function (require, module, exports) {
      'use strict';

      var $forEach = require('../internals/array-iteration').forEach;

      var arrayMethodIsStrict = require('../internals/array-method-is-strict');

      var STRICT_METHOD = arrayMethodIsStrict('forEach'); // `Array.prototype.forEach` method implementation
      // https://tc39.es/ecma262/#sec-array.prototype.foreach

      module.exports = !STRICT_METHOD ? function forEach(callbackfn
      /* , thisArg */
      ) {
        return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined); // eslint-disable-next-line es/no-array-prototype-foreach -- safe
      } : [].forEach;
    }, {
      "../internals/array-iteration": 26,
      "../internals/array-method-is-strict": 29
    }],
    23: [function (require, module, exports) {
      'use strict';

      var bind = require('../internals/function-bind-context');

      var toObject = require('../internals/to-object');

      var callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');

      var isArrayIteratorMethod = require('../internals/is-array-iterator-method');

      var toLength = require('../internals/to-length');

      var createProperty = require('../internals/create-property');

      var getIteratorMethod = require('../internals/get-iterator-method'); // `Array.from` method implementation
      // https://tc39.es/ecma262/#sec-array.from


      module.exports = function from(arrayLike
      /* , mapfn = undefined, thisArg = undefined */
      ) {
        var O = toObject(arrayLike);
        var C = typeof this == 'function' ? this : Array;
        var argumentsLength = arguments.length;
        var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        var iteratorMethod = getIteratorMethod(O);
        var index = 0;
        var length, result, step, iterator, next, value;
        if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2); // if the target is not iterable or it's an array with the default iterator - use a simple case

        if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
          iterator = iteratorMethod.call(O);
          next = iterator.next;
          result = new C();

          for (; !(step = next.call(iterator)).done; index++) {
            value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
            createProperty(result, index, value);
          }
        } else {
          length = toLength(O.length);
          result = new C(length);

          for (; length > index; index++) {
            value = mapping ? mapfn(O[index], index) : O[index];
            createProperty(result, index, value);
          }
        }

        result.length = index;
        return result;
      };
    }, {
      "../internals/call-with-safe-iteration-closing": 37,
      "../internals/create-property": 56,
      "../internals/function-bind-context": 79,
      "../internals/get-iterator-method": 83,
      "../internals/is-array-iterator-method": 100,
      "../internals/to-length": 184,
      "../internals/to-object": 185
    }],
    24: [function (require, module, exports) {
      var toIndexedObject = require('../internals/to-indexed-object');

      var toLength = require('../internals/to-length');

      var toAbsoluteIndex = require('../internals/to-absolute-index'); // `Array.prototype.{ indexOf, includes }` methods implementation


      var createMethod = function createMethod(IS_INCLUDES) {
        return function ($this, el, fromIndex) {
          var O = toIndexedObject($this);
          var length = toLength(O.length);
          var index = toAbsoluteIndex(fromIndex, length);
          var value; // Array#includes uses SameValueZero equality algorithm
          // eslint-disable-next-line no-self-compare -- NaN check

          if (IS_INCLUDES && el != el) while (length > index) {
            value = O[index++]; // eslint-disable-next-line no-self-compare -- NaN check

            if (value != value) return true; // Array#indexOf ignores holes, Array#includes - not
          } else for (; length > index; index++) {
            if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
          }
          return !IS_INCLUDES && -1;
        };
      };

      module.exports = {
        // `Array.prototype.includes` method
        // https://tc39.es/ecma262/#sec-array.prototype.includes
        includes: createMethod(true),
        // `Array.prototype.indexOf` method
        // https://tc39.es/ecma262/#sec-array.prototype.indexof
        indexOf: createMethod(false)
      };
    }, {
      "../internals/to-absolute-index": 180,
      "../internals/to-indexed-object": 182,
      "../internals/to-length": 184
    }],
    25: [function (require, module, exports) {
      var bind = require('../internals/function-bind-context');

      var IndexedObject = require('../internals/indexed-object');

      var toObject = require('../internals/to-object');

      var toLength = require('../internals/to-length'); // `Array.prototype.{ findLast, findLastIndex }` methods implementation


      var createMethod = function createMethod(TYPE) {
        var IS_FIND_INDEX = TYPE == 6;
        return function ($this, callbackfn, that) {
          var O = toObject($this);
          var self = IndexedObject(O);
          var boundFunction = bind(callbackfn, that, 3);
          var index = toLength(self.length);
          var value, result;

          while (index-- > 0) {
            value = self[index];
            result = boundFunction(value, index, O);
            if (result) switch (TYPE) {
              case 5:
                return value;
              // find

              case 6:
                return index;
              // findIndex
            }
          }

          return IS_FIND_INDEX ? -1 : undefined;
        };
      };

      module.exports = {
        // `Array.prototype.findLast` method
        // https://github.com/tc39/proposal-array-find-from-last
        findLast: createMethod(5),
        // `Array.prototype.findLastIndex` method
        // https://github.com/tc39/proposal-array-find-from-last
        findLastIndex: createMethod(6)
      };
    }, {
      "../internals/function-bind-context": 79,
      "../internals/indexed-object": 95,
      "../internals/to-length": 184,
      "../internals/to-object": 185
    }],
    26: [function (require, module, exports) {
      var bind = require('../internals/function-bind-context');

      var IndexedObject = require('../internals/indexed-object');

      var toObject = require('../internals/to-object');

      var toLength = require('../internals/to-length');

      var arraySpeciesCreate = require('../internals/array-species-create');

      var push = [].push; // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterOut }` methods implementation

      var createMethod = function createMethod(TYPE) {
        var IS_MAP = TYPE == 1;
        var IS_FILTER = TYPE == 2;
        var IS_SOME = TYPE == 3;
        var IS_EVERY = TYPE == 4;
        var IS_FIND_INDEX = TYPE == 6;
        var IS_FILTER_OUT = TYPE == 7;
        var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
        return function ($this, callbackfn, that, specificCreate) {
          var O = toObject($this);
          var self = IndexedObject(O);
          var boundFunction = bind(callbackfn, that, 3);
          var length = toLength(self.length);
          var index = 0;
          var create = specificCreate || arraySpeciesCreate;
          var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_OUT ? create($this, 0) : undefined;
          var value, result;

          for (; length > index; index++) {
            if (NO_HOLES || index in self) {
              value = self[index];
              result = boundFunction(value, index, O);

              if (TYPE) {
                if (IS_MAP) target[index] = result; // map
                else if (result) switch (TYPE) {
                    case 3:
                      return true;
                    // some

                    case 5:
                      return value;
                    // find

                    case 6:
                      return index;
                    // findIndex

                    case 2:
                      push.call(target, value);
                    // filter
                  } else switch (TYPE) {
                    case 4:
                      return false;
                    // every

                    case 7:
                      push.call(target, value);
                    // filterOut
                  }
              }
            }
          }

          return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
        };
      };

      module.exports = {
        // `Array.prototype.forEach` method
        // https://tc39.es/ecma262/#sec-array.prototype.foreach
        forEach: createMethod(0),
        // `Array.prototype.map` method
        // https://tc39.es/ecma262/#sec-array.prototype.map
        map: createMethod(1),
        // `Array.prototype.filter` method
        // https://tc39.es/ecma262/#sec-array.prototype.filter
        filter: createMethod(2),
        // `Array.prototype.some` method
        // https://tc39.es/ecma262/#sec-array.prototype.some
        some: createMethod(3),
        // `Array.prototype.every` method
        // https://tc39.es/ecma262/#sec-array.prototype.every
        every: createMethod(4),
        // `Array.prototype.find` method
        // https://tc39.es/ecma262/#sec-array.prototype.find
        find: createMethod(5),
        // `Array.prototype.findIndex` method
        // https://tc39.es/ecma262/#sec-array.prototype.findIndex
        findIndex: createMethod(6),
        // `Array.prototype.filterOut` method
        // https://github.com/tc39/proposal-array-filtering
        filterOut: createMethod(7)
      };
    }, {
      "../internals/array-species-create": 32,
      "../internals/function-bind-context": 79,
      "../internals/indexed-object": 95,
      "../internals/to-length": 184,
      "../internals/to-object": 185
    }],
    27: [function (require, module, exports) {
      'use strict';
      /* eslint-disable es/no-array-prototype-lastindexof -- safe */

      var toIndexedObject = require('../internals/to-indexed-object');

      var toInteger = require('../internals/to-integer');

      var toLength = require('../internals/to-length');

      var arrayMethodIsStrict = require('../internals/array-method-is-strict');

      var min = Math.min;
      var $lastIndexOf = [].lastIndexOf;
      var NEGATIVE_ZERO = !!$lastIndexOf && 1 / [1].lastIndexOf(1, -0) < 0;
      var STRICT_METHOD = arrayMethodIsStrict('lastIndexOf');
      var FORCED = NEGATIVE_ZERO || !STRICT_METHOD; // `Array.prototype.lastIndexOf` method implementation
      // https://tc39.es/ecma262/#sec-array.prototype.lastindexof

      module.exports = FORCED ? function lastIndexOf(searchElement
      /* , fromIndex = @[*-1] */
      ) {
        // convert -0 to +0
        if (NEGATIVE_ZERO) return $lastIndexOf.apply(this, arguments) || 0;
        var O = toIndexedObject(this);
        var length = toLength(O.length);
        var index = length - 1;
        if (arguments.length > 1) index = min(index, toInteger(arguments[1]));
        if (index < 0) index = length + index;

        for (; index >= 0; index--) {
          if (index in O && O[index] === searchElement) return index || 0;
        }

        return -1;
      } : $lastIndexOf;
    }, {
      "../internals/array-method-is-strict": 29,
      "../internals/to-indexed-object": 182,
      "../internals/to-integer": 183,
      "../internals/to-length": 184
    }],
    28: [function (require, module, exports) {
      var fails = require('../internals/fails');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var V8_VERSION = require('../internals/engine-v8-version');

      var SPECIES = wellKnownSymbol('species');

      module.exports = function (METHOD_NAME) {
        // We can't use this feature detection in V8 since it causes
        // deoptimization and serious performance degradation
        // https://github.com/zloirock/core-js/issues/677
        return V8_VERSION >= 51 || !fails(function () {
          var array = [];
          var constructor = array.constructor = {};

          constructor[SPECIES] = function () {
            return {
              foo: 1
            };
          };

          return array[METHOD_NAME](Boolean).foo !== 1;
        });
      };
    }, {
      "../internals/engine-v8-version": 71,
      "../internals/fails": 75,
      "../internals/well-known-symbol": 197
    }],
    29: [function (require, module, exports) {
      'use strict';

      var fails = require('../internals/fails');

      module.exports = function (METHOD_NAME, argument) {
        var method = [][METHOD_NAME];
        return !!method && fails(function () {
          // eslint-disable-next-line no-useless-call,no-throw-literal -- required for testing
          method.call(null, argument || function () {
            throw 1;
          }, 1);
        });
      };
    }, {
      "../internals/fails": 75
    }],
    30: [function (require, module, exports) {
      var aFunction = require('../internals/a-function');

      var toObject = require('../internals/to-object');

      var IndexedObject = require('../internals/indexed-object');

      var toLength = require('../internals/to-length'); // `Array.prototype.{ reduce, reduceRight }` methods implementation


      var createMethod = function createMethod(IS_RIGHT) {
        return function (that, callbackfn, argumentsLength, memo) {
          aFunction(callbackfn);
          var O = toObject(that);
          var self = IndexedObject(O);
          var length = toLength(O.length);
          var index = IS_RIGHT ? length - 1 : 0;
          var i = IS_RIGHT ? -1 : 1;
          if (argumentsLength < 2) while (true) {
            if (index in self) {
              memo = self[index];
              index += i;
              break;
            }

            index += i;

            if (IS_RIGHT ? index < 0 : length <= index) {
              throw TypeError('Reduce of empty array with no initial value');
            }
          }

          for (; IS_RIGHT ? index >= 0 : length > index; index += i) {
            if (index in self) {
              memo = callbackfn(memo, self[index], index, O);
            }
          }

          return memo;
        };
      };

      module.exports = {
        // `Array.prototype.reduce` method
        // https://tc39.es/ecma262/#sec-array.prototype.reduce
        left: createMethod(false),
        // `Array.prototype.reduceRight` method
        // https://tc39.es/ecma262/#sec-array.prototype.reduceright
        right: createMethod(true)
      };
    }, {
      "../internals/a-function": 11,
      "../internals/indexed-object": 95,
      "../internals/to-length": 184,
      "../internals/to-object": 185
    }],
    31: [function (require, module, exports) {
      // TODO: use something more complex like timsort?
      var floor = Math.floor;

      var mergeSort = function mergeSort(array, comparefn) {
        var length = array.length;
        var middle = floor(length / 2);
        return length < 8 ? insertionSort(array, comparefn) : merge(mergeSort(array.slice(0, middle), comparefn), mergeSort(array.slice(middle), comparefn), comparefn);
      };

      var insertionSort = function insertionSort(array, comparefn) {
        var length = array.length;
        var i = 1;
        var element, j;

        while (i < length) {
          j = i;
          element = array[i];

          while (j && comparefn(array[j - 1], element) > 0) {
            array[j] = array[--j];
          }

          if (j !== i++) array[j] = element;
        }

        return array;
      };

      var merge = function merge(left, right, comparefn) {
        var llength = left.length;
        var rlength = right.length;
        var lindex = 0;
        var rindex = 0;
        var result = [];

        while (lindex < llength || rindex < rlength) {
          if (lindex < llength && rindex < rlength) {
            result.push(comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]);
          } else {
            result.push(lindex < llength ? left[lindex++] : right[rindex++]);
          }
        }

        return result;
      };

      module.exports = mergeSort;
    }, {}],
    32: [function (require, module, exports) {
      var isObject = require('../internals/is-object');

      var isArray = require('../internals/is-array');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var SPECIES = wellKnownSymbol('species'); // `ArraySpeciesCreate` abstract operation
      // https://tc39.es/ecma262/#sec-arrayspeciescreate

      module.exports = function (originalArray, length) {
        var C;

        if (isArray(originalArray)) {
          C = originalArray.constructor; // cross-realm fallback

          if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;else if (isObject(C)) {
            C = C[SPECIES];
            if (C === null) C = undefined;
          }
        }

        return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
      };
    }, {
      "../internals/is-array": 101,
      "../internals/is-object": 104,
      "../internals/well-known-symbol": 197
    }],
    33: [function (require, module, exports) {
      'use strict';

      var toLength = require('../internals/to-length');

      var toObject = require('../internals/to-object');

      var getBuiltIn = require('../internals/get-built-in');

      var arraySpeciesCreate = require('../internals/array-species-create');

      var push = [].push; // `Array.prototype.uniqueBy` method
      // https://github.com/tc39/proposal-array-unique

      module.exports = function uniqueBy(resolver) {
        var that = toObject(this);
        var length = toLength(that.length);
        var result = arraySpeciesCreate(that, 0);
        var Map = getBuiltIn('Map');
        var map = new Map();
        var resolverFunction, index, item, key;
        if (typeof resolver == 'function') resolverFunction = resolver;else if (resolver == null) resolverFunction = function resolverFunction(value) {
          return value;
        };else throw new TypeError('Incorrect resolver!');

        for (index = 0; index < length; index++) {
          item = that[index];
          key = resolverFunction(item);
          if (!map.has(key)) map.set(key, item);
        }

        map.forEach(function (value) {
          push.call(result, value);
        });
        return result;
      };
    }, {
      "../internals/array-species-create": 32,
      "../internals/get-built-in": 82,
      "../internals/to-length": 184,
      "../internals/to-object": 185
    }],
    34: [function (require, module, exports) {
      'use strict';

      var path = require('../internals/path');

      var aFunction = require('../internals/a-function');

      var anObject = require('../internals/an-object');

      var create = require('../internals/object-create');

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var redefineAll = require('../internals/redefine-all');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var InternalStateModule = require('../internals/internal-state');

      var getBuiltIn = require('../internals/get-built-in');

      var Promise = getBuiltIn('Promise');
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.get;
      var TO_STRING_TAG = wellKnownSymbol('toStringTag');

      var $return = function $return(value) {
        var iterator = getInternalState(this).iterator;
        var $$return = iterator['return'];
        return $$return === undefined ? Promise.resolve({
          done: true,
          value: value
        }) : anObject($$return.call(iterator, value));
      };

      var $throw = function $throw(value) {
        var iterator = getInternalState(this).iterator;
        var $$throw = iterator['throw'];
        return $$throw === undefined ? Promise.reject(value) : $$throw.call(iterator, value);
      };

      module.exports = function (nextHandler, IS_ITERATOR) {
        var AsyncIteratorProxy = function AsyncIterator(state) {
          state.next = aFunction(state.iterator.next);
          state.done = false;
          setInternalState(this, state);
        };

        AsyncIteratorProxy.prototype = redefineAll(create(path.AsyncIterator.prototype), {
          next: function next(arg) {
            var state = getInternalState(this);
            if (state.done) return Promise.resolve({
              done: true,
              value: undefined
            });

            try {
              return Promise.resolve(anObject(nextHandler.call(state, arg, Promise)));
            } catch (error) {
              return Promise.reject(error);
            }
          },
          'return': $return,
          'throw': $throw
        });

        if (!IS_ITERATOR) {
          createNonEnumerableProperty(AsyncIteratorProxy.prototype, TO_STRING_TAG, 'Generator');
        }

        return AsyncIteratorProxy;
      };
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/create-non-enumerable-property": 54,
      "../internals/get-built-in": 82,
      "../internals/internal-state": 99,
      "../internals/object-create": 131,
      "../internals/path": 148,
      "../internals/redefine-all": 151,
      "../internals/well-known-symbol": 197
    }],
    35: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var aFunction = require('../internals/a-function');

      var anObject = require('../internals/an-object');

      var getBuiltIn = require('../internals/get-built-in');

      var Promise = getBuiltIn('Promise');
      var push = [].push;

      var createMethod = function createMethod(TYPE) {
        var IS_TO_ARRAY = TYPE == 0;
        var IS_FOR_EACH = TYPE == 1;
        var IS_EVERY = TYPE == 2;
        var IS_SOME = TYPE == 3;
        return function (iterator, fn) {
          anObject(iterator);
          var next = aFunction(iterator.next);
          var array = IS_TO_ARRAY ? [] : undefined;
          if (!IS_TO_ARRAY) aFunction(fn);
          return new Promise(function (resolve, reject) {
            var closeIteration = function closeIteration(method, argument) {
              try {
                var returnMethod = iterator['return'];

                if (returnMethod !== undefined) {
                  return Promise.resolve(returnMethod.call(iterator)).then(function () {
                    method(argument);
                  }, function (error) {
                    reject(error);
                  });
                }
              } catch (error2) {
                return reject(error2);
              }

              method(argument);
            };

            var onError = function onError(error) {
              closeIteration(reject, error);
            };

            var loop = function loop() {
              try {
                Promise.resolve(anObject(next.call(iterator))).then(function (step) {
                  try {
                    if (anObject(step).done) {
                      resolve(IS_TO_ARRAY ? array : IS_SOME ? false : IS_EVERY || undefined);
                    } else {
                      var value = step.value;

                      if (IS_TO_ARRAY) {
                        push.call(array, value);
                        loop();
                      } else {
                        Promise.resolve(fn(value)).then(function (result) {
                          if (IS_FOR_EACH) {
                            loop();
                          } else if (IS_EVERY) {
                            result ? loop() : closeIteration(resolve, false);
                          } else {
                            result ? closeIteration(resolve, IS_SOME || value) : loop();
                          }
                        }, onError);
                      }
                    }
                  } catch (error) {
                    onError(error);
                  }
                }, onError);
              } catch (error2) {
                onError(error2);
              }
            };

            loop();
          });
        };
      };

      module.exports = {
        toArray: createMethod(0),
        forEach: createMethod(1),
        every: createMethod(2),
        some: createMethod(3),
        find: createMethod(4)
      };
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/get-built-in": 82
    }],
    36: [function (require, module, exports) {
      var global = require('../internals/global');

      var shared = require('../internals/shared-store');

      var getPrototypeOf = require('../internals/object-get-prototype-of');

      var has = require('../internals/has');

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var IS_PURE = require('../internals/is-pure');

      var USE_FUNCTION_CONSTRUCTOR = 'USE_FUNCTION_CONSTRUCTOR';
      var ASYNC_ITERATOR = wellKnownSymbol('asyncIterator');
      var AsyncIterator = global.AsyncIterator;
      var PassedAsyncIteratorPrototype = shared.AsyncIteratorPrototype;
      var AsyncIteratorPrototype, prototype;

      if (!IS_PURE) {
        if (PassedAsyncIteratorPrototype) {
          AsyncIteratorPrototype = PassedAsyncIteratorPrototype;
        } else if (typeof AsyncIterator == 'function') {
          AsyncIteratorPrototype = AsyncIterator.prototype;
        } else if (shared[USE_FUNCTION_CONSTRUCTOR] || global[USE_FUNCTION_CONSTRUCTOR]) {
          try {
            // eslint-disable-next-line no-new-func -- we have no alternatives without usage of modern syntax
            prototype = getPrototypeOf(getPrototypeOf(getPrototypeOf(Function('return async function*(){}()')())));
            if (getPrototypeOf(prototype) === Object.prototype) AsyncIteratorPrototype = prototype;
          } catch (error) {
            /* empty */
          }
        }
      }

      if (!AsyncIteratorPrototype) AsyncIteratorPrototype = {};

      if (!has(AsyncIteratorPrototype, ASYNC_ITERATOR)) {
        createNonEnumerableProperty(AsyncIteratorPrototype, ASYNC_ITERATOR, function () {
          return this;
        });
      }

      module.exports = AsyncIteratorPrototype;
    }, {
      "../internals/create-non-enumerable-property": 54,
      "../internals/global": 88,
      "../internals/has": 89,
      "../internals/is-pure": 105,
      "../internals/object-get-prototype-of": 138,
      "../internals/shared-store": 167,
      "../internals/well-known-symbol": 197
    }],
    37: [function (require, module, exports) {
      var anObject = require('../internals/an-object');

      var iteratorClose = require('../internals/iterator-close'); // call something on iterator step with safe closing on error


      module.exports = function (iterator, fn, value, ENTRIES) {
        try {
          return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
        } catch (error) {
          iteratorClose(iterator);
          throw error;
        }
      };
    }, {
      "../internals/an-object": 16,
      "../internals/iterator-close": 108
    }],
    38: [function (require, module, exports) {
      var wellKnownSymbol = require('../internals/well-known-symbol');

      var ITERATOR = wellKnownSymbol('iterator');
      var SAFE_CLOSING = false;

      try {
        var called = 0;
        var iteratorWithReturn = {
          next: function next() {
            return {
              done: !!called++
            };
          },
          'return': function _return() {
            SAFE_CLOSING = true;
          }
        };

        iteratorWithReturn[ITERATOR] = function () {
          return this;
        }; // eslint-disable-next-line es/no-array-from, no-throw-literal -- required for testing


        Array.from(iteratorWithReturn, function () {
          throw 2;
        });
      } catch (error) {
        /* empty */
      }

      module.exports = function (exec, SKIP_CLOSING) {
        if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
        var ITERATION_SUPPORT = false;

        try {
          var object = {};

          object[ITERATOR] = function () {
            return {
              next: function next() {
                return {
                  done: ITERATION_SUPPORT = true
                };
              }
            };
          };

          exec(object);
        } catch (error) {
          /* empty */
        }

        return ITERATION_SUPPORT;
      };
    }, {
      "../internals/well-known-symbol": 197
    }],
    39: [function (require, module, exports) {
      var toString = {}.toString;

      module.exports = function (it) {
        return toString.call(it).slice(8, -1);
      };
    }, {}],
    40: [function (require, module, exports) {
      var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');

      var classofRaw = require('../internals/classof-raw');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var TO_STRING_TAG = wellKnownSymbol('toStringTag'); // ES3 wrong here

      var CORRECT_ARGUMENTS = classofRaw(function () {
        return arguments;
      }()) == 'Arguments'; // fallback for IE11 Script Access Denied error

      var tryGet = function tryGet(it, key) {
        try {
          return it[key];
        } catch (error) {
          /* empty */
        }
      }; // getting tag from ES6+ `Object.prototype.toString`


      module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
        var O, tag, result;
        return it === undefined ? 'Undefined' : it === null ? 'Null' // @@toStringTag case
        : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag // builtinTag case
        : CORRECT_ARGUMENTS ? classofRaw(O) // ES3 arguments fallback
        : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
      };
    }, {
      "../internals/classof-raw": 39,
      "../internals/to-string-tag-support": 189,
      "../internals/well-known-symbol": 197
    }],
    41: [function (require, module, exports) {
      'use strict';

      var anObject = require('../internals/an-object');

      var aFunction = require('../internals/a-function'); // https://github.com/tc39/collection-methods


      module.exports = function ()
      /* ...elements */
      {
        var set = anObject(this);
        var adder = aFunction(set.add);

        for (var k = 0, len = arguments.length; k < len; k++) {
          adder.call(set, arguments[k]);
        }

        return set;
      };
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16
    }],
    42: [function (require, module, exports) {
      'use strict';

      var anObject = require('../internals/an-object');

      var aFunction = require('../internals/a-function'); // https://github.com/tc39/collection-methods


      module.exports = function ()
      /* ...elements */
      {
        var collection = anObject(this);
        var remover = aFunction(collection['delete']);
        var allDeleted = true;
        var wasDeleted;

        for (var k = 0, len = arguments.length; k < len; k++) {
          wasDeleted = remover.call(collection, arguments[k]);
          allDeleted = allDeleted && wasDeleted;
        }

        return !!allDeleted;
      };
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16
    }],
    43: [function (require, module, exports) {
      'use strict'; // https://tc39.github.io/proposal-setmap-offrom/

      var aFunction = require('../internals/a-function');

      var bind = require('../internals/function-bind-context');

      var iterate = require('../internals/iterate');

      module.exports = function from(source
      /* , mapFn, thisArg */
      ) {
        var length = arguments.length;
        var mapFn = length > 1 ? arguments[1] : undefined;
        var mapping, array, n, boundFunction;
        aFunction(this);
        mapping = mapFn !== undefined;
        if (mapping) aFunction(mapFn);
        if (source == undefined) return new this();
        array = [];

        if (mapping) {
          n = 0;
          boundFunction = bind(mapFn, length > 2 ? arguments[2] : undefined, 2);
          iterate(source, function (nextItem) {
            array.push(boundFunction(nextItem, n++));
          });
        } else {
          iterate(source, array.push, {
            that: array
          });
        }

        return new this(array);
      };
    }, {
      "../internals/a-function": 11,
      "../internals/function-bind-context": 79,
      "../internals/iterate": 107
    }],
    44: [function (require, module, exports) {
      'use strict'; // https://tc39.github.io/proposal-setmap-offrom/

      module.exports = function of() {
        var length = arguments.length;
        var A = new Array(length);

        while (length--) {
          A[length] = arguments[length];
        }

        return new this(A);
      };
    }, {}],
    45: [function (require, module, exports) {
      'use strict';

      var defineProperty = require('../internals/object-define-property').f;

      var create = require('../internals/object-create');

      var redefineAll = require('../internals/redefine-all');

      var bind = require('../internals/function-bind-context');

      var anInstance = require('../internals/an-instance');

      var iterate = require('../internals/iterate');

      var defineIterator = require('../internals/define-iterator');

      var setSpecies = require('../internals/set-species');

      var DESCRIPTORS = require('../internals/descriptors');

      var fastKey = require('../internals/internal-metadata').fastKey;

      var InternalStateModule = require('../internals/internal-state');

      var setInternalState = InternalStateModule.set;
      var internalStateGetterFor = InternalStateModule.getterFor;
      module.exports = {
        getConstructor: function getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
          var C = wrapper(function (that, iterable) {
            anInstance(that, C, CONSTRUCTOR_NAME);
            setInternalState(that, {
              type: CONSTRUCTOR_NAME,
              index: create(null),
              first: undefined,
              last: undefined,
              size: 0
            });
            if (!DESCRIPTORS) that.size = 0;
            if (iterable != undefined) iterate(iterable, that[ADDER], {
              that: that,
              AS_ENTRIES: IS_MAP
            });
          });
          var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

          var define = function define(that, key, value) {
            var state = getInternalState(that);
            var entry = getEntry(that, key);
            var previous, index; // change existing entry

            if (entry) {
              entry.value = value; // create new entry
            } else {
              state.last = entry = {
                index: index = fastKey(key, true),
                key: key,
                value: value,
                previous: previous = state.last,
                next: undefined,
                removed: false
              };
              if (!state.first) state.first = entry;
              if (previous) previous.next = entry;
              if (DESCRIPTORS) state.size++;else that.size++; // add to index

              if (index !== 'F') state.index[index] = entry;
            }

            return that;
          };

          var getEntry = function getEntry(that, key) {
            var state = getInternalState(that); // fast case

            var index = fastKey(key);
            var entry;
            if (index !== 'F') return state.index[index]; // frozen object case

            for (entry = state.first; entry; entry = entry.next) {
              if (entry.key == key) return entry;
            }
          };

          redefineAll(C.prototype, {
            // `{ Map, Set }.prototype.clear()` methods
            // https://tc39.es/ecma262/#sec-map.prototype.clear
            // https://tc39.es/ecma262/#sec-set.prototype.clear
            clear: function clear() {
              var that = this;
              var state = getInternalState(that);
              var data = state.index;
              var entry = state.first;

              while (entry) {
                entry.removed = true;
                if (entry.previous) entry.previous = entry.previous.next = undefined;
                delete data[entry.index];
                entry = entry.next;
              }

              state.first = state.last = undefined;
              if (DESCRIPTORS) state.size = 0;else that.size = 0;
            },
            // `{ Map, Set }.prototype.delete(key)` methods
            // https://tc39.es/ecma262/#sec-map.prototype.delete
            // https://tc39.es/ecma262/#sec-set.prototype.delete
            'delete': function _delete(key) {
              var that = this;
              var state = getInternalState(that);
              var entry = getEntry(that, key);

              if (entry) {
                var next = entry.next;
                var prev = entry.previous;
                delete state.index[entry.index];
                entry.removed = true;
                if (prev) prev.next = next;
                if (next) next.previous = prev;
                if (state.first == entry) state.first = next;
                if (state.last == entry) state.last = prev;
                if (DESCRIPTORS) state.size--;else that.size--;
              }

              return !!entry;
            },
            // `{ Map, Set }.prototype.forEach(callbackfn, thisArg = undefined)` methods
            // https://tc39.es/ecma262/#sec-map.prototype.foreach
            // https://tc39.es/ecma262/#sec-set.prototype.foreach
            forEach: function forEach(callbackfn
            /* , that = undefined */
            ) {
              var state = getInternalState(this);
              var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
              var entry;

              while (entry = entry ? entry.next : state.first) {
                boundFunction(entry.value, entry.key, this); // revert to the last existing entry

                while (entry && entry.removed) {
                  entry = entry.previous;
                }
              }
            },
            // `{ Map, Set}.prototype.has(key)` methods
            // https://tc39.es/ecma262/#sec-map.prototype.has
            // https://tc39.es/ecma262/#sec-set.prototype.has
            has: function has(key) {
              return !!getEntry(this, key);
            }
          });
          redefineAll(C.prototype, IS_MAP ? {
            // `Map.prototype.get(key)` method
            // https://tc39.es/ecma262/#sec-map.prototype.get
            get: function get(key) {
              var entry = getEntry(this, key);
              return entry && entry.value;
            },
            // `Map.prototype.set(key, value)` method
            // https://tc39.es/ecma262/#sec-map.prototype.set
            set: function set(key, value) {
              return define(this, key === 0 ? 0 : key, value);
            }
          } : {
            // `Set.prototype.add(value)` method
            // https://tc39.es/ecma262/#sec-set.prototype.add
            add: function add(value) {
              return define(this, value = value === 0 ? 0 : value, value);
            }
          });
          if (DESCRIPTORS) defineProperty(C.prototype, 'size', {
            get: function get() {
              return getInternalState(this).size;
            }
          });
          return C;
        },
        setStrong: function setStrong(C, CONSTRUCTOR_NAME, IS_MAP) {
          var ITERATOR_NAME = CONSTRUCTOR_NAME + ' Iterator';
          var getInternalCollectionState = internalStateGetterFor(CONSTRUCTOR_NAME);
          var getInternalIteratorState = internalStateGetterFor(ITERATOR_NAME); // `{ Map, Set }.prototype.{ keys, values, entries, @@iterator }()` methods
          // https://tc39.es/ecma262/#sec-map.prototype.entries
          // https://tc39.es/ecma262/#sec-map.prototype.keys
          // https://tc39.es/ecma262/#sec-map.prototype.values
          // https://tc39.es/ecma262/#sec-map.prototype-@@iterator
          // https://tc39.es/ecma262/#sec-set.prototype.entries
          // https://tc39.es/ecma262/#sec-set.prototype.keys
          // https://tc39.es/ecma262/#sec-set.prototype.values
          // https://tc39.es/ecma262/#sec-set.prototype-@@iterator

          defineIterator(C, CONSTRUCTOR_NAME, function (iterated, kind) {
            setInternalState(this, {
              type: ITERATOR_NAME,
              target: iterated,
              state: getInternalCollectionState(iterated),
              kind: kind,
              last: undefined
            });
          }, function () {
            var state = getInternalIteratorState(this);
            var kind = state.kind;
            var entry = state.last; // revert to the last existing entry

            while (entry && entry.removed) {
              entry = entry.previous;
            } // get next entry


            if (!state.target || !(state.last = entry = entry ? entry.next : state.state.first)) {
              // or finish the iteration
              state.target = undefined;
              return {
                value: undefined,
                done: true
              };
            } // return step by kind


            if (kind == 'keys') return {
              value: entry.key,
              done: false
            };
            if (kind == 'values') return {
              value: entry.value,
              done: false
            };
            return {
              value: [entry.key, entry.value],
              done: false
            };
          }, IS_MAP ? 'entries' : 'values', !IS_MAP, true); // `{ Map, Set }.prototype[@@species]` accessors
          // https://tc39.es/ecma262/#sec-get-map-@@species
          // https://tc39.es/ecma262/#sec-get-set-@@species

          setSpecies(CONSTRUCTOR_NAME);
        }
      };
    }, {
      "../internals/an-instance": 15,
      "../internals/define-iterator": 59,
      "../internals/descriptors": 61,
      "../internals/function-bind-context": 79,
      "../internals/internal-metadata": 98,
      "../internals/internal-state": 99,
      "../internals/iterate": 107,
      "../internals/object-create": 131,
      "../internals/object-define-property": 133,
      "../internals/redefine-all": 151,
      "../internals/set-species": 164
    }],
    46: [function (require, module, exports) {
      'use strict';

      var redefineAll = require('../internals/redefine-all');

      var getWeakData = require('../internals/internal-metadata').getWeakData;

      var anObject = require('../internals/an-object');

      var isObject = require('../internals/is-object');

      var anInstance = require('../internals/an-instance');

      var iterate = require('../internals/iterate');

      var ArrayIterationModule = require('../internals/array-iteration');

      var $has = require('../internals/has');

      var InternalStateModule = require('../internals/internal-state');

      var setInternalState = InternalStateModule.set;
      var internalStateGetterFor = InternalStateModule.getterFor;
      var find = ArrayIterationModule.find;
      var findIndex = ArrayIterationModule.findIndex;
      var id = 0; // fallback for uncaught frozen keys

      var uncaughtFrozenStore = function uncaughtFrozenStore(store) {
        return store.frozen || (store.frozen = new UncaughtFrozenStore());
      };

      var UncaughtFrozenStore = function UncaughtFrozenStore() {
        this.entries = [];
      };

      var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
        return find(store.entries, function (it) {
          return it[0] === key;
        });
      };

      UncaughtFrozenStore.prototype = {
        get: function get(key) {
          var entry = findUncaughtFrozen(this, key);
          if (entry) return entry[1];
        },
        has: function has(key) {
          return !!findUncaughtFrozen(this, key);
        },
        set: function set(key, value) {
          var entry = findUncaughtFrozen(this, key);
          if (entry) entry[1] = value;else this.entries.push([key, value]);
        },
        'delete': function _delete(key) {
          var index = findIndex(this.entries, function (it) {
            return it[0] === key;
          });
          if (~index) this.entries.splice(index, 1);
          return !!~index;
        }
      };
      module.exports = {
        getConstructor: function getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER) {
          var C = wrapper(function (that, iterable) {
            anInstance(that, C, CONSTRUCTOR_NAME);
            setInternalState(that, {
              type: CONSTRUCTOR_NAME,
              id: id++,
              frozen: undefined
            });
            if (iterable != undefined) iterate(iterable, that[ADDER], {
              that: that,
              AS_ENTRIES: IS_MAP
            });
          });
          var getInternalState = internalStateGetterFor(CONSTRUCTOR_NAME);

          var define = function define(that, key, value) {
            var state = getInternalState(that);
            var data = getWeakData(anObject(key), true);
            if (data === true) uncaughtFrozenStore(state).set(key, value);else data[state.id] = value;
            return that;
          };

          redefineAll(C.prototype, {
            // `{ WeakMap, WeakSet }.prototype.delete(key)` methods
            // https://tc39.es/ecma262/#sec-weakmap.prototype.delete
            // https://tc39.es/ecma262/#sec-weakset.prototype.delete
            'delete': function _delete(key) {
              var state = getInternalState(this);
              if (!isObject(key)) return false;
              var data = getWeakData(key);
              if (data === true) return uncaughtFrozenStore(state)['delete'](key);
              return data && $has(data, state.id) && delete data[state.id];
            },
            // `{ WeakMap, WeakSet }.prototype.has(key)` methods
            // https://tc39.es/ecma262/#sec-weakmap.prototype.has
            // https://tc39.es/ecma262/#sec-weakset.prototype.has
            has: function has(key) {
              var state = getInternalState(this);
              if (!isObject(key)) return false;
              var data = getWeakData(key);
              if (data === true) return uncaughtFrozenStore(state).has(key);
              return data && $has(data, state.id);
            }
          });
          redefineAll(C.prototype, IS_MAP ? {
            // `WeakMap.prototype.get(key)` method
            // https://tc39.es/ecma262/#sec-weakmap.prototype.get
            get: function get(key) {
              var state = getInternalState(this);

              if (isObject(key)) {
                var data = getWeakData(key);
                if (data === true) return uncaughtFrozenStore(state).get(key);
                return data ? data[state.id] : undefined;
              }
            },
            // `WeakMap.prototype.set(key, value)` method
            // https://tc39.es/ecma262/#sec-weakmap.prototype.set
            set: function set(key, value) {
              return define(this, key, value);
            }
          } : {
            // `WeakSet.prototype.add(value)` method
            // https://tc39.es/ecma262/#sec-weakset.prototype.add
            add: function add(value) {
              return define(this, value, true);
            }
          });
          return C;
        }
      };
    }, {
      "../internals/an-instance": 15,
      "../internals/an-object": 16,
      "../internals/array-iteration": 26,
      "../internals/has": 89,
      "../internals/internal-metadata": 98,
      "../internals/internal-state": 99,
      "../internals/is-object": 104,
      "../internals/iterate": 107,
      "../internals/redefine-all": 151
    }],
    47: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var global = require('../internals/global');

      var isForced = require('../internals/is-forced');

      var redefine = require('../internals/redefine');

      var InternalMetadataModule = require('../internals/internal-metadata');

      var iterate = require('../internals/iterate');

      var anInstance = require('../internals/an-instance');

      var isObject = require('../internals/is-object');

      var fails = require('../internals/fails');

      var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');

      var setToStringTag = require('../internals/set-to-string-tag');

      var inheritIfRequired = require('../internals/inherit-if-required');

      module.exports = function (CONSTRUCTOR_NAME, wrapper, common) {
        var IS_MAP = CONSTRUCTOR_NAME.indexOf('Map') !== -1;
        var IS_WEAK = CONSTRUCTOR_NAME.indexOf('Weak') !== -1;
        var ADDER = IS_MAP ? 'set' : 'add';
        var NativeConstructor = global[CONSTRUCTOR_NAME];
        var NativePrototype = NativeConstructor && NativeConstructor.prototype;
        var Constructor = NativeConstructor;
        var exported = {};

        var fixMethod = function fixMethod(KEY) {
          var nativeMethod = NativePrototype[KEY];
          redefine(NativePrototype, KEY, KEY == 'add' ? function add(value) {
            nativeMethod.call(this, value === 0 ? 0 : value);
            return this;
          } : KEY == 'delete' ? function (key) {
            return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
          } : KEY == 'get' ? function get(key) {
            return IS_WEAK && !isObject(key) ? undefined : nativeMethod.call(this, key === 0 ? 0 : key);
          } : KEY == 'has' ? function has(key) {
            return IS_WEAK && !isObject(key) ? false : nativeMethod.call(this, key === 0 ? 0 : key);
          } : function set(key, value) {
            nativeMethod.call(this, key === 0 ? 0 : key, value);
            return this;
          });
        };

        var REPLACE = isForced(CONSTRUCTOR_NAME, typeof NativeConstructor != 'function' || !(IS_WEAK || NativePrototype.forEach && !fails(function () {
          new NativeConstructor().entries().next();
        })));

        if (REPLACE) {
          // create collection constructor
          Constructor = common.getConstructor(wrapper, CONSTRUCTOR_NAME, IS_MAP, ADDER);
          InternalMetadataModule.REQUIRED = true;
        } else if (isForced(CONSTRUCTOR_NAME, true)) {
          var instance = new Constructor(); // early implementations not supports chaining

          var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance; // V8 ~ Chromium 40- weak-collections throws on primitives, but should return false

          var THROWS_ON_PRIMITIVES = fails(function () {
            instance.has(1);
          }); // most early implementations doesn't supports iterables, most modern - not close it correctly
          // eslint-disable-next-line no-new -- required for testing

          var ACCEPT_ITERABLES = checkCorrectnessOfIteration(function (iterable) {
            new NativeConstructor(iterable);
          }); // for early implementations -0 and +0 not the same

          var BUGGY_ZERO = !IS_WEAK && fails(function () {
            // V8 ~ Chromium 42- fails only with 5+ elements
            var $instance = new NativeConstructor();
            var index = 5;

            while (index--) {
              $instance[ADDER](index, index);
            }

            return !$instance.has(-0);
          });

          if (!ACCEPT_ITERABLES) {
            Constructor = wrapper(function (dummy, iterable) {
              anInstance(dummy, Constructor, CONSTRUCTOR_NAME);
              var that = inheritIfRequired(new NativeConstructor(), dummy, Constructor);
              if (iterable != undefined) iterate(iterable, that[ADDER], {
                that: that,
                AS_ENTRIES: IS_MAP
              });
              return that;
            });
            Constructor.prototype = NativePrototype;
            NativePrototype.constructor = Constructor;
          }

          if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
            fixMethod('delete');
            fixMethod('has');
            IS_MAP && fixMethod('get');
          }

          if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER); // weak collections should not contains .clear method

          if (IS_WEAK && NativePrototype.clear) delete NativePrototype.clear;
        }

        exported[CONSTRUCTOR_NAME] = Constructor;
        $({
          global: true,
          forced: Constructor != NativeConstructor
        }, exported);
        setToStringTag(Constructor, CONSTRUCTOR_NAME);
        if (!IS_WEAK) common.setStrong(Constructor, CONSTRUCTOR_NAME, IS_MAP);
        return Constructor;
      };
    }, {
      "../internals/an-instance": 15,
      "../internals/check-correctness-of-iteration": 38,
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/global": 88,
      "../internals/inherit-if-required": 96,
      "../internals/internal-metadata": 98,
      "../internals/is-forced": 102,
      "../internals/is-object": 104,
      "../internals/iterate": 107,
      "../internals/redefine": 152,
      "../internals/set-to-string-tag": 165
    }],
    48: [function (require, module, exports) {
      // TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
      var Map = require('../modules/es.map');

      var WeakMap = require('../modules/es.weak-map');

      var create = require('../internals/object-create');

      var isObject = require('../internals/is-object');

      var Node = function Node() {
        // keys
        this.object = null;
        this.symbol = null; // child nodes

        this.primitives = null;
        this.objectsByIndex = create(null);
      };

      Node.prototype.get = function (key, initializer) {
        return this[key] || (this[key] = initializer());
      };

      Node.prototype.next = function (i, it, IS_OBJECT) {
        var store = IS_OBJECT ? this.objectsByIndex[i] || (this.objectsByIndex[i] = new WeakMap()) : this.primitives || (this.primitives = new Map());
        var entry = store.get(it);
        if (!entry) store.set(it, entry = new Node());
        return entry;
      };

      var root = new Node();

      module.exports = function () {
        var active = root;
        var length = arguments.length;
        var i, it; // for prevent leaking, start from objects

        for (i = 0; i < length; i++) {
          if (isObject(it = arguments[i])) active = active.next(i, it, true);
        }

        if (this === Object && active === root) throw TypeError('Composite keys must contain a non-primitive component');

        for (i = 0; i < length; i++) {
          if (!isObject(it = arguments[i])) active = active.next(i, it, false);
        }

        return active;
      };
    }, {
      "../internals/is-object": 104,
      "../internals/object-create": 131,
      "../modules/es.map": 248,
      "../modules/es.weak-map": 415
    }],
    49: [function (require, module, exports) {
      var has = require('../internals/has');

      var ownKeys = require('../internals/own-keys');

      var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');

      var definePropertyModule = require('../internals/object-define-property');

      module.exports = function (target, source) {
        var keys = ownKeys(source);
        var defineProperty = definePropertyModule.f;
        var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
        }
      };
    }, {
      "../internals/has": 89,
      "../internals/object-define-property": 133,
      "../internals/object-get-own-property-descriptor": 134,
      "../internals/own-keys": 147
    }],
    50: [function (require, module, exports) {
      var wellKnownSymbol = require('../internals/well-known-symbol');

      var MATCH = wellKnownSymbol('match');

      module.exports = function (METHOD_NAME) {
        var regexp = /./;

        try {
          '/./'[METHOD_NAME](regexp);
        } catch (error1) {
          try {
            regexp[MATCH] = false;
            return '/./'[METHOD_NAME](regexp);
          } catch (error2) {
            /* empty */
          }
        }

        return false;
      };
    }, {
      "../internals/well-known-symbol": 197
    }],
    51: [function (require, module, exports) {
      var fails = require('../internals/fails');

      module.exports = !fails(function () {
        function F() {
          /* empty */
        }

        F.prototype.constructor = null; // eslint-disable-next-line es/no-object-getprototypeof -- required for testing

        return Object.getPrototypeOf(new F()) !== F.prototype;
      });
    }, {
      "../internals/fails": 75
    }],
    52: [function (require, module, exports) {
      var requireObjectCoercible = require('../internals/require-object-coercible');

      var quot = /"/g; // `CreateHTML` abstract operation
      // https://tc39.es/ecma262/#sec-createhtml

      module.exports = function (string, tag, attribute, value) {
        var S = String(requireObjectCoercible(string));
        var p1 = '<' + tag;
        if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
        return p1 + '>' + S + '</' + tag + '>';
      };
    }, {
      "../internals/require-object-coercible": 160
    }],
    53: [function (require, module, exports) {
      'use strict';

      var IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;

      var create = require('../internals/object-create');

      var createPropertyDescriptor = require('../internals/create-property-descriptor');

      var setToStringTag = require('../internals/set-to-string-tag');

      var Iterators = require('../internals/iterators');

      var returnThis = function returnThis() {
        return this;
      };

      module.exports = function (IteratorConstructor, NAME, next) {
        var TO_STRING_TAG = NAME + ' Iterator';
        IteratorConstructor.prototype = create(IteratorPrototype, {
          next: createPropertyDescriptor(1, next)
        });
        setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
        Iterators[TO_STRING_TAG] = returnThis;
        return IteratorConstructor;
      };
    }, {
      "../internals/create-property-descriptor": 55,
      "../internals/iterators": 111,
      "../internals/iterators-core": 110,
      "../internals/object-create": 131,
      "../internals/set-to-string-tag": 165
    }],
    54: [function (require, module, exports) {
      var DESCRIPTORS = require('../internals/descriptors');

      var definePropertyModule = require('../internals/object-define-property');

      var createPropertyDescriptor = require('../internals/create-property-descriptor');

      module.exports = DESCRIPTORS ? function (object, key, value) {
        return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
      } : function (object, key, value) {
        object[key] = value;
        return object;
      };
    }, {
      "../internals/create-property-descriptor": 55,
      "../internals/descriptors": 61,
      "../internals/object-define-property": 133
    }],
    55: [function (require, module, exports) {
      module.exports = function (bitmap, value) {
        return {
          enumerable: !(bitmap & 1),
          configurable: !(bitmap & 2),
          writable: !(bitmap & 4),
          value: value
        };
      };
    }, {}],
    56: [function (require, module, exports) {
      'use strict';

      var toPrimitive = require('../internals/to-primitive');

      var definePropertyModule = require('../internals/object-define-property');

      var createPropertyDescriptor = require('../internals/create-property-descriptor');

      module.exports = function (object, key, value) {
        var propertyKey = toPrimitive(key);
        if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));else object[propertyKey] = value;
      };
    }, {
      "../internals/create-property-descriptor": 55,
      "../internals/object-define-property": 133,
      "../internals/to-primitive": 188
    }],
    57: [function (require, module, exports) {
      'use strict';

      var fails = require('../internals/fails');

      var padStart = require('../internals/string-pad').start;

      var abs = Math.abs;
      var DatePrototype = Date.prototype;
      var getTime = DatePrototype.getTime;
      var nativeDateToISOString = DatePrototype.toISOString; // `Date.prototype.toISOString` method implementation
      // https://tc39.es/ecma262/#sec-date.prototype.toisostring
      // PhantomJS / old WebKit fails here:

      module.exports = fails(function () {
        return nativeDateToISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';
      }) || !fails(function () {
        nativeDateToISOString.call(new Date(NaN));
      }) ? function toISOString() {
        if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
        var date = this;
        var year = date.getUTCFullYear();
        var milliseconds = date.getUTCMilliseconds();
        var sign = year < 0 ? '-' : year > 9999 ? '+' : '';
        return sign + padStart(abs(year), sign ? 6 : 4, 0) + '-' + padStart(date.getUTCMonth() + 1, 2, 0) + '-' + padStart(date.getUTCDate(), 2, 0) + 'T' + padStart(date.getUTCHours(), 2, 0) + ':' + padStart(date.getUTCMinutes(), 2, 0) + ':' + padStart(date.getUTCSeconds(), 2, 0) + '.' + padStart(milliseconds, 3, 0) + 'Z';
      } : nativeDateToISOString;
    }, {
      "../internals/fails": 75,
      "../internals/string-pad": 173
    }],
    58: [function (require, module, exports) {
      'use strict';

      var anObject = require('../internals/an-object');

      var toPrimitive = require('../internals/to-primitive'); // `Date.prototype[@@toPrimitive](hint)` method implementation
      // https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive


      module.exports = function (hint) {
        if (hint !== 'string' && hint !== 'number' && hint !== 'default') {
          throw TypeError('Incorrect hint');
        }

        return toPrimitive(anObject(this), hint !== 'number');
      };
    }, {
      "../internals/an-object": 16,
      "../internals/to-primitive": 188
    }],
    59: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var createIteratorConstructor = require('../internals/create-iterator-constructor');

      var getPrototypeOf = require('../internals/object-get-prototype-of');

      var setPrototypeOf = require('../internals/object-set-prototype-of');

      var setToStringTag = require('../internals/set-to-string-tag');

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var redefine = require('../internals/redefine');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var IS_PURE = require('../internals/is-pure');

      var Iterators = require('../internals/iterators');

      var IteratorsCore = require('../internals/iterators-core');

      var IteratorPrototype = IteratorsCore.IteratorPrototype;
      var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
      var ITERATOR = wellKnownSymbol('iterator');
      var KEYS = 'keys';
      var VALUES = 'values';
      var ENTRIES = 'entries';

      var returnThis = function returnThis() {
        return this;
      };

      module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
        createIteratorConstructor(IteratorConstructor, NAME, next);

        var getIterationMethod = function getIterationMethod(KIND) {
          if (KIND === DEFAULT && defaultIterator) return defaultIterator;
          if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];

          switch (KIND) {
            case KEYS:
              return function keys() {
                return new IteratorConstructor(this, KIND);
              };

            case VALUES:
              return function values() {
                return new IteratorConstructor(this, KIND);
              };

            case ENTRIES:
              return function entries() {
                return new IteratorConstructor(this, KIND);
              };
          }

          return function () {
            return new IteratorConstructor(this);
          };
        };

        var TO_STRING_TAG = NAME + ' Iterator';
        var INCORRECT_VALUES_NAME = false;
        var IterablePrototype = Iterable.prototype;
        var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype['@@iterator'] || DEFAULT && IterablePrototype[DEFAULT];
        var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
        var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
        var CurrentIteratorPrototype, methods, KEY; // fix native

        if (anyNativeIterator) {
          CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));

          if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
            if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
              if (setPrototypeOf) {
                setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
              } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
                createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
              }
            } // Set @@toStringTag to native iterators


            setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
            if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
          }
        } // fix Array.prototype.{ values, @@iterator }.name in V8 / FF


        if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
          INCORRECT_VALUES_NAME = true;

          defaultIterator = function values() {
            return nativeIterator.call(this);
          };
        } // define iterator


        if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
          createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
        }

        Iterators[NAME] = defaultIterator; // export additional methods

        if (DEFAULT) {
          methods = {
            values: getIterationMethod(VALUES),
            keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
            entries: getIterationMethod(ENTRIES)
          };
          if (FORCED) for (KEY in methods) {
            if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
              redefine(IterablePrototype, KEY, methods[KEY]);
            }
          } else $({
            target: NAME,
            proto: true,
            forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME
          }, methods);
        }

        return methods;
      };
    }, {
      "../internals/create-iterator-constructor": 53,
      "../internals/create-non-enumerable-property": 54,
      "../internals/export": 74,
      "../internals/is-pure": 105,
      "../internals/iterators": 111,
      "../internals/iterators-core": 110,
      "../internals/object-get-prototype-of": 138,
      "../internals/object-set-prototype-of": 144,
      "../internals/redefine": 152,
      "../internals/set-to-string-tag": 165,
      "../internals/well-known-symbol": 197
    }],
    60: [function (require, module, exports) {
      var path = require('../internals/path');

      var has = require('../internals/has');

      var wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');

      var defineProperty = require('../internals/object-define-property').f;

      module.exports = function (NAME) {
        var Symbol = path.Symbol || (path.Symbol = {});
        if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
          value: wrappedWellKnownSymbolModule.f(NAME)
        });
      };
    }, {
      "../internals/has": 89,
      "../internals/object-define-property": 133,
      "../internals/path": 148,
      "../internals/well-known-symbol-wrapped": 196
    }],
    61: [function (require, module, exports) {
      var fails = require('../internals/fails'); // Detect IE8's incomplete defineProperty implementation


      module.exports = !fails(function () {
        // eslint-disable-next-line es/no-object-defineproperty -- required for testing
        return Object.defineProperty({}, 1, {
          get: function get() {
            return 7;
          }
        })[1] != 7;
      });
    }, {
      "../internals/fails": 75
    }],
    62: [function (require, module, exports) {
      var global = require('../internals/global');

      var isObject = require('../internals/is-object');

      var document = global.document; // typeof document.createElement is 'object' in old IE

      var EXISTS = isObject(document) && isObject(document.createElement);

      module.exports = function (it) {
        return EXISTS ? document.createElement(it) : {};
      };
    }, {
      "../internals/global": 88,
      "../internals/is-object": 104
    }],
    63: [function (require, module, exports) {
      // iterable DOM collections
      // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
      module.exports = {
        CSSRuleList: 0,
        CSSStyleDeclaration: 0,
        CSSValueList: 0,
        ClientRectList: 0,
        DOMRectList: 0,
        DOMStringList: 0,
        DOMTokenList: 1,
        DataTransferItemList: 0,
        FileList: 0,
        HTMLAllCollection: 0,
        HTMLCollection: 0,
        HTMLFormElement: 0,
        HTMLSelectElement: 0,
        MediaList: 0,
        MimeTypeArray: 0,
        NamedNodeMap: 0,
        NodeList: 1,
        PaintRequestList: 0,
        Plugin: 0,
        PluginArray: 0,
        SVGLengthList: 0,
        SVGNumberList: 0,
        SVGPathSegList: 0,
        SVGPointList: 0,
        SVGStringList: 0,
        SVGTransformList: 0,
        SourceBufferList: 0,
        StyleSheetList: 0,
        TextTrackCueList: 0,
        TextTrackList: 0,
        TouchList: 0
      };
    }, {}],
    64: [function (require, module, exports) {
      var userAgent = require('../internals/engine-user-agent');

      var firefox = userAgent.match(/firefox\/(\d+)/i);
      module.exports = !!firefox && +firefox[1];
    }, {
      "../internals/engine-user-agent": 70
    }],
    65: [function (require, module, exports) {
      module.exports = typeof window == 'object';
    }, {}],
    66: [function (require, module, exports) {
      var UA = require('../internals/engine-user-agent');

      module.exports = /MSIE|Trident/.test(UA);
    }, {
      "../internals/engine-user-agent": 70
    }],
    67: [function (require, module, exports) {
      var userAgent = require('../internals/engine-user-agent');

      module.exports = /(?:iphone|ipod|ipad).*applewebkit/i.test(userAgent);
    }, {
      "../internals/engine-user-agent": 70
    }],
    68: [function (require, module, exports) {
      var classof = require('../internals/classof-raw');

      var global = require('../internals/global');

      module.exports = classof(global.process) == 'process';
    }, {
      "../internals/classof-raw": 39,
      "../internals/global": 88
    }],
    69: [function (require, module, exports) {
      var userAgent = require('../internals/engine-user-agent');

      module.exports = /web0s(?!.*chrome)/i.test(userAgent);
    }, {
      "../internals/engine-user-agent": 70
    }],
    70: [function (require, module, exports) {
      var getBuiltIn = require('../internals/get-built-in');

      module.exports = getBuiltIn('navigator', 'userAgent') || '';
    }, {
      "../internals/get-built-in": 82
    }],
    71: [function (require, module, exports) {
      var global = require('../internals/global');

      var userAgent = require('../internals/engine-user-agent');

      var process = global.process;
      var versions = process && process.versions;
      var v8 = versions && versions.v8;
      var match, version;

      if (v8) {
        match = v8.split('.');
        version = match[0] < 4 ? 1 : match[0] + match[1];
      } else if (userAgent) {
        match = userAgent.match(/Edge\/(\d+)/);

        if (!match || match[1] >= 74) {
          match = userAgent.match(/Chrome\/(\d+)/);
          if (match) version = match[1];
        }
      }

      module.exports = version && +version;
    }, {
      "../internals/engine-user-agent": 70,
      "../internals/global": 88
    }],
    72: [function (require, module, exports) {
      var userAgent = require('../internals/engine-user-agent');

      var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);
      module.exports = !!webkit && +webkit[1];
    }, {
      "../internals/engine-user-agent": 70
    }],
    73: [function (require, module, exports) {
      // IE8- don't enum bug keys
      module.exports = ['constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'toLocaleString', 'toString', 'valueOf'];
    }, {}],
    74: [function (require, module, exports) {
      var global = require('../internals/global');

      var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var redefine = require('../internals/redefine');

      var setGlobal = require('../internals/set-global');

      var copyConstructorProperties = require('../internals/copy-constructor-properties');

      var isForced = require('../internals/is-forced');
      /*
        options.target      - name of the target object
        options.global      - target is the global object
        options.stat        - export as static methods of target
        options.proto       - export as prototype methods of target
        options.real        - real prototype method for the `pure` version
        options.forced      - export even if the native feature is available
        options.bind        - bind methods to the target, required for the `pure` version
        options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
        options.unsafe      - use the simple assignment of property instead of delete + defineProperty
        options.sham        - add a flag to not completely full polyfills
        options.enumerable  - export as enumerable property
        options.noTargetGet - prevent calling a getter on target
      */


      module.exports = function (options, source) {
        var TARGET = options.target;
        var GLOBAL = options.global;
        var STATIC = options.stat;
        var FORCED, target, key, targetProperty, sourceProperty, descriptor;

        if (GLOBAL) {
          target = global;
        } else if (STATIC) {
          target = global[TARGET] || setGlobal(TARGET, {});
        } else {
          target = (global[TARGET] || {}).prototype;
        }

        if (target) for (key in source) {
          sourceProperty = source[key];

          if (options.noTargetGet) {
            descriptor = getOwnPropertyDescriptor(target, key);
            targetProperty = descriptor && descriptor.value;
          } else targetProperty = target[key];

          FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced); // contained in target

          if (!FORCED && targetProperty !== undefined) {
            if (typeof sourceProperty === typeof targetProperty) continue;
            copyConstructorProperties(sourceProperty, targetProperty);
          } // add a flag to not completely full polyfills


          if (options.sham || targetProperty && targetProperty.sham) {
            createNonEnumerableProperty(sourceProperty, 'sham', true);
          } // extend global


          redefine(target, key, sourceProperty, options);
        }
      };
    }, {
      "../internals/copy-constructor-properties": 49,
      "../internals/create-non-enumerable-property": 54,
      "../internals/global": 88,
      "../internals/is-forced": 102,
      "../internals/object-get-own-property-descriptor": 134,
      "../internals/redefine": 152,
      "../internals/set-global": 163
    }],
    75: [function (require, module, exports) {
      module.exports = function (exec) {
        try {
          return !!exec();
        } catch (error) {
          return true;
        }
      };
    }, {}],
    76: [function (require, module, exports) {
      'use strict'; // TODO: Remove from `core-js@4` since it's moved to entry points

      require('../modules/es.regexp.exec');

      var redefine = require('../internals/redefine');

      var regexpExec = require('../internals/regexp-exec');

      var fails = require('../internals/fails');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var SPECIES = wellKnownSymbol('species');
      var RegExpPrototype = RegExp.prototype;

      module.exports = function (KEY, exec, FORCED, SHAM) {
        var SYMBOL = wellKnownSymbol(KEY);
        var DELEGATES_TO_SYMBOL = !fails(function () {
          // String methods call symbol-named RegEp methods
          var O = {};

          O[SYMBOL] = function () {
            return 7;
          };

          return ''[KEY](O) != 7;
        });
        var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails(function () {
          // Symbol-named RegExp methods call .exec
          var execCalled = false;
          var re = /a/;

          if (KEY === 'split') {
            // We can't use real regex here since it causes deoptimization
            // and serious performance degradation in V8
            // https://github.com/zloirock/core-js/issues/306
            re = {}; // RegExp[@@split] doesn't call the regex's exec method, but first creates
            // a new one. We need to return the patched regex when creating the new one.

            re.constructor = {};

            re.constructor[SPECIES] = function () {
              return re;
            };

            re.flags = '';
            re[SYMBOL] = /./[SYMBOL];
          }

          re.exec = function () {
            execCalled = true;
            return null;
          };

          re[SYMBOL]('');
          return !execCalled;
        });

        if (!DELEGATES_TO_SYMBOL || !DELEGATES_TO_EXEC || FORCED) {
          var nativeRegExpMethod = /./[SYMBOL];
          var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
            var $exec = regexp.exec;

            if ($exec === regexpExec || $exec === RegExpPrototype.exec) {
              if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
                // The native String method already delegates to @@method (this
                // polyfilled function), leasing to infinite recursion.
                // We avoid it by directly calling the native @@method method.
                return {
                  done: true,
                  value: nativeRegExpMethod.call(regexp, str, arg2)
                };
              }

              return {
                done: true,
                value: nativeMethod.call(str, regexp, arg2)
              };
            }

            return {
              done: false
            };
          });
          redefine(String.prototype, KEY, methods[0]);
          redefine(RegExpPrototype, SYMBOL, methods[1]);
        }

        if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);
      };
    }, {
      "../internals/create-non-enumerable-property": 54,
      "../internals/fails": 75,
      "../internals/redefine": 152,
      "../internals/regexp-exec": 155,
      "../internals/well-known-symbol": 197,
      "../modules/es.regexp.exec": 326
    }],
    77: [function (require, module, exports) {
      'use strict';

      var isArray = require('../internals/is-array');

      var toLength = require('../internals/to-length');

      var bind = require('../internals/function-bind-context'); // `FlattenIntoArray` abstract operation
      // https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray


      var flattenIntoArray = function flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {
        var targetIndex = start;
        var sourceIndex = 0;
        var mapFn = mapper ? bind(mapper, thisArg, 3) : false;
        var element;

        while (sourceIndex < sourceLen) {
          if (sourceIndex in source) {
            element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];

            if (depth > 0 && isArray(element)) {
              targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;
            } else {
              if (targetIndex >= 0x1FFFFFFFFFFFFF) throw TypeError('Exceed the acceptable array length');
              target[targetIndex] = element;
            }

            targetIndex++;
          }

          sourceIndex++;
        }

        return targetIndex;
      };

      module.exports = flattenIntoArray;
    }, {
      "../internals/function-bind-context": 79,
      "../internals/is-array": 101,
      "../internals/to-length": 184
    }],
    78: [function (require, module, exports) {
      var fails = require('../internals/fails');

      module.exports = !fails(function () {
        // eslint-disable-next-line es/no-object-isextensible, es/no-object-preventextensions -- required for testing
        return Object.isExtensible(Object.preventExtensions({}));
      });
    }, {
      "../internals/fails": 75
    }],
    79: [function (require, module, exports) {
      var aFunction = require('../internals/a-function'); // optional / simple context binding


      module.exports = function (fn, that, length) {
        aFunction(fn);
        if (that === undefined) return fn;

        switch (length) {
          case 0:
            return function () {
              return fn.call(that);
            };

          case 1:
            return function (a) {
              return fn.call(that, a);
            };

          case 2:
            return function (a, b) {
              return fn.call(that, a, b);
            };

          case 3:
            return function (a, b, c) {
              return fn.call(that, a, b, c);
            };
        }

        return function ()
        /* ...args */
        {
          return fn.apply(that, arguments);
        };
      };
    }, {
      "../internals/a-function": 11
    }],
    80: [function (require, module, exports) {
      'use strict';

      var aFunction = require('../internals/a-function');

      var isObject = require('../internals/is-object');

      var slice = [].slice;
      var factories = {};

      var construct = function construct(C, argsLength, args) {
        if (!(argsLength in factories)) {
          for (var list = [], i = 0; i < argsLength; i++) {
            list[i] = 'a[' + i + ']';
          } // eslint-disable-next-line no-new-func -- we have no proper alternatives, IE8- only


          factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
        }

        return factories[argsLength](C, args);
      }; // `Function.prototype.bind` method implementation
      // https://tc39.es/ecma262/#sec-function.prototype.bind


      module.exports = Function.bind || function bind(that
      /* , ...args */
      ) {
        var fn = aFunction(this);
        var partArgs = slice.call(arguments, 1);

        var boundFunction = function bound()
        /* args... */
        {
          var args = partArgs.concat(slice.call(arguments));
          return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);
        };

        if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;
        return boundFunction;
      };
    }, {
      "../internals/a-function": 11,
      "../internals/is-object": 104
    }],
    81: [function (require, module, exports) {
      var getIteratorMethod = require('../internals/get-iterator-method');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var ASYNC_ITERATOR = wellKnownSymbol('asyncIterator');

      module.exports = function (it) {
        var method = it[ASYNC_ITERATOR];
        return method === undefined ? getIteratorMethod(it) : method;
      };
    }, {
      "../internals/get-iterator-method": 83,
      "../internals/well-known-symbol": 197
    }],
    82: [function (require, module, exports) {
      var path = require('../internals/path');

      var global = require('../internals/global');

      var aFunction = function aFunction(variable) {
        return typeof variable == 'function' ? variable : undefined;
      };

      module.exports = function (namespace, method) {
        return arguments.length < 2 ? aFunction(path[namespace]) || aFunction(global[namespace]) : path[namespace] && path[namespace][method] || global[namespace] && global[namespace][method];
      };
    }, {
      "../internals/global": 88,
      "../internals/path": 148
    }],
    83: [function (require, module, exports) {
      var classof = require('../internals/classof');

      var Iterators = require('../internals/iterators');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var ITERATOR = wellKnownSymbol('iterator');

      module.exports = function (it) {
        if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
      };
    }, {
      "../internals/classof": 40,
      "../internals/iterators": 111,
      "../internals/well-known-symbol": 197
    }],
    84: [function (require, module, exports) {
      var anObject = require('../internals/an-object');

      var getIteratorMethod = require('../internals/get-iterator-method');

      module.exports = function (it) {
        var iteratorMethod = getIteratorMethod(it);

        if (typeof iteratorMethod != 'function') {
          throw TypeError(String(it) + ' is not iterable');
        }

        return anObject(iteratorMethod.call(it));
      };
    }, {
      "../internals/an-object": 16,
      "../internals/get-iterator-method": 83
    }],
    85: [function (require, module, exports) {
      var IS_PURE = require('../internals/is-pure');

      var getIterator = require('../internals/get-iterator');

      module.exports = IS_PURE ? getIterator : function (it) {
        // eslint-disable-next-line es/no-map -- safe
        return Map.prototype.entries.call(it);
      };
    }, {
      "../internals/get-iterator": 84,
      "../internals/is-pure": 105
    }],
    86: [function (require, module, exports) {
      var IS_PURE = require('../internals/is-pure');

      var getIterator = require('../internals/get-iterator');

      module.exports = IS_PURE ? getIterator : function (it) {
        // eslint-disable-next-line es/no-set -- safe
        return Set.prototype.values.call(it);
      };
    }, {
      "../internals/get-iterator": 84,
      "../internals/is-pure": 105
    }],
    87: [function (require, module, exports) {
      var toObject = require('../internals/to-object');

      var floor = Math.floor;
      var replace = ''.replace;
      var SUBSTITUTION_SYMBOLS = /\$([$&'`]|\d{1,2}|<[^>]*>)/g;
      var SUBSTITUTION_SYMBOLS_NO_NAMED = /\$([$&'`]|\d{1,2})/g; // `GetSubstitution` abstract operation
      // https://tc39.es/ecma262/#sec-getsubstitution

      module.exports = function (matched, str, position, captures, namedCaptures, replacement) {
        var tailPos = position + matched.length;
        var m = captures.length;
        var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;

        if (namedCaptures !== undefined) {
          namedCaptures = toObject(namedCaptures);
          symbols = SUBSTITUTION_SYMBOLS;
        }

        return replace.call(replacement, symbols, function (match, ch) {
          var capture;

          switch (ch.charAt(0)) {
            case '$':
              return '$';

            case '&':
              return matched;

            case '`':
              return str.slice(0, position);

            case "'":
              return str.slice(tailPos);

            case '<':
              capture = namedCaptures[ch.slice(1, -1)];
              break;

            default:
              // \d\d?
              var n = +ch;
              if (n === 0) return match;

              if (n > m) {
                var f = floor(n / 10);
                if (f === 0) return match;
                if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);
                return match;
              }

              capture = captures[n - 1];
          }

          return capture === undefined ? '' : capture;
        });
      };
    }, {
      "../internals/to-object": 185
    }],
    88: [function (require, module, exports) {
      (function (global) {
        (function () {
          var check = function check(it) {
            return it && it.Math == Math && it;
          }; // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028


          module.exports = // eslint-disable-next-line es/no-global-this -- safe
          check(typeof globalThis == 'object' && globalThis) || check(typeof window == 'object' && window) || // eslint-disable-next-line no-restricted-globals -- safe
          check(typeof self == 'object' && self) || check(typeof global == 'object' && global) || // eslint-disable-next-line no-new-func -- fallback
          function () {
            return this;
          }() || Function('return this')();
        }).call(this);
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    89: [function (require, module, exports) {
      var toObject = require('../internals/to-object');

      var hasOwnProperty = {}.hasOwnProperty;

      module.exports = Object.hasOwn || function hasOwn(it, key) {
        return hasOwnProperty.call(toObject(it), key);
      };
    }, {
      "../internals/to-object": 185
    }],
    90: [function (require, module, exports) {
      module.exports = {};
    }, {}],
    91: [function (require, module, exports) {
      var global = require('../internals/global');

      module.exports = function (a, b) {
        var console = global.console;

        if (console && console.error) {
          arguments.length === 1 ? console.error(a) : console.error(a, b);
        }
      };
    }, {
      "../internals/global": 88
    }],
    92: [function (require, module, exports) {
      var getBuiltIn = require('../internals/get-built-in');

      module.exports = getBuiltIn('document', 'documentElement');
    }, {
      "../internals/get-built-in": 82
    }],
    93: [function (require, module, exports) {
      var DESCRIPTORS = require('../internals/descriptors');

      var fails = require('../internals/fails');

      var createElement = require('../internals/document-create-element'); // Thank's IE8 for his funny defineProperty


      module.exports = !DESCRIPTORS && !fails(function () {
        // eslint-disable-next-line es/no-object-defineproperty -- requied for testing
        return Object.defineProperty(createElement('div'), 'a', {
          get: function get() {
            return 7;
          }
        }).a != 7;
      });
    }, {
      "../internals/descriptors": 61,
      "../internals/document-create-element": 62,
      "../internals/fails": 75
    }],
    94: [function (require, module, exports) {
      // IEEE754 conversions based on https://github.com/feross/ieee754
      var abs = Math.abs;
      var pow = Math.pow;
      var floor = Math.floor;
      var log = Math.log;
      var LN2 = Math.LN2;

      var pack = function pack(number, mantissaLength, bytes) {
        var buffer = new Array(bytes);
        var exponentLength = bytes * 8 - mantissaLength - 1;
        var eMax = (1 << exponentLength) - 1;
        var eBias = eMax >> 1;
        var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
        var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
        var index = 0;
        var exponent, mantissa, c;
        number = abs(number); // eslint-disable-next-line no-self-compare -- NaN check

        if (number != number || number === Infinity) {
          // eslint-disable-next-line no-self-compare -- NaN check
          mantissa = number != number ? 1 : 0;
          exponent = eMax;
        } else {
          exponent = floor(log(number) / LN2);

          if (number * (c = pow(2, -exponent)) < 1) {
            exponent--;
            c *= 2;
          }

          if (exponent + eBias >= 1) {
            number += rt / c;
          } else {
            number += rt * pow(2, 1 - eBias);
          }

          if (number * c >= 2) {
            exponent++;
            c /= 2;
          }

          if (exponent + eBias >= eMax) {
            mantissa = 0;
            exponent = eMax;
          } else if (exponent + eBias >= 1) {
            mantissa = (number * c - 1) * pow(2, mantissaLength);
            exponent = exponent + eBias;
          } else {
            mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
            exponent = 0;
          }
        }

        for (; mantissaLength >= 8; buffer[index++] = mantissa & 255, mantissa /= 256, mantissaLength -= 8) {
          ;
        }

        exponent = exponent << mantissaLength | mantissa;
        exponentLength += mantissaLength;

        for (; exponentLength > 0; buffer[index++] = exponent & 255, exponent /= 256, exponentLength -= 8) {
          ;
        }

        buffer[--index] |= sign * 128;
        return buffer;
      };

      var unpack = function unpack(buffer, mantissaLength) {
        var bytes = buffer.length;
        var exponentLength = bytes * 8 - mantissaLength - 1;
        var eMax = (1 << exponentLength) - 1;
        var eBias = eMax >> 1;
        var nBits = exponentLength - 7;
        var index = bytes - 1;
        var sign = buffer[index--];
        var exponent = sign & 127;
        var mantissa;
        sign >>= 7;

        for (; nBits > 0; exponent = exponent * 256 + buffer[index], index--, nBits -= 8) {
          ;
        }

        mantissa = exponent & (1 << -nBits) - 1;
        exponent >>= -nBits;
        nBits += mantissaLength;

        for (; nBits > 0; mantissa = mantissa * 256 + buffer[index], index--, nBits -= 8) {
          ;
        }

        if (exponent === 0) {
          exponent = 1 - eBias;
        } else if (exponent === eMax) {
          return mantissa ? NaN : sign ? -Infinity : Infinity;
        } else {
          mantissa = mantissa + pow(2, mantissaLength);
          exponent = exponent - eBias;
        }

        return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
      };

      module.exports = {
        pack: pack,
        unpack: unpack
      };
    }, {}],
    95: [function (require, module, exports) {
      var fails = require('../internals/fails');

      var classof = require('../internals/classof-raw');

      var split = ''.split; // fallback for non-array-like ES3 and non-enumerable old V8 strings

      module.exports = fails(function () {
        // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
        // eslint-disable-next-line no-prototype-builtins -- safe
        return !Object('z').propertyIsEnumerable(0);
      }) ? function (it) {
        return classof(it) == 'String' ? split.call(it, '') : Object(it);
      } : Object;
    }, {
      "../internals/classof-raw": 39,
      "../internals/fails": 75
    }],
    96: [function (require, module, exports) {
      var isObject = require('../internals/is-object');

      var setPrototypeOf = require('../internals/object-set-prototype-of'); // makes subclassing work correct for wrapped built-ins


      module.exports = function ($this, dummy, Wrapper) {
        var NewTarget, NewTargetPrototype;
        if ( // it can work only with native `setPrototypeOf`
        setPrototypeOf && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
        typeof (NewTarget = dummy.constructor) == 'function' && NewTarget !== Wrapper && isObject(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype) setPrototypeOf($this, NewTargetPrototype);
        return $this;
      };
    }, {
      "../internals/is-object": 104,
      "../internals/object-set-prototype-of": 144
    }],
    97: [function (require, module, exports) {
      var store = require('../internals/shared-store');

      var functionToString = Function.toString; // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper

      if (typeof store.inspectSource != 'function') {
        store.inspectSource = function (it) {
          return functionToString.call(it);
        };
      }

      module.exports = store.inspectSource;
    }, {
      "../internals/shared-store": 167
    }],
    98: [function (require, module, exports) {
      var hiddenKeys = require('../internals/hidden-keys');

      var isObject = require('../internals/is-object');

      var has = require('../internals/has');

      var defineProperty = require('../internals/object-define-property').f;

      var uid = require('../internals/uid');

      var FREEZING = require('../internals/freezing');

      var METADATA = uid('meta');
      var id = 0; // eslint-disable-next-line es/no-object-isextensible -- safe

      var isExtensible = Object.isExtensible || function () {
        return true;
      };

      var setMetadata = function setMetadata(it) {
        defineProperty(it, METADATA, {
          value: {
            objectID: 'O' + id++,
            // object ID
            weakData: {} // weak collections IDs

          }
        });
      };

      var fastKey = function fastKey(it, create) {
        // return a primitive with prefix
        if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;

        if (!has(it, METADATA)) {
          // can't set metadata to uncaught frozen object
          if (!isExtensible(it)) return 'F'; // not necessary to add metadata

          if (!create) return 'E'; // add missing metadata

          setMetadata(it); // return object ID
        }

        return it[METADATA].objectID;
      };

      var getWeakData = function getWeakData(it, create) {
        if (!has(it, METADATA)) {
          // can't set metadata to uncaught frozen object
          if (!isExtensible(it)) return true; // not necessary to add metadata

          if (!create) return false; // add missing metadata

          setMetadata(it); // return the store of weak collections IDs
        }

        return it[METADATA].weakData;
      }; // add metadata on freeze-family methods calling


      var onFreeze = function onFreeze(it) {
        if (FREEZING && meta.REQUIRED && isExtensible(it) && !has(it, METADATA)) setMetadata(it);
        return it;
      };

      var meta = module.exports = {
        REQUIRED: false,
        fastKey: fastKey,
        getWeakData: getWeakData,
        onFreeze: onFreeze
      };
      hiddenKeys[METADATA] = true;
    }, {
      "../internals/freezing": 78,
      "../internals/has": 89,
      "../internals/hidden-keys": 90,
      "../internals/is-object": 104,
      "../internals/object-define-property": 133,
      "../internals/uid": 194
    }],
    99: [function (require, module, exports) {
      var NATIVE_WEAK_MAP = require('../internals/native-weak-map');

      var global = require('../internals/global');

      var isObject = require('../internals/is-object');

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var objectHas = require('../internals/has');

      var shared = require('../internals/shared-store');

      var sharedKey = require('../internals/shared-key');

      var hiddenKeys = require('../internals/hidden-keys');

      var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
      var WeakMap = global.WeakMap;
      var set, get, has;

      var enforce = function enforce(it) {
        return has(it) ? get(it) : set(it, {});
      };

      var getterFor = function getterFor(TYPE) {
        return function (it) {
          var state;

          if (!isObject(it) || (state = get(it)).type !== TYPE) {
            throw TypeError('Incompatible receiver, ' + TYPE + ' required');
          }

          return state;
        };
      };

      if (NATIVE_WEAK_MAP || shared.state) {
        var store = shared.state || (shared.state = new WeakMap());
        var wmget = store.get;
        var wmhas = store.has;
        var wmset = store.set;

        set = function set(it, metadata) {
          if (wmhas.call(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
          metadata.facade = it;
          wmset.call(store, it, metadata);
          return metadata;
        };

        get = function get(it) {
          return wmget.call(store, it) || {};
        };

        has = function has(it) {
          return wmhas.call(store, it);
        };
      } else {
        var STATE = sharedKey('state');
        hiddenKeys[STATE] = true;

        set = function set(it, metadata) {
          if (objectHas(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
          metadata.facade = it;
          createNonEnumerableProperty(it, STATE, metadata);
          return metadata;
        };

        get = function get(it) {
          return objectHas(it, STATE) ? it[STATE] : {};
        };

        has = function has(it) {
          return objectHas(it, STATE);
        };
      }

      module.exports = {
        set: set,
        get: get,
        has: has,
        enforce: enforce,
        getterFor: getterFor
      };
    }, {
      "../internals/create-non-enumerable-property": 54,
      "../internals/global": 88,
      "../internals/has": 89,
      "../internals/hidden-keys": 90,
      "../internals/is-object": 104,
      "../internals/native-weak-map": 123,
      "../internals/shared-key": 166,
      "../internals/shared-store": 167
    }],
    100: [function (require, module, exports) {
      var wellKnownSymbol = require('../internals/well-known-symbol');

      var Iterators = require('../internals/iterators');

      var ITERATOR = wellKnownSymbol('iterator');
      var ArrayPrototype = Array.prototype; // check on default Array iterator

      module.exports = function (it) {
        return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
      };
    }, {
      "../internals/iterators": 111,
      "../internals/well-known-symbol": 197
    }],
    101: [function (require, module, exports) {
      var classof = require('../internals/classof-raw'); // `IsArray` abstract operation
      // https://tc39.es/ecma262/#sec-isarray
      // eslint-disable-next-line es/no-array-isarray -- safe


      module.exports = Array.isArray || function isArray(arg) {
        return classof(arg) == 'Array';
      };
    }, {
      "../internals/classof-raw": 39
    }],
    102: [function (require, module, exports) {
      var fails = require('../internals/fails');

      var replacement = /#|\.prototype\./;

      var isForced = function isForced(feature, detection) {
        var value = data[normalize(feature)];
        return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == 'function' ? fails(detection) : !!detection;
      };

      var normalize = isForced.normalize = function (string) {
        return String(string).replace(replacement, '.').toLowerCase();
      };

      var data = isForced.data = {};
      var NATIVE = isForced.NATIVE = 'N';
      var POLYFILL = isForced.POLYFILL = 'P';
      module.exports = isForced;
    }, {
      "../internals/fails": 75
    }],
    103: [function (require, module, exports) {
      var isObject = require('../internals/is-object');

      var floor = Math.floor; // `Number.isInteger` method implementation
      // https://tc39.es/ecma262/#sec-number.isinteger

      module.exports = function isInteger(it) {
        return !isObject(it) && isFinite(it) && floor(it) === it;
      };
    }, {
      "../internals/is-object": 104
    }],
    104: [function (require, module, exports) {
      module.exports = function (it) {
        return typeof it === 'object' ? it !== null : typeof it === 'function';
      };
    }, {}],
    105: [function (require, module, exports) {
      module.exports = false;
    }, {}],
    106: [function (require, module, exports) {
      var isObject = require('../internals/is-object');

      var classof = require('../internals/classof-raw');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var MATCH = wellKnownSymbol('match'); // `IsRegExp` abstract operation
      // https://tc39.es/ecma262/#sec-isregexp

      module.exports = function (it) {
        var isRegExp;
        return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
      };
    }, {
      "../internals/classof-raw": 39,
      "../internals/is-object": 104,
      "../internals/well-known-symbol": 197
    }],
    107: [function (require, module, exports) {
      var anObject = require('../internals/an-object');

      var isArrayIteratorMethod = require('../internals/is-array-iterator-method');

      var toLength = require('../internals/to-length');

      var bind = require('../internals/function-bind-context');

      var getIteratorMethod = require('../internals/get-iterator-method');

      var iteratorClose = require('../internals/iterator-close');

      var Result = function Result(stopped, result) {
        this.stopped = stopped;
        this.result = result;
      };

      module.exports = function (iterable, unboundFunction, options) {
        var that = options && options.that;
        var AS_ENTRIES = !!(options && options.AS_ENTRIES);
        var IS_ITERATOR = !!(options && options.IS_ITERATOR);
        var INTERRUPTED = !!(options && options.INTERRUPTED);
        var fn = bind(unboundFunction, that, 1 + AS_ENTRIES + INTERRUPTED);
        var iterator, iterFn, index, length, result, next, step;

        var stop = function stop(condition) {
          if (iterator) iteratorClose(iterator);
          return new Result(true, condition);
        };

        var callFn = function callFn(value) {
          if (AS_ENTRIES) {
            anObject(value);
            return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
          }

          return INTERRUPTED ? fn(value, stop) : fn(value);
        };

        if (IS_ITERATOR) {
          iterator = iterable;
        } else {
          iterFn = getIteratorMethod(iterable);
          if (typeof iterFn != 'function') throw TypeError('Target is not iterable'); // optimisation for array iterators

          if (isArrayIteratorMethod(iterFn)) {
            for (index = 0, length = toLength(iterable.length); length > index; index++) {
              result = callFn(iterable[index]);
              if (result && result instanceof Result) return result;
            }

            return new Result(false);
          }

          iterator = iterFn.call(iterable);
        }

        next = iterator.next;

        while (!(step = next.call(iterator)).done) {
          try {
            result = callFn(step.value);
          } catch (error) {
            iteratorClose(iterator);
            throw error;
          }

          if (typeof result == 'object' && result && result instanceof Result) return result;
        }

        return new Result(false);
      };
    }, {
      "../internals/an-object": 16,
      "../internals/function-bind-context": 79,
      "../internals/get-iterator-method": 83,
      "../internals/is-array-iterator-method": 100,
      "../internals/iterator-close": 108,
      "../internals/to-length": 184
    }],
    108: [function (require, module, exports) {
      var anObject = require('../internals/an-object');

      module.exports = function (iterator) {
        var returnMethod = iterator['return'];

        if (returnMethod !== undefined) {
          return anObject(returnMethod.call(iterator)).value;
        }
      };
    }, {
      "../internals/an-object": 16
    }],
    109: [function (require, module, exports) {
      'use strict';

      var path = require('../internals/path');

      var aFunction = require('../internals/a-function');

      var anObject = require('../internals/an-object');

      var create = require('../internals/object-create');

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var redefineAll = require('../internals/redefine-all');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var InternalStateModule = require('../internals/internal-state');

      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.get;
      var TO_STRING_TAG = wellKnownSymbol('toStringTag');

      var $return = function $return(value) {
        var iterator = getInternalState(this).iterator;
        var $$return = iterator['return'];
        return $$return === undefined ? {
          done: true,
          value: value
        } : anObject($$return.call(iterator, value));
      };

      var $throw = function $throw(value) {
        var iterator = getInternalState(this).iterator;
        var $$throw = iterator['throw'];
        if ($$throw === undefined) throw value;
        return $$throw.call(iterator, value);
      };

      module.exports = function (nextHandler, IS_ITERATOR) {
        var IteratorProxy = function Iterator(state) {
          state.next = aFunction(state.iterator.next);
          state.done = false;
          setInternalState(this, state);
        };

        IteratorProxy.prototype = redefineAll(create(path.Iterator.prototype), {
          next: function next() {
            var state = getInternalState(this);
            var result = state.done ? undefined : nextHandler.apply(state, arguments);
            return {
              done: state.done,
              value: result
            };
          },
          'return': $return,
          'throw': $throw
        });

        if (!IS_ITERATOR) {
          createNonEnumerableProperty(IteratorProxy.prototype, TO_STRING_TAG, 'Generator');
        }

        return IteratorProxy;
      };
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/create-non-enumerable-property": 54,
      "../internals/internal-state": 99,
      "../internals/object-create": 131,
      "../internals/path": 148,
      "../internals/redefine-all": 151,
      "../internals/well-known-symbol": 197
    }],
    110: [function (require, module, exports) {
      'use strict';

      var fails = require('../internals/fails');

      var getPrototypeOf = require('../internals/object-get-prototype-of');

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var has = require('../internals/has');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var IS_PURE = require('../internals/is-pure');

      var ITERATOR = wellKnownSymbol('iterator');
      var BUGGY_SAFARI_ITERATORS = false;

      var returnThis = function returnThis() {
        return this;
      }; // `%IteratorPrototype%` object
      // https://tc39.es/ecma262/#sec-%iteratorprototype%-object


      var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;
      /* eslint-disable es/no-array-prototype-keys -- safe */

      if ([].keys) {
        arrayIterator = [].keys(); // Safari 8 has buggy iterators w/o `next`

        if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;else {
          PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
          if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
        }
      }

      var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == undefined || fails(function () {
        var test = {}; // FF44- legacy iterators case

        return IteratorPrototype[ITERATOR].call(test) !== test;
      });
      if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {}; // `%IteratorPrototype%[@@iterator]()` method
      // https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator

      if ((!IS_PURE || NEW_ITERATOR_PROTOTYPE) && !has(IteratorPrototype, ITERATOR)) {
        createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
      }

      module.exports = {
        IteratorPrototype: IteratorPrototype,
        BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
      };
    }, {
      "../internals/create-non-enumerable-property": 54,
      "../internals/fails": 75,
      "../internals/has": 89,
      "../internals/is-pure": 105,
      "../internals/object-get-prototype-of": 138,
      "../internals/well-known-symbol": 197
    }],
    111: [function (require, module, exports) {
      arguments[4][90][0].apply(exports, arguments);
    }, {
      "dup": 90
    }],
    112: [function (require, module, exports) {
      'use strict';

      var anObject = require('../internals/an-object'); // `Map.prototype.emplace` method
      // https://github.com/thumbsupep/proposal-upsert


      module.exports = function emplace(key, handler) {
        var map = anObject(this);
        var value = map.has(key) && 'update' in handler ? handler.update(map.get(key), key, map) : handler.insert(key, map);
        map.set(key, value);
        return value;
      };
    }, {
      "../internals/an-object": 16
    }],
    113: [function (require, module, exports) {
      'use strict';

      var anObject = require('../internals/an-object'); // `Map.prototype.upsert` method
      // https://github.com/thumbsupep/proposal-upsert


      module.exports = function upsert(key, updateFn
      /* , insertFn */
      ) {
        var map = anObject(this);
        var insertFn = arguments.length > 2 ? arguments[2] : undefined;
        var value;

        if (typeof updateFn != 'function' && typeof insertFn != 'function') {
          throw TypeError('At least one callback required');
        }

        if (map.has(key)) {
          value = map.get(key);

          if (typeof updateFn == 'function') {
            value = updateFn(value);
            map.set(key, value);
          }
        } else if (typeof insertFn == 'function') {
          value = insertFn();
          map.set(key, value);
        }

        return value;
      };
    }, {
      "../internals/an-object": 16
    }],
    114: [function (require, module, exports) {
      // eslint-disable-next-line es/no-math-expm1 -- safe
      var $expm1 = Math.expm1;
      var exp = Math.exp; // `Math.expm1` method implementation
      // https://tc39.es/ecma262/#sec-math.expm1

      module.exports = !$expm1 // Old FF bug
      || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168 // Tor Browser bug
      || $expm1(-2e-17) != -2e-17 ? function expm1(x) {
        return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : exp(x) - 1;
      } : $expm1;
    }, {}],
    115: [function (require, module, exports) {
      var sign = require('../internals/math-sign');

      var abs = Math.abs;
      var pow = Math.pow;
      var EPSILON = pow(2, -52);
      var EPSILON32 = pow(2, -23);
      var MAX32 = pow(2, 127) * (2 - EPSILON32);
      var MIN32 = pow(2, -126);

      var roundTiesToEven = function roundTiesToEven(n) {
        return n + 1 / EPSILON - 1 / EPSILON;
      }; // `Math.fround` method implementation
      // https://tc39.es/ecma262/#sec-math.fround
      // eslint-disable-next-line es/no-math-fround -- safe


      module.exports = Math.fround || function fround(x) {
        var $abs = abs(x);
        var $sign = sign(x);
        var a, result;
        if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
        a = (1 + EPSILON32 / EPSILON) * $abs;
        result = a - (a - $abs); // eslint-disable-next-line no-self-compare -- NaN check

        if (result > MAX32 || result != result) return $sign * Infinity;
        return $sign * result;
      };
    }, {
      "../internals/math-sign": 118
    }],
    116: [function (require, module, exports) {
      var log = Math.log; // `Math.log1p` method implementation
      // https://tc39.es/ecma262/#sec-math.log1p
      // eslint-disable-next-line es/no-math-log1p -- safe

      module.exports = Math.log1p || function log1p(x) {
        return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : log(1 + x);
      };
    }, {}],
    117: [function (require, module, exports) {
      // `Math.scale` method implementation
      // https://rwaldron.github.io/proposal-math-extensions/
      module.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {
        if (arguments.length === 0
        /* eslint-disable no-self-compare -- NaN check */
        || x != x || inLow != inLow || inHigh != inHigh || outLow != outLow || outHigh != outHigh
        /* eslint-enable no-self-compare -- NaN check */
        ) return NaN;
        if (x === Infinity || x === -Infinity) return x;
        return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;
      };
    }, {}],
    118: [function (require, module, exports) {
      // `Math.sign` method implementation
      // https://tc39.es/ecma262/#sec-math.sign
      // eslint-disable-next-line es/no-math-sign -- safe
      module.exports = Math.sign || function sign(x) {
        // eslint-disable-next-line no-self-compare -- NaN check
        return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
      };
    }, {}],
    119: [function (require, module, exports) {
      var global = require('../internals/global');

      var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;

      var macrotask = require('../internals/task').set;

      var IS_IOS = require('../internals/engine-is-ios');

      var IS_WEBOS_WEBKIT = require('../internals/engine-is-webos-webkit');

      var IS_NODE = require('../internals/engine-is-node');

      var MutationObserver = global.MutationObserver || global.WebKitMutationObserver;
      var document = global.document;
      var process = global.process;
      var Promise = global.Promise; // Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`

      var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global, 'queueMicrotask');
      var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;
      var flush, head, last, notify, toggle, node, promise, then; // modern engines have queueMicrotask method

      if (!queueMicrotask) {
        flush = function flush() {
          var parent, fn;
          if (IS_NODE && (parent = process.domain)) parent.exit();

          while (head) {
            fn = head.fn;
            head = head.next;

            try {
              fn();
            } catch (error) {
              if (head) notify();else last = undefined;
              throw error;
            }
          }

          last = undefined;
          if (parent) parent.enter();
        }; // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
        // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898


        if (!IS_IOS && !IS_NODE && !IS_WEBOS_WEBKIT && MutationObserver && document) {
          toggle = true;
          node = document.createTextNode('');
          new MutationObserver(flush).observe(node, {
            characterData: true
          });

          notify = function notify() {
            node.data = toggle = !toggle;
          }; // environments with maybe non-completely correct, but existent Promise

        } else if (Promise && Promise.resolve) {
          // Promise.resolve without an argument throws an error in LG WebOS 2
          promise = Promise.resolve(undefined); // workaround of WebKit ~ iOS Safari 10.1 bug

          promise.constructor = Promise;
          then = promise.then;

          notify = function notify() {
            then.call(promise, flush);
          }; // Node.js without promises

        } else if (IS_NODE) {
          notify = function notify() {
            process.nextTick(flush);
          }; // for other environments - macrotask based on:
          // - setImmediate
          // - MessageChannel
          // - window.postMessag
          // - onreadystatechange
          // - setTimeout

        } else {
          notify = function notify() {
            // strange IE + webpack dev server bug - use .call(global)
            macrotask.call(global, flush);
          };
        }
      }

      module.exports = queueMicrotask || function (fn) {
        var task = {
          fn: fn,
          next: undefined
        };
        if (last) last.next = task;

        if (!head) {
          head = task;
          notify();
        }

        last = task;
      };
    }, {
      "../internals/engine-is-ios": 67,
      "../internals/engine-is-node": 68,
      "../internals/engine-is-webos-webkit": 69,
      "../internals/global": 88,
      "../internals/object-get-own-property-descriptor": 134,
      "../internals/task": 178
    }],
    120: [function (require, module, exports) {
      var global = require('../internals/global');

      module.exports = global.Promise;
    }, {
      "../internals/global": 88
    }],
    121: [function (require, module, exports) {
      /* eslint-disable es/no-symbol -- required for testing */
      var V8_VERSION = require('../internals/engine-v8-version');

      var fails = require('../internals/fails'); // eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing


      module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
        var symbol = Symbol(); // Chrome 38 Symbol has incorrect toString conversion
        // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances

        return !String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
        !Symbol.sham && V8_VERSION && V8_VERSION < 41;
      });
    }, {
      "../internals/engine-v8-version": 71,
      "../internals/fails": 75
    }],
    122: [function (require, module, exports) {
      var fails = require('../internals/fails');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var IS_PURE = require('../internals/is-pure');

      var ITERATOR = wellKnownSymbol('iterator');
      module.exports = !fails(function () {
        var url = new URL('b?a=1&b=2&c=3', 'http://a');
        var searchParams = url.searchParams;
        var result = '';
        url.pathname = 'c%20d';
        searchParams.forEach(function (value, key) {
          searchParams['delete']('b');
          result += key + value;
        });
        return IS_PURE && !url.toJSON || !searchParams.sort || url.href !== 'http://a/c%20d?a=1&c=3' || searchParams.get('c') !== '3' || String(new URLSearchParams('?a=1')) !== 'a=1' || !searchParams[ITERATOR] // throws in Edge
        || new URL('https://a@b').username !== 'a' || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b' // not punycoded in Edge
        || new URL('http://тест').host !== 'xn--e1aybc' // not escaped in Chrome 62-
        || new URL('http://a#б').hash !== '#%D0%B1' // fails in Chrome 66-
        || result !== 'a1c3' // throws in Safari
        || new URL('http://x', undefined).host !== 'x';
      });
    }, {
      "../internals/fails": 75,
      "../internals/is-pure": 105,
      "../internals/well-known-symbol": 197
    }],
    123: [function (require, module, exports) {
      var global = require('../internals/global');

      var inspectSource = require('../internals/inspect-source');

      var WeakMap = global.WeakMap;
      module.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));
    }, {
      "../internals/global": 88,
      "../internals/inspect-source": 97
    }],
    124: [function (require, module, exports) {
      'use strict';

      var aFunction = require('../internals/a-function');

      var PromiseCapability = function PromiseCapability(C) {
        var resolve, reject;
        this.promise = new C(function ($$resolve, $$reject) {
          if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
          resolve = $$resolve;
          reject = $$reject;
        });
        this.resolve = aFunction(resolve);
        this.reject = aFunction(reject);
      }; // `NewPromiseCapability` abstract operation
      // https://tc39.es/ecma262/#sec-newpromisecapability


      module.exports.f = function (C) {
        return new PromiseCapability(C);
      };
    }, {
      "../internals/a-function": 11
    }],
    125: [function (require, module, exports) {
      var isRegExp = require('../internals/is-regexp');

      module.exports = function (it) {
        if (isRegExp(it)) {
          throw TypeError("The method doesn't accept regular expressions");
        }

        return it;
      };
    }, {
      "../internals/is-regexp": 106
    }],
    126: [function (require, module, exports) {
      var global = require('../internals/global');

      var globalIsFinite = global.isFinite; // `Number.isFinite` method
      // https://tc39.es/ecma262/#sec-number.isfinite
      // eslint-disable-next-line es/no-number-isfinite -- safe

      module.exports = Number.isFinite || function isFinite(it) {
        return typeof it == 'number' && globalIsFinite(it);
      };
    }, {
      "../internals/global": 88
    }],
    127: [function (require, module, exports) {
      var global = require('../internals/global');

      var trim = require('../internals/string-trim').trim;

      var whitespaces = require('../internals/whitespaces');

      var $parseFloat = global.parseFloat;
      var FORCED = 1 / $parseFloat(whitespaces + '-0') !== -Infinity; // `parseFloat` method
      // https://tc39.es/ecma262/#sec-parsefloat-string

      module.exports = FORCED ? function parseFloat(string) {
        var trimmedString = trim(String(string));
        var result = $parseFloat(trimmedString);
        return result === 0 && trimmedString.charAt(0) == '-' ? -0 : result;
      } : $parseFloat;
    }, {
      "../internals/global": 88,
      "../internals/string-trim": 177,
      "../internals/whitespaces": 198
    }],
    128: [function (require, module, exports) {
      var global = require('../internals/global');

      var trim = require('../internals/string-trim').trim;

      var whitespaces = require('../internals/whitespaces');

      var $parseInt = global.parseInt;
      var hex = /^[+-]?0[Xx]/;
      var FORCED = $parseInt(whitespaces + '08') !== 8 || $parseInt(whitespaces + '0x16') !== 22; // `parseInt` method
      // https://tc39.es/ecma262/#sec-parseint-string-radix

      module.exports = FORCED ? function parseInt(string, radix) {
        var S = trim(String(string));
        return $parseInt(S, radix >>> 0 || (hex.test(S) ? 16 : 10));
      } : $parseInt;
    }, {
      "../internals/global": 88,
      "../internals/string-trim": 177,
      "../internals/whitespaces": 198
    }],
    129: [function (require, module, exports) {
      'use strict';

      var InternalStateModule = require('../internals/internal-state');

      var createIteratorConstructor = require('../internals/create-iterator-constructor');

      var isObject = require('../internals/is-object');

      var defineProperties = require('../internals/object-define-properties');

      var DESCRIPTORS = require('../internals/descriptors');

      var INCORRECT_RANGE = 'Incorrect Number.range arguments';
      var NUMERIC_RANGE_ITERATOR = 'NumericRangeIterator';
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(NUMERIC_RANGE_ITERATOR);
      var $RangeIterator = createIteratorConstructor(function NumericRangeIterator(start, end, option, type, zero, one) {
        if (typeof start != type || end !== Infinity && end !== -Infinity && typeof end != type) {
          throw new TypeError(INCORRECT_RANGE);
        }

        if (start === Infinity || start === -Infinity) {
          throw new RangeError(INCORRECT_RANGE);
        }

        var ifIncrease = end > start;
        var inclusiveEnd = false;
        var step;

        if (option === undefined) {
          step = undefined;
        } else if (isObject(option)) {
          step = option.step;
          inclusiveEnd = !!option.inclusive;
        } else if (typeof option == type) {
          step = option;
        } else {
          throw new TypeError(INCORRECT_RANGE);
        }

        if (step == null) {
          step = ifIncrease ? one : -one;
        }

        if (typeof step != type) {
          throw new TypeError(INCORRECT_RANGE);
        }

        if (step === Infinity || step === -Infinity || step === zero && start !== end) {
          throw new RangeError(INCORRECT_RANGE);
        } // eslint-disable-next-line no-self-compare -- NaN check


        var hitsEnd = start != start || end != end || step != step || end > start !== step > zero;
        setInternalState(this, {
          type: NUMERIC_RANGE_ITERATOR,
          start: start,
          end: end,
          step: step,
          inclusiveEnd: inclusiveEnd,
          hitsEnd: hitsEnd,
          currentCount: zero,
          zero: zero
        });

        if (!DESCRIPTORS) {
          this.start = start;
          this.end = end;
          this.step = step;
          this.inclusive = inclusiveEnd;
        }
      }, NUMERIC_RANGE_ITERATOR, function next() {
        var state = getInternalState(this);
        if (state.hitsEnd) return {
          value: undefined,
          done: true
        };
        var start = state.start;
        var end = state.end;
        var step = state.step;
        var currentYieldingValue = start + step * state.currentCount++;
        if (currentYieldingValue === end) state.hitsEnd = true;
        var inclusiveEnd = state.inclusiveEnd;
        var endCondition;

        if (end > start) {
          endCondition = inclusiveEnd ? currentYieldingValue > end : currentYieldingValue >= end;
        } else {
          endCondition = inclusiveEnd ? end > currentYieldingValue : end >= currentYieldingValue;
        }

        if (endCondition) {
          return {
            value: undefined,
            done: state.hitsEnd = true
          };
        }

        return {
          value: currentYieldingValue,
          done: false
        };
      });

      var getter = function getter(fn) {
        return {
          get: fn,
          set: function set() {
            /* empty */
          },
          configurable: true,
          enumerable: false
        };
      };

      if (DESCRIPTORS) {
        defineProperties($RangeIterator.prototype, {
          start: getter(function () {
            return getInternalState(this).start;
          }),
          end: getter(function () {
            return getInternalState(this).end;
          }),
          inclusive: getter(function () {
            return getInternalState(this).inclusiveEnd;
          }),
          step: getter(function () {
            return getInternalState(this).step;
          })
        });
      }

      module.exports = $RangeIterator;
    }, {
      "../internals/create-iterator-constructor": 53,
      "../internals/descriptors": 61,
      "../internals/internal-state": 99,
      "../internals/is-object": 104,
      "../internals/object-define-properties": 132
    }],
    130: [function (require, module, exports) {
      'use strict';

      var DESCRIPTORS = require('../internals/descriptors');

      var fails = require('../internals/fails');

      var objectKeys = require('../internals/object-keys');

      var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');

      var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');

      var toObject = require('../internals/to-object');

      var IndexedObject = require('../internals/indexed-object'); // eslint-disable-next-line es/no-object-assign -- safe


      var $assign = Object.assign; // eslint-disable-next-line es/no-object-defineproperty -- required for testing

      var defineProperty = Object.defineProperty; // `Object.assign` method
      // https://tc39.es/ecma262/#sec-object.assign

      module.exports = !$assign || fails(function () {
        // should have correct order of operations (Edge bug)
        if (DESCRIPTORS && $assign({
          b: 1
        }, $assign(defineProperty({}, 'a', {
          enumerable: true,
          get: function get() {
            defineProperty(this, 'b', {
              value: 3,
              enumerable: false
            });
          }
        }), {
          b: 2
        })).b !== 1) return true; // should work with symbols and should have deterministic property order (V8 bug)

        var A = {};
        var B = {}; // eslint-disable-next-line es/no-symbol -- safe

        var symbol = Symbol();
        var alphabet = 'abcdefghijklmnopqrst';
        A[symbol] = 7;
        alphabet.split('').forEach(function (chr) {
          B[chr] = chr;
        });
        return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;
      }) ? function assign(target, source) {
        // eslint-disable-line no-unused-vars -- required for `.length`
        var T = toObject(target);
        var argumentsLength = arguments.length;
        var index = 1;
        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
        var propertyIsEnumerable = propertyIsEnumerableModule.f;

        while (argumentsLength > index) {
          var S = IndexedObject(arguments[index++]);
          var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
          var length = keys.length;
          var j = 0;
          var key;

          while (length > j) {
            key = keys[j++];
            if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];
          }
        }

        return T;
      } : $assign;
    }, {
      "../internals/descriptors": 61,
      "../internals/fails": 75,
      "../internals/indexed-object": 95,
      "../internals/object-get-own-property-symbols": 137,
      "../internals/object-keys": 141,
      "../internals/object-property-is-enumerable": 142,
      "../internals/to-object": 185
    }],
    131: [function (require, module, exports) {
      var anObject = require('../internals/an-object');

      var defineProperties = require('../internals/object-define-properties');

      var enumBugKeys = require('../internals/enum-bug-keys');

      var hiddenKeys = require('../internals/hidden-keys');

      var html = require('../internals/html');

      var documentCreateElement = require('../internals/document-create-element');

      var sharedKey = require('../internals/shared-key');

      var GT = '>';
      var LT = '<';
      var PROTOTYPE = 'prototype';
      var SCRIPT = 'script';
      var IE_PROTO = sharedKey('IE_PROTO');

      var EmptyConstructor = function EmptyConstructor() {
        /* empty */
      };

      var scriptTag = function scriptTag(content) {
        return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
      }; // Create object with fake `null` prototype: use ActiveX Object with cleared prototype


      var NullProtoObjectViaActiveX = function NullProtoObjectViaActiveX(activeXDocument) {
        activeXDocument.write(scriptTag(''));
        activeXDocument.close();
        var temp = activeXDocument.parentWindow.Object;
        activeXDocument = null; // avoid memory leak

        return temp;
      }; // Create object with fake `null` prototype: use iframe Object with cleared prototype


      var NullProtoObjectViaIFrame = function NullProtoObjectViaIFrame() {
        // Thrash, waste and sodomy: IE GC bug
        var iframe = documentCreateElement('iframe');
        var JS = 'java' + SCRIPT + ':';
        var iframeDocument;
        iframe.style.display = 'none';
        html.appendChild(iframe); // https://github.com/zloirock/core-js/issues/475

        iframe.src = String(JS);
        iframeDocument = iframe.contentWindow.document;
        iframeDocument.open();
        iframeDocument.write(scriptTag('document.F=Object'));
        iframeDocument.close();
        return iframeDocument.F;
      }; // Check for document.domain and active x support
      // No need to use active x approach when document.domain is not set
      // see https://github.com/es-shims/es5-shim/issues/150
      // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
      // avoid IE GC bug


      var activeXDocument;

      var _NullProtoObject = function NullProtoObject() {
        try {
          /* global ActiveXObject -- old IE */
          activeXDocument = document.domain && new ActiveXObject('htmlfile');
        } catch (error) {
          /* ignore */
        }

        _NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
        var length = enumBugKeys.length;

        while (length--) {
          delete _NullProtoObject[PROTOTYPE][enumBugKeys[length]];
        }

        return _NullProtoObject();
      };

      hiddenKeys[IE_PROTO] = true; // `Object.create` method
      // https://tc39.es/ecma262/#sec-object.create

      module.exports = Object.create || function create(O, Properties) {
        var result;

        if (O !== null) {
          EmptyConstructor[PROTOTYPE] = anObject(O);
          result = new EmptyConstructor();
          EmptyConstructor[PROTOTYPE] = null; // add "__proto__" for Object.getPrototypeOf polyfill

          result[IE_PROTO] = O;
        } else result = _NullProtoObject();

        return Properties === undefined ? result : defineProperties(result, Properties);
      };
    }, {
      "../internals/an-object": 16,
      "../internals/document-create-element": 62,
      "../internals/enum-bug-keys": 73,
      "../internals/hidden-keys": 90,
      "../internals/html": 92,
      "../internals/object-define-properties": 132,
      "../internals/shared-key": 166
    }],
    132: [function (require, module, exports) {
      var DESCRIPTORS = require('../internals/descriptors');

      var definePropertyModule = require('../internals/object-define-property');

      var anObject = require('../internals/an-object');

      var objectKeys = require('../internals/object-keys'); // `Object.defineProperties` method
      // https://tc39.es/ecma262/#sec-object.defineproperties
      // eslint-disable-next-line es/no-object-defineproperties -- safe


      module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
        anObject(O);
        var keys = objectKeys(Properties);
        var length = keys.length;
        var index = 0;
        var key;

        while (length > index) {
          definePropertyModule.f(O, key = keys[index++], Properties[key]);
        }

        return O;
      };
    }, {
      "../internals/an-object": 16,
      "../internals/descriptors": 61,
      "../internals/object-define-property": 133,
      "../internals/object-keys": 141
    }],
    133: [function (require, module, exports) {
      var DESCRIPTORS = require('../internals/descriptors');

      var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');

      var anObject = require('../internals/an-object');

      var toPrimitive = require('../internals/to-primitive'); // eslint-disable-next-line es/no-object-defineproperty -- safe


      var $defineProperty = Object.defineProperty; // `Object.defineProperty` method
      // https://tc39.es/ecma262/#sec-object.defineproperty

      exports.f = DESCRIPTORS ? $defineProperty : function defineProperty(O, P, Attributes) {
        anObject(O);
        P = toPrimitive(P, true);
        anObject(Attributes);
        if (IE8_DOM_DEFINE) try {
          return $defineProperty(O, P, Attributes);
        } catch (error) {
          /* empty */
        }
        if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
        if ('value' in Attributes) O[P] = Attributes.value;
        return O;
      };
    }, {
      "../internals/an-object": 16,
      "../internals/descriptors": 61,
      "../internals/ie8-dom-define": 93,
      "../internals/to-primitive": 188
    }],
    134: [function (require, module, exports) {
      var DESCRIPTORS = require('../internals/descriptors');

      var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');

      var createPropertyDescriptor = require('../internals/create-property-descriptor');

      var toIndexedObject = require('../internals/to-indexed-object');

      var toPrimitive = require('../internals/to-primitive');

      var has = require('../internals/has');

      var IE8_DOM_DEFINE = require('../internals/ie8-dom-define'); // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe


      var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // `Object.getOwnPropertyDescriptor` method
      // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor

      exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
        O = toIndexedObject(O);
        P = toPrimitive(P, true);
        if (IE8_DOM_DEFINE) try {
          return $getOwnPropertyDescriptor(O, P);
        } catch (error) {
          /* empty */
        }
        if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
      };
    }, {
      "../internals/create-property-descriptor": 55,
      "../internals/descriptors": 61,
      "../internals/has": 89,
      "../internals/ie8-dom-define": 93,
      "../internals/object-property-is-enumerable": 142,
      "../internals/to-indexed-object": 182,
      "../internals/to-primitive": 188
    }],
    135: [function (require, module, exports) {
      /* eslint-disable es/no-object-getownpropertynames -- safe */
      var toIndexedObject = require('../internals/to-indexed-object');

      var $getOwnPropertyNames = require('../internals/object-get-own-property-names').f;

      var toString = {}.toString;
      var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

      var getWindowNames = function getWindowNames(it) {
        try {
          return $getOwnPropertyNames(it);
        } catch (error) {
          return windowNames.slice();
        }
      }; // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window


      module.exports.f = function getOwnPropertyNames(it) {
        return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : $getOwnPropertyNames(toIndexedObject(it));
      };
    }, {
      "../internals/object-get-own-property-names": 136,
      "../internals/to-indexed-object": 182
    }],
    136: [function (require, module, exports) {
      var internalObjectKeys = require('../internals/object-keys-internal');

      var enumBugKeys = require('../internals/enum-bug-keys');

      var hiddenKeys = enumBugKeys.concat('length', 'prototype'); // `Object.getOwnPropertyNames` method
      // https://tc39.es/ecma262/#sec-object.getownpropertynames
      // eslint-disable-next-line es/no-object-getownpropertynames -- safe

      exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
        return internalObjectKeys(O, hiddenKeys);
      };
    }, {
      "../internals/enum-bug-keys": 73,
      "../internals/object-keys-internal": 140
    }],
    137: [function (require, module, exports) {
      // eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
      exports.f = Object.getOwnPropertySymbols;
    }, {}],
    138: [function (require, module, exports) {
      var has = require('../internals/has');

      var toObject = require('../internals/to-object');

      var sharedKey = require('../internals/shared-key');

      var CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');

      var IE_PROTO = sharedKey('IE_PROTO');
      var ObjectPrototype = Object.prototype; // `Object.getPrototypeOf` method
      // https://tc39.es/ecma262/#sec-object.getprototypeof
      // eslint-disable-next-line es/no-object-getprototypeof -- safe

      module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
        O = toObject(O);
        if (has(O, IE_PROTO)) return O[IE_PROTO];

        if (typeof O.constructor == 'function' && O instanceof O.constructor) {
          return O.constructor.prototype;
        }

        return O instanceof Object ? ObjectPrototype : null;
      };
    }, {
      "../internals/correct-prototype-getter": 51,
      "../internals/has": 89,
      "../internals/shared-key": 166,
      "../internals/to-object": 185
    }],
    139: [function (require, module, exports) {
      'use strict';

      var InternalStateModule = require('../internals/internal-state');

      var createIteratorConstructor = require('../internals/create-iterator-constructor');

      var has = require('../internals/has');

      var objectKeys = require('../internals/object-keys');

      var toObject = require('../internals/to-object');

      var OBJECT_ITERATOR = 'Object Iterator';
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(OBJECT_ITERATOR);
      module.exports = createIteratorConstructor(function ObjectIterator(source, mode) {
        var object = toObject(source);
        setInternalState(this, {
          type: OBJECT_ITERATOR,
          mode: mode,
          object: object,
          keys: objectKeys(object),
          index: 0
        });
      }, 'Object', function next() {
        var state = getInternalState(this);
        var keys = state.keys;

        while (true) {
          if (keys === null || state.index >= keys.length) {
            state.object = state.keys = null;
            return {
              value: undefined,
              done: true
            };
          }

          var key = keys[state.index++];
          var object = state.object;
          if (!has(object, key)) continue;

          switch (state.mode) {
            case 'keys':
              return {
                value: key,
                done: false
              };

            case 'values':
              return {
                value: object[key],
                done: false
              };
          }
          /* entries */


          return {
            value: [key, object[key]],
            done: false
          };
        }
      });
    }, {
      "../internals/create-iterator-constructor": 53,
      "../internals/has": 89,
      "../internals/internal-state": 99,
      "../internals/object-keys": 141,
      "../internals/to-object": 185
    }],
    140: [function (require, module, exports) {
      var has = require('../internals/has');

      var toIndexedObject = require('../internals/to-indexed-object');

      var indexOf = require('../internals/array-includes').indexOf;

      var hiddenKeys = require('../internals/hidden-keys');

      module.exports = function (object, names) {
        var O = toIndexedObject(object);
        var i = 0;
        var result = [];
        var key;

        for (key in O) {
          !has(hiddenKeys, key) && has(O, key) && result.push(key);
        } // Don't enum bug & hidden keys


        while (names.length > i) {
          if (has(O, key = names[i++])) {
            ~indexOf(result, key) || result.push(key);
          }
        }

        return result;
      };
    }, {
      "../internals/array-includes": 24,
      "../internals/has": 89,
      "../internals/hidden-keys": 90,
      "../internals/to-indexed-object": 182
    }],
    141: [function (require, module, exports) {
      var internalObjectKeys = require('../internals/object-keys-internal');

      var enumBugKeys = require('../internals/enum-bug-keys'); // `Object.keys` method
      // https://tc39.es/ecma262/#sec-object.keys
      // eslint-disable-next-line es/no-object-keys -- safe


      module.exports = Object.keys || function keys(O) {
        return internalObjectKeys(O, enumBugKeys);
      };
    }, {
      "../internals/enum-bug-keys": 73,
      "../internals/object-keys-internal": 140
    }],
    142: [function (require, module, exports) {
      'use strict';

      var $propertyIsEnumerable = {}.propertyIsEnumerable; // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe

      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor; // Nashorn ~ JDK8 bug

      var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({
        1: 2
      }, 1); // `Object.prototype.propertyIsEnumerable` method implementation
      // https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable

      exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
        var descriptor = getOwnPropertyDescriptor(this, V);
        return !!descriptor && descriptor.enumerable;
      } : $propertyIsEnumerable;
    }, {}],
    143: [function (require, module, exports) {
      'use strict';

      var IS_PURE = require('../internals/is-pure');

      var global = require('../internals/global');

      var fails = require('../internals/fails');

      var WEBKIT = require('../internals/engine-webkit-version'); // Forced replacement object prototype accessors methods


      module.exports = IS_PURE || !fails(function () {
        // This feature detection crashes old WebKit
        // https://github.com/zloirock/core-js/issues/232
        if (WEBKIT && WEBKIT < 535) return;
        var key = Math.random(); // In FF throws only define methods
        // eslint-disable-next-line no-undef, no-useless-call -- required for testing

        __defineSetter__.call(null, key, function () {
          /* empty */
        });

        delete global[key];
      });
    }, {
      "../internals/engine-webkit-version": 72,
      "../internals/fails": 75,
      "../internals/global": 88,
      "../internals/is-pure": 105
    }],
    144: [function (require, module, exports) {
      /* eslint-disable no-proto -- safe */
      var anObject = require('../internals/an-object');

      var aPossiblePrototype = require('../internals/a-possible-prototype'); // `Object.setPrototypeOf` method
      // https://tc39.es/ecma262/#sec-object.setprototypeof
      // Works with __proto__ only. Old v8 can't work with null proto objects.
      // eslint-disable-next-line es/no-object-setprototypeof -- safe


      module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
        var CORRECT_SETTER = false;
        var test = {};
        var setter;

        try {
          // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
          setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
          setter.call(test, []);
          CORRECT_SETTER = test instanceof Array;
        } catch (error) {
          /* empty */
        }

        return function setPrototypeOf(O, proto) {
          anObject(O);
          aPossiblePrototype(proto);
          if (CORRECT_SETTER) setter.call(O, proto);else O.__proto__ = proto;
          return O;
        };
      }() : undefined);
    }, {
      "../internals/a-possible-prototype": 12,
      "../internals/an-object": 16
    }],
    145: [function (require, module, exports) {
      var DESCRIPTORS = require('../internals/descriptors');

      var objectKeys = require('../internals/object-keys');

      var toIndexedObject = require('../internals/to-indexed-object');

      var propertyIsEnumerable = require('../internals/object-property-is-enumerable').f; // `Object.{ entries, values }` methods implementation


      var createMethod = function createMethod(TO_ENTRIES) {
        return function (it) {
          var O = toIndexedObject(it);
          var keys = objectKeys(O);
          var length = keys.length;
          var i = 0;
          var result = [];
          var key;

          while (length > i) {
            key = keys[i++];

            if (!DESCRIPTORS || propertyIsEnumerable.call(O, key)) {
              result.push(TO_ENTRIES ? [key, O[key]] : O[key]);
            }
          }

          return result;
        };
      };

      module.exports = {
        // `Object.entries` method
        // https://tc39.es/ecma262/#sec-object.entries
        entries: createMethod(true),
        // `Object.values` method
        // https://tc39.es/ecma262/#sec-object.values
        values: createMethod(false)
      };
    }, {
      "../internals/descriptors": 61,
      "../internals/object-keys": 141,
      "../internals/object-property-is-enumerable": 142,
      "../internals/to-indexed-object": 182
    }],
    146: [function (require, module, exports) {
      'use strict';

      var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');

      var classof = require('../internals/classof'); // `Object.prototype.toString` method implementation
      // https://tc39.es/ecma262/#sec-object.prototype.tostring


      module.exports = TO_STRING_TAG_SUPPORT ? {}.toString : function toString() {
        return '[object ' + classof(this) + ']';
      };
    }, {
      "../internals/classof": 40,
      "../internals/to-string-tag-support": 189
    }],
    147: [function (require, module, exports) {
      var getBuiltIn = require('../internals/get-built-in');

      var getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');

      var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');

      var anObject = require('../internals/an-object'); // all object keys, includes non-enumerable and symbols


      module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
        var keys = getOwnPropertyNamesModule.f(anObject(it));
        var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
        return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
      };
    }, {
      "../internals/an-object": 16,
      "../internals/get-built-in": 82,
      "../internals/object-get-own-property-names": 136,
      "../internals/object-get-own-property-symbols": 137
    }],
    148: [function (require, module, exports) {
      var global = require('../internals/global');

      module.exports = global;
    }, {
      "../internals/global": 88
    }],
    149: [function (require, module, exports) {
      module.exports = function (exec) {
        try {
          return {
            error: false,
            value: exec()
          };
        } catch (error) {
          return {
            error: true,
            value: error
          };
        }
      };
    }, {}],
    150: [function (require, module, exports) {
      var anObject = require('../internals/an-object');

      var isObject = require('../internals/is-object');

      var newPromiseCapability = require('../internals/new-promise-capability');

      module.exports = function (C, x) {
        anObject(C);
        if (isObject(x) && x.constructor === C) return x;
        var promiseCapability = newPromiseCapability.f(C);
        var resolve = promiseCapability.resolve;
        resolve(x);
        return promiseCapability.promise;
      };
    }, {
      "../internals/an-object": 16,
      "../internals/is-object": 104,
      "../internals/new-promise-capability": 124
    }],
    151: [function (require, module, exports) {
      var redefine = require('../internals/redefine');

      module.exports = function (target, src, options) {
        for (var key in src) {
          redefine(target, key, src[key], options);
        }

        return target;
      };
    }, {
      "../internals/redefine": 152
    }],
    152: [function (require, module, exports) {
      var global = require('../internals/global');

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var has = require('../internals/has');

      var setGlobal = require('../internals/set-global');

      var inspectSource = require('../internals/inspect-source');

      var InternalStateModule = require('../internals/internal-state');

      var getInternalState = InternalStateModule.get;
      var enforceInternalState = InternalStateModule.enforce;
      var TEMPLATE = String(String).split('String');
      (module.exports = function (O, key, value, options) {
        var unsafe = options ? !!options.unsafe : false;
        var simple = options ? !!options.enumerable : false;
        var noTargetGet = options ? !!options.noTargetGet : false;
        var state;

        if (typeof value == 'function') {
          if (typeof key == 'string' && !has(value, 'name')) {
            createNonEnumerableProperty(value, 'name', key);
          }

          state = enforceInternalState(value);

          if (!state.source) {
            state.source = TEMPLATE.join(typeof key == 'string' ? key : '');
          }
        }

        if (O === global) {
          if (simple) O[key] = value;else setGlobal(key, value);
          return;
        } else if (!unsafe) {
          delete O[key];
        } else if (!noTargetGet && O[key]) {
          simple = true;
        }

        if (simple) O[key] = value;else createNonEnumerableProperty(O, key, value); // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
      })(Function.prototype, 'toString', function toString() {
        return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
      });
    }, {
      "../internals/create-non-enumerable-property": 54,
      "../internals/global": 88,
      "../internals/has": 89,
      "../internals/inspect-source": 97,
      "../internals/internal-state": 99,
      "../internals/set-global": 163
    }],
    153: [function (require, module, exports) {
      // TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
      var Map = require('../modules/es.map');

      var WeakMap = require('../modules/es.weak-map');

      var shared = require('../internals/shared');

      var metadata = shared('metadata');
      var store = metadata.store || (metadata.store = new WeakMap());

      var getOrCreateMetadataMap = function getOrCreateMetadataMap(target, targetKey, create) {
        var targetMetadata = store.get(target);

        if (!targetMetadata) {
          if (!create) return;
          store.set(target, targetMetadata = new Map());
        }

        var keyMetadata = targetMetadata.get(targetKey);

        if (!keyMetadata) {
          if (!create) return;
          targetMetadata.set(targetKey, keyMetadata = new Map());
        }

        return keyMetadata;
      };

      var ordinaryHasOwnMetadata = function ordinaryHasOwnMetadata(MetadataKey, O, P) {
        var metadataMap = getOrCreateMetadataMap(O, P, false);
        return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
      };

      var ordinaryGetOwnMetadata = function ordinaryGetOwnMetadata(MetadataKey, O, P) {
        var metadataMap = getOrCreateMetadataMap(O, P, false);
        return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
      };

      var ordinaryDefineOwnMetadata = function ordinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
        getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
      };

      var ordinaryOwnMetadataKeys = function ordinaryOwnMetadataKeys(target, targetKey) {
        var metadataMap = getOrCreateMetadataMap(target, targetKey, false);
        var keys = [];
        if (metadataMap) metadataMap.forEach(function (_, key) {
          keys.push(key);
        });
        return keys;
      };

      var toMetadataKey = function toMetadataKey(it) {
        return it === undefined || typeof it == 'symbol' ? it : String(it);
      };

      module.exports = {
        store: store,
        getMap: getOrCreateMetadataMap,
        has: ordinaryHasOwnMetadata,
        get: ordinaryGetOwnMetadata,
        set: ordinaryDefineOwnMetadata,
        keys: ordinaryOwnMetadataKeys,
        toKey: toMetadataKey
      };
    }, {
      "../internals/shared": 168,
      "../modules/es.map": 248,
      "../modules/es.weak-map": 415
    }],
    154: [function (require, module, exports) {
      var classof = require('./classof-raw');

      var regexpExec = require('./regexp-exec'); // `RegExpExec` abstract operation
      // https://tc39.es/ecma262/#sec-regexpexec


      module.exports = function (R, S) {
        var exec = R.exec;

        if (typeof exec === 'function') {
          var result = exec.call(R, S);

          if (typeof result !== 'object') {
            throw TypeError('RegExp exec method returned something other than an Object or null');
          }

          return result;
        }

        if (classof(R) !== 'RegExp') {
          throw TypeError('RegExp#exec called on incompatible receiver');
        }

        return regexpExec.call(R, S);
      };
    }, {
      "./classof-raw": 39,
      "./regexp-exec": 155
    }],
    155: [function (require, module, exports) {
      'use strict';
      /* eslint-disable regexp/no-assertion-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */

      /* eslint-disable regexp/no-useless-quantifier -- testing */

      var regexpFlags = require('../internals/regexp-flags');

      var stickyHelpers = require('../internals/regexp-sticky-helpers');

      var shared = require('../internals/shared');

      var create = require('../internals/object-create');

      var getInternalState = require('../internals/internal-state').get;

      var UNSUPPORTED_DOT_ALL = require('../internals/regexp-unsupported-dot-all');

      var UNSUPPORTED_NCG = require('../internals/regexp-unsupported-ncg');

      var nativeExec = RegExp.prototype.exec;
      var nativeReplace = shared('native-string-replace', String.prototype.replace);
      var patchedExec = nativeExec;

      var UPDATES_LAST_INDEX_WRONG = function () {
        var re1 = /a/;
        var re2 = /b*/g;
        nativeExec.call(re1, 'a');
        nativeExec.call(re2, 'a');
        return re1.lastIndex !== 0 || re2.lastIndex !== 0;
      }();

      var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y || stickyHelpers.BROKEN_CARET; // nonparticipating capturing group, copied from es5-shim's String#split patch.

      var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;
      var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;

      if (PATCH) {
        // eslint-disable-next-line max-statements -- TODO
        patchedExec = function exec(str) {
          var re = this;
          var state = getInternalState(re);
          var raw = state.raw;
          var result, reCopy, lastIndex, match, i, object, group;

          if (raw) {
            raw.lastIndex = re.lastIndex;
            result = patchedExec.call(raw, str);
            re.lastIndex = raw.lastIndex;
            return result;
          }

          var groups = state.groups;
          var sticky = UNSUPPORTED_Y && re.sticky;
          var flags = regexpFlags.call(re);
          var source = re.source;
          var charsAdded = 0;
          var strCopy = str;

          if (sticky) {
            flags = flags.replace('y', '');

            if (flags.indexOf('g') === -1) {
              flags += 'g';
            }

            strCopy = String(str).slice(re.lastIndex); // Support anchored sticky behavior.

            if (re.lastIndex > 0 && (!re.multiline || re.multiline && str[re.lastIndex - 1] !== '\n')) {
              source = '(?: ' + source + ')';
              strCopy = ' ' + strCopy;
              charsAdded++;
            } // ^(? + rx + ) is needed, in combination with some str slicing, to
            // simulate the 'y' flag.


            reCopy = new RegExp('^(?:' + source + ')', flags);
          }

          if (NPCG_INCLUDED) {
            reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
          }

          if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;
          match = nativeExec.call(sticky ? reCopy : re, strCopy);

          if (sticky) {
            if (match) {
              match.input = match.input.slice(charsAdded);
              match[0] = match[0].slice(charsAdded);
              match.index = re.lastIndex;
              re.lastIndex += match[0].length;
            } else re.lastIndex = 0;
          } else if (UPDATES_LAST_INDEX_WRONG && match) {
            re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
          }

          if (NPCG_INCLUDED && match && match.length > 1) {
            // Fix browsers whose `exec` methods don't consistently return `undefined`
            // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
            nativeReplace.call(match[0], reCopy, function () {
              for (i = 1; i < arguments.length - 2; i++) {
                if (arguments[i] === undefined) match[i] = undefined;
              }
            });
          }

          if (match && groups) {
            match.groups = object = create(null);

            for (i = 0; i < groups.length; i++) {
              group = groups[i];
              object[group[0]] = match[group[1]];
            }
          }

          return match;
        };
      }

      module.exports = patchedExec;
    }, {
      "../internals/internal-state": 99,
      "../internals/object-create": 131,
      "../internals/regexp-flags": 156,
      "../internals/regexp-sticky-helpers": 157,
      "../internals/regexp-unsupported-dot-all": 158,
      "../internals/regexp-unsupported-ncg": 159,
      "../internals/shared": 168
    }],
    156: [function (require, module, exports) {
      'use strict';

      var anObject = require('../internals/an-object'); // `RegExp.prototype.flags` getter implementation
      // https://tc39.es/ecma262/#sec-get-regexp.prototype.flags


      module.exports = function () {
        var that = anObject(this);
        var result = '';
        if (that.global) result += 'g';
        if (that.ignoreCase) result += 'i';
        if (that.multiline) result += 'm';
        if (that.dotAll) result += 's';
        if (that.unicode) result += 'u';
        if (that.sticky) result += 'y';
        return result;
      };
    }, {
      "../internals/an-object": 16
    }],
    157: [function (require, module, exports) {
      var fails = require('../internals/fails'); // babel-minify transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError,


      var RE = function RE(s, f) {
        return RegExp(s, f);
      };

      exports.UNSUPPORTED_Y = fails(function () {
        var re = RE('a', 'y');
        re.lastIndex = 2;
        return re.exec('abcd') != null;
      });
      exports.BROKEN_CARET = fails(function () {
        // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
        var re = RE('^r', 'gy');
        re.lastIndex = 2;
        return re.exec('str') != null;
      });
    }, {
      "../internals/fails": 75
    }],
    158: [function (require, module, exports) {
      var fails = require('./fails');

      module.exports = fails(function () {
        // babel-minify transpiles RegExp('.', 's') -> /./s and it causes SyntaxError
        var re = RegExp('.', (typeof '').charAt(0));
        return !(re.dotAll && re.exec('\n') && re.flags === 's');
      });
    }, {
      "./fails": 75
    }],
    159: [function (require, module, exports) {
      var fails = require('./fails');

      module.exports = fails(function () {
        // babel-minify transpiles RegExp('.', 'g') -> /./g and it causes SyntaxError
        var re = RegExp('(?<a>b)', (typeof '').charAt(5));
        return re.exec('b').groups.a !== 'b' || 'b'.replace(re, '$<a>c') !== 'bc';
      });
    }, {
      "./fails": 75
    }],
    160: [function (require, module, exports) {
      // `RequireObjectCoercible` abstract operation
      // https://tc39.es/ecma262/#sec-requireobjectcoercible
      module.exports = function (it) {
        if (it == undefined) throw TypeError("Can't call method on " + it);
        return it;
      };
    }, {}],
    161: [function (require, module, exports) {
      // `SameValueZero` abstract operation
      // https://tc39.es/ecma262/#sec-samevaluezero
      module.exports = function (x, y) {
        // eslint-disable-next-line no-self-compare -- NaN check
        return x === y || x != x && y != y;
      };
    }, {}],
    162: [function (require, module, exports) {
      // `SameValue` abstract operation
      // https://tc39.es/ecma262/#sec-samevalue
      // eslint-disable-next-line es/no-object-is -- safe
      module.exports = Object.is || function is(x, y) {
        // eslint-disable-next-line no-self-compare -- NaN check
        return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
      };
    }, {}],
    163: [function (require, module, exports) {
      var global = require('../internals/global');

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      module.exports = function (key, value) {
        try {
          createNonEnumerableProperty(global, key, value);
        } catch (error) {
          global[key] = value;
        }

        return value;
      };
    }, {
      "../internals/create-non-enumerable-property": 54,
      "../internals/global": 88
    }],
    164: [function (require, module, exports) {
      'use strict';

      var getBuiltIn = require('../internals/get-built-in');

      var definePropertyModule = require('../internals/object-define-property');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var DESCRIPTORS = require('../internals/descriptors');

      var SPECIES = wellKnownSymbol('species');

      module.exports = function (CONSTRUCTOR_NAME) {
        var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
        var defineProperty = definePropertyModule.f;

        if (DESCRIPTORS && Constructor && !Constructor[SPECIES]) {
          defineProperty(Constructor, SPECIES, {
            configurable: true,
            get: function get() {
              return this;
            }
          });
        }
      };
    }, {
      "../internals/descriptors": 61,
      "../internals/get-built-in": 82,
      "../internals/object-define-property": 133,
      "../internals/well-known-symbol": 197
    }],
    165: [function (require, module, exports) {
      var defineProperty = require('../internals/object-define-property').f;

      var has = require('../internals/has');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var TO_STRING_TAG = wellKnownSymbol('toStringTag');

      module.exports = function (it, TAG, STATIC) {
        if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
          defineProperty(it, TO_STRING_TAG, {
            configurable: true,
            value: TAG
          });
        }
      };
    }, {
      "../internals/has": 89,
      "../internals/object-define-property": 133,
      "../internals/well-known-symbol": 197
    }],
    166: [function (require, module, exports) {
      var shared = require('../internals/shared');

      var uid = require('../internals/uid');

      var keys = shared('keys');

      module.exports = function (key) {
        return keys[key] || (keys[key] = uid(key));
      };
    }, {
      "../internals/shared": 168,
      "../internals/uid": 194
    }],
    167: [function (require, module, exports) {
      var global = require('../internals/global');

      var setGlobal = require('../internals/set-global');

      var SHARED = '__core-js_shared__';
      var store = global[SHARED] || setGlobal(SHARED, {});
      module.exports = store;
    }, {
      "../internals/global": 88,
      "../internals/set-global": 163
    }],
    168: [function (require, module, exports) {
      var IS_PURE = require('../internals/is-pure');

      var store = require('../internals/shared-store');

      (module.exports = function (key, value) {
        return store[key] || (store[key] = value !== undefined ? value : {});
      })('versions', []).push({
        version: '3.15.2',
        mode: IS_PURE ? 'pure' : 'global',
        copyright: '© 2021 Denis Pushkarev (zloirock.ru)'
      });
    }, {
      "../internals/is-pure": 105,
      "../internals/shared-store": 167
    }],
    169: [function (require, module, exports) {
      var anObject = require('../internals/an-object');

      var aFunction = require('../internals/a-function');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var SPECIES = wellKnownSymbol('species'); // `SpeciesConstructor` abstract operation
      // https://tc39.es/ecma262/#sec-speciesconstructor

      module.exports = function (O, defaultConstructor) {
        var C = anObject(O).constructor;
        var S;
        return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? defaultConstructor : aFunction(S);
      };
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/well-known-symbol": 197
    }],
    170: [function (require, module, exports) {
      var fails = require('../internals/fails'); // check the existence of a method, lowercase
      // of a tag and escaping quotes in arguments


      module.exports = function (METHOD_NAME) {
        return fails(function () {
          var test = ''[METHOD_NAME]('"');
          return test !== test.toLowerCase() || test.split('"').length > 3;
        });
      };
    }, {
      "../internals/fails": 75
    }],
    171: [function (require, module, exports) {
      var toInteger = require('../internals/to-integer');

      var requireObjectCoercible = require('../internals/require-object-coercible'); // `String.prototype.{ codePointAt, at }` methods implementation


      var createMethod = function createMethod(CONVERT_TO_STRING) {
        return function ($this, pos) {
          var S = String(requireObjectCoercible($this));
          var position = toInteger(pos);
          var size = S.length;
          var first, second;
          if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
          first = S.charCodeAt(position);
          return first < 0xD800 || first > 0xDBFF || position + 1 === size || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
        };
      };

      module.exports = {
        // `String.prototype.codePointAt` method
        // https://tc39.es/ecma262/#sec-string.prototype.codepointat
        codeAt: createMethod(false),
        // `String.prototype.at` method
        // https://github.com/mathiasbynens/String.prototype.at
        charAt: createMethod(true)
      };
    }, {
      "../internals/require-object-coercible": 160,
      "../internals/to-integer": 183
    }],
    172: [function (require, module, exports) {
      // https://github.com/zloirock/core-js/issues/280
      var userAgent = require('../internals/engine-user-agent'); // eslint-disable-next-line unicorn/no-unsafe-regex -- safe


      module.exports = /Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(userAgent);
    }, {
      "../internals/engine-user-agent": 70
    }],
    173: [function (require, module, exports) {
      // https://github.com/tc39/proposal-string-pad-start-end
      var toLength = require('../internals/to-length');

      var repeat = require('../internals/string-repeat');

      var requireObjectCoercible = require('../internals/require-object-coercible');

      var ceil = Math.ceil; // `String.prototype.{ padStart, padEnd }` methods implementation

      var createMethod = function createMethod(IS_END) {
        return function ($this, maxLength, fillString) {
          var S = String(requireObjectCoercible($this));
          var stringLength = S.length;
          var fillStr = fillString === undefined ? ' ' : String(fillString);
          var intMaxLength = toLength(maxLength);
          var fillLen, stringFiller;
          if (intMaxLength <= stringLength || fillStr == '') return S;
          fillLen = intMaxLength - stringLength;
          stringFiller = repeat.call(fillStr, ceil(fillLen / fillStr.length));
          if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
          return IS_END ? S + stringFiller : stringFiller + S;
        };
      };

      module.exports = {
        // `String.prototype.padStart` method
        // https://tc39.es/ecma262/#sec-string.prototype.padstart
        start: createMethod(false),
        // `String.prototype.padEnd` method
        // https://tc39.es/ecma262/#sec-string.prototype.padend
        end: createMethod(true)
      };
    }, {
      "../internals/require-object-coercible": 160,
      "../internals/string-repeat": 175,
      "../internals/to-length": 184
    }],
    174: [function (require, module, exports) {
      'use strict'; // based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js

      var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

      var base = 36;
      var tMin = 1;
      var tMax = 26;
      var skew = 38;
      var damp = 700;
      var initialBias = 72;
      var initialN = 128; // 0x80

      var delimiter = '-'; // '\x2D'

      var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars

      var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

      var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
      var baseMinusTMin = base - tMin;
      var floor = Math.floor;
      var stringFromCharCode = String.fromCharCode;
      /**
       * Creates an array containing the numeric code points of each Unicode
       * character in the string. While JavaScript uses UCS-2 internally,
       * this function will convert a pair of surrogate halves (each of which
       * UCS-2 exposes as separate characters) into a single code point,
       * matching UTF-16.
       */

      var ucs2decode = function ucs2decode(string) {
        var output = [];
        var counter = 0;
        var length = string.length;

        while (counter < length) {
          var value = string.charCodeAt(counter++);

          if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
            // It's a high surrogate, and there is a next character.
            var extra = string.charCodeAt(counter++);

            if ((extra & 0xFC00) == 0xDC00) {
              // Low surrogate.
              output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
            } else {
              // It's an unmatched surrogate; only append this code unit, in case the
              // next code unit is the high surrogate of a surrogate pair.
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }

        return output;
      };
      /**
       * Converts a digit/integer into a basic code point.
       */


      var digitToBasic = function digitToBasic(digit) {
        //  0..25 map to ASCII a..z or A..Z
        // 26..35 map to ASCII 0..9
        return digit + 22 + 75 * (digit < 26);
      };
      /**
       * Bias adaptation function as per section 3.4 of RFC 3492.
       * https://tools.ietf.org/html/rfc3492#section-3.4
       */


      var adapt = function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);

        for (; delta > baseMinusTMin * tMax >> 1; k += base) {
          delta = floor(delta / baseMinusTMin);
        }

        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
      };
      /**
       * Converts a string of Unicode symbols (e.g. a domain name label) to a
       * Punycode string of ASCII-only symbols.
       */
      // eslint-disable-next-line max-statements -- TODO


      var encode = function encode(input) {
        var output = []; // Convert the input in UCS-2 to an array of Unicode code points.

        input = ucs2decode(input); // Cache the length.

        var inputLength = input.length; // Initialize the state.

        var n = initialN;
        var delta = 0;
        var bias = initialBias;
        var i, currentValue; // Handle the basic code points.

        for (i = 0; i < input.length; i++) {
          currentValue = input[i];

          if (currentValue < 0x80) {
            output.push(stringFromCharCode(currentValue));
          }
        }

        var basicLength = output.length; // number of basic code points.

        var handledCPCount = basicLength; // number of code points that have been handled;
        // Finish the basic string with a delimiter unless it's empty.

        if (basicLength) {
          output.push(delimiter);
        } // Main encoding loop:


        while (handledCPCount < inputLength) {
          // All non-basic code points < n have been handled already. Find the next larger one:
          var m = maxInt;

          for (i = 0; i < input.length; i++) {
            currentValue = input[i];

            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.


          var handledCPCountPlusOne = handledCPCount + 1;

          if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
            throw RangeError(OVERFLOW_ERROR);
          }

          delta += (m - n) * handledCPCountPlusOne;
          n = m;

          for (i = 0; i < input.length; i++) {
            currentValue = input[i];

            if (currentValue < n && ++delta > maxInt) {
              throw RangeError(OVERFLOW_ERROR);
            }

            if (currentValue == n) {
              // Represent delta as a generalized variable-length integer.
              var q = delta;

              for (var k = base;;
              /* no condition */
              k += base) {
                var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (q < t) break;
                var qMinusT = q - t;
                var baseMinusT = base - t;
                output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
                q = floor(qMinusT / baseMinusT);
              }

              output.push(stringFromCharCode(digitToBasic(q)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              ++handledCPCount;
            }
          }

          ++delta;
          ++n;
        }

        return output.join('');
      };

      module.exports = function (input) {
        var encoded = [];
        var labels = input.toLowerCase().replace(regexSeparators, ".").split('.');
        var i, label;

        for (i = 0; i < labels.length; i++) {
          label = labels[i];
          encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);
        }

        return encoded.join('.');
      };
    }, {}],
    175: [function (require, module, exports) {
      'use strict';

      var toInteger = require('../internals/to-integer');

      var requireObjectCoercible = require('../internals/require-object-coercible'); // `String.prototype.repeat` method implementation
      // https://tc39.es/ecma262/#sec-string.prototype.repeat


      module.exports = function repeat(count) {
        var str = String(requireObjectCoercible(this));
        var result = '';
        var n = toInteger(count);
        if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');

        for (; n > 0; (n >>>= 1) && (str += str)) {
          if (n & 1) result += str;
        }

        return result;
      };
    }, {
      "../internals/require-object-coercible": 160,
      "../internals/to-integer": 183
    }],
    176: [function (require, module, exports) {
      var fails = require('../internals/fails');

      var whitespaces = require('../internals/whitespaces');

      var non = "\u200B\x85\u180E"; // check that a method works with the correct list
      // of whitespaces and has a correct name

      module.exports = function (METHOD_NAME) {
        return fails(function () {
          return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;
        });
      };
    }, {
      "../internals/fails": 75,
      "../internals/whitespaces": 198
    }],
    177: [function (require, module, exports) {
      var requireObjectCoercible = require('../internals/require-object-coercible');

      var whitespaces = require('../internals/whitespaces');

      var whitespace = '[' + whitespaces + ']';
      var ltrim = RegExp('^' + whitespace + whitespace + '*');
      var rtrim = RegExp(whitespace + whitespace + '*$'); // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation

      var createMethod = function createMethod(TYPE) {
        return function ($this) {
          var string = String(requireObjectCoercible($this));
          if (TYPE & 1) string = string.replace(ltrim, '');
          if (TYPE & 2) string = string.replace(rtrim, '');
          return string;
        };
      };

      module.exports = {
        // `String.prototype.{ trimLeft, trimStart }` methods
        // https://tc39.es/ecma262/#sec-string.prototype.trimstart
        start: createMethod(1),
        // `String.prototype.{ trimRight, trimEnd }` methods
        // https://tc39.es/ecma262/#sec-string.prototype.trimend
        end: createMethod(2),
        // `String.prototype.trim` method
        // https://tc39.es/ecma262/#sec-string.prototype.trim
        trim: createMethod(3)
      };
    }, {
      "../internals/require-object-coercible": 160,
      "../internals/whitespaces": 198
    }],
    178: [function (require, module, exports) {
      var global = require('../internals/global');

      var fails = require('../internals/fails');

      var bind = require('../internals/function-bind-context');

      var html = require('../internals/html');

      var createElement = require('../internals/document-create-element');

      var IS_IOS = require('../internals/engine-is-ios');

      var IS_NODE = require('../internals/engine-is-node');

      var location = global.location;
      var set = global.setImmediate;
      var clear = global.clearImmediate;
      var process = global.process;
      var MessageChannel = global.MessageChannel;
      var Dispatch = global.Dispatch;
      var counter = 0;
      var queue = {};
      var ONREADYSTATECHANGE = 'onreadystatechange';
      var defer, channel, port;

      var run = function run(id) {
        // eslint-disable-next-line no-prototype-builtins -- safe
        if (queue.hasOwnProperty(id)) {
          var fn = queue[id];
          delete queue[id];
          fn();
        }
      };

      var runner = function runner(id) {
        return function () {
          run(id);
        };
      };

      var listener = function listener(event) {
        run(event.data);
      };

      var post = function post(id) {
        // old engines have not location.origin
        global.postMessage(id + '', location.protocol + '//' + location.host);
      }; // Node.js 0.9+ & IE10+ has setImmediate, otherwise:


      if (!set || !clear) {
        set = function setImmediate(fn) {
          var args = [];
          var i = 1;

          while (arguments.length > i) {
            args.push(arguments[i++]);
          }

          queue[++counter] = function () {
            // eslint-disable-next-line no-new-func -- spec requirement
            (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
          };

          defer(counter);
          return counter;
        };

        clear = function clearImmediate(id) {
          delete queue[id];
        }; // Node.js 0.8-


        if (IS_NODE) {
          defer = function defer(id) {
            process.nextTick(runner(id));
          }; // Sphere (JS game engine) Dispatch API

        } else if (Dispatch && Dispatch.now) {
          defer = function defer(id) {
            Dispatch.now(runner(id));
          }; // Browsers with MessageChannel, includes WebWorkers
          // except iOS - https://github.com/zloirock/core-js/issues/624

        } else if (MessageChannel && !IS_IOS) {
          channel = new MessageChannel();
          port = channel.port2;
          channel.port1.onmessage = listener;
          defer = bind(port.postMessage, port, 1); // Browsers with postMessage, skip WebWorkers
          // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
        } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts && location && location.protocol !== 'file:' && !fails(post)) {
          defer = post;
          global.addEventListener('message', listener, false); // IE8-
        } else if (ONREADYSTATECHANGE in createElement('script')) {
          defer = function defer(id) {
            html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
              html.removeChild(this);
              run(id);
            };
          }; // Rest old browsers

        } else {
          defer = function defer(id) {
            setTimeout(runner(id), 0);
          };
        }
      }

      module.exports = {
        set: set,
        clear: clear
      };
    }, {
      "../internals/document-create-element": 62,
      "../internals/engine-is-ios": 67,
      "../internals/engine-is-node": 68,
      "../internals/fails": 75,
      "../internals/function-bind-context": 79,
      "../internals/global": 88,
      "../internals/html": 92
    }],
    179: [function (require, module, exports) {
      var classof = require('../internals/classof-raw'); // `thisNumberValue` abstract operation
      // https://tc39.es/ecma262/#sec-thisnumbervalue


      module.exports = function (value) {
        if (typeof value != 'number' && classof(value) != 'Number') {
          throw TypeError('Incorrect invocation');
        }

        return +value;
      };
    }, {
      "../internals/classof-raw": 39
    }],
    180: [function (require, module, exports) {
      var toInteger = require('../internals/to-integer');

      var max = Math.max;
      var min = Math.min; // Helper for a popular repeating case of the spec:
      // Let integer be ? ToInteger(index).
      // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).

      module.exports = function (index, length) {
        var integer = toInteger(index);
        return integer < 0 ? max(integer + length, 0) : min(integer, length);
      };
    }, {
      "../internals/to-integer": 183
    }],
    181: [function (require, module, exports) {
      var toInteger = require('../internals/to-integer');

      var toLength = require('../internals/to-length'); // `ToIndex` abstract operation
      // https://tc39.es/ecma262/#sec-toindex


      module.exports = function (it) {
        if (it === undefined) return 0;
        var number = toInteger(it);
        var length = toLength(number);
        if (number !== length) throw RangeError('Wrong length or index');
        return length;
      };
    }, {
      "../internals/to-integer": 183,
      "../internals/to-length": 184
    }],
    182: [function (require, module, exports) {
      // toObject with fallback for non-array-like ES3 strings
      var IndexedObject = require('../internals/indexed-object');

      var requireObjectCoercible = require('../internals/require-object-coercible');

      module.exports = function (it) {
        return IndexedObject(requireObjectCoercible(it));
      };
    }, {
      "../internals/indexed-object": 95,
      "../internals/require-object-coercible": 160
    }],
    183: [function (require, module, exports) {
      var ceil = Math.ceil;
      var floor = Math.floor; // `ToInteger` abstract operation
      // https://tc39.es/ecma262/#sec-tointeger

      module.exports = function (argument) {
        return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
      };
    }, {}],
    184: [function (require, module, exports) {
      var toInteger = require('../internals/to-integer');

      var min = Math.min; // `ToLength` abstract operation
      // https://tc39.es/ecma262/#sec-tolength

      module.exports = function (argument) {
        return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
      };
    }, {
      "../internals/to-integer": 183
    }],
    185: [function (require, module, exports) {
      var requireObjectCoercible = require('../internals/require-object-coercible'); // `ToObject` abstract operation
      // https://tc39.es/ecma262/#sec-toobject


      module.exports = function (argument) {
        return Object(requireObjectCoercible(argument));
      };
    }, {
      "../internals/require-object-coercible": 160
    }],
    186: [function (require, module, exports) {
      var toPositiveInteger = require('../internals/to-positive-integer');

      module.exports = function (it, BYTES) {
        var offset = toPositiveInteger(it);
        if (offset % BYTES) throw RangeError('Wrong offset');
        return offset;
      };
    }, {
      "../internals/to-positive-integer": 187
    }],
    187: [function (require, module, exports) {
      var toInteger = require('../internals/to-integer');

      module.exports = function (it) {
        var result = toInteger(it);
        if (result < 0) throw RangeError("The argument can't be less than 0");
        return result;
      };
    }, {
      "../internals/to-integer": 183
    }],
    188: [function (require, module, exports) {
      var isObject = require('../internals/is-object'); // `ToPrimitive` abstract operation
      // https://tc39.es/ecma262/#sec-toprimitive
      // instead of the ES6 spec version, we didn't implement @@toPrimitive case
      // and the second argument - flag - preferred type is a string


      module.exports = function (input, PREFERRED_STRING) {
        if (!isObject(input)) return input;
        var fn, val;
        if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
        if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
        if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
        throw TypeError("Can't convert object to primitive value");
      };
    }, {
      "../internals/is-object": 104
    }],
    189: [function (require, module, exports) {
      var wellKnownSymbol = require('../internals/well-known-symbol');

      var TO_STRING_TAG = wellKnownSymbol('toStringTag');
      var test = {};
      test[TO_STRING_TAG] = 'z';
      module.exports = String(test) === '[object z]';
    }, {
      "../internals/well-known-symbol": 197
    }],
    190: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var global = require('../internals/global');

      var DESCRIPTORS = require('../internals/descriptors');

      var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require('../internals/typed-array-constructors-require-wrappers');

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var ArrayBufferModule = require('../internals/array-buffer');

      var anInstance = require('../internals/an-instance');

      var createPropertyDescriptor = require('../internals/create-property-descriptor');

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var toLength = require('../internals/to-length');

      var toIndex = require('../internals/to-index');

      var toOffset = require('../internals/to-offset');

      var toPrimitive = require('../internals/to-primitive');

      var has = require('../internals/has');

      var classof = require('../internals/classof');

      var isObject = require('../internals/is-object');

      var create = require('../internals/object-create');

      var setPrototypeOf = require('../internals/object-set-prototype-of');

      var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;

      var typedArrayFrom = require('../internals/typed-array-from');

      var forEach = require('../internals/array-iteration').forEach;

      var setSpecies = require('../internals/set-species');

      var definePropertyModule = require('../internals/object-define-property');

      var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');

      var InternalStateModule = require('../internals/internal-state');

      var inheritIfRequired = require('../internals/inherit-if-required');

      var getInternalState = InternalStateModule.get;
      var setInternalState = InternalStateModule.set;
      var nativeDefineProperty = definePropertyModule.f;
      var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
      var round = Math.round;
      var RangeError = global.RangeError;
      var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
      var DataView = ArrayBufferModule.DataView;
      var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;
      var TYPED_ARRAY_TAG = ArrayBufferViewCore.TYPED_ARRAY_TAG;
      var TypedArray = ArrayBufferViewCore.TypedArray;
      var TypedArrayPrototype = ArrayBufferViewCore.TypedArrayPrototype;
      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
      var isTypedArray = ArrayBufferViewCore.isTypedArray;
      var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
      var WRONG_LENGTH = 'Wrong length';

      var fromList = function fromList(C, list) {
        var index = 0;
        var length = list.length;
        var result = new (aTypedArrayConstructor(C))(length);

        while (length > index) {
          result[index] = list[index++];
        }

        return result;
      };

      var addGetter = function addGetter(it, key) {
        nativeDefineProperty(it, key, {
          get: function get() {
            return getInternalState(this)[key];
          }
        });
      };

      var isArrayBuffer = function isArrayBuffer(it) {
        var klass;
        return it instanceof ArrayBuffer || (klass = classof(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
      };

      var isTypedArrayIndex = function isTypedArrayIndex(target, key) {
        return isTypedArray(target) && typeof key != 'symbol' && key in target && String(+key) == String(key);
      };

      var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
        return isTypedArrayIndex(target, key = toPrimitive(key, true)) ? createPropertyDescriptor(2, target[key]) : nativeGetOwnPropertyDescriptor(target, key);
      };

      var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
        if (isTypedArrayIndex(target, key = toPrimitive(key, true)) && isObject(descriptor) && has(descriptor, 'value') && !has(descriptor, 'get') && !has(descriptor, 'set') // TODO: add validation descriptor w/o calling accessors
        && !descriptor.configurable && (!has(descriptor, 'writable') || descriptor.writable) && (!has(descriptor, 'enumerable') || descriptor.enumerable)) {
          target[key] = descriptor.value;
          return target;
        }

        return nativeDefineProperty(target, key, descriptor);
      };

      if (DESCRIPTORS) {
        if (!NATIVE_ARRAY_BUFFER_VIEWS) {
          getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
          definePropertyModule.f = wrappedDefineProperty;
          addGetter(TypedArrayPrototype, 'buffer');
          addGetter(TypedArrayPrototype, 'byteOffset');
          addGetter(TypedArrayPrototype, 'byteLength');
          addGetter(TypedArrayPrototype, 'length');
        }

        $({
          target: 'Object',
          stat: true,
          forced: !NATIVE_ARRAY_BUFFER_VIEWS
        }, {
          getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
          defineProperty: wrappedDefineProperty
        });

        module.exports = function (TYPE, wrapper, CLAMPED) {
          var BYTES = TYPE.match(/\d+$/)[0] / 8;
          var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
          var GETTER = 'get' + TYPE;
          var SETTER = 'set' + TYPE;
          var NativeTypedArrayConstructor = global[CONSTRUCTOR_NAME];
          var TypedArrayConstructor = NativeTypedArrayConstructor;
          var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
          var exported = {};

          var getter = function getter(that, index) {
            var data = getInternalState(that);
            return data.view[GETTER](index * BYTES + data.byteOffset, true);
          };

          var setter = function setter(that, index, value) {
            var data = getInternalState(that);
            if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
            data.view[SETTER](index * BYTES + data.byteOffset, value, true);
          };

          var addElement = function addElement(that, index) {
            nativeDefineProperty(that, index, {
              get: function get() {
                return getter(this, index);
              },
              set: function set(value) {
                return setter(this, index, value);
              },
              enumerable: true
            });
          };

          if (!NATIVE_ARRAY_BUFFER_VIEWS) {
            TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
              anInstance(that, TypedArrayConstructor, CONSTRUCTOR_NAME);
              var index = 0;
              var byteOffset = 0;
              var buffer, byteLength, length;

              if (!isObject(data)) {
                length = toIndex(data);
                byteLength = length * BYTES;
                buffer = new ArrayBuffer(byteLength);
              } else if (isArrayBuffer(data)) {
                buffer = data;
                byteOffset = toOffset(offset, BYTES);
                var $len = data.byteLength;

                if ($length === undefined) {
                  if ($len % BYTES) throw RangeError(WRONG_LENGTH);
                  byteLength = $len - byteOffset;
                  if (byteLength < 0) throw RangeError(WRONG_LENGTH);
                } else {
                  byteLength = toLength($length) * BYTES;
                  if (byteLength + byteOffset > $len) throw RangeError(WRONG_LENGTH);
                }

                length = byteLength / BYTES;
              } else if (isTypedArray(data)) {
                return fromList(TypedArrayConstructor, data);
              } else {
                return typedArrayFrom.call(TypedArrayConstructor, data);
              }

              setInternalState(that, {
                buffer: buffer,
                byteOffset: byteOffset,
                byteLength: byteLength,
                length: length,
                view: new DataView(buffer)
              });

              while (index < length) {
                addElement(that, index++);
              }
            });
            if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
            TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);
          } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
            TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
              anInstance(dummy, TypedArrayConstructor, CONSTRUCTOR_NAME);
              return inheritIfRequired(function () {
                if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
                if (isArrayBuffer(data)) return $length !== undefined ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES), $length) : typedArrayOffset !== undefined ? new NativeTypedArrayConstructor(data, toOffset(typedArrayOffset, BYTES)) : new NativeTypedArrayConstructor(data);
                if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
                return typedArrayFrom.call(TypedArrayConstructor, data);
              }(), dummy, TypedArrayConstructor);
            });
            if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
            forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
              if (!(key in TypedArrayConstructor)) {
                createNonEnumerableProperty(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
              }
            });
            TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
          }

          if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
            createNonEnumerableProperty(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
          }

          if (TYPED_ARRAY_TAG) {
            createNonEnumerableProperty(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
          }

          exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;
          $({
            global: true,
            forced: TypedArrayConstructor != NativeTypedArrayConstructor,
            sham: !NATIVE_ARRAY_BUFFER_VIEWS
          }, exported);

          if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
            createNonEnumerableProperty(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
          }

          if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
            createNonEnumerableProperty(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
          }

          setSpecies(CONSTRUCTOR_NAME);
        };
      } else module.exports = function () {
        /* empty */
      };
    }, {
      "../internals/an-instance": 15,
      "../internals/array-buffer": 19,
      "../internals/array-buffer-view-core": 18,
      "../internals/array-iteration": 26,
      "../internals/classof": 40,
      "../internals/create-non-enumerable-property": 54,
      "../internals/create-property-descriptor": 55,
      "../internals/descriptors": 61,
      "../internals/export": 74,
      "../internals/global": 88,
      "../internals/has": 89,
      "../internals/inherit-if-required": 96,
      "../internals/internal-state": 99,
      "../internals/is-object": 104,
      "../internals/object-create": 131,
      "../internals/object-define-property": 133,
      "../internals/object-get-own-property-descriptor": 134,
      "../internals/object-get-own-property-names": 136,
      "../internals/object-set-prototype-of": 144,
      "../internals/set-species": 164,
      "../internals/to-index": 181,
      "../internals/to-length": 184,
      "../internals/to-offset": 186,
      "../internals/to-primitive": 188,
      "../internals/typed-array-constructors-require-wrappers": 191,
      "../internals/typed-array-from": 193
    }],
    191: [function (require, module, exports) {
      /* eslint-disable no-new -- required for testing */
      var global = require('../internals/global');

      var fails = require('../internals/fails');

      var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');

      var NATIVE_ARRAY_BUFFER_VIEWS = require('../internals/array-buffer-view-core').NATIVE_ARRAY_BUFFER_VIEWS;

      var ArrayBuffer = global.ArrayBuffer;
      var Int8Array = global.Int8Array;
      module.exports = !NATIVE_ARRAY_BUFFER_VIEWS || !fails(function () {
        Int8Array(1);
      }) || !fails(function () {
        new Int8Array(-1);
      }) || !checkCorrectnessOfIteration(function (iterable) {
        new Int8Array();
        new Int8Array(null);
        new Int8Array(1.5);
        new Int8Array(iterable);
      }, true) || fails(function () {
        // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
        return new Int8Array(new ArrayBuffer(2), 1, undefined).length !== 1;
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/check-correctness-of-iteration": 38,
      "../internals/fails": 75,
      "../internals/global": 88
    }],
    192: [function (require, module, exports) {
      var aTypedArrayConstructor = require('../internals/array-buffer-view-core').aTypedArrayConstructor;

      var speciesConstructor = require('../internals/species-constructor');

      module.exports = function (instance, list) {
        var C = speciesConstructor(instance, instance.constructor);
        var index = 0;
        var length = list.length;
        var result = new (aTypedArrayConstructor(C))(length);

        while (length > index) {
          result[index] = list[index++];
        }

        return result;
      };
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/species-constructor": 169
    }],
    193: [function (require, module, exports) {
      var toObject = require('../internals/to-object');

      var toLength = require('../internals/to-length');

      var getIteratorMethod = require('../internals/get-iterator-method');

      var isArrayIteratorMethod = require('../internals/is-array-iterator-method');

      var bind = require('../internals/function-bind-context');

      var aTypedArrayConstructor = require('../internals/array-buffer-view-core').aTypedArrayConstructor;

      module.exports = function from(source
      /* , mapfn, thisArg */
      ) {
        var O = toObject(source);
        var argumentsLength = arguments.length;
        var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
        var mapping = mapfn !== undefined;
        var iteratorMethod = getIteratorMethod(O);
        var i, length, result, step, iterator, next;

        if (iteratorMethod != undefined && !isArrayIteratorMethod(iteratorMethod)) {
          iterator = iteratorMethod.call(O);
          next = iterator.next;
          O = [];

          while (!(step = next.call(iterator)).done) {
            O.push(step.value);
          }
        }

        if (mapping && argumentsLength > 2) {
          mapfn = bind(mapfn, arguments[2], 2);
        }

        length = toLength(O.length);
        result = new (aTypedArrayConstructor(this))(length);

        for (i = 0; length > i; i++) {
          result[i] = mapping ? mapfn(O[i], i) : O[i];
        }

        return result;
      };
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/function-bind-context": 79,
      "../internals/get-iterator-method": 83,
      "../internals/is-array-iterator-method": 100,
      "../internals/to-length": 184,
      "../internals/to-object": 185
    }],
    194: [function (require, module, exports) {
      var id = 0;
      var postfix = Math.random();

      module.exports = function (key) {
        return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
      };
    }, {}],
    195: [function (require, module, exports) {
      /* eslint-disable es/no-symbol -- required for testing */
      var NATIVE_SYMBOL = require('../internals/native-symbol');

      module.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == 'symbol';
    }, {
      "../internals/native-symbol": 121
    }],
    196: [function (require, module, exports) {
      var wellKnownSymbol = require('../internals/well-known-symbol');

      exports.f = wellKnownSymbol;
    }, {
      "../internals/well-known-symbol": 197
    }],
    197: [function (require, module, exports) {
      var global = require('../internals/global');

      var shared = require('../internals/shared');

      var has = require('../internals/has');

      var uid = require('../internals/uid');

      var NATIVE_SYMBOL = require('../internals/native-symbol');

      var USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');

      var WellKnownSymbolsStore = shared('wks');
      var Symbol = global.Symbol;
      var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

      module.exports = function (name) {
        if (!has(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
          if (NATIVE_SYMBOL && has(Symbol, name)) {
            WellKnownSymbolsStore[name] = Symbol[name];
          } else {
            WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
          }
        }

        return WellKnownSymbolsStore[name];
      };
    }, {
      "../internals/global": 88,
      "../internals/has": 89,
      "../internals/native-symbol": 121,
      "../internals/shared": 168,
      "../internals/uid": 194,
      "../internals/use-symbol-as-uid": 195
    }],
    198: [function (require, module, exports) {
      // a string of all valid unicode whitespaces
      module.exports = "\t\n\x0B\f\r \xA0\u1680\u2000\u2001\u2002" + "\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF";
    }, {}],
    199: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var getPrototypeOf = require('../internals/object-get-prototype-of');

      var setPrototypeOf = require('../internals/object-set-prototype-of');

      var create = require('../internals/object-create');

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var createPropertyDescriptor = require('../internals/create-property-descriptor');

      var iterate = require('../internals/iterate');

      var $AggregateError = function AggregateError(errors, message) {
        var that = this;
        if (!(that instanceof $AggregateError)) return new $AggregateError(errors, message);

        if (setPrototypeOf) {
          // eslint-disable-next-line unicorn/error-message -- expected
          that = setPrototypeOf(new Error(undefined), getPrototypeOf(that));
        }

        if (message !== undefined) createNonEnumerableProperty(that, 'message', String(message));
        var errorsArray = [];
        iterate(errors, errorsArray.push, {
          that: errorsArray
        });
        createNonEnumerableProperty(that, 'errors', errorsArray);
        return that;
      };

      $AggregateError.prototype = create(Error.prototype, {
        constructor: createPropertyDescriptor(5, $AggregateError),
        message: createPropertyDescriptor(5, ''),
        name: createPropertyDescriptor(5, 'AggregateError')
      }); // `AggregateError` constructor
      // https://tc39.es/ecma262/#sec-aggregate-error-constructor

      $({
        global: true
      }, {
        AggregateError: $AggregateError
      });
    }, {
      "../internals/create-non-enumerable-property": 54,
      "../internals/create-property-descriptor": 55,
      "../internals/export": 74,
      "../internals/iterate": 107,
      "../internals/object-create": 131,
      "../internals/object-get-prototype-of": 138,
      "../internals/object-set-prototype-of": 144
    }],
    200: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var global = require('../internals/global');

      var arrayBufferModule = require('../internals/array-buffer');

      var setSpecies = require('../internals/set-species');

      var ARRAY_BUFFER = 'ArrayBuffer';
      var ArrayBuffer = arrayBufferModule[ARRAY_BUFFER];
      var NativeArrayBuffer = global[ARRAY_BUFFER]; // `ArrayBuffer` constructor
      // https://tc39.es/ecma262/#sec-arraybuffer-constructor

      $({
        global: true,
        forced: NativeArrayBuffer !== ArrayBuffer
      }, {
        ArrayBuffer: ArrayBuffer
      });
      setSpecies(ARRAY_BUFFER);
    }, {
      "../internals/array-buffer": 19,
      "../internals/export": 74,
      "../internals/global": 88,
      "../internals/set-species": 164
    }],
    201: [function (require, module, exports) {
      var $ = require('../internals/export');

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS; // `ArrayBuffer.isView` method
      // https://tc39.es/ecma262/#sec-arraybuffer.isview

      $({
        target: 'ArrayBuffer',
        stat: true,
        forced: !NATIVE_ARRAY_BUFFER_VIEWS
      }, {
        isView: ArrayBufferViewCore.isView
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/export": 74
    }],
    202: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var fails = require('../internals/fails');

      var ArrayBufferModule = require('../internals/array-buffer');

      var anObject = require('../internals/an-object');

      var toAbsoluteIndex = require('../internals/to-absolute-index');

      var toLength = require('../internals/to-length');

      var speciesConstructor = require('../internals/species-constructor');

      var ArrayBuffer = ArrayBufferModule.ArrayBuffer;
      var DataView = ArrayBufferModule.DataView;
      var nativeArrayBufferSlice = ArrayBuffer.prototype.slice;
      var INCORRECT_SLICE = fails(function () {
        return !new ArrayBuffer(2).slice(1, undefined).byteLength;
      }); // `ArrayBuffer.prototype.slice` method
      // https://tc39.es/ecma262/#sec-arraybuffer.prototype.slice

      $({
        target: 'ArrayBuffer',
        proto: true,
        unsafe: true,
        forced: INCORRECT_SLICE
      }, {
        slice: function slice(start, end) {
          if (nativeArrayBufferSlice !== undefined && end === undefined) {
            return nativeArrayBufferSlice.call(anObject(this), start); // FF fix
          }

          var length = anObject(this).byteLength;
          var first = toAbsoluteIndex(start, length);
          var fin = toAbsoluteIndex(end === undefined ? length : end, length);
          var result = new (speciesConstructor(this, ArrayBuffer))(toLength(fin - first));
          var viewSource = new DataView(this);
          var viewTarget = new DataView(result);
          var index = 0;

          while (first < fin) {
            viewTarget.setUint8(index++, viewSource.getUint8(first++));
          }

          return result;
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/array-buffer": 19,
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/species-constructor": 169,
      "../internals/to-absolute-index": 180,
      "../internals/to-length": 184
    }],
    203: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var fails = require('../internals/fails');

      var isArray = require('../internals/is-array');

      var isObject = require('../internals/is-object');

      var toObject = require('../internals/to-object');

      var toLength = require('../internals/to-length');

      var createProperty = require('../internals/create-property');

      var arraySpeciesCreate = require('../internals/array-species-create');

      var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var V8_VERSION = require('../internals/engine-v8-version');

      var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
      var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
      var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded'; // We can't use this feature detection in V8 since it causes
      // deoptimization and serious performance degradation
      // https://github.com/zloirock/core-js/issues/679

      var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function () {
        var array = [];
        array[IS_CONCAT_SPREADABLE] = false;
        return array.concat()[0] !== array;
      });
      var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

      var isConcatSpreadable = function isConcatSpreadable(O) {
        if (!isObject(O)) return false;
        var spreadable = O[IS_CONCAT_SPREADABLE];
        return spreadable !== undefined ? !!spreadable : isArray(O);
      };

      var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT; // `Array.prototype.concat` method
      // https://tc39.es/ecma262/#sec-array.prototype.concat
      // with adding support of @@isConcatSpreadable and @@species

      $({
        target: 'Array',
        proto: true,
        forced: FORCED
      }, {
        // eslint-disable-next-line no-unused-vars -- required for `.length`
        concat: function concat(arg) {
          var O = toObject(this);
          var A = arraySpeciesCreate(O, 0);
          var n = 0;
          var i, k, length, len, E;

          for (i = -1, length = arguments.length; i < length; i++) {
            E = i === -1 ? O : arguments[i];

            if (isConcatSpreadable(E)) {
              len = toLength(E.length);
              if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);

              for (k = 0; k < len; k++, n++) {
                if (k in E) createProperty(A, n, E[k]);
              }
            } else {
              if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
              createProperty(A, n++, E);
            }
          }

          A.length = n;
          return A;
        }
      });
    }, {
      "../internals/array-method-has-species-support": 28,
      "../internals/array-species-create": 32,
      "../internals/create-property": 56,
      "../internals/engine-v8-version": 71,
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/is-array": 101,
      "../internals/is-object": 104,
      "../internals/to-length": 184,
      "../internals/to-object": 185,
      "../internals/well-known-symbol": 197
    }],
    204: [function (require, module, exports) {
      var $ = require('../internals/export');

      var copyWithin = require('../internals/array-copy-within');

      var addToUnscopables = require('../internals/add-to-unscopables'); // `Array.prototype.copyWithin` method
      // https://tc39.es/ecma262/#sec-array.prototype.copywithin


      $({
        target: 'Array',
        proto: true
      }, {
        copyWithin: copyWithin
      }); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables('copyWithin');
    }, {
      "../internals/add-to-unscopables": 13,
      "../internals/array-copy-within": 20,
      "../internals/export": 74
    }],
    205: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var $every = require('../internals/array-iteration').every;

      var arrayMethodIsStrict = require('../internals/array-method-is-strict');

      var STRICT_METHOD = arrayMethodIsStrict('every'); // `Array.prototype.every` method
      // https://tc39.es/ecma262/#sec-array.prototype.every

      $({
        target: 'Array',
        proto: true,
        forced: !STRICT_METHOD
      }, {
        every: function every(callbackfn
        /* , thisArg */
        ) {
          return $every(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
    }, {
      "../internals/array-iteration": 26,
      "../internals/array-method-is-strict": 29,
      "../internals/export": 74
    }],
    206: [function (require, module, exports) {
      var $ = require('../internals/export');

      var fill = require('../internals/array-fill');

      var addToUnscopables = require('../internals/add-to-unscopables'); // `Array.prototype.fill` method
      // https://tc39.es/ecma262/#sec-array.prototype.fill


      $({
        target: 'Array',
        proto: true
      }, {
        fill: fill
      }); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables('fill');
    }, {
      "../internals/add-to-unscopables": 13,
      "../internals/array-fill": 21,
      "../internals/export": 74
    }],
    207: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var $filter = require('../internals/array-iteration').filter;

      var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');

      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter'); // `Array.prototype.filter` method
      // https://tc39.es/ecma262/#sec-array.prototype.filter
      // with adding support of @@species

      $({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT
      }, {
        filter: function filter(callbackfn
        /* , thisArg */
        ) {
          return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
    }, {
      "../internals/array-iteration": 26,
      "../internals/array-method-has-species-support": 28,
      "../internals/export": 74
    }],
    208: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var $findIndex = require('../internals/array-iteration').findIndex;

      var addToUnscopables = require('../internals/add-to-unscopables');

      var FIND_INDEX = 'findIndex';
      var SKIPS_HOLES = true; // Shouldn't skip holes

      if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () {
        SKIPS_HOLES = false;
      }); // `Array.prototype.findIndex` method
      // https://tc39.es/ecma262/#sec-array.prototype.findindex

      $({
        target: 'Array',
        proto: true,
        forced: SKIPS_HOLES
      }, {
        findIndex: function findIndex(callbackfn
        /* , that = undefined */
        ) {
          return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      }); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables(FIND_INDEX);
    }, {
      "../internals/add-to-unscopables": 13,
      "../internals/array-iteration": 26,
      "../internals/export": 74
    }],
    209: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var $find = require('../internals/array-iteration').find;

      var addToUnscopables = require('../internals/add-to-unscopables');

      var FIND = 'find';
      var SKIPS_HOLES = true; // Shouldn't skip holes

      if (FIND in []) Array(1)[FIND](function () {
        SKIPS_HOLES = false;
      }); // `Array.prototype.find` method
      // https://tc39.es/ecma262/#sec-array.prototype.find

      $({
        target: 'Array',
        proto: true,
        forced: SKIPS_HOLES
      }, {
        find: function find(callbackfn
        /* , that = undefined */
        ) {
          return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      }); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables(FIND);
    }, {
      "../internals/add-to-unscopables": 13,
      "../internals/array-iteration": 26,
      "../internals/export": 74
    }],
    210: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var flattenIntoArray = require('../internals/flatten-into-array');

      var toObject = require('../internals/to-object');

      var toLength = require('../internals/to-length');

      var aFunction = require('../internals/a-function');

      var arraySpeciesCreate = require('../internals/array-species-create'); // `Array.prototype.flatMap` method
      // https://tc39.es/ecma262/#sec-array.prototype.flatmap


      $({
        target: 'Array',
        proto: true
      }, {
        flatMap: function flatMap(callbackfn
        /* , thisArg */
        ) {
          var O = toObject(this);
          var sourceLen = toLength(O.length);
          var A;
          aFunction(callbackfn);
          A = arraySpeciesCreate(O, 0);
          A.length = flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
          return A;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/array-species-create": 32,
      "../internals/export": 74,
      "../internals/flatten-into-array": 77,
      "../internals/to-length": 184,
      "../internals/to-object": 185
    }],
    211: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var flattenIntoArray = require('../internals/flatten-into-array');

      var toObject = require('../internals/to-object');

      var toLength = require('../internals/to-length');

      var toInteger = require('../internals/to-integer');

      var arraySpeciesCreate = require('../internals/array-species-create'); // `Array.prototype.flat` method
      // https://tc39.es/ecma262/#sec-array.prototype.flat


      $({
        target: 'Array',
        proto: true
      }, {
        flat: function flat()
        /* depthArg = 1 */
        {
          var depthArg = arguments.length ? arguments[0] : undefined;
          var O = toObject(this);
          var sourceLen = toLength(O.length);
          var A = arraySpeciesCreate(O, 0);
          A.length = flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));
          return A;
        }
      });
    }, {
      "../internals/array-species-create": 32,
      "../internals/export": 74,
      "../internals/flatten-into-array": 77,
      "../internals/to-integer": 183,
      "../internals/to-length": 184,
      "../internals/to-object": 185
    }],
    212: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var forEach = require('../internals/array-for-each'); // `Array.prototype.forEach` method
      // https://tc39.es/ecma262/#sec-array.prototype.foreach
      // eslint-disable-next-line es/no-array-prototype-foreach -- safe


      $({
        target: 'Array',
        proto: true,
        forced: [].forEach != forEach
      }, {
        forEach: forEach
      });
    }, {
      "../internals/array-for-each": 22,
      "../internals/export": 74
    }],
    213: [function (require, module, exports) {
      var $ = require('../internals/export');

      var from = require('../internals/array-from');

      var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');

      var INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {
        // eslint-disable-next-line es/no-array-from -- required for testing
        Array.from(iterable);
      }); // `Array.from` method
      // https://tc39.es/ecma262/#sec-array.from

      $({
        target: 'Array',
        stat: true,
        forced: INCORRECT_ITERATION
      }, {
        from: from
      });
    }, {
      "../internals/array-from": 23,
      "../internals/check-correctness-of-iteration": 38,
      "../internals/export": 74
    }],
    214: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var $includes = require('../internals/array-includes').includes;

      var addToUnscopables = require('../internals/add-to-unscopables'); // `Array.prototype.includes` method
      // https://tc39.es/ecma262/#sec-array.prototype.includes


      $({
        target: 'Array',
        proto: true
      }, {
        includes: function includes(el
        /* , fromIndex = 0 */
        ) {
          return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
        }
      }); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables('includes');
    }, {
      "../internals/add-to-unscopables": 13,
      "../internals/array-includes": 24,
      "../internals/export": 74
    }],
    215: [function (require, module, exports) {
      'use strict';
      /* eslint-disable es/no-array-prototype-indexof -- required for testing */

      var $ = require('../internals/export');

      var $indexOf = require('../internals/array-includes').indexOf;

      var arrayMethodIsStrict = require('../internals/array-method-is-strict');

      var nativeIndexOf = [].indexOf;
      var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
      var STRICT_METHOD = arrayMethodIsStrict('indexOf'); // `Array.prototype.indexOf` method
      // https://tc39.es/ecma262/#sec-array.prototype.indexof

      $({
        target: 'Array',
        proto: true,
        forced: NEGATIVE_ZERO || !STRICT_METHOD
      }, {
        indexOf: function indexOf(searchElement
        /* , fromIndex = 0 */
        ) {
          return NEGATIVE_ZERO // convert -0 to +0
          ? nativeIndexOf.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
    }, {
      "../internals/array-includes": 24,
      "../internals/array-method-is-strict": 29,
      "../internals/export": 74
    }],
    216: [function (require, module, exports) {
      var $ = require('../internals/export');

      var isArray = require('../internals/is-array'); // `Array.isArray` method
      // https://tc39.es/ecma262/#sec-array.isarray


      $({
        target: 'Array',
        stat: true
      }, {
        isArray: isArray
      });
    }, {
      "../internals/export": 74,
      "../internals/is-array": 101
    }],
    217: [function (require, module, exports) {
      'use strict';

      var toIndexedObject = require('../internals/to-indexed-object');

      var addToUnscopables = require('../internals/add-to-unscopables');

      var Iterators = require('../internals/iterators');

      var InternalStateModule = require('../internals/internal-state');

      var defineIterator = require('../internals/define-iterator');

      var ARRAY_ITERATOR = 'Array Iterator';
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR); // `Array.prototype.entries` method
      // https://tc39.es/ecma262/#sec-array.prototype.entries
      // `Array.prototype.keys` method
      // https://tc39.es/ecma262/#sec-array.prototype.keys
      // `Array.prototype.values` method
      // https://tc39.es/ecma262/#sec-array.prototype.values
      // `Array.prototype[@@iterator]` method
      // https://tc39.es/ecma262/#sec-array.prototype-@@iterator
      // `CreateArrayIterator` internal method
      // https://tc39.es/ecma262/#sec-createarrayiterator

      module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
        setInternalState(this, {
          type: ARRAY_ITERATOR,
          target: toIndexedObject(iterated),
          // target
          index: 0,
          // next index
          kind: kind // kind

        }); // `%ArrayIteratorPrototype%.next` method
        // https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
      }, function () {
        var state = getInternalState(this);
        var target = state.target;
        var kind = state.kind;
        var index = state.index++;

        if (!target || index >= target.length) {
          state.target = undefined;
          return {
            value: undefined,
            done: true
          };
        }

        if (kind == 'keys') return {
          value: index,
          done: false
        };
        if (kind == 'values') return {
          value: target[index],
          done: false
        };
        return {
          value: [index, target[index]],
          done: false
        };
      }, 'values'); // argumentsList[@@iterator] is %ArrayProto_values%
      // https://tc39.es/ecma262/#sec-createunmappedargumentsobject
      // https://tc39.es/ecma262/#sec-createmappedargumentsobject

      Iterators.Arguments = Iterators.Array; // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables

      addToUnscopables('keys');
      addToUnscopables('values');
      addToUnscopables('entries');
    }, {
      "../internals/add-to-unscopables": 13,
      "../internals/define-iterator": 59,
      "../internals/internal-state": 99,
      "../internals/iterators": 111,
      "../internals/to-indexed-object": 182
    }],
    218: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IndexedObject = require('../internals/indexed-object');

      var toIndexedObject = require('../internals/to-indexed-object');

      var arrayMethodIsStrict = require('../internals/array-method-is-strict');

      var nativeJoin = [].join;
      var ES3_STRINGS = IndexedObject != Object;
      var STRICT_METHOD = arrayMethodIsStrict('join', ','); // `Array.prototype.join` method
      // https://tc39.es/ecma262/#sec-array.prototype.join

      $({
        target: 'Array',
        proto: true,
        forced: ES3_STRINGS || !STRICT_METHOD
      }, {
        join: function join(separator) {
          return nativeJoin.call(toIndexedObject(this), separator === undefined ? ',' : separator);
        }
      });
    }, {
      "../internals/array-method-is-strict": 29,
      "../internals/export": 74,
      "../internals/indexed-object": 95,
      "../internals/to-indexed-object": 182
    }],
    219: [function (require, module, exports) {
      var $ = require('../internals/export');

      var lastIndexOf = require('../internals/array-last-index-of'); // `Array.prototype.lastIndexOf` method
      // https://tc39.es/ecma262/#sec-array.prototype.lastindexof
      // eslint-disable-next-line es/no-array-prototype-lastindexof -- required for testing


      $({
        target: 'Array',
        proto: true,
        forced: lastIndexOf !== [].lastIndexOf
      }, {
        lastIndexOf: lastIndexOf
      });
    }, {
      "../internals/array-last-index-of": 27,
      "../internals/export": 74
    }],
    220: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var $map = require('../internals/array-iteration').map;

      var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');

      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map'); // `Array.prototype.map` method
      // https://tc39.es/ecma262/#sec-array.prototype.map
      // with adding support of @@species

      $({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT
      }, {
        map: function map(callbackfn
        /* , thisArg */
        ) {
          return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
    }, {
      "../internals/array-iteration": 26,
      "../internals/array-method-has-species-support": 28,
      "../internals/export": 74
    }],
    221: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var fails = require('../internals/fails');

      var createProperty = require('../internals/create-property');

      var ISNT_GENERIC = fails(function () {
        function F() {
          /* empty */
        } // eslint-disable-next-line es/no-array-of -- required for testing


        return !(Array.of.call(F) instanceof F);
      }); // `Array.of` method
      // https://tc39.es/ecma262/#sec-array.of
      // WebKit Array.of isn't generic

      $({
        target: 'Array',
        stat: true,
        forced: ISNT_GENERIC
      }, {
        of: function of()
        /* ...args */
        {
          var index = 0;
          var argumentsLength = arguments.length;
          var result = new (typeof this == 'function' ? this : Array)(argumentsLength);

          while (argumentsLength > index) {
            createProperty(result, index, arguments[index++]);
          }

          result.length = argumentsLength;
          return result;
        }
      });
    }, {
      "../internals/create-property": 56,
      "../internals/export": 74,
      "../internals/fails": 75
    }],
    222: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var $reduceRight = require('../internals/array-reduce').right;

      var arrayMethodIsStrict = require('../internals/array-method-is-strict');

      var CHROME_VERSION = require('../internals/engine-v8-version');

      var IS_NODE = require('../internals/engine-is-node');

      var STRICT_METHOD = arrayMethodIsStrict('reduceRight'); // Chrome 80-82 has a critical bug
      // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982

      var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83; // `Array.prototype.reduceRight` method
      // https://tc39.es/ecma262/#sec-array.prototype.reduceright

      $({
        target: 'Array',
        proto: true,
        forced: !STRICT_METHOD || CHROME_BUG
      }, {
        reduceRight: function reduceRight(callbackfn
        /* , initialValue */
        ) {
          return $reduceRight(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
    }, {
      "../internals/array-method-is-strict": 29,
      "../internals/array-reduce": 30,
      "../internals/engine-is-node": 68,
      "../internals/engine-v8-version": 71,
      "../internals/export": 74
    }],
    223: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var $reduce = require('../internals/array-reduce').left;

      var arrayMethodIsStrict = require('../internals/array-method-is-strict');

      var CHROME_VERSION = require('../internals/engine-v8-version');

      var IS_NODE = require('../internals/engine-is-node');

      var STRICT_METHOD = arrayMethodIsStrict('reduce'); // Chrome 80-82 has a critical bug
      // https://bugs.chromium.org/p/chromium/issues/detail?id=1049982

      var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83; // `Array.prototype.reduce` method
      // https://tc39.es/ecma262/#sec-array.prototype.reduce

      $({
        target: 'Array',
        proto: true,
        forced: !STRICT_METHOD || CHROME_BUG
      }, {
        reduce: function reduce(callbackfn
        /* , initialValue */
        ) {
          return $reduce(this, callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
    }, {
      "../internals/array-method-is-strict": 29,
      "../internals/array-reduce": 30,
      "../internals/engine-is-node": 68,
      "../internals/engine-v8-version": 71,
      "../internals/export": 74
    }],
    224: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var isArray = require('../internals/is-array');

      var nativeReverse = [].reverse;
      var test = [1, 2]; // `Array.prototype.reverse` method
      // https://tc39.es/ecma262/#sec-array.prototype.reverse
      // fix for Safari 12.0 bug
      // https://bugs.webkit.org/show_bug.cgi?id=188794

      $({
        target: 'Array',
        proto: true,
        forced: String(test) === String(test.reverse())
      }, {
        reverse: function reverse() {
          // eslint-disable-next-line no-self-assign -- dirty hack
          if (isArray(this)) this.length = this.length;
          return nativeReverse.call(this);
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/is-array": 101
    }],
    225: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var isObject = require('../internals/is-object');

      var isArray = require('../internals/is-array');

      var toAbsoluteIndex = require('../internals/to-absolute-index');

      var toLength = require('../internals/to-length');

      var toIndexedObject = require('../internals/to-indexed-object');

      var createProperty = require('../internals/create-property');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');

      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');
      var SPECIES = wellKnownSymbol('species');
      var nativeSlice = [].slice;
      var max = Math.max; // `Array.prototype.slice` method
      // https://tc39.es/ecma262/#sec-array.prototype.slice
      // fallback for not array-like ES3 strings and DOM objects

      $({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT
      }, {
        slice: function slice(start, end) {
          var O = toIndexedObject(this);
          var length = toLength(O.length);
          var k = toAbsoluteIndex(start, length);
          var fin = toAbsoluteIndex(end === undefined ? length : end, length); // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible

          var Constructor, result, n;

          if (isArray(O)) {
            Constructor = O.constructor; // cross-realm fallback

            if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
              Constructor = undefined;
            } else if (isObject(Constructor)) {
              Constructor = Constructor[SPECIES];
              if (Constructor === null) Constructor = undefined;
            }

            if (Constructor === Array || Constructor === undefined) {
              return nativeSlice.call(O, k, fin);
            }
          }

          result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));

          for (n = 0; k < fin; k++, n++) {
            if (k in O) createProperty(result, n, O[k]);
          }

          result.length = n;
          return result;
        }
      });
    }, {
      "../internals/array-method-has-species-support": 28,
      "../internals/create-property": 56,
      "../internals/export": 74,
      "../internals/is-array": 101,
      "../internals/is-object": 104,
      "../internals/to-absolute-index": 180,
      "../internals/to-indexed-object": 182,
      "../internals/to-length": 184,
      "../internals/well-known-symbol": 197
    }],
    226: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var $some = require('../internals/array-iteration').some;

      var arrayMethodIsStrict = require('../internals/array-method-is-strict');

      var STRICT_METHOD = arrayMethodIsStrict('some'); // `Array.prototype.some` method
      // https://tc39.es/ecma262/#sec-array.prototype.some

      $({
        target: 'Array',
        proto: true,
        forced: !STRICT_METHOD
      }, {
        some: function some(callbackfn
        /* , thisArg */
        ) {
          return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
    }, {
      "../internals/array-iteration": 26,
      "../internals/array-method-is-strict": 29,
      "../internals/export": 74
    }],
    227: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var aFunction = require('../internals/a-function');

      var toObject = require('../internals/to-object');

      var toLength = require('../internals/to-length');

      var fails = require('../internals/fails');

      var internalSort = require('../internals/array-sort');

      var arrayMethodIsStrict = require('../internals/array-method-is-strict');

      var FF = require('../internals/engine-ff-version');

      var IE_OR_EDGE = require('../internals/engine-is-ie-or-edge');

      var V8 = require('../internals/engine-v8-version');

      var WEBKIT = require('../internals/engine-webkit-version');

      var test = [];
      var nativeSort = test.sort; // IE8-

      var FAILS_ON_UNDEFINED = fails(function () {
        test.sort(undefined);
      }); // V8 bug

      var FAILS_ON_NULL = fails(function () {
        test.sort(null);
      }); // Old WebKit

      var STRICT_METHOD = arrayMethodIsStrict('sort');
      var STABLE_SORT = !fails(function () {
        // feature detection can be too slow, so check engines versions
        if (V8) return V8 < 70;
        if (FF && FF > 3) return;
        if (IE_OR_EDGE) return true;
        if (WEBKIT) return WEBKIT < 603;
        var result = '';
        var code, chr, value, index; // generate an array with more 512 elements (Chakra and old V8 fails only in this case)

        for (code = 65; code < 76; code++) {
          chr = String.fromCharCode(code);

          switch (code) {
            case 66:
            case 69:
            case 70:
            case 72:
              value = 3;
              break;

            case 68:
            case 71:
              value = 4;
              break;

            default:
              value = 2;
          }

          for (index = 0; index < 47; index++) {
            test.push({
              k: chr + index,
              v: value
            });
          }
        }

        test.sort(function (a, b) {
          return b.v - a.v;
        });

        for (index = 0; index < test.length; index++) {
          chr = test[index].k.charAt(0);
          if (result.charAt(result.length - 1) !== chr) result += chr;
        }

        return result !== 'DGBEFHACIJK';
      });
      var FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;

      var getSortCompare = function getSortCompare(comparefn) {
        return function (x, y) {
          if (y === undefined) return -1;
          if (x === undefined) return 1;
          if (comparefn !== undefined) return +comparefn(x, y) || 0;
          return String(x) > String(y) ? 1 : -1;
        };
      }; // `Array.prototype.sort` method
      // https://tc39.es/ecma262/#sec-array.prototype.sort


      $({
        target: 'Array',
        proto: true,
        forced: FORCED
      }, {
        sort: function sort(comparefn) {
          if (comparefn !== undefined) aFunction(comparefn);
          var array = toObject(this);
          if (STABLE_SORT) return comparefn === undefined ? nativeSort.call(array) : nativeSort.call(array, comparefn);
          var items = [];
          var arrayLength = toLength(array.length);
          var itemsLength, index;

          for (index = 0; index < arrayLength; index++) {
            if (index in array) items.push(array[index]);
          }

          items = internalSort(items, getSortCompare(comparefn));
          itemsLength = items.length;
          index = 0;

          while (index < itemsLength) {
            array[index] = items[index++];
          }

          while (index < arrayLength) {
            delete array[index++];
          }

          return array;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/array-method-is-strict": 29,
      "../internals/array-sort": 31,
      "../internals/engine-ff-version": 64,
      "../internals/engine-is-ie-or-edge": 66,
      "../internals/engine-v8-version": 71,
      "../internals/engine-webkit-version": 72,
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/to-length": 184,
      "../internals/to-object": 185
    }],
    228: [function (require, module, exports) {
      var setSpecies = require('../internals/set-species'); // `Array[@@species]` getter
      // https://tc39.es/ecma262/#sec-get-array-@@species


      setSpecies('Array');
    }, {
      "../internals/set-species": 164
    }],
    229: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var toAbsoluteIndex = require('../internals/to-absolute-index');

      var toInteger = require('../internals/to-integer');

      var toLength = require('../internals/to-length');

      var toObject = require('../internals/to-object');

      var arraySpeciesCreate = require('../internals/array-species-create');

      var createProperty = require('../internals/create-property');

      var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');

      var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('splice');
      var max = Math.max;
      var min = Math.min;
      var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
      var MAXIMUM_ALLOWED_LENGTH_EXCEEDED = 'Maximum allowed length exceeded'; // `Array.prototype.splice` method
      // https://tc39.es/ecma262/#sec-array.prototype.splice
      // with adding support of @@species

      $({
        target: 'Array',
        proto: true,
        forced: !HAS_SPECIES_SUPPORT
      }, {
        splice: function splice(start, deleteCount
        /* , ...items */
        ) {
          var O = toObject(this);
          var len = toLength(O.length);
          var actualStart = toAbsoluteIndex(start, len);
          var argumentsLength = arguments.length;
          var insertCount, actualDeleteCount, A, k, from, to;

          if (argumentsLength === 0) {
            insertCount = actualDeleteCount = 0;
          } else if (argumentsLength === 1) {
            insertCount = 0;
            actualDeleteCount = len - actualStart;
          } else {
            insertCount = argumentsLength - 2;
            actualDeleteCount = min(max(toInteger(deleteCount), 0), len - actualStart);
          }

          if (len + insertCount - actualDeleteCount > MAX_SAFE_INTEGER) {
            throw TypeError(MAXIMUM_ALLOWED_LENGTH_EXCEEDED);
          }

          A = arraySpeciesCreate(O, actualDeleteCount);

          for (k = 0; k < actualDeleteCount; k++) {
            from = actualStart + k;
            if (from in O) createProperty(A, k, O[from]);
          }

          A.length = actualDeleteCount;

          if (insertCount < actualDeleteCount) {
            for (k = actualStart; k < len - actualDeleteCount; k++) {
              from = k + actualDeleteCount;
              to = k + insertCount;
              if (from in O) O[to] = O[from];else delete O[to];
            }

            for (k = len; k > len - actualDeleteCount + insertCount; k--) {
              delete O[k - 1];
            }
          } else if (insertCount > actualDeleteCount) {
            for (k = len - actualDeleteCount; k > actualStart; k--) {
              from = k + actualDeleteCount - 1;
              to = k + insertCount - 1;
              if (from in O) O[to] = O[from];else delete O[to];
            }
          }

          for (k = 0; k < insertCount; k++) {
            O[k + actualStart] = arguments[k + 2];
          }

          O.length = len - actualDeleteCount + insertCount;
          return A;
        }
      });
    }, {
      "../internals/array-method-has-species-support": 28,
      "../internals/array-species-create": 32,
      "../internals/create-property": 56,
      "../internals/export": 74,
      "../internals/to-absolute-index": 180,
      "../internals/to-integer": 183,
      "../internals/to-length": 184,
      "../internals/to-object": 185
    }],
    230: [function (require, module, exports) {
      // this method was added to unscopables after implementation
      // in popular engines, so it's moved to a separate module
      var addToUnscopables = require('../internals/add-to-unscopables'); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables


      addToUnscopables('flatMap');
    }, {
      "../internals/add-to-unscopables": 13
    }],
    231: [function (require, module, exports) {
      // this method was added to unscopables after implementation
      // in popular engines, so it's moved to a separate module
      var addToUnscopables = require('../internals/add-to-unscopables'); // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables


      addToUnscopables('flat');
    }, {
      "../internals/add-to-unscopables": 13
    }],
    232: [function (require, module, exports) {
      var $ = require('../internals/export');

      var ArrayBufferModule = require('../internals/array-buffer');

      var NATIVE_ARRAY_BUFFER = require('../internals/array-buffer-native'); // `DataView` constructor
      // https://tc39.es/ecma262/#sec-dataview-constructor


      $({
        global: true,
        forced: !NATIVE_ARRAY_BUFFER
      }, {
        DataView: ArrayBufferModule.DataView
      });
    }, {
      "../internals/array-buffer": 19,
      "../internals/array-buffer-native": 17,
      "../internals/export": 74
    }],
    233: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var getFullYear = Date.prototype.getFullYear; // `Date.prototype.getYear` method
      // https://tc39.es/ecma262/#sec-date.prototype.getyear

      $({
        target: 'Date',
        proto: true
      }, {
        getYear: function getYear() {
          return getFullYear.call(this) - 1900;
        }
      });
    }, {
      "../internals/export": 74
    }],
    234: [function (require, module, exports) {
      var $ = require('../internals/export'); // `Date.now` method
      // https://tc39.es/ecma262/#sec-date.now


      $({
        target: 'Date',
        stat: true
      }, {
        now: function now() {
          return new Date().getTime();
        }
      });
    }, {
      "../internals/export": 74
    }],
    235: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var toInteger = require('../internals/to-integer');

      var getTime = Date.prototype.getTime;
      var setFullYear = Date.prototype.setFullYear; // `Date.prototype.setYear` method
      // https://tc39.es/ecma262/#sec-date.prototype.setyear

      $({
        target: 'Date',
        proto: true
      }, {
        setYear: function setYear(year) {
          // validate
          getTime.call(this);
          var yi = toInteger(year);
          var yyyy = 0 <= yi && yi <= 99 ? yi + 1900 : yi;
          return setFullYear.call(this, yyyy);
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/to-integer": 183
    }],
    236: [function (require, module, exports) {
      var $ = require('../internals/export'); // `Date.prototype.toGMTString` method
      // https://tc39.es/ecma262/#sec-date.prototype.togmtstring


      $({
        target: 'Date',
        proto: true
      }, {
        toGMTString: Date.prototype.toUTCString
      });
    }, {
      "../internals/export": 74
    }],
    237: [function (require, module, exports) {
      var $ = require('../internals/export');

      var toISOString = require('../internals/date-to-iso-string'); // `Date.prototype.toISOString` method
      // https://tc39.es/ecma262/#sec-date.prototype.toisostring
      // PhantomJS / old WebKit has a broken implementations


      $({
        target: 'Date',
        proto: true,
        forced: Date.prototype.toISOString !== toISOString
      }, {
        toISOString: toISOString
      });
    }, {
      "../internals/date-to-iso-string": 57,
      "../internals/export": 74
    }],
    238: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var fails = require('../internals/fails');

      var toObject = require('../internals/to-object');

      var toPrimitive = require('../internals/to-primitive');

      var FORCED = fails(function () {
        return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({
          toISOString: function toISOString() {
            return 1;
          }
        }) !== 1;
      }); // `Date.prototype.toJSON` method
      // https://tc39.es/ecma262/#sec-date.prototype.tojson

      $({
        target: 'Date',
        proto: true,
        forced: FORCED
      }, {
        // eslint-disable-next-line no-unused-vars -- required for `.length`
        toJSON: function toJSON(key) {
          var O = toObject(this);
          var pv = toPrimitive(O);
          return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/to-object": 185,
      "../internals/to-primitive": 188
    }],
    239: [function (require, module, exports) {
      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var dateToPrimitive = require('../internals/date-to-primitive');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
      var DatePrototype = Date.prototype; // `Date.prototype[@@toPrimitive]` method
      // https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive

      if (!(TO_PRIMITIVE in DatePrototype)) {
        createNonEnumerableProperty(DatePrototype, TO_PRIMITIVE, dateToPrimitive);
      }
    }, {
      "../internals/create-non-enumerable-property": 54,
      "../internals/date-to-primitive": 58,
      "../internals/well-known-symbol": 197
    }],
    240: [function (require, module, exports) {
      var redefine = require('../internals/redefine');

      var DatePrototype = Date.prototype;
      var INVALID_DATE = 'Invalid Date';
      var TO_STRING = 'toString';
      var nativeDateToString = DatePrototype[TO_STRING];
      var getTime = DatePrototype.getTime; // `Date.prototype.toString` method
      // https://tc39.es/ecma262/#sec-date.prototype.tostring

      if (new Date(NaN) + '' != INVALID_DATE) {
        redefine(DatePrototype, TO_STRING, function toString() {
          var value = getTime.call(this); // eslint-disable-next-line no-self-compare -- NaN check

          return value === value ? nativeDateToString.call(this) : INVALID_DATE;
        });
      }
    }, {
      "../internals/redefine": 152
    }],
    241: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var raw = /[\w*+\-./@]/;

      var hex = function hex(code, length) {
        var result = code.toString(16);

        while (result.length < length) {
          result = '0' + result;
        }

        return result;
      }; // `escape` method
      // https://tc39.es/ecma262/#sec-escape-string


      $({
        global: true
      }, {
        escape: function escape(string) {
          var str = String(string);
          var result = '';
          var length = str.length;
          var index = 0;
          var chr, code;

          while (index < length) {
            chr = str.charAt(index++);

            if (raw.test(chr)) {
              result += chr;
            } else {
              code = chr.charCodeAt(0);

              if (code < 256) {
                result += '%' + hex(code, 2);
              } else {
                result += '%u' + hex(code, 4).toUpperCase();
              }
            }
          }

          return result;
        }
      });
    }, {
      "../internals/export": 74
    }],
    242: [function (require, module, exports) {
      var $ = require('../internals/export');

      var bind = require('../internals/function-bind'); // `Function.prototype.bind` method
      // https://tc39.es/ecma262/#sec-function.prototype.bind


      $({
        target: 'Function',
        proto: true
      }, {
        bind: bind
      });
    }, {
      "../internals/export": 74,
      "../internals/function-bind": 80
    }],
    243: [function (require, module, exports) {
      'use strict';

      var isObject = require('../internals/is-object');

      var definePropertyModule = require('../internals/object-define-property');

      var getPrototypeOf = require('../internals/object-get-prototype-of');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var HAS_INSTANCE = wellKnownSymbol('hasInstance');
      var FunctionPrototype = Function.prototype; // `Function.prototype[@@hasInstance]` method
      // https://tc39.es/ecma262/#sec-function.prototype-@@hasinstance

      if (!(HAS_INSTANCE in FunctionPrototype)) {
        definePropertyModule.f(FunctionPrototype, HAS_INSTANCE, {
          value: function value(O) {
            if (typeof this != 'function' || !isObject(O)) return false;
            if (!isObject(this.prototype)) return O instanceof this; // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:

            while (O = getPrototypeOf(O)) {
              if (this.prototype === O) return true;
            }

            return false;
          }
        });
      }
    }, {
      "../internals/is-object": 104,
      "../internals/object-define-property": 133,
      "../internals/object-get-prototype-of": 138,
      "../internals/well-known-symbol": 197
    }],
    244: [function (require, module, exports) {
      var DESCRIPTORS = require('../internals/descriptors');

      var defineProperty = require('../internals/object-define-property').f;

      var FunctionPrototype = Function.prototype;
      var FunctionPrototypeToString = FunctionPrototype.toString;
      var nameRE = /^\s*function ([^ (]*)/;
      var NAME = 'name'; // Function instances `.name` property
      // https://tc39.es/ecma262/#sec-function-instances-name

      if (DESCRIPTORS && !(NAME in FunctionPrototype)) {
        defineProperty(FunctionPrototype, NAME, {
          configurable: true,
          get: function get() {
            try {
              return FunctionPrototypeToString.call(this).match(nameRE)[1];
            } catch (error) {
              return '';
            }
          }
        });
      }
    }, {
      "../internals/descriptors": 61,
      "../internals/object-define-property": 133
    }],
    245: [function (require, module, exports) {
      var $ = require('../internals/export');

      var global = require('../internals/global'); // `globalThis` object
      // https://tc39.es/ecma262/#sec-globalthis


      $({
        global: true
      }, {
        globalThis: global
      });
    }, {
      "../internals/export": 74,
      "../internals/global": 88
    }],
    246: [function (require, module, exports) {
      var $ = require('../internals/export');

      var getBuiltIn = require('../internals/get-built-in');

      var fails = require('../internals/fails');

      var $stringify = getBuiltIn('JSON', 'stringify');
      var re = /[\uD800-\uDFFF]/g;
      var low = /^[\uD800-\uDBFF]$/;
      var hi = /^[\uDC00-\uDFFF]$/;

      var fix = function fix(match, offset, string) {
        var prev = string.charAt(offset - 1);
        var next = string.charAt(offset + 1);

        if (low.test(match) && !hi.test(next) || hi.test(match) && !low.test(prev)) {
          return "\\u" + match.charCodeAt(0).toString(16);
        }

        return match;
      };

      var FORCED = fails(function () {
        return $stringify("\uDF06\uD834") !== "\"\\udf06\\ud834\"" || $stringify("\uDEAD") !== "\"\\udead\"";
      });

      if ($stringify) {
        // `JSON.stringify` method
        // https://tc39.es/ecma262/#sec-json.stringify
        // https://github.com/tc39/proposal-well-formed-stringify
        $({
          target: 'JSON',
          stat: true,
          forced: FORCED
        }, {
          // eslint-disable-next-line no-unused-vars -- required for `.length`
          stringify: function stringify(it, replacer, space) {
            var result = $stringify.apply(null, arguments);
            return typeof result == 'string' ? result.replace(re, fix) : result;
          }
        });
      }
    }, {
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/get-built-in": 82
    }],
    247: [function (require, module, exports) {
      var global = require('../internals/global');

      var setToStringTag = require('../internals/set-to-string-tag'); // JSON[@@toStringTag] property
      // https://tc39.es/ecma262/#sec-json-@@tostringtag


      setToStringTag(global.JSON, 'JSON', true);
    }, {
      "../internals/global": 88,
      "../internals/set-to-string-tag": 165
    }],
    248: [function (require, module, exports) {
      'use strict';

      var collection = require('../internals/collection');

      var collectionStrong = require('../internals/collection-strong'); // `Map` constructor
      // https://tc39.es/ecma262/#sec-map-objects


      module.exports = collection('Map', function (init) {
        return function Map() {
          return init(this, arguments.length ? arguments[0] : undefined);
        };
      }, collectionStrong);
    }, {
      "../internals/collection": 47,
      "../internals/collection-strong": 45
    }],
    249: [function (require, module, exports) {
      var $ = require('../internals/export');

      var log1p = require('../internals/math-log1p'); // eslint-disable-next-line es/no-math-acosh -- required for testing


      var $acosh = Math.acosh;
      var log = Math.log;
      var sqrt = Math.sqrt;
      var LN2 = Math.LN2;
      var FORCED = !$acosh // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
      || Math.floor($acosh(Number.MAX_VALUE)) != 710 // Tor Browser bug: Math.acosh(Infinity) -> NaN
      || $acosh(Infinity) != Infinity; // `Math.acosh` method
      // https://tc39.es/ecma262/#sec-math.acosh

      $({
        target: 'Math',
        stat: true,
        forced: FORCED
      }, {
        acosh: function acosh(x) {
          return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? log(x) + LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/math-log1p": 116
    }],
    250: [function (require, module, exports) {
      var $ = require('../internals/export'); // eslint-disable-next-line es/no-math-asinh -- required for testing


      var $asinh = Math.asinh;
      var log = Math.log;
      var sqrt = Math.sqrt;

      function asinh(x) {
        return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : log(x + sqrt(x * x + 1));
      } // `Math.asinh` method
      // https://tc39.es/ecma262/#sec-math.asinh
      // Tor Browser bug: Math.asinh(0) -> -0


      $({
        target: 'Math',
        stat: true,
        forced: !($asinh && 1 / $asinh(0) > 0)
      }, {
        asinh: asinh
      });
    }, {
      "../internals/export": 74
    }],
    251: [function (require, module, exports) {
      var $ = require('../internals/export'); // eslint-disable-next-line es/no-math-atanh -- required for testing


      var $atanh = Math.atanh;
      var log = Math.log; // `Math.atanh` method
      // https://tc39.es/ecma262/#sec-math.atanh
      // Tor Browser bug: Math.atanh(-0) -> 0

      $({
        target: 'Math',
        stat: true,
        forced: !($atanh && 1 / $atanh(-0) < 0)
      }, {
        atanh: function atanh(x) {
          return (x = +x) == 0 ? x : log((1 + x) / (1 - x)) / 2;
        }
      });
    }, {
      "../internals/export": 74
    }],
    252: [function (require, module, exports) {
      var $ = require('../internals/export');

      var sign = require('../internals/math-sign');

      var abs = Math.abs;
      var pow = Math.pow; // `Math.cbrt` method
      // https://tc39.es/ecma262/#sec-math.cbrt

      $({
        target: 'Math',
        stat: true
      }, {
        cbrt: function cbrt(x) {
          return sign(x = +x) * pow(abs(x), 1 / 3);
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/math-sign": 118
    }],
    253: [function (require, module, exports) {
      var $ = require('../internals/export');

      var floor = Math.floor;
      var log = Math.log;
      var LOG2E = Math.LOG2E; // `Math.clz32` method
      // https://tc39.es/ecma262/#sec-math.clz32

      $({
        target: 'Math',
        stat: true
      }, {
        clz32: function clz32(x) {
          return (x >>>= 0) ? 31 - floor(log(x + 0.5) * LOG2E) : 32;
        }
      });
    }, {
      "../internals/export": 74
    }],
    254: [function (require, module, exports) {
      var $ = require('../internals/export');

      var expm1 = require('../internals/math-expm1'); // eslint-disable-next-line es/no-math-cosh -- required for testing


      var $cosh = Math.cosh;
      var abs = Math.abs;
      var E = Math.E; // `Math.cosh` method
      // https://tc39.es/ecma262/#sec-math.cosh

      $({
        target: 'Math',
        stat: true,
        forced: !$cosh || $cosh(710) === Infinity
      }, {
        cosh: function cosh(x) {
          var t = expm1(abs(x) - 1) + 1;
          return (t + 1 / (t * E * E)) * (E / 2);
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/math-expm1": 114
    }],
    255: [function (require, module, exports) {
      var $ = require('../internals/export');

      var expm1 = require('../internals/math-expm1'); // `Math.expm1` method
      // https://tc39.es/ecma262/#sec-math.expm1
      // eslint-disable-next-line es/no-math-expm1 -- required for testing


      $({
        target: 'Math',
        stat: true,
        forced: expm1 != Math.expm1
      }, {
        expm1: expm1
      });
    }, {
      "../internals/export": 74,
      "../internals/math-expm1": 114
    }],
    256: [function (require, module, exports) {
      var $ = require('../internals/export');

      var fround = require('../internals/math-fround'); // `Math.fround` method
      // https://tc39.es/ecma262/#sec-math.fround


      $({
        target: 'Math',
        stat: true
      }, {
        fround: fround
      });
    }, {
      "../internals/export": 74,
      "../internals/math-fround": 115
    }],
    257: [function (require, module, exports) {
      var $ = require('../internals/export'); // eslint-disable-next-line es/no-math-hypot -- required for testing


      var $hypot = Math.hypot;
      var abs = Math.abs;
      var sqrt = Math.sqrt; // Chrome 77 bug
      // https://bugs.chromium.org/p/v8/issues/detail?id=9546

      var BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity; // `Math.hypot` method
      // https://tc39.es/ecma262/#sec-math.hypot

      $({
        target: 'Math',
        stat: true,
        forced: BUGGY
      }, {
        // eslint-disable-next-line no-unused-vars -- required for `.length`
        hypot: function hypot(value1, value2) {
          var sum = 0;
          var i = 0;
          var aLen = arguments.length;
          var larg = 0;
          var arg, div;

          while (i < aLen) {
            arg = abs(arguments[i++]);

            if (larg < arg) {
              div = larg / arg;
              sum = sum * div * div + 1;
              larg = arg;
            } else if (arg > 0) {
              div = arg / larg;
              sum += div * div;
            } else sum += arg;
          }

          return larg === Infinity ? Infinity : larg * sqrt(sum);
        }
      });
    }, {
      "../internals/export": 74
    }],
    258: [function (require, module, exports) {
      var $ = require('../internals/export');

      var fails = require('../internals/fails'); // eslint-disable-next-line es/no-math-imul -- required for testing


      var $imul = Math.imul;
      var FORCED = fails(function () {
        return $imul(0xFFFFFFFF, 5) != -5 || $imul.length != 2;
      }); // `Math.imul` method
      // https://tc39.es/ecma262/#sec-math.imul
      // some WebKit versions fails with big numbers, some has wrong arity

      $({
        target: 'Math',
        stat: true,
        forced: FORCED
      }, {
        imul: function imul(x, y) {
          var UINT16 = 0xFFFF;
          var xn = +x;
          var yn = +y;
          var xl = UINT16 & xn;
          var yl = UINT16 & yn;
          return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/fails": 75
    }],
    259: [function (require, module, exports) {
      var $ = require('../internals/export');

      var log = Math.log;
      var LOG10E = Math.LOG10E; // `Math.log10` method
      // https://tc39.es/ecma262/#sec-math.log10

      $({
        target: 'Math',
        stat: true
      }, {
        log10: function log10(x) {
          return log(x) * LOG10E;
        }
      });
    }, {
      "../internals/export": 74
    }],
    260: [function (require, module, exports) {
      var $ = require('../internals/export');

      var log1p = require('../internals/math-log1p'); // `Math.log1p` method
      // https://tc39.es/ecma262/#sec-math.log1p


      $({
        target: 'Math',
        stat: true
      }, {
        log1p: log1p
      });
    }, {
      "../internals/export": 74,
      "../internals/math-log1p": 116
    }],
    261: [function (require, module, exports) {
      var $ = require('../internals/export');

      var log = Math.log;
      var LN2 = Math.LN2; // `Math.log2` method
      // https://tc39.es/ecma262/#sec-math.log2

      $({
        target: 'Math',
        stat: true
      }, {
        log2: function log2(x) {
          return log(x) / LN2;
        }
      });
    }, {
      "../internals/export": 74
    }],
    262: [function (require, module, exports) {
      var $ = require('../internals/export');

      var sign = require('../internals/math-sign'); // `Math.sign` method
      // https://tc39.es/ecma262/#sec-math.sign


      $({
        target: 'Math',
        stat: true
      }, {
        sign: sign
      });
    }, {
      "../internals/export": 74,
      "../internals/math-sign": 118
    }],
    263: [function (require, module, exports) {
      var $ = require('../internals/export');

      var fails = require('../internals/fails');

      var expm1 = require('../internals/math-expm1');

      var abs = Math.abs;
      var exp = Math.exp;
      var E = Math.E;
      var FORCED = fails(function () {
        // eslint-disable-next-line es/no-math-sinh -- required for testing
        return Math.sinh(-2e-17) != -2e-17;
      }); // `Math.sinh` method
      // https://tc39.es/ecma262/#sec-math.sinh
      // V8 near Chromium 38 has a problem with very small numbers

      $({
        target: 'Math',
        stat: true,
        forced: FORCED
      }, {
        sinh: function sinh(x) {
          return abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (E / 2);
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/math-expm1": 114
    }],
    264: [function (require, module, exports) {
      var $ = require('../internals/export');

      var expm1 = require('../internals/math-expm1');

      var exp = Math.exp; // `Math.tanh` method
      // https://tc39.es/ecma262/#sec-math.tanh

      $({
        target: 'Math',
        stat: true
      }, {
        tanh: function tanh(x) {
          var a = expm1(x = +x);
          var b = expm1(-x);
          return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/math-expm1": 114
    }],
    265: [function (require, module, exports) {
      var setToStringTag = require('../internals/set-to-string-tag'); // Math[@@toStringTag] property
      // https://tc39.es/ecma262/#sec-math-@@tostringtag


      setToStringTag(Math, 'Math', true);
    }, {
      "../internals/set-to-string-tag": 165
    }],
    266: [function (require, module, exports) {
      var $ = require('../internals/export');

      var ceil = Math.ceil;
      var floor = Math.floor; // `Math.trunc` method
      // https://tc39.es/ecma262/#sec-math.trunc

      $({
        target: 'Math',
        stat: true
      }, {
        trunc: function trunc(it) {
          return (it > 0 ? floor : ceil)(it);
        }
      });
    }, {
      "../internals/export": 74
    }],
    267: [function (require, module, exports) {
      'use strict';

      var DESCRIPTORS = require('../internals/descriptors');

      var global = require('../internals/global');

      var isForced = require('../internals/is-forced');

      var redefine = require('../internals/redefine');

      var has = require('../internals/has');

      var classof = require('../internals/classof-raw');

      var inheritIfRequired = require('../internals/inherit-if-required');

      var toPrimitive = require('../internals/to-primitive');

      var fails = require('../internals/fails');

      var create = require('../internals/object-create');

      var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;

      var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;

      var defineProperty = require('../internals/object-define-property').f;

      var trim = require('../internals/string-trim').trim;

      var NUMBER = 'Number';
      var NativeNumber = global[NUMBER];
      var NumberPrototype = NativeNumber.prototype; // Opera ~12 has broken Object#toString

      var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER; // `ToNumber` abstract operation
      // https://tc39.es/ecma262/#sec-tonumber

      var toNumber = function toNumber(argument) {
        var it = toPrimitive(argument, false);
        var first, third, radix, maxCode, digits, length, index, code;

        if (typeof it == 'string' && it.length > 2) {
          it = trim(it);
          first = it.charCodeAt(0);

          if (first === 43 || first === 45) {
            third = it.charCodeAt(2);
            if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
          } else if (first === 48) {
            switch (it.charCodeAt(1)) {
              case 66:
              case 98:
                radix = 2;
                maxCode = 49;
                break;
              // fast equal of /^0b[01]+$/i

              case 79:
              case 111:
                radix = 8;
                maxCode = 55;
                break;
              // fast equal of /^0o[0-7]+$/i

              default:
                return +it;
            }

            digits = it.slice(2);
            length = digits.length;

            for (index = 0; index < length; index++) {
              code = digits.charCodeAt(index); // parseInt parses a string to a first unavailable symbol
              // but ToNumber should return NaN if a string contains unavailable symbols

              if (code < 48 || code > maxCode) return NaN;
            }

            return parseInt(digits, radix);
          }
        }

        return +it;
      }; // `Number` constructor
      // https://tc39.es/ecma262/#sec-number-constructor


      if (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {
        var NumberWrapper = function Number(value) {
          var it = arguments.length < 1 ? 0 : value;
          var dummy = this;
          return dummy instanceof NumberWrapper // check on 1..constructor(foo) case
          && (BROKEN_CLASSOF ? fails(function () {
            NumberPrototype.valueOf.call(dummy);
          }) : classof(dummy) != NUMBER) ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);
        };

        for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : ( // ES3:
        'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES2015 (in case, if modules with ES2015 Number statics required before):
        'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,' + // ESNext
        'fromString,range').split(','), j = 0, key; keys.length > j; j++) {
          if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {
            defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));
          }
        }

        NumberWrapper.prototype = NumberPrototype;
        NumberPrototype.constructor = NumberWrapper;
        redefine(global, NUMBER, NumberWrapper);
      }
    }, {
      "../internals/classof-raw": 39,
      "../internals/descriptors": 61,
      "../internals/fails": 75,
      "../internals/global": 88,
      "../internals/has": 89,
      "../internals/inherit-if-required": 96,
      "../internals/is-forced": 102,
      "../internals/object-create": 131,
      "../internals/object-define-property": 133,
      "../internals/object-get-own-property-descriptor": 134,
      "../internals/object-get-own-property-names": 136,
      "../internals/redefine": 152,
      "../internals/string-trim": 177,
      "../internals/to-primitive": 188
    }],
    268: [function (require, module, exports) {
      var $ = require('../internals/export'); // `Number.EPSILON` constant
      // https://tc39.es/ecma262/#sec-number.epsilon


      $({
        target: 'Number',
        stat: true
      }, {
        EPSILON: Math.pow(2, -52)
      });
    }, {
      "../internals/export": 74
    }],
    269: [function (require, module, exports) {
      var $ = require('../internals/export');

      var numberIsFinite = require('../internals/number-is-finite'); // `Number.isFinite` method
      // https://tc39.es/ecma262/#sec-number.isfinite


      $({
        target: 'Number',
        stat: true
      }, {
        isFinite: numberIsFinite
      });
    }, {
      "../internals/export": 74,
      "../internals/number-is-finite": 126
    }],
    270: [function (require, module, exports) {
      var $ = require('../internals/export');

      var isInteger = require('../internals/is-integer'); // `Number.isInteger` method
      // https://tc39.es/ecma262/#sec-number.isinteger


      $({
        target: 'Number',
        stat: true
      }, {
        isInteger: isInteger
      });
    }, {
      "../internals/export": 74,
      "../internals/is-integer": 103
    }],
    271: [function (require, module, exports) {
      var $ = require('../internals/export'); // `Number.isNaN` method
      // https://tc39.es/ecma262/#sec-number.isnan


      $({
        target: 'Number',
        stat: true
      }, {
        isNaN: function isNaN(number) {
          // eslint-disable-next-line no-self-compare -- NaN check
          return number != number;
        }
      });
    }, {
      "../internals/export": 74
    }],
    272: [function (require, module, exports) {
      var $ = require('../internals/export');

      var isInteger = require('../internals/is-integer');

      var abs = Math.abs; // `Number.isSafeInteger` method
      // https://tc39.es/ecma262/#sec-number.issafeinteger

      $({
        target: 'Number',
        stat: true
      }, {
        isSafeInteger: function isSafeInteger(number) {
          return isInteger(number) && abs(number) <= 0x1FFFFFFFFFFFFF;
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/is-integer": 103
    }],
    273: [function (require, module, exports) {
      var $ = require('../internals/export'); // `Number.MAX_SAFE_INTEGER` constant
      // https://tc39.es/ecma262/#sec-number.max_safe_integer


      $({
        target: 'Number',
        stat: true
      }, {
        MAX_SAFE_INTEGER: 0x1FFFFFFFFFFFFF
      });
    }, {
      "../internals/export": 74
    }],
    274: [function (require, module, exports) {
      var $ = require('../internals/export'); // `Number.MIN_SAFE_INTEGER` constant
      // https://tc39.es/ecma262/#sec-number.min_safe_integer


      $({
        target: 'Number',
        stat: true
      }, {
        MIN_SAFE_INTEGER: -0x1FFFFFFFFFFFFF
      });
    }, {
      "../internals/export": 74
    }],
    275: [function (require, module, exports) {
      var $ = require('../internals/export');

      var parseFloat = require('../internals/number-parse-float'); // `Number.parseFloat` method
      // https://tc39.es/ecma262/#sec-number.parseFloat
      // eslint-disable-next-line es/no-number-parsefloat -- required for testing


      $({
        target: 'Number',
        stat: true,
        forced: Number.parseFloat != parseFloat
      }, {
        parseFloat: parseFloat
      });
    }, {
      "../internals/export": 74,
      "../internals/number-parse-float": 127
    }],
    276: [function (require, module, exports) {
      var $ = require('../internals/export');

      var parseInt = require('../internals/number-parse-int'); // `Number.parseInt` method
      // https://tc39.es/ecma262/#sec-number.parseint
      // eslint-disable-next-line es/no-number-parseint -- required for testing


      $({
        target: 'Number',
        stat: true,
        forced: Number.parseInt != parseInt
      }, {
        parseInt: parseInt
      });
    }, {
      "../internals/export": 74,
      "../internals/number-parse-int": 128
    }],
    277: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var toInteger = require('../internals/to-integer');

      var thisNumberValue = require('../internals/this-number-value');

      var repeat = require('../internals/string-repeat');

      var fails = require('../internals/fails');

      var nativeToFixed = 1.0.toFixed;
      var floor = Math.floor;

      var pow = function pow(x, n, acc) {
        return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
      };

      var log = function log(x) {
        var n = 0;
        var x2 = x;

        while (x2 >= 4096) {
          n += 12;
          x2 /= 4096;
        }

        while (x2 >= 2) {
          n += 1;
          x2 /= 2;
        }

        return n;
      };

      var multiply = function multiply(data, n, c) {
        var index = -1;
        var c2 = c;

        while (++index < 6) {
          c2 += n * data[index];
          data[index] = c2 % 1e7;
          c2 = floor(c2 / 1e7);
        }
      };

      var divide = function divide(data, n) {
        var index = 6;
        var c = 0;

        while (--index >= 0) {
          c += data[index];
          data[index] = floor(c / n);
          c = c % n * 1e7;
        }
      };

      var dataToString = function dataToString(data) {
        var index = 6;
        var s = '';

        while (--index >= 0) {
          if (s !== '' || index === 0 || data[index] !== 0) {
            var t = String(data[index]);
            s = s === '' ? t : s + repeat.call('0', 7 - t.length) + t;
          }
        }

        return s;
      };

      var FORCED = nativeToFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128.0.toFixed(0) !== '1000000000000000128') || !fails(function () {
        // V8 ~ Android 4.3-
        nativeToFixed.call({});
      }); // `Number.prototype.toFixed` method
      // https://tc39.es/ecma262/#sec-number.prototype.tofixed

      $({
        target: 'Number',
        proto: true,
        forced: FORCED
      }, {
        toFixed: function toFixed(fractionDigits) {
          var number = thisNumberValue(this);
          var fractDigits = toInteger(fractionDigits);
          var data = [0, 0, 0, 0, 0, 0];
          var sign = '';
          var result = '0';
          var e, z, j, k;
          if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits'); // eslint-disable-next-line no-self-compare -- NaN check

          if (number != number) return 'NaN';
          if (number <= -1e21 || number >= 1e21) return String(number);

          if (number < 0) {
            sign = '-';
            number = -number;
          }

          if (number > 1e-21) {
            e = log(number * pow(2, 69, 1)) - 69;
            z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);
            z *= 0x10000000000000;
            e = 52 - e;

            if (e > 0) {
              multiply(data, 0, z);
              j = fractDigits;

              while (j >= 7) {
                multiply(data, 1e7, 0);
                j -= 7;
              }

              multiply(data, pow(10, j, 1), 0);
              j = e - 1;

              while (j >= 23) {
                divide(data, 1 << 23);
                j -= 23;
              }

              divide(data, 1 << j);
              multiply(data, 1, 1);
              divide(data, 2);
              result = dataToString(data);
            } else {
              multiply(data, 0, z);
              multiply(data, 1 << -e, 0);
              result = dataToString(data) + repeat.call('0', fractDigits);
            }
          }

          if (fractDigits > 0) {
            k = result.length;
            result = sign + (k <= fractDigits ? '0.' + repeat.call('0', fractDigits - k) + result : result.slice(0, k - fractDigits) + '.' + result.slice(k - fractDigits));
          } else {
            result = sign + result;
          }

          return result;
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/string-repeat": 175,
      "../internals/this-number-value": 179,
      "../internals/to-integer": 183
    }],
    278: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var fails = require('../internals/fails');

      var thisNumberValue = require('../internals/this-number-value');

      var nativeToPrecision = 1.0.toPrecision;
      var FORCED = fails(function () {
        // IE7-
        return nativeToPrecision.call(1, undefined) !== '1';
      }) || !fails(function () {
        // V8 ~ Android 4.3-
        nativeToPrecision.call({});
      }); // `Number.prototype.toPrecision` method
      // https://tc39.es/ecma262/#sec-number.prototype.toprecision

      $({
        target: 'Number',
        proto: true,
        forced: FORCED
      }, {
        toPrecision: function toPrecision(precision) {
          return precision === undefined ? nativeToPrecision.call(thisNumberValue(this)) : nativeToPrecision.call(thisNumberValue(this), precision);
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/this-number-value": 179
    }],
    279: [function (require, module, exports) {
      var $ = require('../internals/export');

      var assign = require('../internals/object-assign'); // `Object.assign` method
      // https://tc39.es/ecma262/#sec-object.assign
      // eslint-disable-next-line es/no-object-assign -- required for testing


      $({
        target: 'Object',
        stat: true,
        forced: Object.assign !== assign
      }, {
        assign: assign
      });
    }, {
      "../internals/export": 74,
      "../internals/object-assign": 130
    }],
    280: [function (require, module, exports) {
      var $ = require('../internals/export');

      var DESCRIPTORS = require('../internals/descriptors');

      var create = require('../internals/object-create'); // `Object.create` method
      // https://tc39.es/ecma262/#sec-object.create


      $({
        target: 'Object',
        stat: true,
        sham: !DESCRIPTORS
      }, {
        create: create
      });
    }, {
      "../internals/descriptors": 61,
      "../internals/export": 74,
      "../internals/object-create": 131
    }],
    281: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var DESCRIPTORS = require('../internals/descriptors');

      var FORCED = require('../internals/object-prototype-accessors-forced');

      var toObject = require('../internals/to-object');

      var aFunction = require('../internals/a-function');

      var definePropertyModule = require('../internals/object-define-property'); // `Object.prototype.__defineGetter__` method
      // https://tc39.es/ecma262/#sec-object.prototype.__defineGetter__


      if (DESCRIPTORS) {
        $({
          target: 'Object',
          proto: true,
          forced: FORCED
        }, {
          __defineGetter__: function __defineGetter__(P, getter) {
            definePropertyModule.f(toObject(this), P, {
              get: aFunction(getter),
              enumerable: true,
              configurable: true
            });
          }
        });
      }
    }, {
      "../internals/a-function": 11,
      "../internals/descriptors": 61,
      "../internals/export": 74,
      "../internals/object-define-property": 133,
      "../internals/object-prototype-accessors-forced": 143,
      "../internals/to-object": 185
    }],
    282: [function (require, module, exports) {
      var $ = require('../internals/export');

      var DESCRIPTORS = require('../internals/descriptors');

      var defineProperties = require('../internals/object-define-properties'); // `Object.defineProperties` method
      // https://tc39.es/ecma262/#sec-object.defineproperties


      $({
        target: 'Object',
        stat: true,
        forced: !DESCRIPTORS,
        sham: !DESCRIPTORS
      }, {
        defineProperties: defineProperties
      });
    }, {
      "../internals/descriptors": 61,
      "../internals/export": 74,
      "../internals/object-define-properties": 132
    }],
    283: [function (require, module, exports) {
      var $ = require('../internals/export');

      var DESCRIPTORS = require('../internals/descriptors');

      var objectDefinePropertyModile = require('../internals/object-define-property'); // `Object.defineProperty` method
      // https://tc39.es/ecma262/#sec-object.defineproperty


      $({
        target: 'Object',
        stat: true,
        forced: !DESCRIPTORS,
        sham: !DESCRIPTORS
      }, {
        defineProperty: objectDefinePropertyModile.f
      });
    }, {
      "../internals/descriptors": 61,
      "../internals/export": 74,
      "../internals/object-define-property": 133
    }],
    284: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var DESCRIPTORS = require('../internals/descriptors');

      var FORCED = require('../internals/object-prototype-accessors-forced');

      var toObject = require('../internals/to-object');

      var aFunction = require('../internals/a-function');

      var definePropertyModule = require('../internals/object-define-property'); // `Object.prototype.__defineSetter__` method
      // https://tc39.es/ecma262/#sec-object.prototype.__defineSetter__


      if (DESCRIPTORS) {
        $({
          target: 'Object',
          proto: true,
          forced: FORCED
        }, {
          __defineSetter__: function __defineSetter__(P, setter) {
            definePropertyModule.f(toObject(this), P, {
              set: aFunction(setter),
              enumerable: true,
              configurable: true
            });
          }
        });
      }
    }, {
      "../internals/a-function": 11,
      "../internals/descriptors": 61,
      "../internals/export": 74,
      "../internals/object-define-property": 133,
      "../internals/object-prototype-accessors-forced": 143,
      "../internals/to-object": 185
    }],
    285: [function (require, module, exports) {
      var $ = require('../internals/export');

      var $entries = require('../internals/object-to-array').entries; // `Object.entries` method
      // https://tc39.es/ecma262/#sec-object.entries


      $({
        target: 'Object',
        stat: true
      }, {
        entries: function entries(O) {
          return $entries(O);
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/object-to-array": 145
    }],
    286: [function (require, module, exports) {
      var $ = require('../internals/export');

      var FREEZING = require('../internals/freezing');

      var fails = require('../internals/fails');

      var isObject = require('../internals/is-object');

      var onFreeze = require('../internals/internal-metadata').onFreeze; // eslint-disable-next-line es/no-object-freeze -- safe


      var $freeze = Object.freeze;
      var FAILS_ON_PRIMITIVES = fails(function () {
        $freeze(1);
      }); // `Object.freeze` method
      // https://tc39.es/ecma262/#sec-object.freeze

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES,
        sham: !FREEZING
      }, {
        freeze: function freeze(it) {
          return $freeze && isObject(it) ? $freeze(onFreeze(it)) : it;
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/freezing": 78,
      "../internals/internal-metadata": 98,
      "../internals/is-object": 104
    }],
    287: [function (require, module, exports) {
      var $ = require('../internals/export');

      var iterate = require('../internals/iterate');

      var createProperty = require('../internals/create-property'); // `Object.fromEntries` method
      // https://github.com/tc39/proposal-object-from-entries


      $({
        target: 'Object',
        stat: true
      }, {
        fromEntries: function fromEntries(iterable) {
          var obj = {};
          iterate(iterable, function (k, v) {
            createProperty(obj, k, v);
          }, {
            AS_ENTRIES: true
          });
          return obj;
        }
      });
    }, {
      "../internals/create-property": 56,
      "../internals/export": 74,
      "../internals/iterate": 107
    }],
    288: [function (require, module, exports) {
      var $ = require('../internals/export');

      var fails = require('../internals/fails');

      var toIndexedObject = require('../internals/to-indexed-object');

      var nativeGetOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;

      var DESCRIPTORS = require('../internals/descriptors');

      var FAILS_ON_PRIMITIVES = fails(function () {
        nativeGetOwnPropertyDescriptor(1);
      });
      var FORCED = !DESCRIPTORS || FAILS_ON_PRIMITIVES; // `Object.getOwnPropertyDescriptor` method
      // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor

      $({
        target: 'Object',
        stat: true,
        forced: FORCED,
        sham: !DESCRIPTORS
      }, {
        getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
          return nativeGetOwnPropertyDescriptor(toIndexedObject(it), key);
        }
      });
    }, {
      "../internals/descriptors": 61,
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/object-get-own-property-descriptor": 134,
      "../internals/to-indexed-object": 182
    }],
    289: [function (require, module, exports) {
      var $ = require('../internals/export');

      var DESCRIPTORS = require('../internals/descriptors');

      var ownKeys = require('../internals/own-keys');

      var toIndexedObject = require('../internals/to-indexed-object');

      var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');

      var createProperty = require('../internals/create-property'); // `Object.getOwnPropertyDescriptors` method
      // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors


      $({
        target: 'Object',
        stat: true,
        sham: !DESCRIPTORS
      }, {
        getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
          var O = toIndexedObject(object);
          var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
          var keys = ownKeys(O);
          var result = {};
          var index = 0;
          var key, descriptor;

          while (keys.length > index) {
            descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
            if (descriptor !== undefined) createProperty(result, key, descriptor);
          }

          return result;
        }
      });
    }, {
      "../internals/create-property": 56,
      "../internals/descriptors": 61,
      "../internals/export": 74,
      "../internals/object-get-own-property-descriptor": 134,
      "../internals/own-keys": 147,
      "../internals/to-indexed-object": 182
    }],
    290: [function (require, module, exports) {
      var $ = require('../internals/export');

      var fails = require('../internals/fails');

      var getOwnPropertyNames = require('../internals/object-get-own-property-names-external').f; // eslint-disable-next-line es/no-object-getownpropertynames -- required for testing


      var FAILS_ON_PRIMITIVES = fails(function () {
        return !Object.getOwnPropertyNames(1);
      }); // `Object.getOwnPropertyNames` method
      // https://tc39.es/ecma262/#sec-object.getownpropertynames

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES
      }, {
        getOwnPropertyNames: getOwnPropertyNames
      });
    }, {
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/object-get-own-property-names-external": 135
    }],
    291: [function (require, module, exports) {
      var $ = require('../internals/export');

      var fails = require('../internals/fails');

      var toObject = require('../internals/to-object');

      var nativeGetPrototypeOf = require('../internals/object-get-prototype-of');

      var CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');

      var FAILS_ON_PRIMITIVES = fails(function () {
        nativeGetPrototypeOf(1);
      }); // `Object.getPrototypeOf` method
      // https://tc39.es/ecma262/#sec-object.getprototypeof

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES,
        sham: !CORRECT_PROTOTYPE_GETTER
      }, {
        getPrototypeOf: function getPrototypeOf(it) {
          return nativeGetPrototypeOf(toObject(it));
        }
      });
    }, {
      "../internals/correct-prototype-getter": 51,
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/object-get-prototype-of": 138,
      "../internals/to-object": 185
    }],
    292: [function (require, module, exports) {
      var $ = require('../internals/export');

      var fails = require('../internals/fails');

      var isObject = require('../internals/is-object'); // eslint-disable-next-line es/no-object-isextensible -- safe


      var $isExtensible = Object.isExtensible;
      var FAILS_ON_PRIMITIVES = fails(function () {
        $isExtensible(1);
      }); // `Object.isExtensible` method
      // https://tc39.es/ecma262/#sec-object.isextensible

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES
      }, {
        isExtensible: function isExtensible(it) {
          return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/is-object": 104
    }],
    293: [function (require, module, exports) {
      var $ = require('../internals/export');

      var fails = require('../internals/fails');

      var isObject = require('../internals/is-object'); // eslint-disable-next-line es/no-object-isfrozen -- safe


      var $isFrozen = Object.isFrozen;
      var FAILS_ON_PRIMITIVES = fails(function () {
        $isFrozen(1);
      }); // `Object.isFrozen` method
      // https://tc39.es/ecma262/#sec-object.isfrozen

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES
      }, {
        isFrozen: function isFrozen(it) {
          return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/is-object": 104
    }],
    294: [function (require, module, exports) {
      var $ = require('../internals/export');

      var fails = require('../internals/fails');

      var isObject = require('../internals/is-object'); // eslint-disable-next-line es/no-object-issealed -- safe


      var $isSealed = Object.isSealed;
      var FAILS_ON_PRIMITIVES = fails(function () {
        $isSealed(1);
      }); // `Object.isSealed` method
      // https://tc39.es/ecma262/#sec-object.issealed

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES
      }, {
        isSealed: function isSealed(it) {
          return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/is-object": 104
    }],
    295: [function (require, module, exports) {
      var $ = require('../internals/export');

      var is = require('../internals/same-value'); // `Object.is` method
      // https://tc39.es/ecma262/#sec-object.is


      $({
        target: 'Object',
        stat: true
      }, {
        is: is
      });
    }, {
      "../internals/export": 74,
      "../internals/same-value": 162
    }],
    296: [function (require, module, exports) {
      var $ = require('../internals/export');

      var toObject = require('../internals/to-object');

      var nativeKeys = require('../internals/object-keys');

      var fails = require('../internals/fails');

      var FAILS_ON_PRIMITIVES = fails(function () {
        nativeKeys(1);
      }); // `Object.keys` method
      // https://tc39.es/ecma262/#sec-object.keys

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES
      }, {
        keys: function keys(it) {
          return nativeKeys(toObject(it));
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/object-keys": 141,
      "../internals/to-object": 185
    }],
    297: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var DESCRIPTORS = require('../internals/descriptors');

      var FORCED = require('../internals/object-prototype-accessors-forced');

      var toObject = require('../internals/to-object');

      var toPrimitive = require('../internals/to-primitive');

      var getPrototypeOf = require('../internals/object-get-prototype-of');

      var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f; // `Object.prototype.__lookupGetter__` method
      // https://tc39.es/ecma262/#sec-object.prototype.__lookupGetter__


      if (DESCRIPTORS) {
        $({
          target: 'Object',
          proto: true,
          forced: FORCED
        }, {
          __lookupGetter__: function __lookupGetter__(P) {
            var O = toObject(this);
            var key = toPrimitive(P, true);
            var desc;

            do {
              if (desc = getOwnPropertyDescriptor(O, key)) return desc.get;
            } while (O = getPrototypeOf(O));
          }
        });
      }
    }, {
      "../internals/descriptors": 61,
      "../internals/export": 74,
      "../internals/object-get-own-property-descriptor": 134,
      "../internals/object-get-prototype-of": 138,
      "../internals/object-prototype-accessors-forced": 143,
      "../internals/to-object": 185,
      "../internals/to-primitive": 188
    }],
    298: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var DESCRIPTORS = require('../internals/descriptors');

      var FORCED = require('../internals/object-prototype-accessors-forced');

      var toObject = require('../internals/to-object');

      var toPrimitive = require('../internals/to-primitive');

      var getPrototypeOf = require('../internals/object-get-prototype-of');

      var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f; // `Object.prototype.__lookupSetter__` method
      // https://tc39.es/ecma262/#sec-object.prototype.__lookupSetter__


      if (DESCRIPTORS) {
        $({
          target: 'Object',
          proto: true,
          forced: FORCED
        }, {
          __lookupSetter__: function __lookupSetter__(P) {
            var O = toObject(this);
            var key = toPrimitive(P, true);
            var desc;

            do {
              if (desc = getOwnPropertyDescriptor(O, key)) return desc.set;
            } while (O = getPrototypeOf(O));
          }
        });
      }
    }, {
      "../internals/descriptors": 61,
      "../internals/export": 74,
      "../internals/object-get-own-property-descriptor": 134,
      "../internals/object-get-prototype-of": 138,
      "../internals/object-prototype-accessors-forced": 143,
      "../internals/to-object": 185,
      "../internals/to-primitive": 188
    }],
    299: [function (require, module, exports) {
      var $ = require('../internals/export');

      var isObject = require('../internals/is-object');

      var onFreeze = require('../internals/internal-metadata').onFreeze;

      var FREEZING = require('../internals/freezing');

      var fails = require('../internals/fails'); // eslint-disable-next-line es/no-object-preventextensions -- safe


      var $preventExtensions = Object.preventExtensions;
      var FAILS_ON_PRIMITIVES = fails(function () {
        $preventExtensions(1);
      }); // `Object.preventExtensions` method
      // https://tc39.es/ecma262/#sec-object.preventextensions

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES,
        sham: !FREEZING
      }, {
        preventExtensions: function preventExtensions(it) {
          return $preventExtensions && isObject(it) ? $preventExtensions(onFreeze(it)) : it;
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/freezing": 78,
      "../internals/internal-metadata": 98,
      "../internals/is-object": 104
    }],
    300: [function (require, module, exports) {
      var $ = require('../internals/export');

      var isObject = require('../internals/is-object');

      var onFreeze = require('../internals/internal-metadata').onFreeze;

      var FREEZING = require('../internals/freezing');

      var fails = require('../internals/fails'); // eslint-disable-next-line es/no-object-seal -- safe


      var $seal = Object.seal;
      var FAILS_ON_PRIMITIVES = fails(function () {
        $seal(1);
      }); // `Object.seal` method
      // https://tc39.es/ecma262/#sec-object.seal

      $({
        target: 'Object',
        stat: true,
        forced: FAILS_ON_PRIMITIVES,
        sham: !FREEZING
      }, {
        seal: function seal(it) {
          return $seal && isObject(it) ? $seal(onFreeze(it)) : it;
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/freezing": 78,
      "../internals/internal-metadata": 98,
      "../internals/is-object": 104
    }],
    301: [function (require, module, exports) {
      var $ = require('../internals/export');

      var setPrototypeOf = require('../internals/object-set-prototype-of'); // `Object.setPrototypeOf` method
      // https://tc39.es/ecma262/#sec-object.setprototypeof


      $({
        target: 'Object',
        stat: true
      }, {
        setPrototypeOf: setPrototypeOf
      });
    }, {
      "../internals/export": 74,
      "../internals/object-set-prototype-of": 144
    }],
    302: [function (require, module, exports) {
      var TO_STRING_TAG_SUPPORT = require('../internals/to-string-tag-support');

      var redefine = require('../internals/redefine');

      var toString = require('../internals/object-to-string'); // `Object.prototype.toString` method
      // https://tc39.es/ecma262/#sec-object.prototype.tostring


      if (!TO_STRING_TAG_SUPPORT) {
        redefine(Object.prototype, 'toString', toString, {
          unsafe: true
        });
      }
    }, {
      "../internals/object-to-string": 146,
      "../internals/redefine": 152,
      "../internals/to-string-tag-support": 189
    }],
    303: [function (require, module, exports) {
      var $ = require('../internals/export');

      var $values = require('../internals/object-to-array').values; // `Object.values` method
      // https://tc39.es/ecma262/#sec-object.values


      $({
        target: 'Object',
        stat: true
      }, {
        values: function values(O) {
          return $values(O);
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/object-to-array": 145
    }],
    304: [function (require, module, exports) {
      var $ = require('../internals/export');

      var parseFloatImplementation = require('../internals/number-parse-float'); // `parseFloat` method
      // https://tc39.es/ecma262/#sec-parsefloat-string


      $({
        global: true,
        forced: parseFloat != parseFloatImplementation
      }, {
        parseFloat: parseFloatImplementation
      });
    }, {
      "../internals/export": 74,
      "../internals/number-parse-float": 127
    }],
    305: [function (require, module, exports) {
      var $ = require('../internals/export');

      var parseIntImplementation = require('../internals/number-parse-int'); // `parseInt` method
      // https://tc39.es/ecma262/#sec-parseint-string-radix


      $({
        global: true,
        forced: parseInt != parseIntImplementation
      }, {
        parseInt: parseIntImplementation
      });
    }, {
      "../internals/export": 74,
      "../internals/number-parse-int": 128
    }],
    306: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var aFunction = require('../internals/a-function');

      var newPromiseCapabilityModule = require('../internals/new-promise-capability');

      var perform = require('../internals/perform');

      var iterate = require('../internals/iterate'); // `Promise.allSettled` method
      // https://tc39.es/ecma262/#sec-promise.allsettled


      $({
        target: 'Promise',
        stat: true
      }, {
        allSettled: function allSettled(iterable) {
          var C = this;
          var capability = newPromiseCapabilityModule.f(C);
          var resolve = capability.resolve;
          var reject = capability.reject;
          var result = perform(function () {
            var promiseResolve = aFunction(C.resolve);
            var values = [];
            var counter = 0;
            var remaining = 1;
            iterate(iterable, function (promise) {
              var index = counter++;
              var alreadyCalled = false;
              values.push(undefined);
              remaining++;
              promiseResolve.call(C, promise).then(function (value) {
                if (alreadyCalled) return;
                alreadyCalled = true;
                values[index] = {
                  status: 'fulfilled',
                  value: value
                };
                --remaining || resolve(values);
              }, function (error) {
                if (alreadyCalled) return;
                alreadyCalled = true;
                values[index] = {
                  status: 'rejected',
                  reason: error
                };
                --remaining || resolve(values);
              });
            });
            --remaining || resolve(values);
          });
          if (result.error) reject(result.value);
          return capability.promise;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/export": 74,
      "../internals/iterate": 107,
      "../internals/new-promise-capability": 124,
      "../internals/perform": 149
    }],
    307: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var aFunction = require('../internals/a-function');

      var getBuiltIn = require('../internals/get-built-in');

      var newPromiseCapabilityModule = require('../internals/new-promise-capability');

      var perform = require('../internals/perform');

      var iterate = require('../internals/iterate');

      var PROMISE_ANY_ERROR = 'No one promise resolved'; // `Promise.any` method
      // https://tc39.es/ecma262/#sec-promise.any

      $({
        target: 'Promise',
        stat: true
      }, {
        any: function any(iterable) {
          var C = this;
          var capability = newPromiseCapabilityModule.f(C);
          var resolve = capability.resolve;
          var reject = capability.reject;
          var result = perform(function () {
            var promiseResolve = aFunction(C.resolve);
            var errors = [];
            var counter = 0;
            var remaining = 1;
            var alreadyResolved = false;
            iterate(iterable, function (promise) {
              var index = counter++;
              var alreadyRejected = false;
              errors.push(undefined);
              remaining++;
              promiseResolve.call(C, promise).then(function (value) {
                if (alreadyRejected || alreadyResolved) return;
                alreadyResolved = true;
                resolve(value);
              }, function (error) {
                if (alreadyRejected || alreadyResolved) return;
                alreadyRejected = true;
                errors[index] = error;
                --remaining || reject(new (getBuiltIn('AggregateError'))(errors, PROMISE_ANY_ERROR));
              });
            });
            --remaining || reject(new (getBuiltIn('AggregateError'))(errors, PROMISE_ANY_ERROR));
          });
          if (result.error) reject(result.value);
          return capability.promise;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/export": 74,
      "../internals/get-built-in": 82,
      "../internals/iterate": 107,
      "../internals/new-promise-capability": 124,
      "../internals/perform": 149
    }],
    308: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var NativePromise = require('../internals/native-promise-constructor');

      var fails = require('../internals/fails');

      var getBuiltIn = require('../internals/get-built-in');

      var speciesConstructor = require('../internals/species-constructor');

      var promiseResolve = require('../internals/promise-resolve');

      var redefine = require('../internals/redefine'); // Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829


      var NON_GENERIC = !!NativePromise && fails(function () {
        NativePromise.prototype['finally'].call({
          then: function then() {
            /* empty */
          }
        }, function () {
          /* empty */
        });
      }); // `Promise.prototype.finally` method
      // https://tc39.es/ecma262/#sec-promise.prototype.finally

      $({
        target: 'Promise',
        proto: true,
        real: true,
        forced: NON_GENERIC
      }, {
        'finally': function _finally(onFinally) {
          var C = speciesConstructor(this, getBuiltIn('Promise'));
          var isFunction = typeof onFinally == 'function';
          return this.then(isFunction ? function (x) {
            return promiseResolve(C, onFinally()).then(function () {
              return x;
            });
          } : onFinally, isFunction ? function (e) {
            return promiseResolve(C, onFinally()).then(function () {
              throw e;
            });
          } : onFinally);
        }
      }); // makes sure that native promise-based APIs `Promise#finally` properly works with patched `Promise#then`

      if (!IS_PURE && typeof NativePromise == 'function') {
        var method = getBuiltIn('Promise').prototype['finally'];

        if (NativePromise.prototype['finally'] !== method) {
          redefine(NativePromise.prototype, 'finally', method, {
            unsafe: true
          });
        }
      }
    }, {
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/get-built-in": 82,
      "../internals/is-pure": 105,
      "../internals/native-promise-constructor": 120,
      "../internals/promise-resolve": 150,
      "../internals/redefine": 152,
      "../internals/species-constructor": 169
    }],
    309: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var global = require('../internals/global');

      var getBuiltIn = require('../internals/get-built-in');

      var NativePromise = require('../internals/native-promise-constructor');

      var redefine = require('../internals/redefine');

      var redefineAll = require('../internals/redefine-all');

      var setPrototypeOf = require('../internals/object-set-prototype-of');

      var setToStringTag = require('../internals/set-to-string-tag');

      var setSpecies = require('../internals/set-species');

      var isObject = require('../internals/is-object');

      var aFunction = require('../internals/a-function');

      var anInstance = require('../internals/an-instance');

      var inspectSource = require('../internals/inspect-source');

      var iterate = require('../internals/iterate');

      var checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');

      var speciesConstructor = require('../internals/species-constructor');

      var task = require('../internals/task').set;

      var microtask = require('../internals/microtask');

      var promiseResolve = require('../internals/promise-resolve');

      var hostReportErrors = require('../internals/host-report-errors');

      var newPromiseCapabilityModule = require('../internals/new-promise-capability');

      var perform = require('../internals/perform');

      var InternalStateModule = require('../internals/internal-state');

      var isForced = require('../internals/is-forced');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var IS_BROWSER = require('../internals/engine-is-browser');

      var IS_NODE = require('../internals/engine-is-node');

      var V8_VERSION = require('../internals/engine-v8-version');

      var SPECIES = wellKnownSymbol('species');
      var PROMISE = 'Promise';
      var getInternalState = InternalStateModule.get;
      var setInternalState = InternalStateModule.set;
      var getInternalPromiseState = InternalStateModule.getterFor(PROMISE);
      var NativePromisePrototype = NativePromise && NativePromise.prototype;
      var PromiseConstructor = NativePromise;
      var PromiseConstructorPrototype = NativePromisePrototype;
      var TypeError = global.TypeError;
      var document = global.document;
      var process = global.process;
      var newPromiseCapability = newPromiseCapabilityModule.f;
      var newGenericPromiseCapability = newPromiseCapability;
      var DISPATCH_EVENT = !!(document && document.createEvent && global.dispatchEvent);
      var NATIVE_REJECTION_EVENT = typeof PromiseRejectionEvent == 'function';
      var UNHANDLED_REJECTION = 'unhandledrejection';
      var REJECTION_HANDLED = 'rejectionhandled';
      var PENDING = 0;
      var FULFILLED = 1;
      var REJECTED = 2;
      var HANDLED = 1;
      var UNHANDLED = 2;
      var SUBCLASSING = false;
      var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;
      var FORCED = isForced(PROMISE, function () {
        var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(PromiseConstructor);
        var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(PromiseConstructor); // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
        // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
        // We can't detect it synchronously, so just check versions

        if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true; // We need Promise#finally in the pure version for preventing prototype pollution

        if (IS_PURE && !PromiseConstructorPrototype['finally']) return true; // We can't use @@species feature detection in V8 since it causes
        // deoptimization and performance degradation
        // https://github.com/zloirock/core-js/issues/679

        if (V8_VERSION >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) return false; // Detect correctness of subclassing with @@species support

        var promise = new PromiseConstructor(function (resolve) {
          resolve(1);
        });

        var FakePromise = function FakePromise(exec) {
          exec(function () {
            /* empty */
          }, function () {
            /* empty */
          });
        };

        var constructor = promise.constructor = {};
        constructor[SPECIES] = FakePromise;
        SUBCLASSING = promise.then(function () {
          /* empty */
        }) instanceof FakePromise;
        if (!SUBCLASSING) return true; // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test

        return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_REJECTION_EVENT;
      });
      var INCORRECT_ITERATION = FORCED || !checkCorrectnessOfIteration(function (iterable) {
        PromiseConstructor.all(iterable)['catch'](function () {
          /* empty */
        });
      }); // helpers

      var isThenable = function isThenable(it) {
        var then;
        return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
      };

      var notify = function notify(state, isReject) {
        if (state.notified) return;
        state.notified = true;
        var chain = state.reactions;
        microtask(function () {
          var value = state.value;
          var ok = state.state == FULFILLED;
          var index = 0; // variable length - can't use forEach

          while (chain.length > index) {
            var reaction = chain[index++];
            var handler = ok ? reaction.ok : reaction.fail;
            var resolve = reaction.resolve;
            var reject = reaction.reject;
            var domain = reaction.domain;
            var result, then, exited;

            try {
              if (handler) {
                if (!ok) {
                  if (state.rejection === UNHANDLED) onHandleUnhandled(state);
                  state.rejection = HANDLED;
                }

                if (handler === true) result = value;else {
                  if (domain) domain.enter();
                  result = handler(value); // can throw

                  if (domain) {
                    domain.exit();
                    exited = true;
                  }
                }

                if (result === reaction.promise) {
                  reject(TypeError('Promise-chain cycle'));
                } else if (then = isThenable(result)) {
                  then.call(result, resolve, reject);
                } else resolve(result);
              } else reject(value);
            } catch (error) {
              if (domain && !exited) domain.exit();
              reject(error);
            }
          }

          state.reactions = [];
          state.notified = false;
          if (isReject && !state.rejection) onUnhandled(state);
        });
      };

      var dispatchEvent = function dispatchEvent(name, promise, reason) {
        var event, handler;

        if (DISPATCH_EVENT) {
          event = document.createEvent('Event');
          event.promise = promise;
          event.reason = reason;
          event.initEvent(name, false, true);
          global.dispatchEvent(event);
        } else event = {
          promise: promise,
          reason: reason
        };

        if (!NATIVE_REJECTION_EVENT && (handler = global['on' + name])) handler(event);else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
      };

      var onUnhandled = function onUnhandled(state) {
        task.call(global, function () {
          var promise = state.facade;
          var value = state.value;
          var IS_UNHANDLED = isUnhandled(state);
          var result;

          if (IS_UNHANDLED) {
            result = perform(function () {
              if (IS_NODE) {
                process.emit('unhandledRejection', value, promise);
              } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
            }); // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should

            state.rejection = IS_NODE || isUnhandled(state) ? UNHANDLED : HANDLED;
            if (result.error) throw result.value;
          }
        });
      };

      var isUnhandled = function isUnhandled(state) {
        return state.rejection !== HANDLED && !state.parent;
      };

      var onHandleUnhandled = function onHandleUnhandled(state) {
        task.call(global, function () {
          var promise = state.facade;

          if (IS_NODE) {
            process.emit('rejectionHandled', promise);
          } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
        });
      };

      var bind = function bind(fn, state, unwrap) {
        return function (value) {
          fn(state, value, unwrap);
        };
      };

      var internalReject = function internalReject(state, value, unwrap) {
        if (state.done) return;
        state.done = true;
        if (unwrap) state = unwrap;
        state.value = value;
        state.state = REJECTED;
        notify(state, true);
      };

      var internalResolve = function internalResolve(state, value, unwrap) {
        if (state.done) return;
        state.done = true;
        if (unwrap) state = unwrap;

        try {
          if (state.facade === value) throw TypeError("Promise can't be resolved itself");
          var then = isThenable(value);

          if (then) {
            microtask(function () {
              var wrapper = {
                done: false
              };

              try {
                then.call(value, bind(internalResolve, wrapper, state), bind(internalReject, wrapper, state));
              } catch (error) {
                internalReject(wrapper, error, state);
              }
            });
          } else {
            state.value = value;
            state.state = FULFILLED;
            notify(state, false);
          }
        } catch (error) {
          internalReject({
            done: false
          }, error, state);
        }
      }; // constructor polyfill


      if (FORCED) {
        // 25.4.3.1 Promise(executor)
        PromiseConstructor = function Promise(executor) {
          anInstance(this, PromiseConstructor, PROMISE);
          aFunction(executor);
          Internal.call(this);
          var state = getInternalState(this);

          try {
            executor(bind(internalResolve, state), bind(internalReject, state));
          } catch (error) {
            internalReject(state, error);
          }
        };

        PromiseConstructorPrototype = PromiseConstructor.prototype; // eslint-disable-next-line no-unused-vars -- required for `.length`

        Internal = function Promise(executor) {
          setInternalState(this, {
            type: PROMISE,
            done: false,
            notified: false,
            parent: false,
            reactions: [],
            rejection: false,
            state: PENDING,
            value: undefined
          });
        };

        Internal.prototype = redefineAll(PromiseConstructorPrototype, {
          // `Promise.prototype.then` method
          // https://tc39.es/ecma262/#sec-promise.prototype.then
          then: function then(onFulfilled, onRejected) {
            var state = getInternalPromiseState(this);
            var reaction = newPromiseCapability(speciesConstructor(this, PromiseConstructor));
            reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
            reaction.fail = typeof onRejected == 'function' && onRejected;
            reaction.domain = IS_NODE ? process.domain : undefined;
            state.parent = true;
            state.reactions.push(reaction);
            if (state.state != PENDING) notify(state, false);
            return reaction.promise;
          },
          // `Promise.prototype.catch` method
          // https://tc39.es/ecma262/#sec-promise.prototype.catch
          'catch': function _catch(onRejected) {
            return this.then(undefined, onRejected);
          }
        });

        OwnPromiseCapability = function OwnPromiseCapability() {
          var promise = new Internal();
          var state = getInternalState(promise);
          this.promise = promise;
          this.resolve = bind(internalResolve, state);
          this.reject = bind(internalReject, state);
        };

        newPromiseCapabilityModule.f = newPromiseCapability = function newPromiseCapability(C) {
          return C === PromiseConstructor || C === PromiseWrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
        };

        if (!IS_PURE && typeof NativePromise == 'function' && NativePromisePrototype !== Object.prototype) {
          nativeThen = NativePromisePrototype.then;

          if (!SUBCLASSING) {
            // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
            redefine(NativePromisePrototype, 'then', function then(onFulfilled, onRejected) {
              var that = this;
              return new PromiseConstructor(function (resolve, reject) {
                nativeThen.call(that, resolve, reject);
              }).then(onFulfilled, onRejected); // https://github.com/zloirock/core-js/issues/640
            }, {
              unsafe: true
            }); // makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`

            redefine(NativePromisePrototype, 'catch', PromiseConstructorPrototype['catch'], {
              unsafe: true
            });
          } // make `.constructor === Promise` work for native promise-based APIs


          try {
            delete NativePromisePrototype.constructor;
          } catch (error) {
            /* empty */
          } // make `instanceof Promise` work for native promise-based APIs


          if (setPrototypeOf) {
            setPrototypeOf(NativePromisePrototype, PromiseConstructorPrototype);
          }
        }
      }

      $({
        global: true,
        wrap: true,
        forced: FORCED
      }, {
        Promise: PromiseConstructor
      });
      setToStringTag(PromiseConstructor, PROMISE, false, true);
      setSpecies(PROMISE);
      PromiseWrapper = getBuiltIn(PROMISE); // statics

      $({
        target: PROMISE,
        stat: true,
        forced: FORCED
      }, {
        // `Promise.reject` method
        // https://tc39.es/ecma262/#sec-promise.reject
        reject: function reject(r) {
          var capability = newPromiseCapability(this);
          capability.reject.call(undefined, r);
          return capability.promise;
        }
      });
      $({
        target: PROMISE,
        stat: true,
        forced: IS_PURE || FORCED
      }, {
        // `Promise.resolve` method
        // https://tc39.es/ecma262/#sec-promise.resolve
        resolve: function resolve(x) {
          return promiseResolve(IS_PURE && this === PromiseWrapper ? PromiseConstructor : this, x);
        }
      });
      $({
        target: PROMISE,
        stat: true,
        forced: INCORRECT_ITERATION
      }, {
        // `Promise.all` method
        // https://tc39.es/ecma262/#sec-promise.all
        all: function all(iterable) {
          var C = this;
          var capability = newPromiseCapability(C);
          var resolve = capability.resolve;
          var reject = capability.reject;
          var result = perform(function () {
            var $promiseResolve = aFunction(C.resolve);
            var values = [];
            var counter = 0;
            var remaining = 1;
            iterate(iterable, function (promise) {
              var index = counter++;
              var alreadyCalled = false;
              values.push(undefined);
              remaining++;
              $promiseResolve.call(C, promise).then(function (value) {
                if (alreadyCalled) return;
                alreadyCalled = true;
                values[index] = value;
                --remaining || resolve(values);
              }, reject);
            });
            --remaining || resolve(values);
          });
          if (result.error) reject(result.value);
          return capability.promise;
        },
        // `Promise.race` method
        // https://tc39.es/ecma262/#sec-promise.race
        race: function race(iterable) {
          var C = this;
          var capability = newPromiseCapability(C);
          var reject = capability.reject;
          var result = perform(function () {
            var $promiseResolve = aFunction(C.resolve);
            iterate(iterable, function (promise) {
              $promiseResolve.call(C, promise).then(capability.resolve, reject);
            });
          });
          if (result.error) reject(result.value);
          return capability.promise;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-instance": 15,
      "../internals/check-correctness-of-iteration": 38,
      "../internals/engine-is-browser": 65,
      "../internals/engine-is-node": 68,
      "../internals/engine-v8-version": 71,
      "../internals/export": 74,
      "../internals/get-built-in": 82,
      "../internals/global": 88,
      "../internals/host-report-errors": 91,
      "../internals/inspect-source": 97,
      "../internals/internal-state": 99,
      "../internals/is-forced": 102,
      "../internals/is-object": 104,
      "../internals/is-pure": 105,
      "../internals/iterate": 107,
      "../internals/microtask": 119,
      "../internals/native-promise-constructor": 120,
      "../internals/new-promise-capability": 124,
      "../internals/object-set-prototype-of": 144,
      "../internals/perform": 149,
      "../internals/promise-resolve": 150,
      "../internals/redefine": 152,
      "../internals/redefine-all": 151,
      "../internals/set-species": 164,
      "../internals/set-to-string-tag": 165,
      "../internals/species-constructor": 169,
      "../internals/task": 178,
      "../internals/well-known-symbol": 197
    }],
    310: [function (require, module, exports) {
      var $ = require('../internals/export');

      var getBuiltIn = require('../internals/get-built-in');

      var aFunction = require('../internals/a-function');

      var anObject = require('../internals/an-object');

      var fails = require('../internals/fails');

      var nativeApply = getBuiltIn('Reflect', 'apply');
      var functionApply = Function.apply; // MS Edge argumentsList argument is optional

      var OPTIONAL_ARGUMENTS_LIST = !fails(function () {
        nativeApply(function () {
          /* empty */
        });
      }); // `Reflect.apply` method
      // https://tc39.es/ecma262/#sec-reflect.apply

      $({
        target: 'Reflect',
        stat: true,
        forced: OPTIONAL_ARGUMENTS_LIST
      }, {
        apply: function apply(target, thisArgument, argumentsList) {
          aFunction(target);
          anObject(argumentsList);
          return nativeApply ? nativeApply(target, thisArgument, argumentsList) : functionApply.call(target, thisArgument, argumentsList);
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/get-built-in": 82
    }],
    311: [function (require, module, exports) {
      var $ = require('../internals/export');

      var getBuiltIn = require('../internals/get-built-in');

      var aFunction = require('../internals/a-function');

      var anObject = require('../internals/an-object');

      var isObject = require('../internals/is-object');

      var create = require('../internals/object-create');

      var bind = require('../internals/function-bind');

      var fails = require('../internals/fails');

      var nativeConstruct = getBuiltIn('Reflect', 'construct'); // `Reflect.construct` method
      // https://tc39.es/ecma262/#sec-reflect.construct
      // MS Edge supports only 2 arguments and argumentsList argument is optional
      // FF Nightly sets third argument as `new.target`, but does not create `this` from it

      var NEW_TARGET_BUG = fails(function () {
        function F() {
          /* empty */
        }

        return !(nativeConstruct(function () {
          /* empty */
        }, [], F) instanceof F);
      });
      var ARGS_BUG = !fails(function () {
        nativeConstruct(function () {
          /* empty */
        });
      });
      var FORCED = NEW_TARGET_BUG || ARGS_BUG;
      $({
        target: 'Reflect',
        stat: true,
        forced: FORCED,
        sham: FORCED
      }, {
        construct: function construct(Target, args
        /* , newTarget */
        ) {
          aFunction(Target);
          anObject(args);
          var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
          if (ARGS_BUG && !NEW_TARGET_BUG) return nativeConstruct(Target, args, newTarget);

          if (Target == newTarget) {
            // w/o altered newTarget, optimization for 0-4 arguments
            switch (args.length) {
              case 0:
                return new Target();

              case 1:
                return new Target(args[0]);

              case 2:
                return new Target(args[0], args[1]);

              case 3:
                return new Target(args[0], args[1], args[2]);

              case 4:
                return new Target(args[0], args[1], args[2], args[3]);
            } // w/o altered newTarget, lot of arguments case


            var $args = [null];
            $args.push.apply($args, args);
            return new (bind.apply(Target, $args))();
          } // with altered newTarget, not support built-in constructors


          var proto = newTarget.prototype;
          var instance = create(isObject(proto) ? proto : Object.prototype);
          var result = Function.apply.call(Target, instance, args);
          return isObject(result) ? result : instance;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/function-bind": 80,
      "../internals/get-built-in": 82,
      "../internals/is-object": 104,
      "../internals/object-create": 131
    }],
    312: [function (require, module, exports) {
      var $ = require('../internals/export');

      var DESCRIPTORS = require('../internals/descriptors');

      var anObject = require('../internals/an-object');

      var toPrimitive = require('../internals/to-primitive');

      var definePropertyModule = require('../internals/object-define-property');

      var fails = require('../internals/fails'); // MS Edge has broken Reflect.defineProperty - throwing instead of returning false


      var ERROR_INSTEAD_OF_FALSE = fails(function () {
        // eslint-disable-next-line es/no-reflect -- required for testing
        Reflect.defineProperty(definePropertyModule.f({}, 1, {
          value: 1
        }), 1, {
          value: 2
        });
      }); // `Reflect.defineProperty` method
      // https://tc39.es/ecma262/#sec-reflect.defineproperty

      $({
        target: 'Reflect',
        stat: true,
        forced: ERROR_INSTEAD_OF_FALSE,
        sham: !DESCRIPTORS
      }, {
        defineProperty: function defineProperty(target, propertyKey, attributes) {
          anObject(target);
          var key = toPrimitive(propertyKey, true);
          anObject(attributes);

          try {
            definePropertyModule.f(target, key, attributes);
            return true;
          } catch (error) {
            return false;
          }
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/descriptors": 61,
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/object-define-property": 133,
      "../internals/to-primitive": 188
    }],
    313: [function (require, module, exports) {
      var $ = require('../internals/export');

      var anObject = require('../internals/an-object');

      var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f; // `Reflect.deleteProperty` method
      // https://tc39.es/ecma262/#sec-reflect.deleteproperty


      $({
        target: 'Reflect',
        stat: true
      }, {
        deleteProperty: function deleteProperty(target, propertyKey) {
          var descriptor = getOwnPropertyDescriptor(anObject(target), propertyKey);
          return descriptor && !descriptor.configurable ? false : delete target[propertyKey];
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/object-get-own-property-descriptor": 134
    }],
    314: [function (require, module, exports) {
      var $ = require('../internals/export');

      var DESCRIPTORS = require('../internals/descriptors');

      var anObject = require('../internals/an-object');

      var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor'); // `Reflect.getOwnPropertyDescriptor` method
      // https://tc39.es/ecma262/#sec-reflect.getownpropertydescriptor


      $({
        target: 'Reflect',
        stat: true,
        sham: !DESCRIPTORS
      }, {
        getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
          return getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/descriptors": 61,
      "../internals/export": 74,
      "../internals/object-get-own-property-descriptor": 134
    }],
    315: [function (require, module, exports) {
      var $ = require('../internals/export');

      var anObject = require('../internals/an-object');

      var objectGetPrototypeOf = require('../internals/object-get-prototype-of');

      var CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter'); // `Reflect.getPrototypeOf` method
      // https://tc39.es/ecma262/#sec-reflect.getprototypeof


      $({
        target: 'Reflect',
        stat: true,
        sham: !CORRECT_PROTOTYPE_GETTER
      }, {
        getPrototypeOf: function getPrototypeOf(target) {
          return objectGetPrototypeOf(anObject(target));
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/correct-prototype-getter": 51,
      "../internals/export": 74,
      "../internals/object-get-prototype-of": 138
    }],
    316: [function (require, module, exports) {
      var $ = require('../internals/export');

      var isObject = require('../internals/is-object');

      var anObject = require('../internals/an-object');

      var has = require('../internals/has');

      var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');

      var getPrototypeOf = require('../internals/object-get-prototype-of'); // `Reflect.get` method
      // https://tc39.es/ecma262/#sec-reflect.get


      function get(target, propertyKey
      /* , receiver */
      ) {
        var receiver = arguments.length < 3 ? target : arguments[2];
        var descriptor, prototype;
        if (anObject(target) === receiver) return target[propertyKey];
        if (descriptor = getOwnPropertyDescriptorModule.f(target, propertyKey)) return has(descriptor, 'value') ? descriptor.value : descriptor.get === undefined ? undefined : descriptor.get.call(receiver);
        if (isObject(prototype = getPrototypeOf(target))) return get(prototype, propertyKey, receiver);
      }

      $({
        target: 'Reflect',
        stat: true
      }, {
        get: get
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/has": 89,
      "../internals/is-object": 104,
      "../internals/object-get-own-property-descriptor": 134,
      "../internals/object-get-prototype-of": 138
    }],
    317: [function (require, module, exports) {
      var $ = require('../internals/export'); // `Reflect.has` method
      // https://tc39.es/ecma262/#sec-reflect.has


      $({
        target: 'Reflect',
        stat: true
      }, {
        has: function has(target, propertyKey) {
          return propertyKey in target;
        }
      });
    }, {
      "../internals/export": 74
    }],
    318: [function (require, module, exports) {
      var $ = require('../internals/export');

      var anObject = require('../internals/an-object'); // eslint-disable-next-line es/no-object-isextensible -- safe


      var objectIsExtensible = Object.isExtensible; // `Reflect.isExtensible` method
      // https://tc39.es/ecma262/#sec-reflect.isextensible

      $({
        target: 'Reflect',
        stat: true
      }, {
        isExtensible: function isExtensible(target) {
          anObject(target);
          return objectIsExtensible ? objectIsExtensible(target) : true;
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74
    }],
    319: [function (require, module, exports) {
      var $ = require('../internals/export');

      var ownKeys = require('../internals/own-keys'); // `Reflect.ownKeys` method
      // https://tc39.es/ecma262/#sec-reflect.ownkeys


      $({
        target: 'Reflect',
        stat: true
      }, {
        ownKeys: ownKeys
      });
    }, {
      "../internals/export": 74,
      "../internals/own-keys": 147
    }],
    320: [function (require, module, exports) {
      var $ = require('../internals/export');

      var getBuiltIn = require('../internals/get-built-in');

      var anObject = require('../internals/an-object');

      var FREEZING = require('../internals/freezing'); // `Reflect.preventExtensions` method
      // https://tc39.es/ecma262/#sec-reflect.preventextensions


      $({
        target: 'Reflect',
        stat: true,
        sham: !FREEZING
      }, {
        preventExtensions: function preventExtensions(target) {
          anObject(target);

          try {
            var objectPreventExtensions = getBuiltIn('Object', 'preventExtensions');
            if (objectPreventExtensions) objectPreventExtensions(target);
            return true;
          } catch (error) {
            return false;
          }
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/freezing": 78,
      "../internals/get-built-in": 82
    }],
    321: [function (require, module, exports) {
      var $ = require('../internals/export');

      var anObject = require('../internals/an-object');

      var aPossiblePrototype = require('../internals/a-possible-prototype');

      var objectSetPrototypeOf = require('../internals/object-set-prototype-of'); // `Reflect.setPrototypeOf` method
      // https://tc39.es/ecma262/#sec-reflect.setprototypeof


      if (objectSetPrototypeOf) $({
        target: 'Reflect',
        stat: true
      }, {
        setPrototypeOf: function setPrototypeOf(target, proto) {
          anObject(target);
          aPossiblePrototype(proto);

          try {
            objectSetPrototypeOf(target, proto);
            return true;
          } catch (error) {
            return false;
          }
        }
      });
    }, {
      "../internals/a-possible-prototype": 12,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/object-set-prototype-of": 144
    }],
    322: [function (require, module, exports) {
      var $ = require('../internals/export');

      var anObject = require('../internals/an-object');

      var isObject = require('../internals/is-object');

      var has = require('../internals/has');

      var fails = require('../internals/fails');

      var definePropertyModule = require('../internals/object-define-property');

      var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');

      var getPrototypeOf = require('../internals/object-get-prototype-of');

      var createPropertyDescriptor = require('../internals/create-property-descriptor'); // `Reflect.set` method
      // https://tc39.es/ecma262/#sec-reflect.set


      function set(target, propertyKey, V
      /* , receiver */
      ) {
        var receiver = arguments.length < 4 ? target : arguments[3];
        var ownDescriptor = getOwnPropertyDescriptorModule.f(anObject(target), propertyKey);
        var existingDescriptor, prototype;

        if (!ownDescriptor) {
          if (isObject(prototype = getPrototypeOf(target))) {
            return set(prototype, propertyKey, V, receiver);
          }

          ownDescriptor = createPropertyDescriptor(0);
        }

        if (has(ownDescriptor, 'value')) {
          if (ownDescriptor.writable === false || !isObject(receiver)) return false;

          if (existingDescriptor = getOwnPropertyDescriptorModule.f(receiver, propertyKey)) {
            if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;
            existingDescriptor.value = V;
            definePropertyModule.f(receiver, propertyKey, existingDescriptor);
          } else definePropertyModule.f(receiver, propertyKey, createPropertyDescriptor(0, V));

          return true;
        }

        return ownDescriptor.set === undefined ? false : (ownDescriptor.set.call(receiver, V), true);
      } // MS Edge 17-18 Reflect.set allows setting the property to object
      // with non-writable property on the prototype


      var MS_EDGE_BUG = fails(function () {
        var Constructor = function Constructor() {
          /* empty */
        };

        var object = definePropertyModule.f(new Constructor(), 'a', {
          configurable: true
        }); // eslint-disable-next-line es/no-reflect -- required for testing

        return Reflect.set(Constructor.prototype, 'a', 1, object) !== false;
      });
      $({
        target: 'Reflect',
        stat: true,
        forced: MS_EDGE_BUG
      }, {
        set: set
      });
    }, {
      "../internals/an-object": 16,
      "../internals/create-property-descriptor": 55,
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/has": 89,
      "../internals/is-object": 104,
      "../internals/object-define-property": 133,
      "../internals/object-get-own-property-descriptor": 134,
      "../internals/object-get-prototype-of": 138
    }],
    323: [function (require, module, exports) {
      var $ = require('../internals/export');

      var global = require('../internals/global');

      var setToStringTag = require('../internals/set-to-string-tag');

      $({
        global: true
      }, {
        Reflect: {}
      }); // Reflect[@@toStringTag] property
      // https://tc39.es/ecma262/#sec-reflect-@@tostringtag

      setToStringTag(global.Reflect, 'Reflect', true);
    }, {
      "../internals/export": 74,
      "../internals/global": 88,
      "../internals/set-to-string-tag": 165
    }],
    324: [function (require, module, exports) {
      var DESCRIPTORS = require('../internals/descriptors');

      var global = require('../internals/global');

      var isForced = require('../internals/is-forced');

      var inheritIfRequired = require('../internals/inherit-if-required');

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var defineProperty = require('../internals/object-define-property').f;

      var getOwnPropertyNames = require('../internals/object-get-own-property-names').f;

      var isRegExp = require('../internals/is-regexp');

      var getFlags = require('../internals/regexp-flags');

      var stickyHelpers = require('../internals/regexp-sticky-helpers');

      var redefine = require('../internals/redefine');

      var fails = require('../internals/fails');

      var has = require('../internals/has');

      var enforceInternalState = require('../internals/internal-state').enforce;

      var setSpecies = require('../internals/set-species');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var UNSUPPORTED_DOT_ALL = require('../internals/regexp-unsupported-dot-all');

      var UNSUPPORTED_NCG = require('../internals/regexp-unsupported-ncg');

      var MATCH = wellKnownSymbol('match');
      var NativeRegExp = global.RegExp;
      var RegExpPrototype = NativeRegExp.prototype; // TODO: Use only propper RegExpIdentifierName

      var IS_NCG = /^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/;
      var re1 = /a/g;
      var re2 = /a/g; // "new" should create a new object, old webkit bug

      var CORRECT_NEW = new NativeRegExp(re1) !== re1;
      var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
      var BASE_FORCED = DESCRIPTORS && (!CORRECT_NEW || UNSUPPORTED_Y || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG || fails(function () {
        re2[MATCH] = false; // RegExp constructor can alter flags and IsRegExp works correct with @@match

        return NativeRegExp(re1) != re1 || NativeRegExp(re2) == re2 || NativeRegExp(re1, 'i') != '/a/i';
      }));

      var handleDotAll = function handleDotAll(string) {
        var length = string.length;
        var index = 0;
        var result = '';
        var brackets = false;
        var chr;

        for (; index <= length; index++) {
          chr = string.charAt(index);

          if (chr === '\\') {
            result += chr + string.charAt(++index);
            continue;
          }

          if (!brackets && chr === '.') {
            result += '[\\s\\S]';
          } else {
            if (chr === '[') {
              brackets = true;
            } else if (chr === ']') {
              brackets = false;
            }

            result += chr;
          }
        }

        return result;
      };

      var handleNCG = function handleNCG(string) {
        var length = string.length;
        var index = 0;
        var result = '';
        var named = [];
        var names = {};
        var brackets = false;
        var ncg = false;
        var groupid = 0;
        var groupname = '';
        var chr;

        for (; index <= length; index++) {
          chr = string.charAt(index);

          if (chr === '\\') {
            chr = chr + string.charAt(++index);
          } else if (chr === ']') {
            brackets = false;
          } else if (!brackets) switch (true) {
            case chr === '[':
              brackets = true;
              break;

            case chr === '(':
              if (IS_NCG.test(string.slice(index + 1))) {
                index += 2;
                ncg = true;
              }

              result += chr;
              groupid++;
              continue;

            case chr === '>' && ncg:
              if (groupname === '' || has(names, groupname)) {
                throw new SyntaxError('Invalid capture group name');
              }

              names[groupname] = true;
              named.push([groupname, groupid]);
              ncg = false;
              groupname = '';
              continue;
          }

          if (ncg) groupname += chr;else result += chr;
        }

        return [result, named];
      }; // `RegExp` constructor
      // https://tc39.es/ecma262/#sec-regexp-constructor


      if (isForced('RegExp', BASE_FORCED)) {
        var RegExpWrapper = function RegExp(pattern, flags) {
          var thisIsRegExp = this instanceof RegExpWrapper;
          var patternIsRegExp = isRegExp(pattern);
          var flagsAreUndefined = flags === undefined;
          var groups = [];
          var rawPattern = pattern;
          var rawFlags, dotAll, sticky, handled, result, state;

          if (!thisIsRegExp && patternIsRegExp && flagsAreUndefined && pattern.constructor === RegExpWrapper) {
            return pattern;
          }

          if (patternIsRegExp || pattern instanceof RegExpWrapper) {
            pattern = pattern.source;
            if (flagsAreUndefined) flags = 'flags' in rawPattern ? rawPattern.flags : getFlags.call(rawPattern);
          }

          pattern = pattern === undefined ? '' : String(pattern);
          flags = flags === undefined ? '' : String(flags);
          rawPattern = pattern;

          if (UNSUPPORTED_DOT_ALL && 'dotAll' in re1) {
            dotAll = !!flags && flags.indexOf('s') > -1;
            if (dotAll) flags = flags.replace(/s/g, '');
          }

          rawFlags = flags;

          if (UNSUPPORTED_Y && 'sticky' in re1) {
            sticky = !!flags && flags.indexOf('y') > -1;
            if (sticky) flags = flags.replace(/y/g, '');
          }

          if (UNSUPPORTED_NCG) {
            handled = handleNCG(pattern);
            pattern = handled[0];
            groups = handled[1];
          }

          result = inheritIfRequired(NativeRegExp(pattern, flags), thisIsRegExp ? this : RegExpPrototype, RegExpWrapper);

          if (dotAll || sticky || groups.length) {
            state = enforceInternalState(result);

            if (dotAll) {
              state.dotAll = true;
              state.raw = RegExpWrapper(handleDotAll(pattern), rawFlags);
            }

            if (sticky) state.sticky = true;
            if (groups.length) state.groups = groups;
          }

          if (pattern !== rawPattern) try {
            // fails in old engines, but we have no alternatives for unsupported regex syntax
            createNonEnumerableProperty(result, 'source', rawPattern === '' ? '(?:)' : rawPattern);
          } catch (error) {
            /* empty */
          }
          return result;
        };

        var proxy = function proxy(key) {
          key in RegExpWrapper || defineProperty(RegExpWrapper, key, {
            configurable: true,
            get: function get() {
              return NativeRegExp[key];
            },
            set: function set(it) {
              NativeRegExp[key] = it;
            }
          });
        };

        for (var keys = getOwnPropertyNames(NativeRegExp), index = 0; keys.length > index;) {
          proxy(keys[index++]);
        }

        RegExpPrototype.constructor = RegExpWrapper;
        RegExpWrapper.prototype = RegExpPrototype;
        redefine(global, 'RegExp', RegExpWrapper);
      } // https://tc39.es/ecma262/#sec-get-regexp-@@species


      setSpecies('RegExp');
    }, {
      "../internals/create-non-enumerable-property": 54,
      "../internals/descriptors": 61,
      "../internals/fails": 75,
      "../internals/global": 88,
      "../internals/has": 89,
      "../internals/inherit-if-required": 96,
      "../internals/internal-state": 99,
      "../internals/is-forced": 102,
      "../internals/is-regexp": 106,
      "../internals/object-define-property": 133,
      "../internals/object-get-own-property-names": 136,
      "../internals/redefine": 152,
      "../internals/regexp-flags": 156,
      "../internals/regexp-sticky-helpers": 157,
      "../internals/regexp-unsupported-dot-all": 158,
      "../internals/regexp-unsupported-ncg": 159,
      "../internals/set-species": 164,
      "../internals/well-known-symbol": 197
    }],
    325: [function (require, module, exports) {
      var DESCRIPTORS = require('../internals/descriptors');

      var UNSUPPORTED_DOT_ALL = require('../internals/regexp-unsupported-dot-all');

      var defineProperty = require('../internals/object-define-property').f;

      var getInternalState = require('../internals/internal-state').get;

      var RegExpPrototype = RegExp.prototype; // `RegExp.prototype.dotAll` getter
      // https://tc39.es/ecma262/#sec-get-regexp.prototype.dotall

      if (DESCRIPTORS && UNSUPPORTED_DOT_ALL) {
        defineProperty(RegExpPrototype, 'dotAll', {
          configurable: true,
          get: function get() {
            if (this === RegExpPrototype) return undefined; // We can't use InternalStateModule.getterFor because
            // we don't add metadata for regexps created by a literal.

            if (this instanceof RegExp) {
              return !!getInternalState(this).dotAll;
            }

            throw TypeError('Incompatible receiver, RegExp required');
          }
        });
      }
    }, {
      "../internals/descriptors": 61,
      "../internals/internal-state": 99,
      "../internals/object-define-property": 133,
      "../internals/regexp-unsupported-dot-all": 158
    }],
    326: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var exec = require('../internals/regexp-exec'); // `RegExp.prototype.exec` method
      // https://tc39.es/ecma262/#sec-regexp.prototype.exec


      $({
        target: 'RegExp',
        proto: true,
        forced: /./.exec !== exec
      }, {
        exec: exec
      });
    }, {
      "../internals/export": 74,
      "../internals/regexp-exec": 155
    }],
    327: [function (require, module, exports) {
      var DESCRIPTORS = require('../internals/descriptors');

      var objectDefinePropertyModule = require('../internals/object-define-property');

      var regExpFlags = require('../internals/regexp-flags');

      var fails = require('../internals/fails');

      var FORCED = DESCRIPTORS && fails(function () {
        // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
        return Object.getOwnPropertyDescriptor(RegExp.prototype, 'flags').get.call({
          dotAll: true,
          sticky: true
        }) !== 'sy';
      }); // `RegExp.prototype.flags` getter
      // https://tc39.es/ecma262/#sec-get-regexp.prototype.flags

      if (FORCED) objectDefinePropertyModule.f(RegExp.prototype, 'flags', {
        configurable: true,
        get: regExpFlags
      });
    }, {
      "../internals/descriptors": 61,
      "../internals/fails": 75,
      "../internals/object-define-property": 133,
      "../internals/regexp-flags": 156
    }],
    328: [function (require, module, exports) {
      var DESCRIPTORS = require('../internals/descriptors');

      var UNSUPPORTED_Y = require('../internals/regexp-sticky-helpers').UNSUPPORTED_Y;

      var defineProperty = require('../internals/object-define-property').f;

      var getInternalState = require('../internals/internal-state').get;

      var RegExpPrototype = RegExp.prototype; // `RegExp.prototype.sticky` getter
      // https://tc39.es/ecma262/#sec-get-regexp.prototype.sticky

      if (DESCRIPTORS && UNSUPPORTED_Y) {
        defineProperty(RegExpPrototype, 'sticky', {
          configurable: true,
          get: function get() {
            if (this === RegExpPrototype) return undefined; // We can't use InternalStateModule.getterFor because
            // we don't add metadata for regexps created by a literal.

            if (this instanceof RegExp) {
              return !!getInternalState(this).sticky;
            }

            throw TypeError('Incompatible receiver, RegExp required');
          }
        });
      }
    }, {
      "../internals/descriptors": 61,
      "../internals/internal-state": 99,
      "../internals/object-define-property": 133,
      "../internals/regexp-sticky-helpers": 157
    }],
    329: [function (require, module, exports) {
      'use strict'; // TODO: Remove from `core-js@4` since it's moved to entry points

      require('../modules/es.regexp.exec');

      var $ = require('../internals/export');

      var isObject = require('../internals/is-object');

      var DELEGATES_TO_EXEC = function () {
        var execCalled = false;
        var re = /[ac]/;

        re.exec = function () {
          execCalled = true;
          return /./.exec.apply(this, arguments);
        };

        return re.test('abc') === true && execCalled;
      }();

      var nativeTest = /./.test; // `RegExp.prototype.test` method
      // https://tc39.es/ecma262/#sec-regexp.prototype.test

      $({
        target: 'RegExp',
        proto: true,
        forced: !DELEGATES_TO_EXEC
      }, {
        test: function test(str) {
          if (typeof this.exec !== 'function') {
            return nativeTest.call(this, str);
          }

          var result = this.exec(str);

          if (result !== null && !isObject(result)) {
            throw new Error('RegExp exec method returned something other than an Object or null');
          }

          return !!result;
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/is-object": 104,
      "../modules/es.regexp.exec": 326
    }],
    330: [function (require, module, exports) {
      'use strict';

      var redefine = require('../internals/redefine');

      var anObject = require('../internals/an-object');

      var fails = require('../internals/fails');

      var flags = require('../internals/regexp-flags');

      var TO_STRING = 'toString';
      var RegExpPrototype = RegExp.prototype;
      var nativeToString = RegExpPrototype[TO_STRING];
      var NOT_GENERIC = fails(function () {
        return nativeToString.call({
          source: 'a',
          flags: 'b'
        }) != '/a/b';
      }); // FF44- RegExp#toString has a wrong name

      var INCORRECT_NAME = nativeToString.name != TO_STRING; // `RegExp.prototype.toString` method
      // https://tc39.es/ecma262/#sec-regexp.prototype.tostring

      if (NOT_GENERIC || INCORRECT_NAME) {
        redefine(RegExp.prototype, TO_STRING, function toString() {
          var R = anObject(this);
          var p = String(R.source);
          var rf = R.flags;
          var f = String(rf === undefined && R instanceof RegExp && !('flags' in RegExpPrototype) ? flags.call(R) : rf);
          return '/' + p + '/' + f;
        }, {
          unsafe: true
        });
      }
    }, {
      "../internals/an-object": 16,
      "../internals/fails": 75,
      "../internals/redefine": 152,
      "../internals/regexp-flags": 156
    }],
    331: [function (require, module, exports) {
      'use strict';

      var collection = require('../internals/collection');

      var collectionStrong = require('../internals/collection-strong'); // `Set` constructor
      // https://tc39.es/ecma262/#sec-set-objects


      module.exports = collection('Set', function (init) {
        return function Set() {
          return init(this, arguments.length ? arguments[0] : undefined);
        };
      }, collectionStrong);
    }, {
      "../internals/collection": 47,
      "../internals/collection-strong": 45
    }],
    332: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var createHTML = require('../internals/create-html');

      var forcedStringHTMLMethod = require('../internals/string-html-forced'); // `String.prototype.anchor` method
      // https://tc39.es/ecma262/#sec-string.prototype.anchor


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('anchor')
      }, {
        anchor: function anchor(name) {
          return createHTML(this, 'a', 'name', name);
        }
      });
    }, {
      "../internals/create-html": 52,
      "../internals/export": 74,
      "../internals/string-html-forced": 170
    }],
    333: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var createHTML = require('../internals/create-html');

      var forcedStringHTMLMethod = require('../internals/string-html-forced'); // `String.prototype.big` method
      // https://tc39.es/ecma262/#sec-string.prototype.big


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('big')
      }, {
        big: function big() {
          return createHTML(this, 'big', '', '');
        }
      });
    }, {
      "../internals/create-html": 52,
      "../internals/export": 74,
      "../internals/string-html-forced": 170
    }],
    334: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var createHTML = require('../internals/create-html');

      var forcedStringHTMLMethod = require('../internals/string-html-forced'); // `String.prototype.blink` method
      // https://tc39.es/ecma262/#sec-string.prototype.blink


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('blink')
      }, {
        blink: function blink() {
          return createHTML(this, 'blink', '', '');
        }
      });
    }, {
      "../internals/create-html": 52,
      "../internals/export": 74,
      "../internals/string-html-forced": 170
    }],
    335: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var createHTML = require('../internals/create-html');

      var forcedStringHTMLMethod = require('../internals/string-html-forced'); // `String.prototype.bold` method
      // https://tc39.es/ecma262/#sec-string.prototype.bold


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('bold')
      }, {
        bold: function bold() {
          return createHTML(this, 'b', '', '');
        }
      });
    }, {
      "../internals/create-html": 52,
      "../internals/export": 74,
      "../internals/string-html-forced": 170
    }],
    336: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var codeAt = require('../internals/string-multibyte').codeAt; // `String.prototype.codePointAt` method
      // https://tc39.es/ecma262/#sec-string.prototype.codepointat


      $({
        target: 'String',
        proto: true
      }, {
        codePointAt: function codePointAt(pos) {
          return codeAt(this, pos);
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/string-multibyte": 171
    }],
    337: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;

      var toLength = require('../internals/to-length');

      var notARegExp = require('../internals/not-a-regexp');

      var requireObjectCoercible = require('../internals/require-object-coercible');

      var correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');

      var IS_PURE = require('../internals/is-pure'); // eslint-disable-next-line es/no-string-prototype-endswith -- safe


      var $endsWith = ''.endsWith;
      var min = Math.min;
      var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('endsWith'); // https://github.com/zloirock/core-js/pull/702

      var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
        var descriptor = getOwnPropertyDescriptor(String.prototype, 'endsWith');
        return descriptor && !descriptor.writable;
      }(); // `String.prototype.endsWith` method
      // https://tc39.es/ecma262/#sec-string.prototype.endswith

      $({
        target: 'String',
        proto: true,
        forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC
      }, {
        endsWith: function endsWith(searchString
        /* , endPosition = @length */
        ) {
          var that = String(requireObjectCoercible(this));
          notARegExp(searchString);
          var endPosition = arguments.length > 1 ? arguments[1] : undefined;
          var len = toLength(that.length);
          var end = endPosition === undefined ? len : min(toLength(endPosition), len);
          var search = String(searchString);
          return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
        }
      });
    }, {
      "../internals/correct-is-regexp-logic": 50,
      "../internals/export": 74,
      "../internals/is-pure": 105,
      "../internals/not-a-regexp": 125,
      "../internals/object-get-own-property-descriptor": 134,
      "../internals/require-object-coercible": 160,
      "../internals/to-length": 184
    }],
    338: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var createHTML = require('../internals/create-html');

      var forcedStringHTMLMethod = require('../internals/string-html-forced'); // `String.prototype.fixed` method
      // https://tc39.es/ecma262/#sec-string.prototype.fixed


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('fixed')
      }, {
        fixed: function fixed() {
          return createHTML(this, 'tt', '', '');
        }
      });
    }, {
      "../internals/create-html": 52,
      "../internals/export": 74,
      "../internals/string-html-forced": 170
    }],
    339: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var createHTML = require('../internals/create-html');

      var forcedStringHTMLMethod = require('../internals/string-html-forced'); // `String.prototype.fontcolor` method
      // https://tc39.es/ecma262/#sec-string.prototype.fontcolor


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('fontcolor')
      }, {
        fontcolor: function fontcolor(color) {
          return createHTML(this, 'font', 'color', color);
        }
      });
    }, {
      "../internals/create-html": 52,
      "../internals/export": 74,
      "../internals/string-html-forced": 170
    }],
    340: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var createHTML = require('../internals/create-html');

      var forcedStringHTMLMethod = require('../internals/string-html-forced'); // `String.prototype.fontsize` method
      // https://tc39.es/ecma262/#sec-string.prototype.fontsize


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('fontsize')
      }, {
        fontsize: function fontsize(size) {
          return createHTML(this, 'font', 'size', size);
        }
      });
    }, {
      "../internals/create-html": 52,
      "../internals/export": 74,
      "../internals/string-html-forced": 170
    }],
    341: [function (require, module, exports) {
      var $ = require('../internals/export');

      var toAbsoluteIndex = require('../internals/to-absolute-index');

      var fromCharCode = String.fromCharCode; // eslint-disable-next-line es/no-string-fromcodepoint -- required for testing

      var $fromCodePoint = String.fromCodePoint; // length should be 1, old FF problem

      var INCORRECT_LENGTH = !!$fromCodePoint && $fromCodePoint.length != 1; // `String.fromCodePoint` method
      // https://tc39.es/ecma262/#sec-string.fromcodepoint

      $({
        target: 'String',
        stat: true,
        forced: INCORRECT_LENGTH
      }, {
        // eslint-disable-next-line no-unused-vars -- required for `.length`
        fromCodePoint: function fromCodePoint(x) {
          var elements = [];
          var length = arguments.length;
          var i = 0;
          var code;

          while (length > i) {
            code = +arguments[i++];
            if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw RangeError(code + ' is not a valid code point');
            elements.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00));
          }

          return elements.join('');
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/to-absolute-index": 180
    }],
    342: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var notARegExp = require('../internals/not-a-regexp');

      var requireObjectCoercible = require('../internals/require-object-coercible');

      var correctIsRegExpLogic = require('../internals/correct-is-regexp-logic'); // `String.prototype.includes` method
      // https://tc39.es/ecma262/#sec-string.prototype.includes


      $({
        target: 'String',
        proto: true,
        forced: !correctIsRegExpLogic('includes')
      }, {
        includes: function includes(searchString
        /* , position = 0 */
        ) {
          return !!~String(requireObjectCoercible(this)).indexOf(notARegExp(searchString), arguments.length > 1 ? arguments[1] : undefined);
        }
      });
    }, {
      "../internals/correct-is-regexp-logic": 50,
      "../internals/export": 74,
      "../internals/not-a-regexp": 125,
      "../internals/require-object-coercible": 160
    }],
    343: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var createHTML = require('../internals/create-html');

      var forcedStringHTMLMethod = require('../internals/string-html-forced'); // `String.prototype.italics` method
      // https://tc39.es/ecma262/#sec-string.prototype.italics


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('italics')
      }, {
        italics: function italics() {
          return createHTML(this, 'i', '', '');
        }
      });
    }, {
      "../internals/create-html": 52,
      "../internals/export": 74,
      "../internals/string-html-forced": 170
    }],
    344: [function (require, module, exports) {
      'use strict';

      var charAt = require('../internals/string-multibyte').charAt;

      var InternalStateModule = require('../internals/internal-state');

      var defineIterator = require('../internals/define-iterator');

      var STRING_ITERATOR = 'String Iterator';
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR); // `String.prototype[@@iterator]` method
      // https://tc39.es/ecma262/#sec-string.prototype-@@iterator

      defineIterator(String, 'String', function (iterated) {
        setInternalState(this, {
          type: STRING_ITERATOR,
          string: String(iterated),
          index: 0
        }); // `%StringIteratorPrototype%.next` method
        // https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
      }, function next() {
        var state = getInternalState(this);
        var string = state.string;
        var index = state.index;
        var point;
        if (index >= string.length) return {
          value: undefined,
          done: true
        };
        point = charAt(string, index);
        state.index += point.length;
        return {
          value: point,
          done: false
        };
      });
    }, {
      "../internals/define-iterator": 59,
      "../internals/internal-state": 99,
      "../internals/string-multibyte": 171
    }],
    345: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var createHTML = require('../internals/create-html');

      var forcedStringHTMLMethod = require('../internals/string-html-forced'); // `String.prototype.link` method
      // https://tc39.es/ecma262/#sec-string.prototype.link


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('link')
      }, {
        link: function link(url) {
          return createHTML(this, 'a', 'href', url);
        }
      });
    }, {
      "../internals/create-html": 52,
      "../internals/export": 74,
      "../internals/string-html-forced": 170
    }],
    346: [function (require, module, exports) {
      'use strict';
      /* eslint-disable es/no-string-prototype-matchall -- safe */

      var $ = require('../internals/export');

      var createIteratorConstructor = require('../internals/create-iterator-constructor');

      var requireObjectCoercible = require('../internals/require-object-coercible');

      var toLength = require('../internals/to-length');

      var aFunction = require('../internals/a-function');

      var anObject = require('../internals/an-object');

      var classof = require('../internals/classof-raw');

      var isRegExp = require('../internals/is-regexp');

      var getRegExpFlags = require('../internals/regexp-flags');

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var fails = require('../internals/fails');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var speciesConstructor = require('../internals/species-constructor');

      var advanceStringIndex = require('../internals/advance-string-index');

      var InternalStateModule = require('../internals/internal-state');

      var IS_PURE = require('../internals/is-pure');

      var MATCH_ALL = wellKnownSymbol('matchAll');
      var REGEXP_STRING = 'RegExp String';
      var REGEXP_STRING_ITERATOR = REGEXP_STRING + ' Iterator';
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(REGEXP_STRING_ITERATOR);
      var RegExpPrototype = RegExp.prototype;
      var regExpBuiltinExec = RegExpPrototype.exec;
      var nativeMatchAll = ''.matchAll;
      var WORKS_WITH_NON_GLOBAL_REGEX = !!nativeMatchAll && !fails(function () {
        'a'.matchAll(/./);
      });

      var regExpExec = function regExpExec(R, S) {
        var exec = R.exec;
        var result;

        if (typeof exec == 'function') {
          result = exec.call(R, S);
          if (typeof result != 'object') throw TypeError('Incorrect exec result');
          return result;
        }

        return regExpBuiltinExec.call(R, S);
      }; // eslint-disable-next-line max-len -- ignore


      var $RegExpStringIterator = createIteratorConstructor(function RegExpStringIterator(regexp, string, global, fullUnicode) {
        setInternalState(this, {
          type: REGEXP_STRING_ITERATOR,
          regexp: regexp,
          string: string,
          global: global,
          unicode: fullUnicode,
          done: false
        });
      }, REGEXP_STRING, function next() {
        var state = getInternalState(this);
        if (state.done) return {
          value: undefined,
          done: true
        };
        var R = state.regexp;
        var S = state.string;
        var match = regExpExec(R, S);
        if (match === null) return {
          value: undefined,
          done: state.done = true
        };

        if (state.global) {
          if (String(match[0]) == '') R.lastIndex = advanceStringIndex(S, toLength(R.lastIndex), state.unicode);
          return {
            value: match,
            done: false
          };
        }

        state.done = true;
        return {
          value: match,
          done: false
        };
      });

      var $matchAll = function $matchAll(string) {
        var R = anObject(this);
        var S = String(string);
        var C, flagsValue, flags, matcher, global, fullUnicode;
        C = speciesConstructor(R, RegExp);
        flagsValue = R.flags;

        if (flagsValue === undefined && R instanceof RegExp && !('flags' in RegExpPrototype)) {
          flagsValue = getRegExpFlags.call(R);
        }

        flags = flagsValue === undefined ? '' : String(flagsValue);
        matcher = new C(C === RegExp ? R.source : R, flags);
        global = !!~flags.indexOf('g');
        fullUnicode = !!~flags.indexOf('u');
        matcher.lastIndex = toLength(R.lastIndex);
        return new $RegExpStringIterator(matcher, S, global, fullUnicode);
      }; // `String.prototype.matchAll` method
      // https://tc39.es/ecma262/#sec-string.prototype.matchall


      $({
        target: 'String',
        proto: true,
        forced: WORKS_WITH_NON_GLOBAL_REGEX
      }, {
        matchAll: function matchAll(regexp) {
          var O = requireObjectCoercible(this);
          var flags, S, matcher, rx;

          if (regexp != null) {
            if (isRegExp(regexp)) {
              flags = String(requireObjectCoercible('flags' in RegExpPrototype ? regexp.flags : getRegExpFlags.call(regexp)));
              if (!~flags.indexOf('g')) throw TypeError('`.matchAll` does not allow non-global regexes');
            }

            if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll.apply(O, arguments);
            matcher = regexp[MATCH_ALL];
            if (matcher === undefined && IS_PURE && classof(regexp) == 'RegExp') matcher = $matchAll;
            if (matcher != null) return aFunction(matcher).call(regexp, O);
          } else if (WORKS_WITH_NON_GLOBAL_REGEX) return nativeMatchAll.apply(O, arguments);

          S = String(O);
          rx = new RegExp(regexp, 'g');
          return IS_PURE ? $matchAll.call(rx, S) : rx[MATCH_ALL](S);
        }
      });
      IS_PURE || MATCH_ALL in RegExpPrototype || createNonEnumerableProperty(RegExpPrototype, MATCH_ALL, $matchAll);
    }, {
      "../internals/a-function": 11,
      "../internals/advance-string-index": 14,
      "../internals/an-object": 16,
      "../internals/classof-raw": 39,
      "../internals/create-iterator-constructor": 53,
      "../internals/create-non-enumerable-property": 54,
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/internal-state": 99,
      "../internals/is-pure": 105,
      "../internals/is-regexp": 106,
      "../internals/regexp-flags": 156,
      "../internals/require-object-coercible": 160,
      "../internals/species-constructor": 169,
      "../internals/to-length": 184,
      "../internals/well-known-symbol": 197
    }],
    347: [function (require, module, exports) {
      'use strict';

      var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');

      var anObject = require('../internals/an-object');

      var toLength = require('../internals/to-length');

      var requireObjectCoercible = require('../internals/require-object-coercible');

      var advanceStringIndex = require('../internals/advance-string-index');

      var regExpExec = require('../internals/regexp-exec-abstract'); // @@match logic


      fixRegExpWellKnownSymbolLogic('match', function (MATCH, nativeMatch, maybeCallNative) {
        return [// `String.prototype.match` method
        // https://tc39.es/ecma262/#sec-string.prototype.match
        function match(regexp) {
          var O = requireObjectCoercible(this);
          var matcher = regexp == undefined ? undefined : regexp[MATCH];
          return matcher !== undefined ? matcher.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
        }, // `RegExp.prototype[@@match]` method
        // https://tc39.es/ecma262/#sec-regexp.prototype-@@match
        function (string) {
          var res = maybeCallNative(nativeMatch, this, string);
          if (res.done) return res.value;
          var rx = anObject(this);
          var S = String(string);
          if (!rx.global) return regExpExec(rx, S);
          var fullUnicode = rx.unicode;
          rx.lastIndex = 0;
          var A = [];
          var n = 0;
          var result;

          while ((result = regExpExec(rx, S)) !== null) {
            var matchStr = String(result[0]);
            A[n] = matchStr;
            if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
            n++;
          }

          return n === 0 ? null : A;
        }];
      });
    }, {
      "../internals/advance-string-index": 14,
      "../internals/an-object": 16,
      "../internals/fix-regexp-well-known-symbol-logic": 76,
      "../internals/regexp-exec-abstract": 154,
      "../internals/require-object-coercible": 160,
      "../internals/to-length": 184
    }],
    348: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var $padEnd = require('../internals/string-pad').end;

      var WEBKIT_BUG = require('../internals/string-pad-webkit-bug'); // `String.prototype.padEnd` method
      // https://tc39.es/ecma262/#sec-string.prototype.padend


      $({
        target: 'String',
        proto: true,
        forced: WEBKIT_BUG
      }, {
        padEnd: function padEnd(maxLength
        /* , fillString = ' ' */
        ) {
          return $padEnd(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/string-pad": 173,
      "../internals/string-pad-webkit-bug": 172
    }],
    349: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var $padStart = require('../internals/string-pad').start;

      var WEBKIT_BUG = require('../internals/string-pad-webkit-bug'); // `String.prototype.padStart` method
      // https://tc39.es/ecma262/#sec-string.prototype.padstart


      $({
        target: 'String',
        proto: true,
        forced: WEBKIT_BUG
      }, {
        padStart: function padStart(maxLength
        /* , fillString = ' ' */
        ) {
          return $padStart(this, maxLength, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/string-pad": 173,
      "../internals/string-pad-webkit-bug": 172
    }],
    350: [function (require, module, exports) {
      var $ = require('../internals/export');

      var toIndexedObject = require('../internals/to-indexed-object');

      var toLength = require('../internals/to-length'); // `String.raw` method
      // https://tc39.es/ecma262/#sec-string.raw


      $({
        target: 'String',
        stat: true
      }, {
        raw: function raw(template) {
          var rawTemplate = toIndexedObject(template.raw);
          var literalSegments = toLength(rawTemplate.length);
          var argumentsLength = arguments.length;
          var elements = [];
          var i = 0;

          while (literalSegments > i) {
            elements.push(String(rawTemplate[i++]));
            if (i < argumentsLength) elements.push(String(arguments[i]));
          }

          return elements.join('');
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/to-indexed-object": 182,
      "../internals/to-length": 184
    }],
    351: [function (require, module, exports) {
      var $ = require('../internals/export');

      var repeat = require('../internals/string-repeat'); // `String.prototype.repeat` method
      // https://tc39.es/ecma262/#sec-string.prototype.repeat


      $({
        target: 'String',
        proto: true
      }, {
        repeat: repeat
      });
    }, {
      "../internals/export": 74,
      "../internals/string-repeat": 175
    }],
    352: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var requireObjectCoercible = require('../internals/require-object-coercible');

      var isRegExp = require('../internals/is-regexp');

      var getRegExpFlags = require('../internals/regexp-flags');

      var getSubstitution = require('../internals/get-substitution');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var IS_PURE = require('../internals/is-pure');

      var REPLACE = wellKnownSymbol('replace');
      var RegExpPrototype = RegExp.prototype;
      var max = Math.max;

      var stringIndexOf = function stringIndexOf(string, searchValue, fromIndex) {
        if (fromIndex > string.length) return -1;
        if (searchValue === '') return fromIndex;
        return string.indexOf(searchValue, fromIndex);
      }; // `String.prototype.replaceAll` method
      // https://tc39.es/ecma262/#sec-string.prototype.replaceall


      $({
        target: 'String',
        proto: true
      }, {
        replaceAll: function replaceAll(searchValue, replaceValue) {
          var O = requireObjectCoercible(this);
          var IS_REG_EXP, flags, replacer, string, searchString, functionalReplace, searchLength, advanceBy, replacement;
          var position = 0;
          var endOfLastMatch = 0;
          var result = '';

          if (searchValue != null) {
            IS_REG_EXP = isRegExp(searchValue);

            if (IS_REG_EXP) {
              flags = String(requireObjectCoercible('flags' in RegExpPrototype ? searchValue.flags : getRegExpFlags.call(searchValue)));
              if (!~flags.indexOf('g')) throw TypeError('`.replaceAll` does not allow non-global regexes');
            }

            replacer = searchValue[REPLACE];

            if (replacer !== undefined) {
              return replacer.call(searchValue, O, replaceValue);
            } else if (IS_PURE && IS_REG_EXP) {
              return String(O).replace(searchValue, replaceValue);
            }
          }

          string = String(O);
          searchString = String(searchValue);
          functionalReplace = typeof replaceValue === 'function';
          if (!functionalReplace) replaceValue = String(replaceValue);
          searchLength = searchString.length;
          advanceBy = max(1, searchLength);
          position = stringIndexOf(string, searchString, 0);

          while (position !== -1) {
            if (functionalReplace) {
              replacement = String(replaceValue(searchString, position, string));
            } else {
              replacement = getSubstitution(searchString, string, position, [], undefined, replaceValue);
            }

            result += string.slice(endOfLastMatch, position) + replacement;
            endOfLastMatch = position + searchLength;
            position = stringIndexOf(string, searchString, position + advanceBy);
          }

          if (endOfLastMatch < string.length) {
            result += string.slice(endOfLastMatch);
          }

          return result;
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/get-substitution": 87,
      "../internals/is-pure": 105,
      "../internals/is-regexp": 106,
      "../internals/regexp-flags": 156,
      "../internals/require-object-coercible": 160,
      "../internals/well-known-symbol": 197
    }],
    353: [function (require, module, exports) {
      'use strict';

      var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');

      var fails = require('../internals/fails');

      var anObject = require('../internals/an-object');

      var toLength = require('../internals/to-length');

      var toInteger = require('../internals/to-integer');

      var requireObjectCoercible = require('../internals/require-object-coercible');

      var advanceStringIndex = require('../internals/advance-string-index');

      var getSubstitution = require('../internals/get-substitution');

      var regExpExec = require('../internals/regexp-exec-abstract');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var REPLACE = wellKnownSymbol('replace');
      var max = Math.max;
      var min = Math.min;

      var maybeToString = function maybeToString(it) {
        return it === undefined ? it : String(it);
      }; // IE <= 11 replaces $0 with the whole match, as if it was $&
      // https://stackoverflow.com/questions/6024666/getting-ie-to-replace-a-regex-with-the-literal-string-0


      var REPLACE_KEEPS_$0 = function () {
        // eslint-disable-next-line regexp/prefer-escape-replacement-dollar-char -- required for testing
        return 'a'.replace(/./, '$0') === '$0';
      }(); // Safari <= 13.0.3(?) substitutes nth capture where n>m with an empty string


      var REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE = function () {
        if (/./[REPLACE]) {
          return /./[REPLACE]('a', '$0') === '';
        }

        return false;
      }();

      var REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {
        var re = /./;

        re.exec = function () {
          var result = [];
          result.groups = {
            a: '7'
          };
          return result;
        };

        return ''.replace(re, '$<a>') !== '7';
      }); // @@replace logic

      fixRegExpWellKnownSymbolLogic('replace', function (_, nativeReplace, maybeCallNative) {
        var UNSAFE_SUBSTITUTE = REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE ? '$' : '$0';
        return [// `String.prototype.replace` method
        // https://tc39.es/ecma262/#sec-string.prototype.replace
        function replace(searchValue, replaceValue) {
          var O = requireObjectCoercible(this);
          var replacer = searchValue == undefined ? undefined : searchValue[REPLACE];
          return replacer !== undefined ? replacer.call(searchValue, O, replaceValue) : nativeReplace.call(String(O), searchValue, replaceValue);
        }, // `RegExp.prototype[@@replace]` method
        // https://tc39.es/ecma262/#sec-regexp.prototype-@@replace
        function (string, replaceValue) {
          if (typeof replaceValue === 'string' && replaceValue.indexOf(UNSAFE_SUBSTITUTE) === -1 && replaceValue.indexOf('$<') === -1) {
            var res = maybeCallNative(nativeReplace, this, string, replaceValue);
            if (res.done) return res.value;
          }

          var rx = anObject(this);
          var S = String(string);
          var functionalReplace = typeof replaceValue === 'function';
          if (!functionalReplace) replaceValue = String(replaceValue);
          var global = rx.global;

          if (global) {
            var fullUnicode = rx.unicode;
            rx.lastIndex = 0;
          }

          var results = [];

          while (true) {
            var result = regExpExec(rx, S);
            if (result === null) break;
            results.push(result);
            if (!global) break;
            var matchStr = String(result[0]);
            if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);
          }

          var accumulatedResult = '';
          var nextSourcePosition = 0;

          for (var i = 0; i < results.length; i++) {
            result = results[i];
            var matched = String(result[0]);
            var position = max(min(toInteger(result.index), S.length), 0);
            var captures = []; // NOTE: This is equivalent to
            //   captures = result.slice(1).map(maybeToString)
            // but for some reason `nativeSlice.call(result, 1, result.length)` (called in
            // the slice polyfill when slicing native arrays) "doesn't work" in safari 9 and
            // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.

            for (var j = 1; j < result.length; j++) {
              captures.push(maybeToString(result[j]));
            }

            var namedCaptures = result.groups;

            if (functionalReplace) {
              var replacerArgs = [matched].concat(captures, position, S);
              if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);
              var replacement = String(replaceValue.apply(undefined, replacerArgs));
            } else {
              replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);
            }

            if (position >= nextSourcePosition) {
              accumulatedResult += S.slice(nextSourcePosition, position) + replacement;
              nextSourcePosition = position + matched.length;
            }
          }

          return accumulatedResult + S.slice(nextSourcePosition);
        }];
      }, !REPLACE_SUPPORTS_NAMED_GROUPS || !REPLACE_KEEPS_$0 || REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE);
    }, {
      "../internals/advance-string-index": 14,
      "../internals/an-object": 16,
      "../internals/fails": 75,
      "../internals/fix-regexp-well-known-symbol-logic": 76,
      "../internals/get-substitution": 87,
      "../internals/regexp-exec-abstract": 154,
      "../internals/require-object-coercible": 160,
      "../internals/to-integer": 183,
      "../internals/to-length": 184,
      "../internals/well-known-symbol": 197
    }],
    354: [function (require, module, exports) {
      'use strict';

      var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');

      var anObject = require('../internals/an-object');

      var requireObjectCoercible = require('../internals/require-object-coercible');

      var sameValue = require('../internals/same-value');

      var regExpExec = require('../internals/regexp-exec-abstract'); // @@search logic


      fixRegExpWellKnownSymbolLogic('search', function (SEARCH, nativeSearch, maybeCallNative) {
        return [// `String.prototype.search` method
        // https://tc39.es/ecma262/#sec-string.prototype.search
        function search(regexp) {
          var O = requireObjectCoercible(this);
          var searcher = regexp == undefined ? undefined : regexp[SEARCH];
          return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
        }, // `RegExp.prototype[@@search]` method
        // https://tc39.es/ecma262/#sec-regexp.prototype-@@search
        function (string) {
          var res = maybeCallNative(nativeSearch, this, string);
          if (res.done) return res.value;
          var rx = anObject(this);
          var S = String(string);
          var previousLastIndex = rx.lastIndex;
          if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;
          var result = regExpExec(rx, S);
          if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;
          return result === null ? -1 : result.index;
        }];
      });
    }, {
      "../internals/an-object": 16,
      "../internals/fix-regexp-well-known-symbol-logic": 76,
      "../internals/regexp-exec-abstract": 154,
      "../internals/require-object-coercible": 160,
      "../internals/same-value": 162
    }],
    355: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var createHTML = require('../internals/create-html');

      var forcedStringHTMLMethod = require('../internals/string-html-forced'); // `String.prototype.small` method
      // https://tc39.es/ecma262/#sec-string.prototype.small


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('small')
      }, {
        small: function small() {
          return createHTML(this, 'small', '', '');
        }
      });
    }, {
      "../internals/create-html": 52,
      "../internals/export": 74,
      "../internals/string-html-forced": 170
    }],
    356: [function (require, module, exports) {
      'use strict';

      var fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');

      var isRegExp = require('../internals/is-regexp');

      var anObject = require('../internals/an-object');

      var requireObjectCoercible = require('../internals/require-object-coercible');

      var speciesConstructor = require('../internals/species-constructor');

      var advanceStringIndex = require('../internals/advance-string-index');

      var toLength = require('../internals/to-length');

      var callRegExpExec = require('../internals/regexp-exec-abstract');

      var regexpExec = require('../internals/regexp-exec');

      var stickyHelpers = require('../internals/regexp-sticky-helpers');

      var fails = require('../internals/fails');

      var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
      var arrayPush = [].push;
      var min = Math.min;
      var MAX_UINT32 = 0xFFFFFFFF; // Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
      // Weex JS has frozen built-in prototypes, so use try / catch wrapper

      var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
        // eslint-disable-next-line regexp/no-empty-group -- required for testing
        var re = /(?:)/;
        var originalExec = re.exec;

        re.exec = function () {
          return originalExec.apply(this, arguments);
        };

        var result = 'ab'.split(re);
        return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
      }); // @@split logic

      fixRegExpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {
        var internalSplit;

        if ('abbc'.split(/(b)*/)[1] == 'c' || // eslint-disable-next-line regexp/no-empty-group -- required for testing
        'test'.split(/(?:)/, -1).length != 4 || 'ab'.split(/(?:ab)*/).length != 2 || '.'.split(/(.?)(.?)/).length != 4 || // eslint-disable-next-line regexp/no-assertion-capturing-group, regexp/no-empty-group -- required for testing
        '.'.split(/()()/).length > 1 || ''.split(/.?/).length) {
          // based on es5-shim implementation, need to rework it
          internalSplit = function internalSplit(separator, limit) {
            var string = String(requireObjectCoercible(this));
            var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
            if (lim === 0) return [];
            if (separator === undefined) return [string]; // If `separator` is not a regex, use native split

            if (!isRegExp(separator)) {
              return nativeSplit.call(string, separator, lim);
            }

            var output = [];
            var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
            var lastLastIndex = 0; // Make `global` and avoid `lastIndex` issues by working with a copy

            var separatorCopy = new RegExp(separator.source, flags + 'g');
            var match, lastIndex, lastLength;

            while (match = regexpExec.call(separatorCopy, string)) {
              lastIndex = separatorCopy.lastIndex;

              if (lastIndex > lastLastIndex) {
                output.push(string.slice(lastLastIndex, match.index));
                if (match.length > 1 && match.index < string.length) arrayPush.apply(output, match.slice(1));
                lastLength = match[0].length;
                lastLastIndex = lastIndex;
                if (output.length >= lim) break;
              }

              if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
            }

            if (lastLastIndex === string.length) {
              if (lastLength || !separatorCopy.test('')) output.push('');
            } else output.push(string.slice(lastLastIndex));

            return output.length > lim ? output.slice(0, lim) : output;
          }; // Chakra, V8

        } else if ('0'.split(undefined, 0).length) {
          internalSplit = function internalSplit(separator, limit) {
            return separator === undefined && limit === 0 ? [] : nativeSplit.call(this, separator, limit);
          };
        } else internalSplit = nativeSplit;

        return [// `String.prototype.split` method
        // https://tc39.es/ecma262/#sec-string.prototype.split
        function split(separator, limit) {
          var O = requireObjectCoercible(this);
          var splitter = separator == undefined ? undefined : separator[SPLIT];
          return splitter !== undefined ? splitter.call(separator, O, limit) : internalSplit.call(String(O), separator, limit);
        }, // `RegExp.prototype[@@split]` method
        // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
        //
        // NOTE: This cannot be properly polyfilled in engines that don't support
        // the 'y' flag.
        function (string, limit) {
          var res = maybeCallNative(internalSplit, this, string, limit, internalSplit !== nativeSplit);
          if (res.done) return res.value;
          var rx = anObject(this);
          var S = String(string);
          var C = speciesConstructor(rx, RegExp);
          var unicodeMatching = rx.unicode;
          var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (UNSUPPORTED_Y ? 'g' : 'y'); // ^(? + rx + ) is needed, in combination with some S slicing, to
          // simulate the 'y' flag.

          var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);
          var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
          if (lim === 0) return [];
          if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
          var p = 0;
          var q = 0;
          var A = [];

          while (q < S.length) {
            splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
            var z = callRegExpExec(splitter, UNSUPPORTED_Y ? S.slice(q) : S);
            var e;

            if (z === null || (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p) {
              q = advanceStringIndex(S, q, unicodeMatching);
            } else {
              A.push(S.slice(p, q));
              if (A.length === lim) return A;

              for (var i = 1; i <= z.length - 1; i++) {
                A.push(z[i]);
                if (A.length === lim) return A;
              }

              q = p = e;
            }
          }

          A.push(S.slice(p));
          return A;
        }];
      }, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);
    }, {
      "../internals/advance-string-index": 14,
      "../internals/an-object": 16,
      "../internals/fails": 75,
      "../internals/fix-regexp-well-known-symbol-logic": 76,
      "../internals/is-regexp": 106,
      "../internals/regexp-exec": 155,
      "../internals/regexp-exec-abstract": 154,
      "../internals/regexp-sticky-helpers": 157,
      "../internals/require-object-coercible": 160,
      "../internals/species-constructor": 169,
      "../internals/to-length": 184
    }],
    357: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;

      var toLength = require('../internals/to-length');

      var notARegExp = require('../internals/not-a-regexp');

      var requireObjectCoercible = require('../internals/require-object-coercible');

      var correctIsRegExpLogic = require('../internals/correct-is-regexp-logic');

      var IS_PURE = require('../internals/is-pure'); // eslint-disable-next-line es/no-string-prototype-startswith -- safe


      var $startsWith = ''.startsWith;
      var min = Math.min;
      var CORRECT_IS_REGEXP_LOGIC = correctIsRegExpLogic('startsWith'); // https://github.com/zloirock/core-js/pull/702

      var MDN_POLYFILL_BUG = !IS_PURE && !CORRECT_IS_REGEXP_LOGIC && !!function () {
        var descriptor = getOwnPropertyDescriptor(String.prototype, 'startsWith');
        return descriptor && !descriptor.writable;
      }(); // `String.prototype.startsWith` method
      // https://tc39.es/ecma262/#sec-string.prototype.startswith

      $({
        target: 'String',
        proto: true,
        forced: !MDN_POLYFILL_BUG && !CORRECT_IS_REGEXP_LOGIC
      }, {
        startsWith: function startsWith(searchString
        /* , position = 0 */
        ) {
          var that = String(requireObjectCoercible(this));
          notARegExp(searchString);
          var index = toLength(min(arguments.length > 1 ? arguments[1] : undefined, that.length));
          var search = String(searchString);
          return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
        }
      });
    }, {
      "../internals/correct-is-regexp-logic": 50,
      "../internals/export": 74,
      "../internals/is-pure": 105,
      "../internals/not-a-regexp": 125,
      "../internals/object-get-own-property-descriptor": 134,
      "../internals/require-object-coercible": 160,
      "../internals/to-length": 184
    }],
    358: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var createHTML = require('../internals/create-html');

      var forcedStringHTMLMethod = require('../internals/string-html-forced'); // `String.prototype.strike` method
      // https://tc39.es/ecma262/#sec-string.prototype.strike


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('strike')
      }, {
        strike: function strike() {
          return createHTML(this, 'strike', '', '');
        }
      });
    }, {
      "../internals/create-html": 52,
      "../internals/export": 74,
      "../internals/string-html-forced": 170
    }],
    359: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var createHTML = require('../internals/create-html');

      var forcedStringHTMLMethod = require('../internals/string-html-forced'); // `String.prototype.sub` method
      // https://tc39.es/ecma262/#sec-string.prototype.sub


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('sub')
      }, {
        sub: function sub() {
          return createHTML(this, 'sub', '', '');
        }
      });
    }, {
      "../internals/create-html": 52,
      "../internals/export": 74,
      "../internals/string-html-forced": 170
    }],
    360: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var requireObjectCoercible = require('../internals/require-object-coercible');

      var toInteger = require('../internals/to-integer');

      var slice = ''.slice;
      var max = Math.max;
      var min = Math.min; // `String.prototype.substr` method
      // https://tc39.es/ecma262/#sec-string.prototype.substr

      $({
        target: 'String',
        proto: true
      }, {
        substr: function substr(start, length) {
          var that = String(requireObjectCoercible(this));
          var size = that.length;
          var intStart = toInteger(start);
          var intLength, intEnd;
          if (intStart === Infinity) intStart = 0;
          if (intStart < 0) intStart = max(size + intStart, 0);
          intLength = length === undefined ? size : toInteger(length);
          if (intLength <= 0 || intLength === Infinity) return '';
          intEnd = min(intStart + intLength, size);
          return intStart >= intEnd ? '' : slice.call(that, intStart, intEnd);
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/require-object-coercible": 160,
      "../internals/to-integer": 183
    }],
    361: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var createHTML = require('../internals/create-html');

      var forcedStringHTMLMethod = require('../internals/string-html-forced'); // `String.prototype.sup` method
      // https://tc39.es/ecma262/#sec-string.prototype.sup


      $({
        target: 'String',
        proto: true,
        forced: forcedStringHTMLMethod('sup')
      }, {
        sup: function sup() {
          return createHTML(this, 'sup', '', '');
        }
      });
    }, {
      "../internals/create-html": 52,
      "../internals/export": 74,
      "../internals/string-html-forced": 170
    }],
    362: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var $trimEnd = require('../internals/string-trim').end;

      var forcedStringTrimMethod = require('../internals/string-trim-forced');

      var FORCED = forcedStringTrimMethod('trimEnd');
      var trimEnd = FORCED ? function trimEnd() {
        return $trimEnd(this); // eslint-disable-next-line es/no-string-prototype-trimstart-trimend -- safe
      } : ''.trimEnd; // `String.prototype.{ trimEnd, trimRight }` methods
      // https://tc39.es/ecma262/#sec-string.prototype.trimend
      // https://tc39.es/ecma262/#String.prototype.trimright

      $({
        target: 'String',
        proto: true,
        forced: FORCED
      }, {
        trimEnd: trimEnd,
        trimRight: trimEnd
      });
    }, {
      "../internals/export": 74,
      "../internals/string-trim": 177,
      "../internals/string-trim-forced": 176
    }],
    363: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var $trimStart = require('../internals/string-trim').start;

      var forcedStringTrimMethod = require('../internals/string-trim-forced');

      var FORCED = forcedStringTrimMethod('trimStart');
      var trimStart = FORCED ? function trimStart() {
        return $trimStart(this); // eslint-disable-next-line es/no-string-prototype-trimstart-trimend -- safe
      } : ''.trimStart; // `String.prototype.{ trimStart, trimLeft }` methods
      // https://tc39.es/ecma262/#sec-string.prototype.trimstart
      // https://tc39.es/ecma262/#String.prototype.trimleft

      $({
        target: 'String',
        proto: true,
        forced: FORCED
      }, {
        trimStart: trimStart,
        trimLeft: trimStart
      });
    }, {
      "../internals/export": 74,
      "../internals/string-trim": 177,
      "../internals/string-trim-forced": 176
    }],
    364: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var $trim = require('../internals/string-trim').trim;

      var forcedStringTrimMethod = require('../internals/string-trim-forced'); // `String.prototype.trim` method
      // https://tc39.es/ecma262/#sec-string.prototype.trim


      $({
        target: 'String',
        proto: true,
        forced: forcedStringTrimMethod('trim')
      }, {
        trim: function trim() {
          return $trim(this);
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/string-trim": 177,
      "../internals/string-trim-forced": 176
    }],
    365: [function (require, module, exports) {
      var defineWellKnownSymbol = require('../internals/define-well-known-symbol'); // `Symbol.asyncIterator` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.asynciterator


      defineWellKnownSymbol('asyncIterator');
    }, {
      "../internals/define-well-known-symbol": 60
    }],
    366: [function (require, module, exports) {
      // `Symbol.prototype.description` getter
      // https://tc39.es/ecma262/#sec-symbol.prototype.description
      'use strict';

      var $ = require('../internals/export');

      var DESCRIPTORS = require('../internals/descriptors');

      var global = require('../internals/global');

      var has = require('../internals/has');

      var isObject = require('../internals/is-object');

      var defineProperty = require('../internals/object-define-property').f;

      var copyConstructorProperties = require('../internals/copy-constructor-properties');

      var NativeSymbol = global.Symbol;

      if (DESCRIPTORS && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) || // Safari 12 bug
      NativeSymbol().description !== undefined)) {
        var EmptyStringDescriptionStore = {}; // wrap Symbol constructor for correct work with undefined description

        var SymbolWrapper = function Symbol() {
          var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
          var result = this instanceof SymbolWrapper ? new NativeSymbol(description) // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
          : description === undefined ? NativeSymbol() : NativeSymbol(description);
          if (description === '') EmptyStringDescriptionStore[result] = true;
          return result;
        };

        copyConstructorProperties(SymbolWrapper, NativeSymbol);
        var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
        symbolPrototype.constructor = SymbolWrapper;
        var symbolToString = symbolPrototype.toString;
        var native = String(NativeSymbol('test')) == 'Symbol(test)';
        var regexp = /^Symbol\((.*)\)[^)]+$/;
        defineProperty(symbolPrototype, 'description', {
          configurable: true,
          get: function description() {
            var symbol = isObject(this) ? this.valueOf() : this;
            var string = symbolToString.call(symbol);
            if (has(EmptyStringDescriptionStore, symbol)) return '';
            var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
            return desc === '' ? undefined : desc;
          }
        });
        $({
          global: true,
          forced: true
        }, {
          Symbol: SymbolWrapper
        });
      }
    }, {
      "../internals/copy-constructor-properties": 49,
      "../internals/descriptors": 61,
      "../internals/export": 74,
      "../internals/global": 88,
      "../internals/has": 89,
      "../internals/is-object": 104,
      "../internals/object-define-property": 133
    }],
    367: [function (require, module, exports) {
      var defineWellKnownSymbol = require('../internals/define-well-known-symbol'); // `Symbol.hasInstance` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.hasinstance


      defineWellKnownSymbol('hasInstance');
    }, {
      "../internals/define-well-known-symbol": 60
    }],
    368: [function (require, module, exports) {
      var defineWellKnownSymbol = require('../internals/define-well-known-symbol'); // `Symbol.isConcatSpreadable` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.isconcatspreadable


      defineWellKnownSymbol('isConcatSpreadable');
    }, {
      "../internals/define-well-known-symbol": 60
    }],
    369: [function (require, module, exports) {
      var defineWellKnownSymbol = require('../internals/define-well-known-symbol'); // `Symbol.iterator` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.iterator


      defineWellKnownSymbol('iterator');
    }, {
      "../internals/define-well-known-symbol": 60
    }],
    370: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var global = require('../internals/global');

      var getBuiltIn = require('../internals/get-built-in');

      var IS_PURE = require('../internals/is-pure');

      var DESCRIPTORS = require('../internals/descriptors');

      var NATIVE_SYMBOL = require('../internals/native-symbol');

      var USE_SYMBOL_AS_UID = require('../internals/use-symbol-as-uid');

      var fails = require('../internals/fails');

      var has = require('../internals/has');

      var isArray = require('../internals/is-array');

      var isObject = require('../internals/is-object');

      var anObject = require('../internals/an-object');

      var toObject = require('../internals/to-object');

      var toIndexedObject = require('../internals/to-indexed-object');

      var toPrimitive = require('../internals/to-primitive');

      var createPropertyDescriptor = require('../internals/create-property-descriptor');

      var nativeObjectCreate = require('../internals/object-create');

      var objectKeys = require('../internals/object-keys');

      var getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');

      var getOwnPropertyNamesExternal = require('../internals/object-get-own-property-names-external');

      var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');

      var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');

      var definePropertyModule = require('../internals/object-define-property');

      var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var redefine = require('../internals/redefine');

      var shared = require('../internals/shared');

      var sharedKey = require('../internals/shared-key');

      var hiddenKeys = require('../internals/hidden-keys');

      var uid = require('../internals/uid');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var wrappedWellKnownSymbolModule = require('../internals/well-known-symbol-wrapped');

      var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

      var setToStringTag = require('../internals/set-to-string-tag');

      var InternalStateModule = require('../internals/internal-state');

      var $forEach = require('../internals/array-iteration').forEach;

      var HIDDEN = sharedKey('hidden');
      var SYMBOL = 'Symbol';
      var PROTOTYPE = 'prototype';
      var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(SYMBOL);
      var ObjectPrototype = Object[PROTOTYPE];
      var $Symbol = global.Symbol;
      var $stringify = getBuiltIn('JSON', 'stringify');
      var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
      var nativeDefineProperty = definePropertyModule.f;
      var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
      var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
      var AllSymbols = shared('symbols');
      var ObjectPrototypeSymbols = shared('op-symbols');
      var StringToSymbolRegistry = shared('string-to-symbol-registry');
      var SymbolToStringRegistry = shared('symbol-to-string-registry');
      var WellKnownSymbolsStore = shared('wks');
      var QObject = global.QObject; // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173

      var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild; // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687

      var setSymbolDescriptor = DESCRIPTORS && fails(function () {
        return nativeObjectCreate(nativeDefineProperty({}, 'a', {
          get: function get() {
            return nativeDefineProperty(this, 'a', {
              value: 7
            }).a;
          }
        })).a != 7;
      }) ? function (O, P, Attributes) {
        var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);
        if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];
        nativeDefineProperty(O, P, Attributes);

        if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {
          nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);
        }
      } : nativeDefineProperty;

      var wrap = function wrap(tag, description) {
        var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
        setInternalState(symbol, {
          type: SYMBOL,
          tag: tag,
          description: description
        });
        if (!DESCRIPTORS) symbol.description = description;
        return symbol;
      };

      var isSymbol = USE_SYMBOL_AS_UID ? function (it) {
        return typeof it == 'symbol';
      } : function (it) {
        return Object(it) instanceof $Symbol;
      };

      var $defineProperty = function defineProperty(O, P, Attributes) {
        if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
        anObject(O);
        var key = toPrimitive(P, true);
        anObject(Attributes);

        if (has(AllSymbols, key)) {
          if (!Attributes.enumerable) {
            if (!has(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));
            O[HIDDEN][key] = true;
          } else {
            if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
            Attributes = nativeObjectCreate(Attributes, {
              enumerable: createPropertyDescriptor(0, false)
            });
          }

          return setSymbolDescriptor(O, key, Attributes);
        }

        return nativeDefineProperty(O, key, Attributes);
      };

      var $defineProperties = function defineProperties(O, Properties) {
        anObject(O);
        var properties = toIndexedObject(Properties);
        var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
        $forEach(keys, function (key) {
          if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
        });
        return O;
      };

      var $create = function create(O, Properties) {
        return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);
      };

      var $propertyIsEnumerable = function propertyIsEnumerable(V) {
        var P = toPrimitive(V, true);
        var enumerable = nativePropertyIsEnumerable.call(this, P);
        if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
        return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
      };

      var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
        var it = toIndexedObject(O);
        var key = toPrimitive(P, true);
        if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
        var descriptor = nativeGetOwnPropertyDescriptor(it, key);

        if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
          descriptor.enumerable = true;
        }

        return descriptor;
      };

      var $getOwnPropertyNames = function getOwnPropertyNames(O) {
        var names = nativeGetOwnPropertyNames(toIndexedObject(O));
        var result = [];
        $forEach(names, function (key) {
          if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
        });
        return result;
      };

      var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
        var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;
        var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
        var result = [];
        $forEach(names, function (key) {
          if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {
            result.push(AllSymbols[key]);
          }
        });
        return result;
      }; // `Symbol` constructor
      // https://tc39.es/ecma262/#sec-symbol-constructor


      if (!NATIVE_SYMBOL) {
        $Symbol = function Symbol() {
          if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
          var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
          var tag = uid(description);

          var setter = function setter(value) {
            if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
            if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
            setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
          };

          if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, {
            configurable: true,
            set: setter
          });
          return wrap(tag, description);
        };

        redefine($Symbol[PROTOTYPE], 'toString', function toString() {
          return getInternalState(this).tag;
        });
        redefine($Symbol, 'withoutSetter', function (description) {
          return wrap(uid(description), description);
        });
        propertyIsEnumerableModule.f = $propertyIsEnumerable;
        definePropertyModule.f = $defineProperty;
        getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
        getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
        getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;

        wrappedWellKnownSymbolModule.f = function (name) {
          return wrap(wellKnownSymbol(name), name);
        };

        if (DESCRIPTORS) {
          // https://github.com/tc39/proposal-Symbol-description
          nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
            configurable: true,
            get: function description() {
              return getInternalState(this).description;
            }
          });

          if (!IS_PURE) {
            redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, {
              unsafe: true
            });
          }
        }
      }

      $({
        global: true,
        wrap: true,
        forced: !NATIVE_SYMBOL,
        sham: !NATIVE_SYMBOL
      }, {
        Symbol: $Symbol
      });
      $forEach(objectKeys(WellKnownSymbolsStore), function (name) {
        defineWellKnownSymbol(name);
      });
      $({
        target: SYMBOL,
        stat: true,
        forced: !NATIVE_SYMBOL
      }, {
        // `Symbol.for` method
        // https://tc39.es/ecma262/#sec-symbol.for
        'for': function _for(key) {
          var string = String(key);
          if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
          var symbol = $Symbol(string);
          StringToSymbolRegistry[string] = symbol;
          SymbolToStringRegistry[symbol] = string;
          return symbol;
        },
        // `Symbol.keyFor` method
        // https://tc39.es/ecma262/#sec-symbol.keyfor
        keyFor: function keyFor(sym) {
          if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
          if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
        },
        useSetter: function useSetter() {
          USE_SETTER = true;
        },
        useSimple: function useSimple() {
          USE_SETTER = false;
        }
      });
      $({
        target: 'Object',
        stat: true,
        forced: !NATIVE_SYMBOL,
        sham: !DESCRIPTORS
      }, {
        // `Object.create` method
        // https://tc39.es/ecma262/#sec-object.create
        create: $create,
        // `Object.defineProperty` method
        // https://tc39.es/ecma262/#sec-object.defineproperty
        defineProperty: $defineProperty,
        // `Object.defineProperties` method
        // https://tc39.es/ecma262/#sec-object.defineproperties
        defineProperties: $defineProperties,
        // `Object.getOwnPropertyDescriptor` method
        // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors
        getOwnPropertyDescriptor: $getOwnPropertyDescriptor
      });
      $({
        target: 'Object',
        stat: true,
        forced: !NATIVE_SYMBOL
      }, {
        // `Object.getOwnPropertyNames` method
        // https://tc39.es/ecma262/#sec-object.getownpropertynames
        getOwnPropertyNames: $getOwnPropertyNames,
        // `Object.getOwnPropertySymbols` method
        // https://tc39.es/ecma262/#sec-object.getownpropertysymbols
        getOwnPropertySymbols: $getOwnPropertySymbols
      }); // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
      // https://bugs.chromium.org/p/v8/issues/detail?id=3443

      $({
        target: 'Object',
        stat: true,
        forced: fails(function () {
          getOwnPropertySymbolsModule.f(1);
        })
      }, {
        getOwnPropertySymbols: function getOwnPropertySymbols(it) {
          return getOwnPropertySymbolsModule.f(toObject(it));
        }
      }); // `JSON.stringify` method behavior with symbols
      // https://tc39.es/ecma262/#sec-json.stringify

      if ($stringify) {
        var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function () {
          var symbol = $Symbol(); // MS Edge converts symbol values to JSON as {}

          return $stringify([symbol]) != '[null]' // WebKit converts symbol values to JSON as null
          || $stringify({
            a: symbol
          }) != '{}' // V8 throws on boxed symbols
          || $stringify(Object(symbol)) != '{}';
        });
        $({
          target: 'JSON',
          stat: true,
          forced: FORCED_JSON_STRINGIFY
        }, {
          // eslint-disable-next-line no-unused-vars -- required for `.length`
          stringify: function stringify(it, replacer, space) {
            var args = [it];
            var index = 1;
            var $replacer;

            while (arguments.length > index) {
              args.push(arguments[index++]);
            }

            $replacer = replacer;
            if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined

            if (!isArray(replacer)) replacer = function replacer(key, value) {
              if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
              if (!isSymbol(value)) return value;
            };
            args[1] = replacer;
            return $stringify.apply(null, args);
          }
        });
      } // `Symbol.prototype[@@toPrimitive]` method
      // https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive


      if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {
        createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
      } // `Symbol.prototype[@@toStringTag]` property
      // https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag


      setToStringTag($Symbol, SYMBOL);
      hiddenKeys[HIDDEN] = true;
    }, {
      "../internals/an-object": 16,
      "../internals/array-iteration": 26,
      "../internals/create-non-enumerable-property": 54,
      "../internals/create-property-descriptor": 55,
      "../internals/define-well-known-symbol": 60,
      "../internals/descriptors": 61,
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/get-built-in": 82,
      "../internals/global": 88,
      "../internals/has": 89,
      "../internals/hidden-keys": 90,
      "../internals/internal-state": 99,
      "../internals/is-array": 101,
      "../internals/is-object": 104,
      "../internals/is-pure": 105,
      "../internals/native-symbol": 121,
      "../internals/object-create": 131,
      "../internals/object-define-property": 133,
      "../internals/object-get-own-property-descriptor": 134,
      "../internals/object-get-own-property-names": 136,
      "../internals/object-get-own-property-names-external": 135,
      "../internals/object-get-own-property-symbols": 137,
      "../internals/object-keys": 141,
      "../internals/object-property-is-enumerable": 142,
      "../internals/redefine": 152,
      "../internals/set-to-string-tag": 165,
      "../internals/shared": 168,
      "../internals/shared-key": 166,
      "../internals/to-indexed-object": 182,
      "../internals/to-object": 185,
      "../internals/to-primitive": 188,
      "../internals/uid": 194,
      "../internals/use-symbol-as-uid": 195,
      "../internals/well-known-symbol": 197,
      "../internals/well-known-symbol-wrapped": 196
    }],
    371: [function (require, module, exports) {
      var defineWellKnownSymbol = require('../internals/define-well-known-symbol'); // `Symbol.matchAll` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.matchall


      defineWellKnownSymbol('matchAll');
    }, {
      "../internals/define-well-known-symbol": 60
    }],
    372: [function (require, module, exports) {
      var defineWellKnownSymbol = require('../internals/define-well-known-symbol'); // `Symbol.match` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.match


      defineWellKnownSymbol('match');
    }, {
      "../internals/define-well-known-symbol": 60
    }],
    373: [function (require, module, exports) {
      var defineWellKnownSymbol = require('../internals/define-well-known-symbol'); // `Symbol.replace` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.replace


      defineWellKnownSymbol('replace');
    }, {
      "../internals/define-well-known-symbol": 60
    }],
    374: [function (require, module, exports) {
      var defineWellKnownSymbol = require('../internals/define-well-known-symbol'); // `Symbol.search` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.search


      defineWellKnownSymbol('search');
    }, {
      "../internals/define-well-known-symbol": 60
    }],
    375: [function (require, module, exports) {
      var defineWellKnownSymbol = require('../internals/define-well-known-symbol'); // `Symbol.species` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.species


      defineWellKnownSymbol('species');
    }, {
      "../internals/define-well-known-symbol": 60
    }],
    376: [function (require, module, exports) {
      var defineWellKnownSymbol = require('../internals/define-well-known-symbol'); // `Symbol.split` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.split


      defineWellKnownSymbol('split');
    }, {
      "../internals/define-well-known-symbol": 60
    }],
    377: [function (require, module, exports) {
      var defineWellKnownSymbol = require('../internals/define-well-known-symbol'); // `Symbol.toPrimitive` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.toprimitive


      defineWellKnownSymbol('toPrimitive');
    }, {
      "../internals/define-well-known-symbol": 60
    }],
    378: [function (require, module, exports) {
      var defineWellKnownSymbol = require('../internals/define-well-known-symbol'); // `Symbol.toStringTag` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.tostringtag


      defineWellKnownSymbol('toStringTag');
    }, {
      "../internals/define-well-known-symbol": 60
    }],
    379: [function (require, module, exports) {
      var defineWellKnownSymbol = require('../internals/define-well-known-symbol'); // `Symbol.unscopables` well-known symbol
      // https://tc39.es/ecma262/#sec-symbol.unscopables


      defineWellKnownSymbol('unscopables');
    }, {
      "../internals/define-well-known-symbol": 60
    }],
    380: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var $copyWithin = require('../internals/array-copy-within');

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.copyWithin` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.copywithin

      exportTypedArrayMethod('copyWithin', function copyWithin(target, start
      /* , end */
      ) {
        return $copyWithin.call(aTypedArray(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/array-copy-within": 20
    }],
    381: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var $every = require('../internals/array-iteration').every;

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.every` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.every

      exportTypedArrayMethod('every', function every(callbackfn
      /* , thisArg */
      ) {
        return $every(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/array-iteration": 26
    }],
    382: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var $fill = require('../internals/array-fill');

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.fill` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill
      // eslint-disable-next-line no-unused-vars -- required for `.length`

      exportTypedArrayMethod('fill', function fill(value
      /* , start, end */
      ) {
        return $fill.apply(aTypedArray(this), arguments);
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/array-fill": 21
    }],
    383: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var $filter = require('../internals/array-iteration').filter;

      var fromSpeciesAndList = require('../internals/typed-array-from-species-and-list');

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.filter` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.filter

      exportTypedArrayMethod('filter', function filter(callbackfn
      /* , thisArg */
      ) {
        var list = $filter(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        return fromSpeciesAndList(this, list);
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/array-iteration": 26,
      "../internals/typed-array-from-species-and-list": 192
    }],
    384: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var $findIndex = require('../internals/array-iteration').findIndex;

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.findIndex` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.findindex

      exportTypedArrayMethod('findIndex', function findIndex(predicate
      /* , thisArg */
      ) {
        return $findIndex(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/array-iteration": 26
    }],
    385: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var $find = require('../internals/array-iteration').find;

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.find` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.find

      exportTypedArrayMethod('find', function find(predicate
      /* , thisArg */
      ) {
        return $find(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/array-iteration": 26
    }],
    386: [function (require, module, exports) {
      var createTypedArrayConstructor = require('../internals/typed-array-constructor'); // `Float32Array` constructor
      // https://tc39.es/ecma262/#sec-typedarray-objects


      createTypedArrayConstructor('Float32', function (init) {
        return function Float32Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }, {
      "../internals/typed-array-constructor": 190
    }],
    387: [function (require, module, exports) {
      var createTypedArrayConstructor = require('../internals/typed-array-constructor'); // `Float64Array` constructor
      // https://tc39.es/ecma262/#sec-typedarray-objects


      createTypedArrayConstructor('Float64', function (init) {
        return function Float64Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }, {
      "../internals/typed-array-constructor": 190
    }],
    388: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var $forEach = require('../internals/array-iteration').forEach;

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.forEach` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.foreach

      exportTypedArrayMethod('forEach', function forEach(callbackfn
      /* , thisArg */
      ) {
        $forEach(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/array-iteration": 26
    }],
    389: [function (require, module, exports) {
      'use strict';

      var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require('../internals/typed-array-constructors-require-wrappers');

      var exportTypedArrayStaticMethod = require('../internals/array-buffer-view-core').exportTypedArrayStaticMethod;

      var typedArrayFrom = require('../internals/typed-array-from'); // `%TypedArray%.from` method
      // https://tc39.es/ecma262/#sec-%typedarray%.from


      exportTypedArrayStaticMethod('from', typedArrayFrom, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/typed-array-constructors-require-wrappers": 191,
      "../internals/typed-array-from": 193
    }],
    390: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var $includes = require('../internals/array-includes').includes;

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.includes` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.includes

      exportTypedArrayMethod('includes', function includes(searchElement
      /* , fromIndex */
      ) {
        return $includes(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/array-includes": 24
    }],
    391: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var $indexOf = require('../internals/array-includes').indexOf;

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.indexOf` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.indexof

      exportTypedArrayMethod('indexOf', function indexOf(searchElement
      /* , fromIndex */
      ) {
        return $indexOf(aTypedArray(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/array-includes": 24
    }],
    392: [function (require, module, exports) {
      var createTypedArrayConstructor = require('../internals/typed-array-constructor'); // `Int16Array` constructor
      // https://tc39.es/ecma262/#sec-typedarray-objects


      createTypedArrayConstructor('Int16', function (init) {
        return function Int16Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }, {
      "../internals/typed-array-constructor": 190
    }],
    393: [function (require, module, exports) {
      var createTypedArrayConstructor = require('../internals/typed-array-constructor'); // `Int32Array` constructor
      // https://tc39.es/ecma262/#sec-typedarray-objects


      createTypedArrayConstructor('Int32', function (init) {
        return function Int32Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }, {
      "../internals/typed-array-constructor": 190
    }],
    394: [function (require, module, exports) {
      var createTypedArrayConstructor = require('../internals/typed-array-constructor'); // `Int8Array` constructor
      // https://tc39.es/ecma262/#sec-typedarray-objects


      createTypedArrayConstructor('Int8', function (init) {
        return function Int8Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }, {
      "../internals/typed-array-constructor": 190
    }],
    395: [function (require, module, exports) {
      'use strict';

      var global = require('../internals/global');

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var ArrayIterators = require('../modules/es.array.iterator');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var ITERATOR = wellKnownSymbol('iterator');
      var Uint8Array = global.Uint8Array;
      var arrayValues = ArrayIterators.values;
      var arrayKeys = ArrayIterators.keys;
      var arrayEntries = ArrayIterators.entries;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var nativeTypedArrayIterator = Uint8Array && Uint8Array.prototype[ITERATOR];
      var CORRECT_ITER_NAME = !!nativeTypedArrayIterator && (nativeTypedArrayIterator.name == 'values' || nativeTypedArrayIterator.name == undefined);

      var typedArrayValues = function values() {
        return arrayValues.call(aTypedArray(this));
      }; // `%TypedArray%.prototype.entries` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.entries


      exportTypedArrayMethod('entries', function entries() {
        return arrayEntries.call(aTypedArray(this));
      }); // `%TypedArray%.prototype.keys` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.keys

      exportTypedArrayMethod('keys', function keys() {
        return arrayKeys.call(aTypedArray(this));
      }); // `%TypedArray%.prototype.values` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.values

      exportTypedArrayMethod('values', typedArrayValues, !CORRECT_ITER_NAME); // `%TypedArray%.prototype[@@iterator]` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype-@@iterator

      exportTypedArrayMethod(ITERATOR, typedArrayValues, !CORRECT_ITER_NAME);
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/global": 88,
      "../internals/well-known-symbol": 197,
      "../modules/es.array.iterator": 217
    }],
    396: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var $join = [].join; // `%TypedArray%.prototype.join` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.join
      // eslint-disable-next-line no-unused-vars -- required for `.length`

      exportTypedArrayMethod('join', function join(separator) {
        return $join.apply(aTypedArray(this), arguments);
      });
    }, {
      "../internals/array-buffer-view-core": 18
    }],
    397: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var $lastIndexOf = require('../internals/array-last-index-of');

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.lastIndexOf` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.lastindexof
      // eslint-disable-next-line no-unused-vars -- required for `.length`

      exportTypedArrayMethod('lastIndexOf', function lastIndexOf(searchElement
      /* , fromIndex */
      ) {
        return $lastIndexOf.apply(aTypedArray(this), arguments);
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/array-last-index-of": 27
    }],
    398: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var $map = require('../internals/array-iteration').map;

      var speciesConstructor = require('../internals/species-constructor');

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.map` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.map

      exportTypedArrayMethod('map', function map(mapfn
      /* , thisArg */
      ) {
        return $map(aTypedArray(this), mapfn, arguments.length > 1 ? arguments[1] : undefined, function (O, length) {
          return new (aTypedArrayConstructor(speciesConstructor(O, O.constructor)))(length);
        });
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/array-iteration": 26,
      "../internals/species-constructor": 169
    }],
    399: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = require('../internals/typed-array-constructors-require-wrappers');

      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
      var exportTypedArrayStaticMethod = ArrayBufferViewCore.exportTypedArrayStaticMethod; // `%TypedArray%.of` method
      // https://tc39.es/ecma262/#sec-%typedarray%.of

      exportTypedArrayStaticMethod('of', function of()
      /* ...items */
      {
        var index = 0;
        var length = arguments.length;
        var result = new (aTypedArrayConstructor(this))(length);

        while (length > index) {
          result[index] = arguments[index++];
        }

        return result;
      }, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS);
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/typed-array-constructors-require-wrappers": 191
    }],
    400: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var $reduceRight = require('../internals/array-reduce').right;

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.reduceRicht` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduceright

      exportTypedArrayMethod('reduceRight', function reduceRight(callbackfn
      /* , initialValue */
      ) {
        return $reduceRight(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/array-reduce": 30
    }],
    401: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var $reduce = require('../internals/array-reduce').left;

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.reduce` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.reduce

      exportTypedArrayMethod('reduce', function reduce(callbackfn
      /* , initialValue */
      ) {
        return $reduce(aTypedArray(this), callbackfn, arguments.length, arguments.length > 1 ? arguments[1] : undefined);
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/array-reduce": 30
    }],
    402: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var floor = Math.floor; // `%TypedArray%.prototype.reverse` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.reverse

      exportTypedArrayMethod('reverse', function reverse() {
        var that = this;
        var length = aTypedArray(that).length;
        var middle = floor(length / 2);
        var index = 0;
        var value;

        while (index < middle) {
          value = that[index];
          that[index++] = that[--length];
          that[length] = value;
        }

        return that;
      });
    }, {
      "../internals/array-buffer-view-core": 18
    }],
    403: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var toLength = require('../internals/to-length');

      var toOffset = require('../internals/to-offset');

      var toObject = require('../internals/to-object');

      var fails = require('../internals/fails');

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var FORCED = fails(function () {
        // eslint-disable-next-line es/no-typed-arrays -- required for testing
        new Int8Array(1).set({});
      }); // `%TypedArray%.prototype.set` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.set

      exportTypedArrayMethod('set', function set(arrayLike
      /* , offset */
      ) {
        aTypedArray(this);
        var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
        var length = this.length;
        var src = toObject(arrayLike);
        var len = toLength(src.length);
        var index = 0;
        if (len + offset > length) throw RangeError('Wrong length');

        while (index < len) {
          this[offset + index] = src[index++];
        }
      }, FORCED);
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/fails": 75,
      "../internals/to-length": 184,
      "../internals/to-object": 185,
      "../internals/to-offset": 186
    }],
    404: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var speciesConstructor = require('../internals/species-constructor');

      var fails = require('../internals/fails');

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var aTypedArrayConstructor = ArrayBufferViewCore.aTypedArrayConstructor;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var $slice = [].slice;
      var FORCED = fails(function () {
        // eslint-disable-next-line es/no-typed-arrays -- required for testing
        new Int8Array(1).slice();
      }); // `%TypedArray%.prototype.slice` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.slice

      exportTypedArrayMethod('slice', function slice(start, end) {
        var list = $slice.call(aTypedArray(this), start, end);
        var C = speciesConstructor(this, this.constructor);
        var index = 0;
        var length = list.length;
        var result = new (aTypedArrayConstructor(C))(length);

        while (length > index) {
          result[index] = list[index++];
        }

        return result;
      }, FORCED);
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/fails": 75,
      "../internals/species-constructor": 169
    }],
    405: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var $some = require('../internals/array-iteration').some;

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.some` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.some

      exportTypedArrayMethod('some', function some(callbackfn
      /* , thisArg */
      ) {
        return $some(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/array-iteration": 26
    }],
    406: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var global = require('../internals/global');

      var fails = require('../internals/fails');

      var aFunction = require('../internals/a-function');

      var toLength = require('../internals/to-length');

      var internalSort = require('../internals/array-sort');

      var FF = require('../internals/engine-ff-version');

      var IE_OR_EDGE = require('../internals/engine-is-ie-or-edge');

      var V8 = require('../internals/engine-v8-version');

      var WEBKIT = require('../internals/engine-webkit-version');

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var Uint16Array = global.Uint16Array;
      var nativeSort = Uint16Array && Uint16Array.prototype.sort; // WebKit

      var ACCEPT_INCORRECT_ARGUMENTS = !!nativeSort && !fails(function () {
        var array = new Uint16Array(2);
        array.sort(null);
        array.sort({});
      });
      var STABLE_SORT = !!nativeSort && !fails(function () {
        // feature detection can be too slow, so check engines versions
        if (V8) return V8 < 74;
        if (FF) return FF < 67;
        if (IE_OR_EDGE) return true;
        if (WEBKIT) return WEBKIT < 602;
        var array = new Uint16Array(516);
        var expected = Array(516);
        var index, mod;

        for (index = 0; index < 516; index++) {
          mod = index % 4;
          array[index] = 515 - index;
          expected[index] = index - 2 * mod + 3;
        }

        array.sort(function (a, b) {
          return (a / 4 | 0) - (b / 4 | 0);
        });

        for (index = 0; index < 516; index++) {
          if (array[index] !== expected[index]) return true;
        }
      });

      var getSortCompare = function getSortCompare(comparefn) {
        return function (x, y) {
          if (comparefn !== undefined) return +comparefn(x, y) || 0; // eslint-disable-next-line no-self-compare -- NaN check

          if (y !== y) return -1; // eslint-disable-next-line no-self-compare -- NaN check

          if (x !== x) return 1;
          if (x === 0 && y === 0) return 1 / x > 0 && 1 / y < 0 ? 1 : -1;
          return x > y;
        };
      }; // `%TypedArray%.prototype.sort` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort


      exportTypedArrayMethod('sort', function sort(comparefn) {
        var array = this;
        if (comparefn !== undefined) aFunction(comparefn);
        if (STABLE_SORT) return nativeSort.call(array, comparefn);
        aTypedArray(array);
        var arrayLength = toLength(array.length);
        var items = Array(arrayLength);
        var index;

        for (index = 0; index < arrayLength; index++) {
          items[index] = array[index];
        }

        items = internalSort(array, getSortCompare(comparefn));

        for (index = 0; index < arrayLength; index++) {
          array[index] = items[index];
        }

        return array;
      }, !STABLE_SORT || ACCEPT_INCORRECT_ARGUMENTS);
    }, {
      "../internals/a-function": 11,
      "../internals/array-buffer-view-core": 18,
      "../internals/array-sort": 31,
      "../internals/engine-ff-version": 64,
      "../internals/engine-is-ie-or-edge": 66,
      "../internals/engine-v8-version": 71,
      "../internals/engine-webkit-version": 72,
      "../internals/fails": 75,
      "../internals/global": 88,
      "../internals/to-length": 184
    }],
    407: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var toLength = require('../internals/to-length');

      var toAbsoluteIndex = require('../internals/to-absolute-index');

      var speciesConstructor = require('../internals/species-constructor');

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.subarray` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.subarray

      exportTypedArrayMethod('subarray', function subarray(begin, end) {
        var O = aTypedArray(this);
        var length = O.length;
        var beginIndex = toAbsoluteIndex(begin, length);
        return new (speciesConstructor(O, O.constructor))(O.buffer, O.byteOffset + beginIndex * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - beginIndex));
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/species-constructor": 169,
      "../internals/to-absolute-index": 180,
      "../internals/to-length": 184
    }],
    408: [function (require, module, exports) {
      'use strict';

      var global = require('../internals/global');

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var fails = require('../internals/fails');

      var Int8Array = global.Int8Array;
      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
      var $toLocaleString = [].toLocaleString;
      var $slice = [].slice; // iOS Safari 6.x fails here

      var TO_LOCALE_STRING_BUG = !!Int8Array && fails(function () {
        $toLocaleString.call(new Int8Array(1));
      });
      var FORCED = fails(function () {
        return [1, 2].toLocaleString() != new Int8Array([1, 2]).toLocaleString();
      }) || !fails(function () {
        Int8Array.prototype.toLocaleString.call([1, 2]);
      }); // `%TypedArray%.prototype.toLocaleString` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring

      exportTypedArrayMethod('toLocaleString', function toLocaleString() {
        return $toLocaleString.apply(TO_LOCALE_STRING_BUG ? $slice.call(aTypedArray(this)) : aTypedArray(this), arguments);
      }, FORCED);
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/fails": 75,
      "../internals/global": 88
    }],
    409: [function (require, module, exports) {
      'use strict';

      var exportTypedArrayMethod = require('../internals/array-buffer-view-core').exportTypedArrayMethod;

      var fails = require('../internals/fails');

      var global = require('../internals/global');

      var Uint8Array = global.Uint8Array;
      var Uint8ArrayPrototype = Uint8Array && Uint8Array.prototype || {};
      var arrayToString = [].toString;
      var arrayJoin = [].join;

      if (fails(function () {
        arrayToString.call({});
      })) {
        arrayToString = function toString() {
          return arrayJoin.call(this);
        };
      }

      var IS_NOT_ARRAY_METHOD = Uint8ArrayPrototype.toString != arrayToString; // `%TypedArray%.prototype.toString` method
      // https://tc39.es/ecma262/#sec-%typedarray%.prototype.tostring

      exportTypedArrayMethod('toString', arrayToString, IS_NOT_ARRAY_METHOD);
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/fails": 75,
      "../internals/global": 88
    }],
    410: [function (require, module, exports) {
      var createTypedArrayConstructor = require('../internals/typed-array-constructor'); // `Uint16Array` constructor
      // https://tc39.es/ecma262/#sec-typedarray-objects


      createTypedArrayConstructor('Uint16', function (init) {
        return function Uint16Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }, {
      "../internals/typed-array-constructor": 190
    }],
    411: [function (require, module, exports) {
      var createTypedArrayConstructor = require('../internals/typed-array-constructor'); // `Uint32Array` constructor
      // https://tc39.es/ecma262/#sec-typedarray-objects


      createTypedArrayConstructor('Uint32', function (init) {
        return function Uint32Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }, {
      "../internals/typed-array-constructor": 190
    }],
    412: [function (require, module, exports) {
      var createTypedArrayConstructor = require('../internals/typed-array-constructor'); // `Uint8Array` constructor
      // https://tc39.es/ecma262/#sec-typedarray-objects


      createTypedArrayConstructor('Uint8', function (init) {
        return function Uint8Array(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      });
    }, {
      "../internals/typed-array-constructor": 190
    }],
    413: [function (require, module, exports) {
      var createTypedArrayConstructor = require('../internals/typed-array-constructor'); // `Uint8ClampedArray` constructor
      // https://tc39.es/ecma262/#sec-typedarray-objects


      createTypedArrayConstructor('Uint8', function (init) {
        return function Uint8ClampedArray(data, byteOffset, length) {
          return init(this, data, byteOffset, length);
        };
      }, true);
    }, {
      "../internals/typed-array-constructor": 190
    }],
    414: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var fromCharCode = String.fromCharCode;
      var hex2 = /^[\da-f]{2}$/i;
      var hex4 = /^[\da-f]{4}$/i; // `unescape` method
      // https://tc39.es/ecma262/#sec-unescape-string

      $({
        global: true
      }, {
        unescape: function unescape(string) {
          var str = String(string);
          var result = '';
          var length = str.length;
          var index = 0;
          var chr, slice;

          while (index < length) {
            chr = str.charAt(index++);

            if (chr === '%') {
              if (str.charAt(index) === 'u') {
                slice = str.slice(index + 1, index + 5);

                if (hex4.test(slice)) {
                  result += fromCharCode(parseInt(slice, 16));
                  index += 5;
                  continue;
                }
              } else {
                slice = str.slice(index, index + 2);

                if (hex2.test(slice)) {
                  result += fromCharCode(parseInt(slice, 16));
                  index += 2;
                  continue;
                }
              }
            }

            result += chr;
          }

          return result;
        }
      });
    }, {
      "../internals/export": 74
    }],
    415: [function (require, module, exports) {
      'use strict';

      var global = require('../internals/global');

      var redefineAll = require('../internals/redefine-all');

      var InternalMetadataModule = require('../internals/internal-metadata');

      var collection = require('../internals/collection');

      var collectionWeak = require('../internals/collection-weak');

      var isObject = require('../internals/is-object');

      var enforceIternalState = require('../internals/internal-state').enforce;

      var NATIVE_WEAK_MAP = require('../internals/native-weak-map');

      var IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global; // eslint-disable-next-line es/no-object-isextensible -- safe

      var isExtensible = Object.isExtensible;
      var InternalWeakMap;

      var wrapper = function wrapper(init) {
        return function WeakMap() {
          return init(this, arguments.length ? arguments[0] : undefined);
        };
      }; // `WeakMap` constructor
      // https://tc39.es/ecma262/#sec-weakmap-constructor


      var $WeakMap = module.exports = collection('WeakMap', wrapper, collectionWeak); // IE11 WeakMap frozen keys fix
      // We can't use feature detection because it crash some old IE builds
      // https://github.com/zloirock/core-js/issues/485

      if (NATIVE_WEAK_MAP && IS_IE11) {
        InternalWeakMap = collectionWeak.getConstructor(wrapper, 'WeakMap', true);
        InternalMetadataModule.REQUIRED = true;
        var WeakMapPrototype = $WeakMap.prototype;
        var nativeDelete = WeakMapPrototype['delete'];
        var nativeHas = WeakMapPrototype.has;
        var nativeGet = WeakMapPrototype.get;
        var nativeSet = WeakMapPrototype.set;
        redefineAll(WeakMapPrototype, {
          'delete': function _delete(key) {
            if (isObject(key) && !isExtensible(key)) {
              var state = enforceIternalState(this);
              if (!state.frozen) state.frozen = new InternalWeakMap();
              return nativeDelete.call(this, key) || state.frozen['delete'](key);
            }

            return nativeDelete.call(this, key);
          },
          has: function has(key) {
            if (isObject(key) && !isExtensible(key)) {
              var state = enforceIternalState(this);
              if (!state.frozen) state.frozen = new InternalWeakMap();
              return nativeHas.call(this, key) || state.frozen.has(key);
            }

            return nativeHas.call(this, key);
          },
          get: function get(key) {
            if (isObject(key) && !isExtensible(key)) {
              var state = enforceIternalState(this);
              if (!state.frozen) state.frozen = new InternalWeakMap();
              return nativeHas.call(this, key) ? nativeGet.call(this, key) : state.frozen.get(key);
            }

            return nativeGet.call(this, key);
          },
          set: function set(key, value) {
            if (isObject(key) && !isExtensible(key)) {
              var state = enforceIternalState(this);
              if (!state.frozen) state.frozen = new InternalWeakMap();
              nativeHas.call(this, key) ? nativeSet.call(this, key, value) : state.frozen.set(key, value);
            } else nativeSet.call(this, key, value);

            return this;
          }
        });
      }
    }, {
      "../internals/collection": 47,
      "../internals/collection-weak": 46,
      "../internals/global": 88,
      "../internals/internal-metadata": 98,
      "../internals/internal-state": 99,
      "../internals/is-object": 104,
      "../internals/native-weak-map": 123,
      "../internals/redefine-all": 151
    }],
    416: [function (require, module, exports) {
      'use strict';

      var collection = require('../internals/collection');

      var collectionWeak = require('../internals/collection-weak'); // `WeakSet` constructor
      // https://tc39.es/ecma262/#sec-weakset-constructor


      collection('WeakSet', function (init) {
        return function WeakSet() {
          return init(this, arguments.length ? arguments[0] : undefined);
        };
      }, collectionWeak);
    }, {
      "../internals/collection": 47,
      "../internals/collection-weak": 46
    }],
    417: [function (require, module, exports) {
      // TODO: Remove from `core-js@4`
      require('./es.aggregate-error');
    }, {
      "./es.aggregate-error": 199
    }],
    418: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var toObject = require('../internals/to-object');

      var toLength = require('../internals/to-length');

      var toInteger = require('../internals/to-integer');

      var addToUnscopables = require('../internals/add-to-unscopables'); // `Array.prototype.at` method
      // https://github.com/tc39/proposal-relative-indexing-method


      $({
        target: 'Array',
        proto: true
      }, {
        at: function at(index) {
          var O = toObject(this);
          var len = toLength(O.length);
          var relativeIndex = toInteger(index);
          var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
          return k < 0 || k >= len ? undefined : O[k];
        }
      });
      addToUnscopables('at');
    }, {
      "../internals/add-to-unscopables": 13,
      "../internals/export": 74,
      "../internals/to-integer": 183,
      "../internals/to-length": 184,
      "../internals/to-object": 185
    }],
    419: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var $filterOut = require('../internals/array-iteration').filterOut;

      var addToUnscopables = require('../internals/add-to-unscopables'); // `Array.prototype.filterOut` method
      // https://github.com/tc39/proposal-array-filtering


      $({
        target: 'Array',
        proto: true
      }, {
        filterOut: function filterOut(callbackfn
        /* , thisArg */
        ) {
          return $filterOut(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
      addToUnscopables('filterOut');
    }, {
      "../internals/add-to-unscopables": 13,
      "../internals/array-iteration": 26,
      "../internals/export": 74
    }],
    420: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var $findLastIndex = require('../internals/array-iteration-from-last').findLastIndex;

      var addToUnscopables = require('../internals/add-to-unscopables'); // `Array.prototype.findLastIndex` method
      // https://github.com/tc39/proposal-array-find-from-last


      $({
        target: 'Array',
        proto: true
      }, {
        findLastIndex: function findLastIndex(callbackfn
        /* , that = undefined */
        ) {
          return $findLastIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
      addToUnscopables('findLastIndex');
    }, {
      "../internals/add-to-unscopables": 13,
      "../internals/array-iteration-from-last": 25,
      "../internals/export": 74
    }],
    421: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var $findLast = require('../internals/array-iteration-from-last').findLast;

      var addToUnscopables = require('../internals/add-to-unscopables'); // `Array.prototype.findLast` method
      // https://github.com/tc39/proposal-array-find-from-last


      $({
        target: 'Array',
        proto: true
      }, {
        findLast: function findLast(callbackfn
        /* , that = undefined */
        ) {
          return $findLast(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        }
      });
      addToUnscopables('findLast');
    }, {
      "../internals/add-to-unscopables": 13,
      "../internals/array-iteration-from-last": 25,
      "../internals/export": 74
    }],
    422: [function (require, module, exports) {
      var $ = require('../internals/export');

      var isArray = require('../internals/is-array'); // eslint-disable-next-line es/no-object-isfrozen -- safe


      var isFrozen = Object.isFrozen;

      var isFrozenStringArray = function isFrozenStringArray(array, allowUndefined) {
        if (!isFrozen || !isArray(array) || !isFrozen(array)) return false;
        var index = 0;
        var length = array.length;
        var element;

        while (index < length) {
          element = array[index++];

          if (!(typeof element === 'string' || allowUndefined && typeof element === 'undefined')) {
            return false;
          }
        }

        return length !== 0;
      }; // `Array.isTemplateObject` method
      // https://github.com/tc39/proposal-array-is-template-object


      $({
        target: 'Array',
        stat: true
      }, {
        isTemplateObject: function isTemplateObject(value) {
          if (!isFrozenStringArray(value, true)) return false;
          var raw = value.raw;
          if (raw.length !== value.length || !isFrozenStringArray(raw, false)) return false;
          return true;
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/is-array": 101
    }],
    423: [function (require, module, exports) {
      'use strict';

      var DESCRIPTORS = require('../internals/descriptors');

      var addToUnscopables = require('../internals/add-to-unscopables');

      var toObject = require('../internals/to-object');

      var toLength = require('../internals/to-length');

      var defineProperty = require('../internals/object-define-property').f; // `Array.prototype.lastIndex` getter
      // https://github.com/keithamus/proposal-array-last


      if (DESCRIPTORS && !('lastIndex' in [])) {
        defineProperty(Array.prototype, 'lastIndex', {
          configurable: true,
          get: function lastIndex() {
            var O = toObject(this);
            var len = toLength(O.length);
            return len == 0 ? 0 : len - 1;
          }
        });
        addToUnscopables('lastIndex');
      }
    }, {
      "../internals/add-to-unscopables": 13,
      "../internals/descriptors": 61,
      "../internals/object-define-property": 133,
      "../internals/to-length": 184,
      "../internals/to-object": 185
    }],
    424: [function (require, module, exports) {
      'use strict';

      var DESCRIPTORS = require('../internals/descriptors');

      var addToUnscopables = require('../internals/add-to-unscopables');

      var toObject = require('../internals/to-object');

      var toLength = require('../internals/to-length');

      var defineProperty = require('../internals/object-define-property').f; // `Array.prototype.lastIndex` accessor
      // https://github.com/keithamus/proposal-array-last


      if (DESCRIPTORS && !('lastItem' in [])) {
        defineProperty(Array.prototype, 'lastItem', {
          configurable: true,
          get: function lastItem() {
            var O = toObject(this);
            var len = toLength(O.length);
            return len == 0 ? undefined : O[len - 1];
          },
          set: function lastItem(value) {
            var O = toObject(this);
            var len = toLength(O.length);
            return O[len == 0 ? 0 : len - 1] = value;
          }
        });
        addToUnscopables('lastItem');
      }
    }, {
      "../internals/add-to-unscopables": 13,
      "../internals/descriptors": 61,
      "../internals/object-define-property": 133,
      "../internals/to-length": 184,
      "../internals/to-object": 185
    }],
    425: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var addToUnscopables = require('../internals/add-to-unscopables');

      var uniqueBy = require('../internals/array-unique-by'); // `Array.prototype.uniqueBy` method
      // https://github.com/tc39/proposal-array-unique


      $({
        target: 'Array',
        proto: true
      }, {
        uniqueBy: uniqueBy
      });
      addToUnscopables('uniqueBy');
    }, {
      "../internals/add-to-unscopables": 13,
      "../internals/array-unique-by": 33,
      "../internals/export": 74
    }],
    426: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var anObject = require('../internals/an-object');

      var createAsyncIteratorProxy = require('../internals/async-iterator-create-proxy');

      var AsyncIteratorProxy = createAsyncIteratorProxy(function (arg, Promise) {
        var state = this;
        var iterator = state.iterator;
        return Promise.resolve(anObject(state.next.call(iterator, arg))).then(function (step) {
          if (anObject(step).done) {
            state.done = true;
            return {
              done: true,
              value: undefined
            };
          }

          return {
            done: false,
            value: [state.index++, step.value]
          };
        });
      });
      $({
        target: 'AsyncIterator',
        proto: true,
        real: true
      }, {
        asIndexedPairs: function asIndexedPairs() {
          return new AsyncIteratorProxy({
            iterator: anObject(this),
            index: 0
          });
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/async-iterator-create-proxy": 34,
      "../internals/export": 74
    }],
    427: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var anInstance = require('../internals/an-instance');

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var has = require('../internals/has');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var AsyncIteratorPrototype = require('../internals/async-iterator-prototype');

      var IS_PURE = require('../internals/is-pure');

      var TO_STRING_TAG = wellKnownSymbol('toStringTag');

      var AsyncIteratorConstructor = function AsyncIterator() {
        anInstance(this, AsyncIteratorConstructor);
      };

      AsyncIteratorConstructor.prototype = AsyncIteratorPrototype;

      if (!has(AsyncIteratorPrototype, TO_STRING_TAG)) {
        createNonEnumerableProperty(AsyncIteratorPrototype, TO_STRING_TAG, 'AsyncIterator');
      }

      if (!has(AsyncIteratorPrototype, 'constructor') || AsyncIteratorPrototype.constructor === Object) {
        createNonEnumerableProperty(AsyncIteratorPrototype, 'constructor', AsyncIteratorConstructor);
      }

      $({
        global: true,
        forced: IS_PURE
      }, {
        AsyncIterator: AsyncIteratorConstructor
      });
    }, {
      "../internals/an-instance": 15,
      "../internals/async-iterator-prototype": 36,
      "../internals/create-non-enumerable-property": 54,
      "../internals/export": 74,
      "../internals/has": 89,
      "../internals/is-pure": 105,
      "../internals/well-known-symbol": 197
    }],
    428: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var anObject = require('../internals/an-object');

      var toPositiveInteger = require('../internals/to-positive-integer');

      var createAsyncIteratorProxy = require('../internals/async-iterator-create-proxy');

      var AsyncIteratorProxy = createAsyncIteratorProxy(function (arg, Promise) {
        var state = this;
        return new Promise(function (resolve, reject) {
          var loop = function loop() {
            try {
              Promise.resolve(anObject(state.next.call(state.iterator, state.remaining ? undefined : arg))).then(function (step) {
                try {
                  if (anObject(step).done) {
                    state.done = true;
                    resolve({
                      done: true,
                      value: undefined
                    });
                  } else if (state.remaining) {
                    state.remaining--;
                    loop();
                  } else resolve({
                    done: false,
                    value: step.value
                  });
                } catch (err) {
                  reject(err);
                }
              }, reject);
            } catch (error) {
              reject(error);
            }
          };

          loop();
        });
      });
      $({
        target: 'AsyncIterator',
        proto: true,
        real: true
      }, {
        drop: function drop(limit) {
          return new AsyncIteratorProxy({
            iterator: anObject(this),
            remaining: toPositiveInteger(limit)
          });
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/async-iterator-create-proxy": 34,
      "../internals/export": 74,
      "../internals/to-positive-integer": 187
    }],
    429: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var $every = require('../internals/async-iterator-iteration').every;

      $({
        target: 'AsyncIterator',
        proto: true,
        real: true
      }, {
        every: function every(fn) {
          return $every(this, fn);
        }
      });
    }, {
      "../internals/async-iterator-iteration": 35,
      "../internals/export": 74
    }],
    430: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var aFunction = require('../internals/a-function');

      var anObject = require('../internals/an-object');

      var createAsyncIteratorProxy = require('../internals/async-iterator-create-proxy');

      var AsyncIteratorProxy = createAsyncIteratorProxy(function (arg, Promise) {
        var state = this;
        var filterer = state.filterer;
        return new Promise(function (resolve, reject) {
          var loop = function loop() {
            try {
              Promise.resolve(anObject(state.next.call(state.iterator, arg))).then(function (step) {
                try {
                  if (anObject(step).done) {
                    state.done = true;
                    resolve({
                      done: true,
                      value: undefined
                    });
                  } else {
                    var value = step.value;
                    Promise.resolve(filterer(value)).then(function (selected) {
                      selected ? resolve({
                        done: false,
                        value: value
                      }) : loop();
                    }, reject);
                  }
                } catch (err) {
                  reject(err);
                }
              }, reject);
            } catch (error) {
              reject(error);
            }
          };

          loop();
        });
      });
      $({
        target: 'AsyncIterator',
        proto: true,
        real: true
      }, {
        filter: function filter(filterer) {
          return new AsyncIteratorProxy({
            iterator: anObject(this),
            filterer: aFunction(filterer)
          });
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/async-iterator-create-proxy": 34,
      "../internals/export": 74
    }],
    431: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var $find = require('../internals/async-iterator-iteration').find;

      $({
        target: 'AsyncIterator',
        proto: true,
        real: true
      }, {
        find: function find(fn) {
          return $find(this, fn);
        }
      });
    }, {
      "../internals/async-iterator-iteration": 35,
      "../internals/export": 74
    }],
    432: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var aFunction = require('../internals/a-function');

      var anObject = require('../internals/an-object');

      var createAsyncIteratorProxy = require('../internals/async-iterator-create-proxy');

      var getAsyncIteratorMethod = require('../internals/get-async-iterator-method');

      var AsyncIteratorProxy = createAsyncIteratorProxy(function (arg, Promise) {
        var state = this;
        var mapper = state.mapper;
        var innerIterator, iteratorMethod;
        return new Promise(function (resolve, reject) {
          var outerLoop = function outerLoop() {
            try {
              Promise.resolve(anObject(state.next.call(state.iterator, arg))).then(function (step) {
                try {
                  if (anObject(step).done) {
                    state.done = true;
                    resolve({
                      done: true,
                      value: undefined
                    });
                  } else {
                    Promise.resolve(mapper(step.value)).then(function (mapped) {
                      try {
                        iteratorMethod = getAsyncIteratorMethod(mapped);

                        if (iteratorMethod !== undefined) {
                          state.innerIterator = innerIterator = anObject(iteratorMethod.call(mapped));
                          state.innerNext = aFunction(innerIterator.next);
                          return innerLoop();
                        }

                        reject(TypeError('.flatMap callback should return an iterable object'));
                      } catch (error2) {
                        reject(error2);
                      }
                    }, reject);
                  }
                } catch (error1) {
                  reject(error1);
                }
              }, reject);
            } catch (error) {
              reject(error);
            }
          };

          var innerLoop = function innerLoop() {
            if (innerIterator = state.innerIterator) {
              try {
                Promise.resolve(anObject(state.innerNext.call(innerIterator))).then(function (result) {
                  try {
                    if (anObject(result).done) {
                      state.innerIterator = state.innerNext = null;
                      outerLoop();
                    } else resolve({
                      done: false,
                      value: result.value
                    });
                  } catch (error1) {
                    reject(error1);
                  }
                }, reject);
              } catch (error) {
                reject(error);
              }
            } else outerLoop();
          };

          innerLoop();
        });
      });
      $({
        target: 'AsyncIterator',
        proto: true,
        real: true
      }, {
        flatMap: function flatMap(mapper) {
          return new AsyncIteratorProxy({
            iterator: anObject(this),
            mapper: aFunction(mapper),
            innerIterator: null,
            innerNext: null
          });
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/async-iterator-create-proxy": 34,
      "../internals/export": 74,
      "../internals/get-async-iterator-method": 81
    }],
    433: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var $forEach = require('../internals/async-iterator-iteration').forEach;

      $({
        target: 'AsyncIterator',
        proto: true,
        real: true
      }, {
        forEach: function forEach(fn) {
          return $forEach(this, fn);
        }
      });
    }, {
      "../internals/async-iterator-iteration": 35,
      "../internals/export": 74
    }],
    434: [function (require, module, exports) {
      // https://github.com/tc39/proposal-iterator-helpers
      var $ = require('../internals/export');

      var path = require('../internals/path');

      var aFunction = require('../internals/a-function');

      var anObject = require('../internals/an-object');

      var toObject = require('../internals/to-object');

      var createAsyncIteratorProxy = require('../internals/async-iterator-create-proxy');

      var getAsyncIteratorMethod = require('../internals/get-async-iterator-method');

      var AsyncIterator = path.AsyncIterator;
      var AsyncIteratorProxy = createAsyncIteratorProxy(function (arg) {
        return anObject(this.next.call(this.iterator, arg));
      }, true);
      $({
        target: 'AsyncIterator',
        stat: true
      }, {
        from: function from(O) {
          var object = toObject(O);
          var usingIterator = getAsyncIteratorMethod(object);
          var iterator;

          if (usingIterator != null) {
            iterator = aFunction(usingIterator).call(object);
            if (iterator instanceof AsyncIterator) return iterator;
          } else {
            iterator = object;
          }

          return new AsyncIteratorProxy({
            iterator: iterator
          });
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/async-iterator-create-proxy": 34,
      "../internals/export": 74,
      "../internals/get-async-iterator-method": 81,
      "../internals/path": 148,
      "../internals/to-object": 185
    }],
    435: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var aFunction = require('../internals/a-function');

      var anObject = require('../internals/an-object');

      var createAsyncIteratorProxy = require('../internals/async-iterator-create-proxy');

      var AsyncIteratorProxy = createAsyncIteratorProxy(function (arg, Promise) {
        var state = this;
        var mapper = state.mapper;
        return Promise.resolve(anObject(state.next.call(state.iterator, arg))).then(function (step) {
          if (anObject(step).done) {
            state.done = true;
            return {
              done: true,
              value: undefined
            };
          }

          return Promise.resolve(mapper(step.value)).then(function (value) {
            return {
              done: false,
              value: value
            };
          });
        });
      });
      $({
        target: 'AsyncIterator',
        proto: true,
        real: true
      }, {
        map: function map(mapper) {
          return new AsyncIteratorProxy({
            iterator: anObject(this),
            mapper: aFunction(mapper)
          });
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/async-iterator-create-proxy": 34,
      "../internals/export": 74
    }],
    436: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var aFunction = require('../internals/a-function');

      var anObject = require('../internals/an-object');

      var getBuiltIn = require('../internals/get-built-in');

      var Promise = getBuiltIn('Promise');
      $({
        target: 'AsyncIterator',
        proto: true,
        real: true
      }, {
        reduce: function reduce(reducer
        /* , initialValue */
        ) {
          var iterator = anObject(this);
          var next = aFunction(iterator.next);
          var noInitial = arguments.length < 2;
          var accumulator = noInitial ? undefined : arguments[1];
          aFunction(reducer);
          return new Promise(function (resolve, reject) {
            var loop = function loop() {
              try {
                Promise.resolve(anObject(next.call(iterator))).then(function (step) {
                  try {
                    if (anObject(step).done) {
                      noInitial ? reject(TypeError('Reduce of empty iterator with no initial value')) : resolve(accumulator);
                    } else {
                      var value = step.value;

                      if (noInitial) {
                        noInitial = false;
                        accumulator = value;
                        loop();
                      } else {
                        Promise.resolve(reducer(accumulator, value)).then(function (result) {
                          accumulator = result;
                          loop();
                        }, reject);
                      }
                    }
                  } catch (err) {
                    reject(err);
                  }
                }, reject);
              } catch (error) {
                reject(error);
              }
            };

            loop();
          });
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/get-built-in": 82
    }],
    437: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var $some = require('../internals/async-iterator-iteration').some;

      $({
        target: 'AsyncIterator',
        proto: true,
        real: true
      }, {
        some: function some(fn) {
          return $some(this, fn);
        }
      });
    }, {
      "../internals/async-iterator-iteration": 35,
      "../internals/export": 74
    }],
    438: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var anObject = require('../internals/an-object');

      var toPositiveInteger = require('../internals/to-positive-integer');

      var createAsyncIteratorProxy = require('../internals/async-iterator-create-proxy');

      var AsyncIteratorProxy = createAsyncIteratorProxy(function (arg, Promise) {
        var iterator = this.iterator;
        var returnMethod, result;

        if (!this.remaining--) {
          result = {
            done: true,
            value: undefined
          };
          this.done = true;
          returnMethod = iterator['return'];

          if (returnMethod !== undefined) {
            return Promise.resolve(returnMethod.call(iterator)).then(function () {
              return result;
            });
          }

          return result;
        }

        return this.next.call(iterator, arg);
      });
      $({
        target: 'AsyncIterator',
        proto: true,
        real: true
      }, {
        take: function take(limit) {
          return new AsyncIteratorProxy({
            iterator: anObject(this),
            remaining: toPositiveInteger(limit)
          });
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/async-iterator-create-proxy": 34,
      "../internals/export": 74,
      "../internals/to-positive-integer": 187
    }],
    439: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var $toArray = require('../internals/async-iterator-iteration').toArray;

      $({
        target: 'AsyncIterator',
        proto: true,
        real: true
      }, {
        toArray: function toArray() {
          return $toArray(this);
        }
      });
    }, {
      "../internals/async-iterator-iteration": 35,
      "../internals/export": 74
    }],
    440: [function (require, module, exports) {
      'use strict';
      /* eslint-disable es/no-bigint -- safe */

      var $ = require('../internals/export');

      var NumericRangeIterator = require('../internals/numeric-range-iterator'); // `BigInt.range` method
      // https://github.com/tc39/proposal-Number.range


      if (typeof BigInt == 'function') {
        $({
          target: 'BigInt',
          stat: true
        }, {
          range: function range(start, end, option) {
            return new NumericRangeIterator(start, end, option, 'bigint', BigInt(0), BigInt(1));
          }
        });
      }
    }, {
      "../internals/export": 74,
      "../internals/numeric-range-iterator": 129
    }],
    441: [function (require, module, exports) {
      var $ = require('../internals/export');

      var getCompositeKeyNode = require('../internals/composite-key');

      var getBuiltIn = require('../internals/get-built-in');

      var create = require('../internals/object-create');

      var initializer = function initializer() {
        var freeze = getBuiltIn('Object', 'freeze');
        return freeze ? freeze(create(null)) : create(null);
      }; // https://github.com/tc39/proposal-richer-keys/tree/master/compositeKey


      $({
        global: true
      }, {
        compositeKey: function compositeKey() {
          return getCompositeKeyNode.apply(Object, arguments).get('object', initializer);
        }
      });
    }, {
      "../internals/composite-key": 48,
      "../internals/export": 74,
      "../internals/get-built-in": 82,
      "../internals/object-create": 131
    }],
    442: [function (require, module, exports) {
      var $ = require('../internals/export');

      var getCompositeKeyNode = require('../internals/composite-key');

      var getBuiltIn = require('../internals/get-built-in'); // https://github.com/tc39/proposal-richer-keys/tree/master/compositeKey


      $({
        global: true
      }, {
        compositeSymbol: function compositeSymbol() {
          if (arguments.length === 1 && typeof arguments[0] === 'string') return getBuiltIn('Symbol')['for'](arguments[0]);
          return getCompositeKeyNode.apply(null, arguments).get('symbol', getBuiltIn('Symbol'));
        }
      });
    }, {
      "../internals/composite-key": 48,
      "../internals/export": 74,
      "../internals/get-built-in": 82
    }],
    443: [function (require, module, exports) {
      // TODO: Remove from `core-js@4`
      require('./es.global-this');
    }, {
      "./es.global-this": 245
    }],
    444: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var anObject = require('../internals/an-object');

      var createIteratorProxy = require('../internals/iterator-create-proxy');

      var IteratorProxy = createIteratorProxy(function (arg) {
        var result = anObject(this.next.call(this.iterator, arg));
        var done = this.done = !!result.done;
        if (!done) return [this.index++, result.value];
      });
      $({
        target: 'Iterator',
        proto: true,
        real: true
      }, {
        asIndexedPairs: function asIndexedPairs() {
          return new IteratorProxy({
            iterator: anObject(this),
            index: 0
          });
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/iterator-create-proxy": 109
    }],
    445: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var global = require('../internals/global');

      var anInstance = require('../internals/an-instance');

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var fails = require('../internals/fails');

      var has = require('../internals/has');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;

      var IS_PURE = require('../internals/is-pure');

      var ITERATOR = wellKnownSymbol('iterator');
      var TO_STRING_TAG = wellKnownSymbol('toStringTag');
      var NativeIterator = global.Iterator; // FF56- have non-standard global helper `Iterator`

      var FORCED = IS_PURE || typeof NativeIterator != 'function' || NativeIterator.prototype !== IteratorPrototype // FF44- non-standard `Iterator` passes previous tests
      || !fails(function () {
        NativeIterator({});
      });

      var IteratorConstructor = function Iterator() {
        anInstance(this, IteratorConstructor);
      };

      if (IS_PURE) {
        IteratorPrototype = {};
        createNonEnumerableProperty(IteratorPrototype, ITERATOR, function () {
          return this;
        });
      }

      if (!has(IteratorPrototype, TO_STRING_TAG)) {
        createNonEnumerableProperty(IteratorPrototype, TO_STRING_TAG, 'Iterator');
      }

      if (FORCED || !has(IteratorPrototype, 'constructor') || IteratorPrototype.constructor === Object) {
        createNonEnumerableProperty(IteratorPrototype, 'constructor', IteratorConstructor);
      }

      IteratorConstructor.prototype = IteratorPrototype;
      $({
        global: true,
        forced: FORCED
      }, {
        Iterator: IteratorConstructor
      });
    }, {
      "../internals/an-instance": 15,
      "../internals/create-non-enumerable-property": 54,
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/global": 88,
      "../internals/has": 89,
      "../internals/is-pure": 105,
      "../internals/iterators-core": 110,
      "../internals/well-known-symbol": 197
    }],
    446: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var anObject = require('../internals/an-object');

      var toPositiveInteger = require('../internals/to-positive-integer');

      var createIteratorProxy = require('../internals/iterator-create-proxy');

      var IteratorProxy = createIteratorProxy(function (arg) {
        var iterator = this.iterator;
        var next = this.next;
        var result, done;

        while (this.remaining) {
          this.remaining--;
          result = anObject(next.call(iterator));
          done = this.done = !!result.done;
          if (done) return;
        }

        result = anObject(next.call(iterator, arg));
        done = this.done = !!result.done;
        if (!done) return result.value;
      });
      $({
        target: 'Iterator',
        proto: true,
        real: true
      }, {
        drop: function drop(limit) {
          return new IteratorProxy({
            iterator: anObject(this),
            remaining: toPositiveInteger(limit)
          });
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/iterator-create-proxy": 109,
      "../internals/to-positive-integer": 187
    }],
    447: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var iterate = require('../internals/iterate');

      var aFunction = require('../internals/a-function');

      var anObject = require('../internals/an-object');

      $({
        target: 'Iterator',
        proto: true,
        real: true
      }, {
        every: function every(fn) {
          anObject(this);
          aFunction(fn);
          return !iterate(this, function (value, stop) {
            if (!fn(value)) return stop();
          }, {
            IS_ITERATOR: true,
            INTERRUPTED: true
          }).stopped;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/iterate": 107
    }],
    448: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var aFunction = require('../internals/a-function');

      var anObject = require('../internals/an-object');

      var createIteratorProxy = require('../internals/iterator-create-proxy');

      var callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');

      var IteratorProxy = createIteratorProxy(function (arg) {
        var iterator = this.iterator;
        var filterer = this.filterer;
        var next = this.next;
        var result, done, value;

        while (true) {
          result = anObject(next.call(iterator, arg));
          done = this.done = !!result.done;
          if (done) return;
          value = result.value;
          if (callWithSafeIterationClosing(iterator, filterer, value)) return value;
        }
      });
      $({
        target: 'Iterator',
        proto: true,
        real: true
      }, {
        filter: function filter(filterer) {
          return new IteratorProxy({
            iterator: anObject(this),
            filterer: aFunction(filterer)
          });
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/call-with-safe-iteration-closing": 37,
      "../internals/export": 74,
      "../internals/iterator-create-proxy": 109
    }],
    449: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var iterate = require('../internals/iterate');

      var aFunction = require('../internals/a-function');

      var anObject = require('../internals/an-object');

      $({
        target: 'Iterator',
        proto: true,
        real: true
      }, {
        find: function find(fn) {
          anObject(this);
          aFunction(fn);
          return iterate(this, function (value, stop) {
            if (fn(value)) return stop(value);
          }, {
            IS_ITERATOR: true,
            INTERRUPTED: true
          }).result;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/iterate": 107
    }],
    450: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var aFunction = require('../internals/a-function');

      var anObject = require('../internals/an-object');

      var getIteratorMethod = require('../internals/get-iterator-method');

      var createIteratorProxy = require('../internals/iterator-create-proxy');

      var iteratorClose = require('../internals/iterator-close');

      var IteratorProxy = createIteratorProxy(function (arg) {
        var iterator = this.iterator;
        var mapper = this.mapper;
        var result, mapped, iteratorMethod, innerIterator;

        while (true) {
          try {
            if (innerIterator = this.innerIterator) {
              result = anObject(this.innerNext.call(innerIterator));
              if (!result.done) return result.value;
              this.innerIterator = this.innerNext = null;
            }

            result = anObject(this.next.call(iterator, arg));
            if (this.done = !!result.done) return;
            mapped = mapper(result.value);
            iteratorMethod = getIteratorMethod(mapped);

            if (iteratorMethod === undefined) {
              throw TypeError('.flatMap callback should return an iterable object');
            }

            this.innerIterator = innerIterator = anObject(iteratorMethod.call(mapped));
            this.innerNext = aFunction(innerIterator.next);
          } catch (error) {
            iteratorClose(iterator);
            throw error;
          }
        }
      });
      $({
        target: 'Iterator',
        proto: true,
        real: true
      }, {
        flatMap: function flatMap(mapper) {
          return new IteratorProxy({
            iterator: anObject(this),
            mapper: aFunction(mapper),
            innerIterator: null,
            innerNext: null
          });
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/get-iterator-method": 83,
      "../internals/iterator-close": 108,
      "../internals/iterator-create-proxy": 109
    }],
    451: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var iterate = require('../internals/iterate');

      var anObject = require('../internals/an-object');

      $({
        target: 'Iterator',
        proto: true,
        real: true
      }, {
        forEach: function forEach(fn) {
          iterate(anObject(this), fn, {
            IS_ITERATOR: true
          });
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/iterate": 107
    }],
    452: [function (require, module, exports) {
      // https://github.com/tc39/proposal-iterator-helpers
      var $ = require('../internals/export');

      var path = require('../internals/path');

      var aFunction = require('../internals/a-function');

      var anObject = require('../internals/an-object');

      var toObject = require('../internals/to-object');

      var createIteratorProxy = require('../internals/iterator-create-proxy');

      var getIteratorMethod = require('../internals/get-iterator-method');

      var Iterator = path.Iterator;
      var IteratorProxy = createIteratorProxy(function (arg) {
        var result = anObject(this.next.call(this.iterator, arg));
        var done = this.done = !!result.done;
        if (!done) return result.value;
      }, true);
      $({
        target: 'Iterator',
        stat: true
      }, {
        from: function from(O) {
          var object = toObject(O);
          var usingIterator = getIteratorMethod(object);
          var iterator;

          if (usingIterator != null) {
            iterator = aFunction(usingIterator).call(object);
            if (iterator instanceof Iterator) return iterator;
          } else {
            iterator = object;
          }

          return new IteratorProxy({
            iterator: iterator
          });
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/get-iterator-method": 83,
      "../internals/iterator-create-proxy": 109,
      "../internals/path": 148,
      "../internals/to-object": 185
    }],
    453: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var aFunction = require('../internals/a-function');

      var anObject = require('../internals/an-object');

      var createIteratorProxy = require('../internals/iterator-create-proxy');

      var callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');

      var IteratorProxy = createIteratorProxy(function (arg) {
        var iterator = this.iterator;
        var result = anObject(this.next.call(iterator, arg));
        var done = this.done = !!result.done;
        if (!done) return callWithSafeIterationClosing(iterator, this.mapper, result.value);
      });
      $({
        target: 'Iterator',
        proto: true,
        real: true
      }, {
        map: function map(mapper) {
          return new IteratorProxy({
            iterator: anObject(this),
            mapper: aFunction(mapper)
          });
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/call-with-safe-iteration-closing": 37,
      "../internals/export": 74,
      "../internals/iterator-create-proxy": 109
    }],
    454: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var iterate = require('../internals/iterate');

      var aFunction = require('../internals/a-function');

      var anObject = require('../internals/an-object');

      $({
        target: 'Iterator',
        proto: true,
        real: true
      }, {
        reduce: function reduce(reducer
        /* , initialValue */
        ) {
          anObject(this);
          aFunction(reducer);
          var noInitial = arguments.length < 2;
          var accumulator = noInitial ? undefined : arguments[1];
          iterate(this, function (value) {
            if (noInitial) {
              noInitial = false;
              accumulator = value;
            } else {
              accumulator = reducer(accumulator, value);
            }
          }, {
            IS_ITERATOR: true
          });
          if (noInitial) throw TypeError('Reduce of empty iterator with no initial value');
          return accumulator;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/iterate": 107
    }],
    455: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var iterate = require('../internals/iterate');

      var aFunction = require('../internals/a-function');

      var anObject = require('../internals/an-object');

      $({
        target: 'Iterator',
        proto: true,
        real: true
      }, {
        some: function some(fn) {
          anObject(this);
          aFunction(fn);
          return iterate(this, function (value, stop) {
            if (fn(value)) return stop();
          }, {
            IS_ITERATOR: true,
            INTERRUPTED: true
          }).stopped;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/iterate": 107
    }],
    456: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var anObject = require('../internals/an-object');

      var toPositiveInteger = require('../internals/to-positive-integer');

      var createIteratorProxy = require('../internals/iterator-create-proxy');

      var iteratorClose = require('../internals/iterator-close');

      var IteratorProxy = createIteratorProxy(function (arg) {
        var iterator = this.iterator;

        if (!this.remaining--) {
          this.done = true;
          return iteratorClose(iterator);
        }

        var result = anObject(this.next.call(iterator, arg));
        var done = this.done = !!result.done;
        if (!done) return result.value;
      });
      $({
        target: 'Iterator',
        proto: true,
        real: true
      }, {
        take: function take(limit) {
          return new IteratorProxy({
            iterator: anObject(this),
            remaining: toPositiveInteger(limit)
          });
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/iterator-close": 108,
      "../internals/iterator-create-proxy": 109,
      "../internals/to-positive-integer": 187
    }],
    457: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-iterator-helpers

      var $ = require('../internals/export');

      var iterate = require('../internals/iterate');

      var anObject = require('../internals/an-object');

      var push = [].push;
      $({
        target: 'Iterator',
        proto: true,
        real: true
      }, {
        toArray: function toArray() {
          var result = [];
          iterate(anObject(this), push, {
            that: result,
            IS_ITERATOR: true
          });
          return result;
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/iterate": 107
    }],
    458: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var collectionDeleteAll = require('../internals/collection-delete-all'); // `Map.prototype.deleteAll` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Map',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        deleteAll: function deleteAll()
        /* ...elements */
        {
          return collectionDeleteAll.apply(this, arguments);
        }
      });
    }, {
      "../internals/collection-delete-all": 42,
      "../internals/export": 74,
      "../internals/is-pure": 105
    }],
    459: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var $emplace = require('../internals/map-emplace'); // `Map.prototype.emplace` method
      // https://github.com/thumbsupep/proposal-upsert


      $({
        target: 'Map',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        emplace: $emplace
      });
    }, {
      "../internals/export": 74,
      "../internals/is-pure": 105,
      "../internals/map-emplace": 112
    }],
    460: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var anObject = require('../internals/an-object');

      var bind = require('../internals/function-bind-context');

      var getMapIterator = require('../internals/get-map-iterator');

      var iterate = require('../internals/iterate'); // `Map.prototype.every` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Map',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        every: function every(callbackfn
        /* , thisArg */
        ) {
          var map = anObject(this);
          var iterator = getMapIterator(map);
          var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
          return !iterate(iterator, function (key, value, stop) {
            if (!boundFunction(value, key, map)) return stop();
          }, {
            AS_ENTRIES: true,
            IS_ITERATOR: true,
            INTERRUPTED: true
          }).stopped;
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/function-bind-context": 79,
      "../internals/get-map-iterator": 85,
      "../internals/is-pure": 105,
      "../internals/iterate": 107
    }],
    461: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var getBuiltIn = require('../internals/get-built-in');

      var anObject = require('../internals/an-object');

      var aFunction = require('../internals/a-function');

      var bind = require('../internals/function-bind-context');

      var speciesConstructor = require('../internals/species-constructor');

      var getMapIterator = require('../internals/get-map-iterator');

      var iterate = require('../internals/iterate'); // `Map.prototype.filter` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Map',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        filter: function filter(callbackfn
        /* , thisArg */
        ) {
          var map = anObject(this);
          var iterator = getMapIterator(map);
          var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
          var newMap = new (speciesConstructor(map, getBuiltIn('Map')))();
          var setter = aFunction(newMap.set);
          iterate(iterator, function (key, value) {
            if (boundFunction(value, key, map)) setter.call(newMap, key, value);
          }, {
            AS_ENTRIES: true,
            IS_ITERATOR: true
          });
          return newMap;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/function-bind-context": 79,
      "../internals/get-built-in": 82,
      "../internals/get-map-iterator": 85,
      "../internals/is-pure": 105,
      "../internals/iterate": 107,
      "../internals/species-constructor": 169
    }],
    462: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var anObject = require('../internals/an-object');

      var bind = require('../internals/function-bind-context');

      var getMapIterator = require('../internals/get-map-iterator');

      var iterate = require('../internals/iterate'); // `Map.prototype.findKey` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Map',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        findKey: function findKey(callbackfn
        /* , thisArg */
        ) {
          var map = anObject(this);
          var iterator = getMapIterator(map);
          var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
          return iterate(iterator, function (key, value, stop) {
            if (boundFunction(value, key, map)) return stop(key);
          }, {
            AS_ENTRIES: true,
            IS_ITERATOR: true,
            INTERRUPTED: true
          }).result;
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/function-bind-context": 79,
      "../internals/get-map-iterator": 85,
      "../internals/is-pure": 105,
      "../internals/iterate": 107
    }],
    463: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var anObject = require('../internals/an-object');

      var bind = require('../internals/function-bind-context');

      var getMapIterator = require('../internals/get-map-iterator');

      var iterate = require('../internals/iterate'); // `Map.prototype.find` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Map',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        find: function find(callbackfn
        /* , thisArg */
        ) {
          var map = anObject(this);
          var iterator = getMapIterator(map);
          var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
          return iterate(iterator, function (key, value, stop) {
            if (boundFunction(value, key, map)) return stop(value);
          }, {
            AS_ENTRIES: true,
            IS_ITERATOR: true,
            INTERRUPTED: true
          }).result;
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/function-bind-context": 79,
      "../internals/get-map-iterator": 85,
      "../internals/is-pure": 105,
      "../internals/iterate": 107
    }],
    464: [function (require, module, exports) {
      var $ = require('../internals/export');

      var from = require('../internals/collection-from'); // `Map.from` method
      // https://tc39.github.io/proposal-setmap-offrom/#sec-map.from


      $({
        target: 'Map',
        stat: true
      }, {
        from: from
      });
    }, {
      "../internals/collection-from": 43,
      "../internals/export": 74
    }],
    465: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var iterate = require('../internals/iterate');

      var aFunction = require('../internals/a-function'); // `Map.groupBy` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Map',
        stat: true
      }, {
        groupBy: function groupBy(iterable, keyDerivative) {
          var newMap = new this();
          aFunction(keyDerivative);
          var has = aFunction(newMap.has);
          var get = aFunction(newMap.get);
          var set = aFunction(newMap.set);
          iterate(iterable, function (element) {
            var derivedKey = keyDerivative(element);
            if (!has.call(newMap, derivedKey)) set.call(newMap, derivedKey, [element]);else get.call(newMap, derivedKey).push(element);
          });
          return newMap;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/export": 74,
      "../internals/iterate": 107
    }],
    466: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var anObject = require('../internals/an-object');

      var getMapIterator = require('../internals/get-map-iterator');

      var sameValueZero = require('../internals/same-value-zero');

      var iterate = require('../internals/iterate'); // `Map.prototype.includes` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Map',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        includes: function includes(searchElement) {
          return iterate(getMapIterator(anObject(this)), function (key, value, stop) {
            if (sameValueZero(value, searchElement)) return stop();
          }, {
            AS_ENTRIES: true,
            IS_ITERATOR: true,
            INTERRUPTED: true
          }).stopped;
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/get-map-iterator": 85,
      "../internals/is-pure": 105,
      "../internals/iterate": 107,
      "../internals/same-value-zero": 161
    }],
    467: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var iterate = require('../internals/iterate');

      var aFunction = require('../internals/a-function'); // `Map.keyBy` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Map',
        stat: true
      }, {
        keyBy: function keyBy(iterable, keyDerivative) {
          var newMap = new this();
          aFunction(keyDerivative);
          var setter = aFunction(newMap.set);
          iterate(iterable, function (element) {
            setter.call(newMap, keyDerivative(element), element);
          });
          return newMap;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/export": 74,
      "../internals/iterate": 107
    }],
    468: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var anObject = require('../internals/an-object');

      var getMapIterator = require('../internals/get-map-iterator');

      var iterate = require('../internals/iterate'); // `Map.prototype.includes` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Map',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        keyOf: function keyOf(searchElement) {
          return iterate(getMapIterator(anObject(this)), function (key, value, stop) {
            if (value === searchElement) return stop(key);
          }, {
            AS_ENTRIES: true,
            IS_ITERATOR: true,
            INTERRUPTED: true
          }).result;
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/get-map-iterator": 85,
      "../internals/is-pure": 105,
      "../internals/iterate": 107
    }],
    469: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var getBuiltIn = require('../internals/get-built-in');

      var anObject = require('../internals/an-object');

      var aFunction = require('../internals/a-function');

      var bind = require('../internals/function-bind-context');

      var speciesConstructor = require('../internals/species-constructor');

      var getMapIterator = require('../internals/get-map-iterator');

      var iterate = require('../internals/iterate'); // `Map.prototype.mapKeys` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Map',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        mapKeys: function mapKeys(callbackfn
        /* , thisArg */
        ) {
          var map = anObject(this);
          var iterator = getMapIterator(map);
          var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
          var newMap = new (speciesConstructor(map, getBuiltIn('Map')))();
          var setter = aFunction(newMap.set);
          iterate(iterator, function (key, value) {
            setter.call(newMap, boundFunction(value, key, map), value);
          }, {
            AS_ENTRIES: true,
            IS_ITERATOR: true
          });
          return newMap;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/function-bind-context": 79,
      "../internals/get-built-in": 82,
      "../internals/get-map-iterator": 85,
      "../internals/is-pure": 105,
      "../internals/iterate": 107,
      "../internals/species-constructor": 169
    }],
    470: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var getBuiltIn = require('../internals/get-built-in');

      var anObject = require('../internals/an-object');

      var aFunction = require('../internals/a-function');

      var bind = require('../internals/function-bind-context');

      var speciesConstructor = require('../internals/species-constructor');

      var getMapIterator = require('../internals/get-map-iterator');

      var iterate = require('../internals/iterate'); // `Map.prototype.mapValues` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Map',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        mapValues: function mapValues(callbackfn
        /* , thisArg */
        ) {
          var map = anObject(this);
          var iterator = getMapIterator(map);
          var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
          var newMap = new (speciesConstructor(map, getBuiltIn('Map')))();
          var setter = aFunction(newMap.set);
          iterate(iterator, function (key, value) {
            setter.call(newMap, key, boundFunction(value, key, map));
          }, {
            AS_ENTRIES: true,
            IS_ITERATOR: true
          });
          return newMap;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/function-bind-context": 79,
      "../internals/get-built-in": 82,
      "../internals/get-map-iterator": 85,
      "../internals/is-pure": 105,
      "../internals/iterate": 107,
      "../internals/species-constructor": 169
    }],
    471: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var anObject = require('../internals/an-object');

      var aFunction = require('../internals/a-function');

      var iterate = require('../internals/iterate'); // `Map.prototype.merge` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Map',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        // eslint-disable-next-line no-unused-vars -- required for `.length`
        merge: function merge(iterable
        /* ...iterbles */
        ) {
          var map = anObject(this);
          var setter = aFunction(map.set);
          var i = 0;

          while (i < arguments.length) {
            iterate(arguments[i++], setter, {
              that: map,
              AS_ENTRIES: true
            });
          }

          return map;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/is-pure": 105,
      "../internals/iterate": 107
    }],
    472: [function (require, module, exports) {
      var $ = require('../internals/export');

      var of = require('../internals/collection-of'); // `Map.of` method
      // https://tc39.github.io/proposal-setmap-offrom/#sec-map.of


      $({
        target: 'Map',
        stat: true
      }, {
        of: of
      });
    }, {
      "../internals/collection-of": 44,
      "../internals/export": 74
    }],
    473: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var anObject = require('../internals/an-object');

      var aFunction = require('../internals/a-function');

      var getMapIterator = require('../internals/get-map-iterator');

      var iterate = require('../internals/iterate'); // `Map.prototype.reduce` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Map',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        reduce: function reduce(callbackfn
        /* , initialValue */
        ) {
          var map = anObject(this);
          var iterator = getMapIterator(map);
          var noInitial = arguments.length < 2;
          var accumulator = noInitial ? undefined : arguments[1];
          aFunction(callbackfn);
          iterate(iterator, function (key, value) {
            if (noInitial) {
              noInitial = false;
              accumulator = value;
            } else {
              accumulator = callbackfn(accumulator, value, key, map);
            }
          }, {
            AS_ENTRIES: true,
            IS_ITERATOR: true
          });
          if (noInitial) throw TypeError('Reduce of empty map with no initial value');
          return accumulator;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/get-map-iterator": 85,
      "../internals/is-pure": 105,
      "../internals/iterate": 107
    }],
    474: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var anObject = require('../internals/an-object');

      var bind = require('../internals/function-bind-context');

      var getMapIterator = require('../internals/get-map-iterator');

      var iterate = require('../internals/iterate'); // `Set.prototype.some` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Map',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        some: function some(callbackfn
        /* , thisArg */
        ) {
          var map = anObject(this);
          var iterator = getMapIterator(map);
          var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
          return iterate(iterator, function (key, value, stop) {
            if (boundFunction(value, key, map)) return stop();
          }, {
            AS_ENTRIES: true,
            IS_ITERATOR: true,
            INTERRUPTED: true
          }).stopped;
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/function-bind-context": 79,
      "../internals/get-map-iterator": 85,
      "../internals/is-pure": 105,
      "../internals/iterate": 107
    }],
    475: [function (require, module, exports) {
      'use strict'; // TODO: remove from `core-js@4`

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var $upsert = require('../internals/map-upsert'); // `Map.prototype.updateOrInsert` method (replaced by `Map.prototype.emplace`)
      // https://github.com/thumbsupep/proposal-upsert


      $({
        target: 'Map',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        updateOrInsert: $upsert
      });
    }, {
      "../internals/export": 74,
      "../internals/is-pure": 105,
      "../internals/map-upsert": 113
    }],
    476: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var anObject = require('../internals/an-object');

      var aFunction = require('../internals/a-function'); // `Set.prototype.update` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Map',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        update: function update(key, callback
        /* , thunk */
        ) {
          var map = anObject(this);
          var length = arguments.length;
          aFunction(callback);
          var isPresentInMap = map.has(key);

          if (!isPresentInMap && length < 3) {
            throw TypeError('Updating absent value');
          }

          var value = isPresentInMap ? map.get(key) : aFunction(length > 2 ? arguments[2] : undefined)(key, map);
          map.set(key, callback(value, key, map));
          return map;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/is-pure": 105
    }],
    477: [function (require, module, exports) {
      'use strict'; // TODO: remove from `core-js@4`

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var $upsert = require('../internals/map-upsert'); // `Map.prototype.upsert` method (replaced by `Map.prototype.emplace`)
      // https://github.com/thumbsupep/proposal-upsert


      $({
        target: 'Map',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        upsert: $upsert
      });
    }, {
      "../internals/export": 74,
      "../internals/is-pure": 105,
      "../internals/map-upsert": 113
    }],
    478: [function (require, module, exports) {
      var $ = require('../internals/export');

      var min = Math.min;
      var max = Math.max; // `Math.clamp` method
      // https://rwaldron.github.io/proposal-math-extensions/

      $({
        target: 'Math',
        stat: true
      }, {
        clamp: function clamp(x, lower, upper) {
          return min(upper, max(lower, x));
        }
      });
    }, {
      "../internals/export": 74
    }],
    479: [function (require, module, exports) {
      var $ = require('../internals/export'); // `Math.DEG_PER_RAD` constant
      // https://rwaldron.github.io/proposal-math-extensions/


      $({
        target: 'Math',
        stat: true
      }, {
        DEG_PER_RAD: Math.PI / 180
      });
    }, {
      "../internals/export": 74
    }],
    480: [function (require, module, exports) {
      var $ = require('../internals/export');

      var RAD_PER_DEG = 180 / Math.PI; // `Math.degrees` method
      // https://rwaldron.github.io/proposal-math-extensions/

      $({
        target: 'Math',
        stat: true
      }, {
        degrees: function degrees(radians) {
          return radians * RAD_PER_DEG;
        }
      });
    }, {
      "../internals/export": 74
    }],
    481: [function (require, module, exports) {
      var $ = require('../internals/export');

      var scale = require('../internals/math-scale');

      var fround = require('../internals/math-fround'); // `Math.fscale` method
      // https://rwaldron.github.io/proposal-math-extensions/


      $({
        target: 'Math',
        stat: true
      }, {
        fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {
          return fround(scale(x, inLow, inHigh, outLow, outHigh));
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/math-fround": 115,
      "../internals/math-scale": 117
    }],
    482: [function (require, module, exports) {
      var $ = require('../internals/export'); // `Math.iaddh` method
      // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
      // TODO: Remove from `core-js@4`


      $({
        target: 'Math',
        stat: true
      }, {
        iaddh: function iaddh(x0, x1, y0, y1) {
          var $x0 = x0 >>> 0;
          var $x1 = x1 >>> 0;
          var $y0 = y0 >>> 0;
          return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
        }
      });
    }, {
      "../internals/export": 74
    }],
    483: [function (require, module, exports) {
      var $ = require('../internals/export'); // `Math.imulh` method
      // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
      // TODO: Remove from `core-js@4`


      $({
        target: 'Math',
        stat: true
      }, {
        imulh: function imulh(u, v) {
          var UINT16 = 0xFFFF;
          var $u = +u;
          var $v = +v;
          var u0 = $u & UINT16;
          var v0 = $v & UINT16;
          var u1 = $u >> 16;
          var v1 = $v >> 16;
          var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
          return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
        }
      });
    }, {
      "../internals/export": 74
    }],
    484: [function (require, module, exports) {
      var $ = require('../internals/export'); // `Math.isubh` method
      // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
      // TODO: Remove from `core-js@4`


      $({
        target: 'Math',
        stat: true
      }, {
        isubh: function isubh(x0, x1, y0, y1) {
          var $x0 = x0 >>> 0;
          var $x1 = x1 >>> 0;
          var $y0 = y0 >>> 0;
          return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
        }
      });
    }, {
      "../internals/export": 74
    }],
    485: [function (require, module, exports) {
      var $ = require('../internals/export'); // `Math.RAD_PER_DEG` constant
      // https://rwaldron.github.io/proposal-math-extensions/


      $({
        target: 'Math',
        stat: true
      }, {
        RAD_PER_DEG: 180 / Math.PI
      });
    }, {
      "../internals/export": 74
    }],
    486: [function (require, module, exports) {
      var $ = require('../internals/export');

      var DEG_PER_RAD = Math.PI / 180; // `Math.radians` method
      // https://rwaldron.github.io/proposal-math-extensions/

      $({
        target: 'Math',
        stat: true
      }, {
        radians: function radians(degrees) {
          return degrees * DEG_PER_RAD;
        }
      });
    }, {
      "../internals/export": 74
    }],
    487: [function (require, module, exports) {
      var $ = require('../internals/export');

      var scale = require('../internals/math-scale'); // `Math.scale` method
      // https://rwaldron.github.io/proposal-math-extensions/


      $({
        target: 'Math',
        stat: true
      }, {
        scale: scale
      });
    }, {
      "../internals/export": 74,
      "../internals/math-scale": 117
    }],
    488: [function (require, module, exports) {
      var $ = require('../internals/export');

      var anObject = require('../internals/an-object');

      var numberIsFinite = require('../internals/number-is-finite');

      var createIteratorConstructor = require('../internals/create-iterator-constructor');

      var InternalStateModule = require('../internals/internal-state');

      var SEEDED_RANDOM = 'Seeded Random';
      var SEEDED_RANDOM_GENERATOR = SEEDED_RANDOM + ' Generator';
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(SEEDED_RANDOM_GENERATOR);
      var SEED_TYPE_ERROR = 'Math.seededPRNG() argument should have a "seed" field with a finite value.';
      var $SeededRandomGenerator = createIteratorConstructor(function SeededRandomGenerator(seed) {
        setInternalState(this, {
          type: SEEDED_RANDOM_GENERATOR,
          seed: seed % 2147483647
        });
      }, SEEDED_RANDOM, function next() {
        var state = getInternalState(this);
        var seed = state.seed = (state.seed * 1103515245 + 12345) % 2147483647;
        return {
          value: (seed & 1073741823) / 1073741823,
          done: false
        };
      }); // `Math.seededPRNG` method
      // https://github.com/tc39/proposal-seeded-random
      // based on https://github.com/tc39/proposal-seeded-random/blob/78b8258835b57fc2100d076151ab506bc3202ae6/demo.html

      $({
        target: 'Math',
        stat: true,
        forced: true
      }, {
        seededPRNG: function seededPRNG(it) {
          var seed = anObject(it).seed;
          if (!numberIsFinite(seed)) throw TypeError(SEED_TYPE_ERROR);
          return new $SeededRandomGenerator(seed);
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/create-iterator-constructor": 53,
      "../internals/export": 74,
      "../internals/internal-state": 99,
      "../internals/number-is-finite": 126
    }],
    489: [function (require, module, exports) {
      var $ = require('../internals/export'); // `Math.signbit` method
      // https://github.com/tc39/proposal-Math.signbit


      $({
        target: 'Math',
        stat: true
      }, {
        signbit: function signbit(x) {
          return (x = +x) == x && x == 0 ? 1 / x == -Infinity : x < 0;
        }
      });
    }, {
      "../internals/export": 74
    }],
    490: [function (require, module, exports) {
      var $ = require('../internals/export'); // `Math.umulh` method
      // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
      // TODO: Remove from `core-js@4`


      $({
        target: 'Math',
        stat: true
      }, {
        umulh: function umulh(u, v) {
          var UINT16 = 0xFFFF;
          var $u = +u;
          var $v = +v;
          var u0 = $u & UINT16;
          var v0 = $v & UINT16;
          var u1 = $u >>> 16;
          var v1 = $v >>> 16;
          var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
          return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
        }
      });
    }, {
      "../internals/export": 74
    }],
    491: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var toInteger = require('../internals/to-integer');

      var parseInt = require('../internals/number-parse-int');

      var INVALID_NUMBER_REPRESENTATION = 'Invalid number representation';
      var INVALID_RADIX = 'Invalid radix';
      var valid = /^[\da-z]+$/; // `Number.fromString` method
      // https://github.com/tc39/proposal-number-fromstring

      $({
        target: 'Number',
        stat: true
      }, {
        fromString: function fromString(string, radix) {
          var sign = 1;
          var R, mathNum;
          if (typeof string != 'string') throw TypeError(INVALID_NUMBER_REPRESENTATION);
          if (!string.length) throw SyntaxError(INVALID_NUMBER_REPRESENTATION);

          if (string.charAt(0) == '-') {
            sign = -1;
            string = string.slice(1);
            if (!string.length) throw SyntaxError(INVALID_NUMBER_REPRESENTATION);
          }

          R = radix === undefined ? 10 : toInteger(radix);
          if (R < 2 || R > 36) throw RangeError(INVALID_RADIX);

          if (!valid.test(string) || (mathNum = parseInt(string, R)).toString(R) !== string) {
            throw SyntaxError(INVALID_NUMBER_REPRESENTATION);
          }

          return sign * mathNum;
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/number-parse-int": 128,
      "../internals/to-integer": 183
    }],
    492: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var NumericRangeIterator = require('../internals/numeric-range-iterator'); // `Number.range` method
      // https://github.com/tc39/proposal-Number.range


      $({
        target: 'Number',
        stat: true
      }, {
        range: function range(start, end, option) {
          return new NumericRangeIterator(start, end, option, 'number', 0, 1);
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/numeric-range-iterator": 129
    }],
    493: [function (require, module, exports) {
      var $ = require('../internals/export');

      var hasOwn = require('../internals/has'); // `Object.hasOwn` method
      // https://github.com/tc39/proposal-accessible-object-hasownproperty


      $({
        target: 'Object',
        stat: true
      }, {
        hasOwn: hasOwn
      });
    }, {
      "../internals/export": 74,
      "../internals/has": 89
    }],
    494: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var ObjectIterator = require('../internals/object-iterator'); // `Object.iterateEntries` method
      // https://github.com/tc39/proposal-object-iteration


      $({
        target: 'Object',
        stat: true
      }, {
        iterateEntries: function iterateEntries(object) {
          return new ObjectIterator(object, 'entries');
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/object-iterator": 139
    }],
    495: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var ObjectIterator = require('../internals/object-iterator'); // `Object.iterateKeys` method
      // https://github.com/tc39/proposal-object-iteration


      $({
        target: 'Object',
        stat: true
      }, {
        iterateKeys: function iterateKeys(object) {
          return new ObjectIterator(object, 'keys');
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/object-iterator": 139
    }],
    496: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var ObjectIterator = require('../internals/object-iterator'); // `Object.iterateValues` method
      // https://github.com/tc39/proposal-object-iteration


      $({
        target: 'Object',
        stat: true
      }, {
        iterateValues: function iterateValues(object) {
          return new ObjectIterator(object, 'values');
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/object-iterator": 139
    }],
    497: [function (require, module, exports) {
      'use strict'; // https://github.com/tc39/proposal-observable

      var $ = require('../internals/export');

      var DESCRIPTORS = require('../internals/descriptors');

      var setSpecies = require('../internals/set-species');

      var aFunction = require('../internals/a-function');

      var anObject = require('../internals/an-object');

      var isObject = require('../internals/is-object');

      var anInstance = require('../internals/an-instance');

      var defineProperty = require('../internals/object-define-property').f;

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var redefineAll = require('../internals/redefine-all');

      var getIterator = require('../internals/get-iterator');

      var iterate = require('../internals/iterate');

      var hostReportErrors = require('../internals/host-report-errors');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var InternalStateModule = require('../internals/internal-state');

      var OBSERVABLE = wellKnownSymbol('observable');
      var getInternalState = InternalStateModule.get;
      var setInternalState = InternalStateModule.set;

      var getMethod = function getMethod(fn) {
        return fn == null ? undefined : aFunction(fn);
      };

      var cleanupSubscription = function cleanupSubscription(subscriptionState) {
        var cleanup = subscriptionState.cleanup;

        if (cleanup) {
          subscriptionState.cleanup = undefined;

          try {
            cleanup();
          } catch (error) {
            hostReportErrors(error);
          }
        }
      };

      var subscriptionClosed = function subscriptionClosed(subscriptionState) {
        return subscriptionState.observer === undefined;
      };

      var close = function close(subscriptionState) {
        var subscription = subscriptionState.facade;

        if (!DESCRIPTORS) {
          subscription.closed = true;
          var subscriptionObserver = subscriptionState.subscriptionObserver;
          if (subscriptionObserver) subscriptionObserver.closed = true;
        }

        subscriptionState.observer = undefined;
      };

      var Subscription = function Subscription(observer, subscriber) {
        var subscriptionState = setInternalState(this, {
          cleanup: undefined,
          observer: anObject(observer),
          subscriptionObserver: undefined
        });
        var start;
        if (!DESCRIPTORS) this.closed = false;

        try {
          if (start = getMethod(observer.start)) start.call(observer, this);
        } catch (error) {
          hostReportErrors(error);
        }

        if (subscriptionClosed(subscriptionState)) return;
        var subscriptionObserver = subscriptionState.subscriptionObserver = new SubscriptionObserver(this);

        try {
          var cleanup = subscriber(subscriptionObserver);
          var subscription = cleanup;
          if (cleanup != null) subscriptionState.cleanup = typeof cleanup.unsubscribe === 'function' ? function () {
            subscription.unsubscribe();
          } : aFunction(cleanup);
        } catch (error) {
          subscriptionObserver.error(error);
          return;
        }

        if (subscriptionClosed(subscriptionState)) cleanupSubscription(subscriptionState);
      };

      Subscription.prototype = redefineAll({}, {
        unsubscribe: function unsubscribe() {
          var subscriptionState = getInternalState(this);

          if (!subscriptionClosed(subscriptionState)) {
            close(subscriptionState);
            cleanupSubscription(subscriptionState);
          }
        }
      });
      if (DESCRIPTORS) defineProperty(Subscription.prototype, 'closed', {
        configurable: true,
        get: function get() {
          return subscriptionClosed(getInternalState(this));
        }
      });

      var SubscriptionObserver = function SubscriptionObserver(subscription) {
        setInternalState(this, {
          subscription: subscription
        });
        if (!DESCRIPTORS) this.closed = false;
      };

      SubscriptionObserver.prototype = redefineAll({}, {
        next: function next(value) {
          var subscriptionState = getInternalState(getInternalState(this).subscription);

          if (!subscriptionClosed(subscriptionState)) {
            var observer = subscriptionState.observer;

            try {
              var nextMethod = getMethod(observer.next);
              if (nextMethod) nextMethod.call(observer, value);
            } catch (error) {
              hostReportErrors(error);
            }
          }
        },
        error: function error(value) {
          var subscriptionState = getInternalState(getInternalState(this).subscription);

          if (!subscriptionClosed(subscriptionState)) {
            var observer = subscriptionState.observer;
            close(subscriptionState);

            try {
              var errorMethod = getMethod(observer.error);
              if (errorMethod) errorMethod.call(observer, value);else hostReportErrors(value);
            } catch (err) {
              hostReportErrors(err);
            }

            cleanupSubscription(subscriptionState);
          }
        },
        complete: function complete() {
          var subscriptionState = getInternalState(getInternalState(this).subscription);

          if (!subscriptionClosed(subscriptionState)) {
            var observer = subscriptionState.observer;
            close(subscriptionState);

            try {
              var completeMethod = getMethod(observer.complete);
              if (completeMethod) completeMethod.call(observer);
            } catch (error) {
              hostReportErrors(error);
            }

            cleanupSubscription(subscriptionState);
          }
        }
      });
      if (DESCRIPTORS) defineProperty(SubscriptionObserver.prototype, 'closed', {
        configurable: true,
        get: function get() {
          return subscriptionClosed(getInternalState(getInternalState(this).subscription));
        }
      });

      var $Observable = function Observable(subscriber) {
        anInstance(this, $Observable, 'Observable');
        setInternalState(this, {
          subscriber: aFunction(subscriber)
        });
      };

      redefineAll($Observable.prototype, {
        subscribe: function subscribe(observer) {
          var length = arguments.length;
          return new Subscription(typeof observer === 'function' ? {
            next: observer,
            error: length > 1 ? arguments[1] : undefined,
            complete: length > 2 ? arguments[2] : undefined
          } : isObject(observer) ? observer : {}, getInternalState(this).subscriber);
        }
      });
      redefineAll($Observable, {
        from: function from(x) {
          var C = typeof this === 'function' ? this : $Observable;
          var observableMethod = getMethod(anObject(x)[OBSERVABLE]);

          if (observableMethod) {
            var observable = anObject(observableMethod.call(x));
            return observable.constructor === C ? observable : new C(function (observer) {
              return observable.subscribe(observer);
            });
          }

          var iterator = getIterator(x);
          return new C(function (observer) {
            iterate(iterator, function (it, stop) {
              observer.next(it);
              if (observer.closed) return stop();
            }, {
              IS_ITERATOR: true,
              INTERRUPTED: true
            });
            observer.complete();
          });
        },
        of: function of() {
          var C = typeof this === 'function' ? this : $Observable;
          var length = arguments.length;
          var items = new Array(length);
          var index = 0;

          while (index < length) {
            items[index] = arguments[index++];
          }

          return new C(function (observer) {
            for (var i = 0; i < length; i++) {
              observer.next(items[i]);
              if (observer.closed) return;
            }

            observer.complete();
          });
        }
      });
      createNonEnumerableProperty($Observable.prototype, OBSERVABLE, function () {
        return this;
      });
      $({
        global: true
      }, {
        Observable: $Observable
      });
      setSpecies('Observable');
    }, {
      "../internals/a-function": 11,
      "../internals/an-instance": 15,
      "../internals/an-object": 16,
      "../internals/create-non-enumerable-property": 54,
      "../internals/descriptors": 61,
      "../internals/export": 74,
      "../internals/get-iterator": 84,
      "../internals/host-report-errors": 91,
      "../internals/internal-state": 99,
      "../internals/is-object": 104,
      "../internals/iterate": 107,
      "../internals/object-define-property": 133,
      "../internals/redefine-all": 151,
      "../internals/set-species": 164,
      "../internals/well-known-symbol": 197
    }],
    498: [function (require, module, exports) {
      // TODO: Remove from `core-js@4`
      require('./es.promise.all-settled.js');
    }, {
      "./es.promise.all-settled.js": 306
    }],
    499: [function (require, module, exports) {
      // TODO: Remove from `core-js@4`
      require('./es.promise.any');
    }, {
      "./es.promise.any": 307
    }],
    500: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var newPromiseCapabilityModule = require('../internals/new-promise-capability');

      var perform = require('../internals/perform'); // `Promise.try` method
      // https://github.com/tc39/proposal-promise-try


      $({
        target: 'Promise',
        stat: true
      }, {
        'try': function _try(callbackfn) {
          var promiseCapability = newPromiseCapabilityModule.f(this);
          var result = perform(callbackfn);
          (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value);
          return promiseCapability.promise;
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/new-promise-capability": 124,
      "../internals/perform": 149
    }],
    501: [function (require, module, exports) {
      var $ = require('../internals/export');

      var ReflectMetadataModule = require('../internals/reflect-metadata');

      var anObject = require('../internals/an-object');

      var toMetadataKey = ReflectMetadataModule.toKey;
      var ordinaryDefineOwnMetadata = ReflectMetadataModule.set; // `Reflect.defineMetadata` method
      // https://github.com/rbuckton/reflect-metadata

      $({
        target: 'Reflect',
        stat: true
      }, {
        defineMetadata: function defineMetadata(metadataKey, metadataValue, target
        /* , targetKey */
        ) {
          var targetKey = arguments.length < 4 ? undefined : toMetadataKey(arguments[3]);
          ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), targetKey);
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/reflect-metadata": 153
    }],
    502: [function (require, module, exports) {
      var $ = require('../internals/export');

      var ReflectMetadataModule = require('../internals/reflect-metadata');

      var anObject = require('../internals/an-object');

      var toMetadataKey = ReflectMetadataModule.toKey;
      var getOrCreateMetadataMap = ReflectMetadataModule.getMap;
      var store = ReflectMetadataModule.store; // `Reflect.deleteMetadata` method
      // https://github.com/rbuckton/reflect-metadata

      $({
        target: 'Reflect',
        stat: true
      }, {
        deleteMetadata: function deleteMetadata(metadataKey, target
        /* , targetKey */
        ) {
          var targetKey = arguments.length < 3 ? undefined : toMetadataKey(arguments[2]);
          var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
          if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
          if (metadataMap.size) return true;
          var targetMetadata = store.get(target);
          targetMetadata['delete'](targetKey);
          return !!targetMetadata.size || store['delete'](target);
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/reflect-metadata": 153
    }],
    503: [function (require, module, exports) {
      var $ = require('../internals/export'); // TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`


      var Set = require('../modules/es.set');

      var ReflectMetadataModule = require('../internals/reflect-metadata');

      var anObject = require('../internals/an-object');

      var getPrototypeOf = require('../internals/object-get-prototype-of');

      var iterate = require('../internals/iterate');

      var ordinaryOwnMetadataKeys = ReflectMetadataModule.keys;
      var toMetadataKey = ReflectMetadataModule.toKey;

      var from = function from(iter) {
        var result = [];
        iterate(iter, result.push, {
          that: result
        });
        return result;
      };

      var ordinaryMetadataKeys = function ordinaryMetadataKeys(O, P) {
        var oKeys = ordinaryOwnMetadataKeys(O, P);
        var parent = getPrototypeOf(O);
        if (parent === null) return oKeys;
        var pKeys = ordinaryMetadataKeys(parent, P);
        return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
      }; // `Reflect.getMetadataKeys` method
      // https://github.com/rbuckton/reflect-metadata


      $({
        target: 'Reflect',
        stat: true
      }, {
        getMetadataKeys: function getMetadataKeys(target
        /* , targetKey */
        ) {
          var targetKey = arguments.length < 2 ? undefined : toMetadataKey(arguments[1]);
          return ordinaryMetadataKeys(anObject(target), targetKey);
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/iterate": 107,
      "../internals/object-get-prototype-of": 138,
      "../internals/reflect-metadata": 153,
      "../modules/es.set": 331
    }],
    504: [function (require, module, exports) {
      var $ = require('../internals/export');

      var ReflectMetadataModule = require('../internals/reflect-metadata');

      var anObject = require('../internals/an-object');

      var getPrototypeOf = require('../internals/object-get-prototype-of');

      var ordinaryHasOwnMetadata = ReflectMetadataModule.has;
      var ordinaryGetOwnMetadata = ReflectMetadataModule.get;
      var toMetadataKey = ReflectMetadataModule.toKey;

      var ordinaryGetMetadata = function ordinaryGetMetadata(MetadataKey, O, P) {
        var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
        var parent = getPrototypeOf(O);
        return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
      }; // `Reflect.getMetadata` method
      // https://github.com/rbuckton/reflect-metadata


      $({
        target: 'Reflect',
        stat: true
      }, {
        getMetadata: function getMetadata(metadataKey, target
        /* , targetKey */
        ) {
          var targetKey = arguments.length < 3 ? undefined : toMetadataKey(arguments[2]);
          return ordinaryGetMetadata(metadataKey, anObject(target), targetKey);
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/object-get-prototype-of": 138,
      "../internals/reflect-metadata": 153
    }],
    505: [function (require, module, exports) {
      var $ = require('../internals/export');

      var ReflectMetadataModule = require('../internals/reflect-metadata');

      var anObject = require('../internals/an-object');

      var ordinaryOwnMetadataKeys = ReflectMetadataModule.keys;
      var toMetadataKey = ReflectMetadataModule.toKey; // `Reflect.getOwnMetadataKeys` method
      // https://github.com/rbuckton/reflect-metadata

      $({
        target: 'Reflect',
        stat: true
      }, {
        getOwnMetadataKeys: function getOwnMetadataKeys(target
        /* , targetKey */
        ) {
          var targetKey = arguments.length < 2 ? undefined : toMetadataKey(arguments[1]);
          return ordinaryOwnMetadataKeys(anObject(target), targetKey);
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/reflect-metadata": 153
    }],
    506: [function (require, module, exports) {
      var $ = require('../internals/export');

      var ReflectMetadataModule = require('../internals/reflect-metadata');

      var anObject = require('../internals/an-object');

      var ordinaryGetOwnMetadata = ReflectMetadataModule.get;
      var toMetadataKey = ReflectMetadataModule.toKey; // `Reflect.getOwnMetadata` method
      // https://github.com/rbuckton/reflect-metadata

      $({
        target: 'Reflect',
        stat: true
      }, {
        getOwnMetadata: function getOwnMetadata(metadataKey, target
        /* , targetKey */
        ) {
          var targetKey = arguments.length < 3 ? undefined : toMetadataKey(arguments[2]);
          return ordinaryGetOwnMetadata(metadataKey, anObject(target), targetKey);
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/reflect-metadata": 153
    }],
    507: [function (require, module, exports) {
      var $ = require('../internals/export');

      var ReflectMetadataModule = require('../internals/reflect-metadata');

      var anObject = require('../internals/an-object');

      var getPrototypeOf = require('../internals/object-get-prototype-of');

      var ordinaryHasOwnMetadata = ReflectMetadataModule.has;
      var toMetadataKey = ReflectMetadataModule.toKey;

      var ordinaryHasMetadata = function ordinaryHasMetadata(MetadataKey, O, P) {
        var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn) return true;
        var parent = getPrototypeOf(O);
        return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
      }; // `Reflect.hasMetadata` method
      // https://github.com/rbuckton/reflect-metadata


      $({
        target: 'Reflect',
        stat: true
      }, {
        hasMetadata: function hasMetadata(metadataKey, target
        /* , targetKey */
        ) {
          var targetKey = arguments.length < 3 ? undefined : toMetadataKey(arguments[2]);
          return ordinaryHasMetadata(metadataKey, anObject(target), targetKey);
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/object-get-prototype-of": 138,
      "../internals/reflect-metadata": 153
    }],
    508: [function (require, module, exports) {
      var $ = require('../internals/export');

      var ReflectMetadataModule = require('../internals/reflect-metadata');

      var anObject = require('../internals/an-object');

      var ordinaryHasOwnMetadata = ReflectMetadataModule.has;
      var toMetadataKey = ReflectMetadataModule.toKey; // `Reflect.hasOwnMetadata` method
      // https://github.com/rbuckton/reflect-metadata

      $({
        target: 'Reflect',
        stat: true
      }, {
        hasOwnMetadata: function hasOwnMetadata(metadataKey, target
        /* , targetKey */
        ) {
          var targetKey = arguments.length < 3 ? undefined : toMetadataKey(arguments[2]);
          return ordinaryHasOwnMetadata(metadataKey, anObject(target), targetKey);
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/reflect-metadata": 153
    }],
    509: [function (require, module, exports) {
      var $ = require('../internals/export');

      var ReflectMetadataModule = require('../internals/reflect-metadata');

      var anObject = require('../internals/an-object');

      var toMetadataKey = ReflectMetadataModule.toKey;
      var ordinaryDefineOwnMetadata = ReflectMetadataModule.set; // `Reflect.metadata` method
      // https://github.com/rbuckton/reflect-metadata

      $({
        target: 'Reflect',
        stat: true
      }, {
        metadata: function metadata(metadataKey, metadataValue) {
          return function decorator(target, key) {
            ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetadataKey(key));
          };
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/reflect-metadata": 153
    }],
    510: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var collectionAddAll = require('../internals/collection-add-all'); // `Set.prototype.addAll` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Set',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        addAll: function addAll()
        /* ...elements */
        {
          return collectionAddAll.apply(this, arguments);
        }
      });
    }, {
      "../internals/collection-add-all": 41,
      "../internals/export": 74,
      "../internals/is-pure": 105
    }],
    511: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var collectionDeleteAll = require('../internals/collection-delete-all'); // `Set.prototype.deleteAll` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Set',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        deleteAll: function deleteAll()
        /* ...elements */
        {
          return collectionDeleteAll.apply(this, arguments);
        }
      });
    }, {
      "../internals/collection-delete-all": 42,
      "../internals/export": 74,
      "../internals/is-pure": 105
    }],
    512: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var getBuiltIn = require('../internals/get-built-in');

      var anObject = require('../internals/an-object');

      var aFunction = require('../internals/a-function');

      var speciesConstructor = require('../internals/species-constructor');

      var iterate = require('../internals/iterate'); // `Set.prototype.difference` method
      // https://github.com/tc39/proposal-set-methods


      $({
        target: 'Set',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        difference: function difference(iterable) {
          var set = anObject(this);
          var newSet = new (speciesConstructor(set, getBuiltIn('Set')))(set);
          var remover = aFunction(newSet['delete']);
          iterate(iterable, function (value) {
            remover.call(newSet, value);
          });
          return newSet;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/get-built-in": 82,
      "../internals/is-pure": 105,
      "../internals/iterate": 107,
      "../internals/species-constructor": 169
    }],
    513: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var anObject = require('../internals/an-object');

      var bind = require('../internals/function-bind-context');

      var getSetIterator = require('../internals/get-set-iterator');

      var iterate = require('../internals/iterate'); // `Set.prototype.every` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Set',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        every: function every(callbackfn
        /* , thisArg */
        ) {
          var set = anObject(this);
          var iterator = getSetIterator(set);
          var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
          return !iterate(iterator, function (value, stop) {
            if (!boundFunction(value, value, set)) return stop();
          }, {
            IS_ITERATOR: true,
            INTERRUPTED: true
          }).stopped;
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/function-bind-context": 79,
      "../internals/get-set-iterator": 86,
      "../internals/is-pure": 105,
      "../internals/iterate": 107
    }],
    514: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var getBuiltIn = require('../internals/get-built-in');

      var anObject = require('../internals/an-object');

      var aFunction = require('../internals/a-function');

      var bind = require('../internals/function-bind-context');

      var speciesConstructor = require('../internals/species-constructor');

      var getSetIterator = require('../internals/get-set-iterator');

      var iterate = require('../internals/iterate'); // `Set.prototype.filter` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Set',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        filter: function filter(callbackfn
        /* , thisArg */
        ) {
          var set = anObject(this);
          var iterator = getSetIterator(set);
          var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
          var newSet = new (speciesConstructor(set, getBuiltIn('Set')))();
          var adder = aFunction(newSet.add);
          iterate(iterator, function (value) {
            if (boundFunction(value, value, set)) adder.call(newSet, value);
          }, {
            IS_ITERATOR: true
          });
          return newSet;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/function-bind-context": 79,
      "../internals/get-built-in": 82,
      "../internals/get-set-iterator": 86,
      "../internals/is-pure": 105,
      "../internals/iterate": 107,
      "../internals/species-constructor": 169
    }],
    515: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var anObject = require('../internals/an-object');

      var bind = require('../internals/function-bind-context');

      var getSetIterator = require('../internals/get-set-iterator');

      var iterate = require('../internals/iterate'); // `Set.prototype.find` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Set',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        find: function find(callbackfn
        /* , thisArg */
        ) {
          var set = anObject(this);
          var iterator = getSetIterator(set);
          var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
          return iterate(iterator, function (value, stop) {
            if (boundFunction(value, value, set)) return stop(value);
          }, {
            IS_ITERATOR: true,
            INTERRUPTED: true
          }).result;
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/function-bind-context": 79,
      "../internals/get-set-iterator": 86,
      "../internals/is-pure": 105,
      "../internals/iterate": 107
    }],
    516: [function (require, module, exports) {
      var $ = require('../internals/export');

      var from = require('../internals/collection-from'); // `Set.from` method
      // https://tc39.github.io/proposal-setmap-offrom/#sec-set.from


      $({
        target: 'Set',
        stat: true
      }, {
        from: from
      });
    }, {
      "../internals/collection-from": 43,
      "../internals/export": 74
    }],
    517: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var getBuiltIn = require('../internals/get-built-in');

      var anObject = require('../internals/an-object');

      var aFunction = require('../internals/a-function');

      var speciesConstructor = require('../internals/species-constructor');

      var iterate = require('../internals/iterate'); // `Set.prototype.intersection` method
      // https://github.com/tc39/proposal-set-methods


      $({
        target: 'Set',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        intersection: function intersection(iterable) {
          var set = anObject(this);
          var newSet = new (speciesConstructor(set, getBuiltIn('Set')))();
          var hasCheck = aFunction(set.has);
          var adder = aFunction(newSet.add);
          iterate(iterable, function (value) {
            if (hasCheck.call(set, value)) adder.call(newSet, value);
          });
          return newSet;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/get-built-in": 82,
      "../internals/is-pure": 105,
      "../internals/iterate": 107,
      "../internals/species-constructor": 169
    }],
    518: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var anObject = require('../internals/an-object');

      var aFunction = require('../internals/a-function');

      var iterate = require('../internals/iterate'); // `Set.prototype.isDisjointFrom` method
      // https://tc39.github.io/proposal-set-methods/#Set.prototype.isDisjointFrom


      $({
        target: 'Set',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        isDisjointFrom: function isDisjointFrom(iterable) {
          var set = anObject(this);
          var hasCheck = aFunction(set.has);
          return !iterate(iterable, function (value, stop) {
            if (hasCheck.call(set, value) === true) return stop();
          }, {
            INTERRUPTED: true
          }).stopped;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/is-pure": 105,
      "../internals/iterate": 107
    }],
    519: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var getBuiltIn = require('../internals/get-built-in');

      var anObject = require('../internals/an-object');

      var aFunction = require('../internals/a-function');

      var getIterator = require('../internals/get-iterator');

      var iterate = require('../internals/iterate'); // `Set.prototype.isSubsetOf` method
      // https://tc39.github.io/proposal-set-methods/#Set.prototype.isSubsetOf


      $({
        target: 'Set',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        isSubsetOf: function isSubsetOf(iterable) {
          var iterator = getIterator(this);
          var otherSet = anObject(iterable);
          var hasCheck = otherSet.has;

          if (typeof hasCheck != 'function') {
            otherSet = new (getBuiltIn('Set'))(iterable);
            hasCheck = aFunction(otherSet.has);
          }

          return !iterate(iterator, function (value, stop) {
            if (hasCheck.call(otherSet, value) === false) return stop();
          }, {
            IS_ITERATOR: true,
            INTERRUPTED: true
          }).stopped;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/get-built-in": 82,
      "../internals/get-iterator": 84,
      "../internals/is-pure": 105,
      "../internals/iterate": 107
    }],
    520: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var anObject = require('../internals/an-object');

      var aFunction = require('../internals/a-function');

      var iterate = require('../internals/iterate'); // `Set.prototype.isSupersetOf` method
      // https://tc39.github.io/proposal-set-methods/#Set.prototype.isSupersetOf


      $({
        target: 'Set',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        isSupersetOf: function isSupersetOf(iterable) {
          var set = anObject(this);
          var hasCheck = aFunction(set.has);
          return !iterate(iterable, function (value, stop) {
            if (hasCheck.call(set, value) === false) return stop();
          }, {
            INTERRUPTED: true
          }).stopped;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/is-pure": 105,
      "../internals/iterate": 107
    }],
    521: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var anObject = require('../internals/an-object');

      var getSetIterator = require('../internals/get-set-iterator');

      var iterate = require('../internals/iterate'); // `Set.prototype.join` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Set',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        join: function join(separator) {
          var set = anObject(this);
          var iterator = getSetIterator(set);
          var sep = separator === undefined ? ',' : String(separator);
          var result = [];
          iterate(iterator, result.push, {
            that: result,
            IS_ITERATOR: true
          });
          return result.join(sep);
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/get-set-iterator": 86,
      "../internals/is-pure": 105,
      "../internals/iterate": 107
    }],
    522: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var getBuiltIn = require('../internals/get-built-in');

      var anObject = require('../internals/an-object');

      var aFunction = require('../internals/a-function');

      var bind = require('../internals/function-bind-context');

      var speciesConstructor = require('../internals/species-constructor');

      var getSetIterator = require('../internals/get-set-iterator');

      var iterate = require('../internals/iterate'); // `Set.prototype.map` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Set',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        map: function map(callbackfn
        /* , thisArg */
        ) {
          var set = anObject(this);
          var iterator = getSetIterator(set);
          var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
          var newSet = new (speciesConstructor(set, getBuiltIn('Set')))();
          var adder = aFunction(newSet.add);
          iterate(iterator, function (value) {
            adder.call(newSet, boundFunction(value, value, set));
          }, {
            IS_ITERATOR: true
          });
          return newSet;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/function-bind-context": 79,
      "../internals/get-built-in": 82,
      "../internals/get-set-iterator": 86,
      "../internals/is-pure": 105,
      "../internals/iterate": 107,
      "../internals/species-constructor": 169
    }],
    523: [function (require, module, exports) {
      var $ = require('../internals/export');

      var of = require('../internals/collection-of'); // `Set.of` method
      // https://tc39.github.io/proposal-setmap-offrom/#sec-set.of


      $({
        target: 'Set',
        stat: true
      }, {
        of: of
      });
    }, {
      "../internals/collection-of": 44,
      "../internals/export": 74
    }],
    524: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var anObject = require('../internals/an-object');

      var aFunction = require('../internals/a-function');

      var getSetIterator = require('../internals/get-set-iterator');

      var iterate = require('../internals/iterate'); // `Set.prototype.reduce` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Set',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        reduce: function reduce(callbackfn
        /* , initialValue */
        ) {
          var set = anObject(this);
          var iterator = getSetIterator(set);
          var noInitial = arguments.length < 2;
          var accumulator = noInitial ? undefined : arguments[1];
          aFunction(callbackfn);
          iterate(iterator, function (value) {
            if (noInitial) {
              noInitial = false;
              accumulator = value;
            } else {
              accumulator = callbackfn(accumulator, value, value, set);
            }
          }, {
            IS_ITERATOR: true
          });
          if (noInitial) throw TypeError('Reduce of empty set with no initial value');
          return accumulator;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/get-set-iterator": 86,
      "../internals/is-pure": 105,
      "../internals/iterate": 107
    }],
    525: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var anObject = require('../internals/an-object');

      var bind = require('../internals/function-bind-context');

      var getSetIterator = require('../internals/get-set-iterator');

      var iterate = require('../internals/iterate'); // `Set.prototype.some` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'Set',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        some: function some(callbackfn
        /* , thisArg */
        ) {
          var set = anObject(this);
          var iterator = getSetIterator(set);
          var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);
          return iterate(iterator, function (value, stop) {
            if (boundFunction(value, value, set)) return stop();
          }, {
            IS_ITERATOR: true,
            INTERRUPTED: true
          }).stopped;
        }
      });
    }, {
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/function-bind-context": 79,
      "../internals/get-set-iterator": 86,
      "../internals/is-pure": 105,
      "../internals/iterate": 107
    }],
    526: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var getBuiltIn = require('../internals/get-built-in');

      var anObject = require('../internals/an-object');

      var aFunction = require('../internals/a-function');

      var speciesConstructor = require('../internals/species-constructor');

      var iterate = require('../internals/iterate'); // `Set.prototype.symmetricDifference` method
      // https://github.com/tc39/proposal-set-methods


      $({
        target: 'Set',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        symmetricDifference: function symmetricDifference(iterable) {
          var set = anObject(this);
          var newSet = new (speciesConstructor(set, getBuiltIn('Set')))(set);
          var remover = aFunction(newSet['delete']);
          var adder = aFunction(newSet.add);
          iterate(iterable, function (value) {
            remover.call(newSet, value) || adder.call(newSet, value);
          });
          return newSet;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/get-built-in": 82,
      "../internals/is-pure": 105,
      "../internals/iterate": 107,
      "../internals/species-constructor": 169
    }],
    527: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var getBuiltIn = require('../internals/get-built-in');

      var anObject = require('../internals/an-object');

      var aFunction = require('../internals/a-function');

      var speciesConstructor = require('../internals/species-constructor');

      var iterate = require('../internals/iterate'); // `Set.prototype.union` method
      // https://github.com/tc39/proposal-set-methods


      $({
        target: 'Set',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        union: function union(iterable) {
          var set = anObject(this);
          var newSet = new (speciesConstructor(set, getBuiltIn('Set')))(set);
          iterate(iterable, aFunction(newSet.add), {
            that: newSet
          });
          return newSet;
        }
      });
    }, {
      "../internals/a-function": 11,
      "../internals/an-object": 16,
      "../internals/export": 74,
      "../internals/get-built-in": 82,
      "../internals/is-pure": 105,
      "../internals/iterate": 107,
      "../internals/species-constructor": 169
    }],
    528: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var charAt = require('../internals/string-multibyte').charAt;

      var fails = require('../internals/fails');

      var FORCED = fails(function () {
        return '𠮷'.at(0) !== '𠮷';
      }); // `String.prototype.at` method
      // https://github.com/mathiasbynens/String.prototype.at

      $({
        target: 'String',
        proto: true,
        forced: FORCED
      }, {
        at: function at(pos) {
          return charAt(this, pos);
        }
      });
    }, {
      "../internals/export": 74,
      "../internals/fails": 75,
      "../internals/string-multibyte": 171
    }],
    529: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var createIteratorConstructor = require('../internals/create-iterator-constructor');

      var requireObjectCoercible = require('../internals/require-object-coercible');

      var InternalStateModule = require('../internals/internal-state');

      var StringMultibyteModule = require('../internals/string-multibyte');

      var codeAt = StringMultibyteModule.codeAt;
      var charAt = StringMultibyteModule.charAt;
      var STRING_ITERATOR = 'String Iterator';
      var setInternalState = InternalStateModule.set;
      var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR); // TODO: unify with String#@@iterator

      var $StringIterator = createIteratorConstructor(function StringIterator(string) {
        setInternalState(this, {
          type: STRING_ITERATOR,
          string: string,
          index: 0
        });
      }, 'String', function next() {
        var state = getInternalState(this);
        var string = state.string;
        var index = state.index;
        var point;
        if (index >= string.length) return {
          value: undefined,
          done: true
        };
        point = charAt(string, index);
        state.index += point.length;
        return {
          value: {
            codePoint: codeAt(point, 0),
            position: index
          },
          done: false
        };
      }); // `String.prototype.codePoints` method
      // https://github.com/tc39/proposal-string-prototype-codepoints

      $({
        target: 'String',
        proto: true
      }, {
        codePoints: function codePoints() {
          return new $StringIterator(String(requireObjectCoercible(this)));
        }
      });
    }, {
      "../internals/create-iterator-constructor": 53,
      "../internals/export": 74,
      "../internals/internal-state": 99,
      "../internals/require-object-coercible": 160,
      "../internals/string-multibyte": 171
    }],
    530: [function (require, module, exports) {
      // TODO: Remove from `core-js@4`
      require('./es.string.match-all');
    }, {
      "./es.string.match-all": 346
    }],
    531: [function (require, module, exports) {
      // TODO: Remove from `core-js@4`
      require('./es.string.replace-all');
    }, {
      "./es.string.replace-all": 352
    }],
    532: [function (require, module, exports) {
      var defineWellKnownSymbol = require('../internals/define-well-known-symbol'); // `Symbol.asyncDispose` well-known symbol
      // https://github.com/tc39/proposal-using-statement


      defineWellKnownSymbol('asyncDispose');
    }, {
      "../internals/define-well-known-symbol": 60
    }],
    533: [function (require, module, exports) {
      var defineWellKnownSymbol = require('../internals/define-well-known-symbol'); // `Symbol.dispose` well-known symbol
      // https://github.com/tc39/proposal-using-statement


      defineWellKnownSymbol('dispose');
    }, {
      "../internals/define-well-known-symbol": 60
    }],
    534: [function (require, module, exports) {
      var defineWellKnownSymbol = require('../internals/define-well-known-symbol'); // `Symbol.matcher` well-known symbol
      // https://github.com/tc39/proposal-pattern-matching


      defineWellKnownSymbol('matcher');
    }, {
      "../internals/define-well-known-symbol": 60
    }],
    535: [function (require, module, exports) {
      var defineWellKnownSymbol = require('../internals/define-well-known-symbol'); // `Symbol.metadata` well-known symbol
      // https://github.com/tc39/proposal-decorators


      defineWellKnownSymbol('metadata');
    }, {
      "../internals/define-well-known-symbol": 60
    }],
    536: [function (require, module, exports) {
      var defineWellKnownSymbol = require('../internals/define-well-known-symbol'); // `Symbol.observable` well-known symbol
      // https://github.com/tc39/proposal-observable


      defineWellKnownSymbol('observable');
    }, {
      "../internals/define-well-known-symbol": 60
    }],
    537: [function (require, module, exports) {
      // TODO: remove from `core-js@4`
      var defineWellKnownSymbol = require('../internals/define-well-known-symbol'); // `Symbol.patternMatch` well-known symbol
      // https://github.com/tc39/proposal-pattern-matching


      defineWellKnownSymbol('patternMatch');
    }, {
      "../internals/define-well-known-symbol": 60
    }],
    538: [function (require, module, exports) {
      // TODO: remove from `core-js@4`
      var defineWellKnownSymbol = require('../internals/define-well-known-symbol');

      defineWellKnownSymbol('replaceAll');
    }, {
      "../internals/define-well-known-symbol": 60
    }],
    539: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var toLength = require('../internals/to-length');

      var toInteger = require('../internals/to-integer');

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.at` method
      // https://github.com/tc39/proposal-relative-indexing-method

      exportTypedArrayMethod('at', function at(index) {
        var O = aTypedArray(this);
        var len = toLength(O.length);
        var relativeIndex = toInteger(index);
        var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;
        return k < 0 || k >= len ? undefined : O[k];
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/to-integer": 183,
      "../internals/to-length": 184
    }],
    540: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var $filterOut = require('../internals/array-iteration').filterOut;

      var fromSpeciesAndList = require('../internals/typed-array-from-species-and-list');

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.filterOut` method
      // https://github.com/tc39/proposal-array-filtering

      exportTypedArrayMethod('filterOut', function filterOut(callbackfn
      /* , thisArg */
      ) {
        var list = $filterOut(aTypedArray(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
        return fromSpeciesAndList(this, list);
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/array-iteration": 26,
      "../internals/typed-array-from-species-and-list": 192
    }],
    541: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var $findLastIndex = require('../internals/array-iteration-from-last').findLastIndex;

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.findLastIndex` method
      // https://github.com/tc39/proposal-array-find-from-last

      exportTypedArrayMethod('findLastIndex', function findLastIndex(predicate
      /* , thisArg */
      ) {
        return $findLastIndex(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/array-iteration-from-last": 25
    }],
    542: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var $findLast = require('../internals/array-iteration-from-last').findLast;

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.findLast` method
      // https://github.com/tc39/proposal-array-find-from-last

      exportTypedArrayMethod('findLast', function findLast(predicate
      /* , thisArg */
      ) {
        return $findLast(aTypedArray(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/array-iteration-from-last": 25
    }],
    543: [function (require, module, exports) {
      'use strict';

      var ArrayBufferViewCore = require('../internals/array-buffer-view-core');

      var arrayUniqueBy = require('../internals/array-unique-by');

      var fromSpeciesAndList = require('../internals/typed-array-from-species-and-list');

      var aTypedArray = ArrayBufferViewCore.aTypedArray;
      var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod; // `%TypedArray%.prototype.uniqueBy` method
      // https://github.com/tc39/proposal-array-unique

      exportTypedArrayMethod('uniqueBy', function uniqueBy(resolver) {
        return fromSpeciesAndList(this, arrayUniqueBy.call(aTypedArray(this), resolver));
      });
    }, {
      "../internals/array-buffer-view-core": 18,
      "../internals/array-unique-by": 33,
      "../internals/typed-array-from-species-and-list": 192
    }],
    544: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var collectionDeleteAll = require('../internals/collection-delete-all'); // `WeakMap.prototype.deleteAll` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'WeakMap',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        deleteAll: function deleteAll()
        /* ...elements */
        {
          return collectionDeleteAll.apply(this, arguments);
        }
      });
    }, {
      "../internals/collection-delete-all": 42,
      "../internals/export": 74,
      "../internals/is-pure": 105
    }],
    545: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var $emplace = require('../internals/map-emplace'); // `WeakMap.prototype.emplace` method
      // https://github.com/tc39/proposal-upsert


      $({
        target: 'WeakMap',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        emplace: $emplace
      });
    }, {
      "../internals/export": 74,
      "../internals/is-pure": 105,
      "../internals/map-emplace": 112
    }],
    546: [function (require, module, exports) {
      var $ = require('../internals/export');

      var from = require('../internals/collection-from'); // `WeakMap.from` method
      // https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from


      $({
        target: 'WeakMap',
        stat: true
      }, {
        from: from
      });
    }, {
      "../internals/collection-from": 43,
      "../internals/export": 74
    }],
    547: [function (require, module, exports) {
      var $ = require('../internals/export');

      var of = require('../internals/collection-of'); // `WeakMap.of` method
      // https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of


      $({
        target: 'WeakMap',
        stat: true
      }, {
        of: of
      });
    }, {
      "../internals/collection-of": 44,
      "../internals/export": 74
    }],
    548: [function (require, module, exports) {
      'use strict'; // TODO: remove from `core-js@4`

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var $upsert = require('../internals/map-upsert'); // `WeakMap.prototype.upsert` method (replaced by `WeakMap.prototype.emplace`)
      // https://github.com/tc39/proposal-upsert


      $({
        target: 'WeakMap',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        upsert: $upsert
      });
    }, {
      "../internals/export": 74,
      "../internals/is-pure": 105,
      "../internals/map-upsert": 113
    }],
    549: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var collectionAddAll = require('../internals/collection-add-all'); // `WeakSet.prototype.addAll` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'WeakSet',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        addAll: function addAll()
        /* ...elements */
        {
          return collectionAddAll.apply(this, arguments);
        }
      });
    }, {
      "../internals/collection-add-all": 41,
      "../internals/export": 74,
      "../internals/is-pure": 105
    }],
    550: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export');

      var IS_PURE = require('../internals/is-pure');

      var collectionDeleteAll = require('../internals/collection-delete-all'); // `WeakSet.prototype.deleteAll` method
      // https://github.com/tc39/proposal-collection-methods


      $({
        target: 'WeakSet',
        proto: true,
        real: true,
        forced: IS_PURE
      }, {
        deleteAll: function deleteAll()
        /* ...elements */
        {
          return collectionDeleteAll.apply(this, arguments);
        }
      });
    }, {
      "../internals/collection-delete-all": 42,
      "../internals/export": 74,
      "../internals/is-pure": 105
    }],
    551: [function (require, module, exports) {
      var $ = require('../internals/export');

      var from = require('../internals/collection-from'); // `WeakSet.from` method
      // https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from


      $({
        target: 'WeakSet',
        stat: true
      }, {
        from: from
      });
    }, {
      "../internals/collection-from": 43,
      "../internals/export": 74
    }],
    552: [function (require, module, exports) {
      var $ = require('../internals/export');

      var of = require('../internals/collection-of'); // `WeakSet.of` method
      // https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of


      $({
        target: 'WeakSet',
        stat: true
      }, {
        of: of
      });
    }, {
      "../internals/collection-of": 44,
      "../internals/export": 74
    }],
    553: [function (require, module, exports) {
      var global = require('../internals/global');

      var DOMIterables = require('../internals/dom-iterables');

      var forEach = require('../internals/array-for-each');

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      for (var COLLECTION_NAME in DOMIterables) {
        var Collection = global[COLLECTION_NAME];
        var CollectionPrototype = Collection && Collection.prototype; // some Chrome versions have non-configurable methods on DOMTokenList

        if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {
          createNonEnumerableProperty(CollectionPrototype, 'forEach', forEach);
        } catch (error) {
          CollectionPrototype.forEach = forEach;
        }
      }
    }, {
      "../internals/array-for-each": 22,
      "../internals/create-non-enumerable-property": 54,
      "../internals/dom-iterables": 63,
      "../internals/global": 88
    }],
    554: [function (require, module, exports) {
      var global = require('../internals/global');

      var DOMIterables = require('../internals/dom-iterables');

      var ArrayIteratorMethods = require('../modules/es.array.iterator');

      var createNonEnumerableProperty = require('../internals/create-non-enumerable-property');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var ITERATOR = wellKnownSymbol('iterator');
      var TO_STRING_TAG = wellKnownSymbol('toStringTag');
      var ArrayValues = ArrayIteratorMethods.values;

      for (var COLLECTION_NAME in DOMIterables) {
        var Collection = global[COLLECTION_NAME];
        var CollectionPrototype = Collection && Collection.prototype;

        if (CollectionPrototype) {
          // some Chrome versions have non-configurable methods on DOMTokenList
          if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
            createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);
          } catch (error) {
            CollectionPrototype[ITERATOR] = ArrayValues;
          }

          if (!CollectionPrototype[TO_STRING_TAG]) {
            createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
          }

          if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
            // some Chrome versions have non-configurable methods on DOMTokenList
            if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
              createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
            } catch (error) {
              CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
            }
          }
        }
      }
    }, {
      "../internals/create-non-enumerable-property": 54,
      "../internals/dom-iterables": 63,
      "../internals/global": 88,
      "../internals/well-known-symbol": 197,
      "../modules/es.array.iterator": 217
    }],
    555: [function (require, module, exports) {
      var $ = require('../internals/export');

      var global = require('../internals/global');

      var task = require('../internals/task');

      var FORCED = !global.setImmediate || !global.clearImmediate; // http://w3c.github.io/setImmediate/

      $({
        global: true,
        bind: true,
        enumerable: true,
        forced: FORCED
      }, {
        // `setImmediate` method
        // http://w3c.github.io/setImmediate/#si-setImmediate
        setImmediate: task.set,
        // `clearImmediate` method
        // http://w3c.github.io/setImmediate/#si-clearImmediate
        clearImmediate: task.clear
      });
    }, {
      "../internals/export": 74,
      "../internals/global": 88,
      "../internals/task": 178
    }],
    556: [function (require, module, exports) {
      var $ = require('../internals/export');

      var global = require('../internals/global');

      var microtask = require('../internals/microtask');

      var IS_NODE = require('../internals/engine-is-node');

      var process = global.process; // `queueMicrotask` method
      // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-queuemicrotask

      $({
        global: true,
        enumerable: true,
        noTargetGet: true
      }, {
        queueMicrotask: function queueMicrotask(fn) {
          var domain = IS_NODE && process.domain;
          microtask(domain ? domain.bind(fn) : fn);
        }
      });
    }, {
      "../internals/engine-is-node": 68,
      "../internals/export": 74,
      "../internals/global": 88,
      "../internals/microtask": 119
    }],
    557: [function (require, module, exports) {
      var $ = require('../internals/export');

      var global = require('../internals/global');

      var userAgent = require('../internals/engine-user-agent');

      var slice = [].slice;
      var MSIE = /MSIE .\./.test(userAgent); // <- dirty ie9- check

      var wrap = function wrap(scheduler) {
        return function (handler, timeout
        /* , ...arguments */
        ) {
          var boundArgs = arguments.length > 2;
          var args = boundArgs ? slice.call(arguments, 2) : undefined;
          return scheduler(boundArgs ? function () {
            // eslint-disable-next-line no-new-func -- spec requirement
            (typeof handler == 'function' ? handler : Function(handler)).apply(this, args);
          } : handler, timeout);
        };
      }; // ie9- setTimeout & setInterval additional parameters fix
      // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers


      $({
        global: true,
        bind: true,
        forced: MSIE
      }, {
        // `setTimeout` method
        // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
        setTimeout: wrap(global.setTimeout),
        // `setInterval` method
        // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
        setInterval: wrap(global.setInterval)
      });
    }, {
      "../internals/engine-user-agent": 70,
      "../internals/export": 74,
      "../internals/global": 88
    }],
    558: [function (require, module, exports) {
      'use strict'; // TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`

      require('../modules/es.array.iterator');

      var $ = require('../internals/export');

      var getBuiltIn = require('../internals/get-built-in');

      var USE_NATIVE_URL = require('../internals/native-url');

      var redefine = require('../internals/redefine');

      var redefineAll = require('../internals/redefine-all');

      var setToStringTag = require('../internals/set-to-string-tag');

      var createIteratorConstructor = require('../internals/create-iterator-constructor');

      var InternalStateModule = require('../internals/internal-state');

      var anInstance = require('../internals/an-instance');

      var hasOwn = require('../internals/has');

      var bind = require('../internals/function-bind-context');

      var classof = require('../internals/classof');

      var anObject = require('../internals/an-object');

      var isObject = require('../internals/is-object');

      var create = require('../internals/object-create');

      var createPropertyDescriptor = require('../internals/create-property-descriptor');

      var getIterator = require('../internals/get-iterator');

      var getIteratorMethod = require('../internals/get-iterator-method');

      var wellKnownSymbol = require('../internals/well-known-symbol');

      var $fetch = getBuiltIn('fetch');
      var Headers = getBuiltIn('Headers');
      var ITERATOR = wellKnownSymbol('iterator');
      var URL_SEARCH_PARAMS = 'URLSearchParams';
      var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
      var setInternalState = InternalStateModule.set;
      var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
      var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);
      var plus = /\+/g;
      var sequences = Array(4);

      var percentSequence = function percentSequence(bytes) {
        return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
      };

      var percentDecode = function percentDecode(sequence) {
        try {
          return decodeURIComponent(sequence);
        } catch (error) {
          return sequence;
        }
      };

      var deserialize = function deserialize(it) {
        var result = it.replace(plus, ' ');
        var bytes = 4;

        try {
          return decodeURIComponent(result);
        } catch (error) {
          while (bytes) {
            result = result.replace(percentSequence(bytes--), percentDecode);
          }

          return result;
        }
      };

      var find = /[!'()~]|%20/g;
      var replace = {
        '!': '%21',
        "'": '%27',
        '(': '%28',
        ')': '%29',
        '~': '%7E',
        '%20': '+'
      };

      var replacer = function replacer(match) {
        return replace[match];
      };

      var serialize = function serialize(it) {
        return encodeURIComponent(it).replace(find, replacer);
      };

      var parseSearchParams = function parseSearchParams(result, query) {
        if (query) {
          var attributes = query.split('&');
          var index = 0;
          var attribute, entry;

          while (index < attributes.length) {
            attribute = attributes[index++];

            if (attribute.length) {
              entry = attribute.split('=');
              result.push({
                key: deserialize(entry.shift()),
                value: deserialize(entry.join('='))
              });
            }
          }
        }
      };

      var updateSearchParams = function updateSearchParams(query) {
        this.entries.length = 0;
        parseSearchParams(this.entries, query);
      };

      var validateArgumentsLength = function validateArgumentsLength(passed, required) {
        if (passed < required) throw TypeError('Not enough arguments');
      };

      var URLSearchParamsIterator = createIteratorConstructor(function Iterator(params, kind) {
        setInternalState(this, {
          type: URL_SEARCH_PARAMS_ITERATOR,
          iterator: getIterator(getInternalParamsState(params).entries),
          kind: kind
        });
      }, 'Iterator', function next() {
        var state = getInternalIteratorState(this);
        var kind = state.kind;
        var step = state.iterator.next();
        var entry = step.value;

        if (!step.done) {
          step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
        }

        return step;
      }); // `URLSearchParams` constructor
      // https://url.spec.whatwg.org/#interface-urlsearchparams

      var URLSearchParamsConstructor = function URLSearchParams()
      /* init */
      {
        anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
        var init = arguments.length > 0 ? arguments[0] : undefined;
        var that = this;
        var entries = [];
        var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key;
        setInternalState(that, {
          type: URL_SEARCH_PARAMS,
          entries: entries,
          updateURL: function updateURL() {
            /* empty */
          },
          updateSearchParams: updateSearchParams
        });

        if (init !== undefined) {
          if (isObject(init)) {
            iteratorMethod = getIteratorMethod(init);

            if (typeof iteratorMethod === 'function') {
              iterator = iteratorMethod.call(init);
              next = iterator.next;

              while (!(step = next.call(iterator)).done) {
                entryIterator = getIterator(anObject(step.value));
                entryNext = entryIterator.next;
                if ((first = entryNext.call(entryIterator)).done || (second = entryNext.call(entryIterator)).done || !entryNext.call(entryIterator).done) throw TypeError('Expected sequence with length 2');
                entries.push({
                  key: first.value + '',
                  value: second.value + ''
                });
              }
            } else for (key in init) {
              if (hasOwn(init, key)) entries.push({
                key: key,
                value: init[key] + ''
              });
            }
          } else {
            parseSearchParams(entries, typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : init + '');
          }
        }
      };

      var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;
      redefineAll(URLSearchParamsPrototype, {
        // `URLSearchParams.prototype.append` method
        // https://url.spec.whatwg.org/#dom-urlsearchparams-append
        append: function append(name, value) {
          validateArgumentsLength(arguments.length, 2);
          var state = getInternalParamsState(this);
          state.entries.push({
            key: name + '',
            value: value + ''
          });
          state.updateURL();
        },
        // `URLSearchParams.prototype.delete` method
        // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
        'delete': function _delete(name) {
          validateArgumentsLength(arguments.length, 1);
          var state = getInternalParamsState(this);
          var entries = state.entries;
          var key = name + '';
          var index = 0;

          while (index < entries.length) {
            if (entries[index].key === key) entries.splice(index, 1);else index++;
          }

          state.updateURL();
        },
        // `URLSearchParams.prototype.get` method
        // https://url.spec.whatwg.org/#dom-urlsearchparams-get
        get: function get(name) {
          validateArgumentsLength(arguments.length, 1);
          var entries = getInternalParamsState(this).entries;
          var key = name + '';
          var index = 0;

          for (; index < entries.length; index++) {
            if (entries[index].key === key) return entries[index].value;
          }

          return null;
        },
        // `URLSearchParams.prototype.getAll` method
        // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
        getAll: function getAll(name) {
          validateArgumentsLength(arguments.length, 1);
          var entries = getInternalParamsState(this).entries;
          var key = name + '';
          var result = [];
          var index = 0;

          for (; index < entries.length; index++) {
            if (entries[index].key === key) result.push(entries[index].value);
          }

          return result;
        },
        // `URLSearchParams.prototype.has` method
        // https://url.spec.whatwg.org/#dom-urlsearchparams-has
        has: function has(name) {
          validateArgumentsLength(arguments.length, 1);
          var entries = getInternalParamsState(this).entries;
          var key = name + '';
          var index = 0;

          while (index < entries.length) {
            if (entries[index++].key === key) return true;
          }

          return false;
        },
        // `URLSearchParams.prototype.set` method
        // https://url.spec.whatwg.org/#dom-urlsearchparams-set
        set: function set(name, value) {
          validateArgumentsLength(arguments.length, 1);
          var state = getInternalParamsState(this);
          var entries = state.entries;
          var found = false;
          var key = name + '';
          var val = value + '';
          var index = 0;
          var entry;

          for (; index < entries.length; index++) {
            entry = entries[index];

            if (entry.key === key) {
              if (found) entries.splice(index--, 1);else {
                found = true;
                entry.value = val;
              }
            }
          }

          if (!found) entries.push({
            key: key,
            value: val
          });
          state.updateURL();
        },
        // `URLSearchParams.prototype.sort` method
        // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
        sort: function sort() {
          var state = getInternalParamsState(this);
          var entries = state.entries; // Array#sort is not stable in some engines

          var slice = entries.slice();
          var entry, entriesIndex, sliceIndex;
          entries.length = 0;

          for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
            entry = slice[sliceIndex];

            for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {
              if (entries[entriesIndex].key > entry.key) {
                entries.splice(entriesIndex, 0, entry);
                break;
              }
            }

            if (entriesIndex === sliceIndex) entries.push(entry);
          }

          state.updateURL();
        },
        // `URLSearchParams.prototype.forEach` method
        forEach: function forEach(callback
        /* , thisArg */
        ) {
          var entries = getInternalParamsState(this).entries;
          var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : undefined, 3);
          var index = 0;
          var entry;

          while (index < entries.length) {
            entry = entries[index++];
            boundFunction(entry.value, entry.key, this);
          }
        },
        // `URLSearchParams.prototype.keys` method
        keys: function keys() {
          return new URLSearchParamsIterator(this, 'keys');
        },
        // `URLSearchParams.prototype.values` method
        values: function values() {
          return new URLSearchParamsIterator(this, 'values');
        },
        // `URLSearchParams.prototype.entries` method
        entries: function entries() {
          return new URLSearchParamsIterator(this, 'entries');
        }
      }, {
        enumerable: true
      }); // `URLSearchParams.prototype[@@iterator]` method

      redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries); // `URLSearchParams.prototype.toString` method
      // https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior

      redefine(URLSearchParamsPrototype, 'toString', function toString() {
        var entries = getInternalParamsState(this).entries;
        var result = [];
        var index = 0;
        var entry;

        while (index < entries.length) {
          entry = entries[index++];
          result.push(serialize(entry.key) + '=' + serialize(entry.value));
        }

        return result.join('&');
      }, {
        enumerable: true
      });
      setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);
      $({
        global: true,
        forced: !USE_NATIVE_URL
      }, {
        URLSearchParams: URLSearchParamsConstructor
      }); // Wrap `fetch` for correct work with polyfilled `URLSearchParams`
      // https://github.com/zloirock/core-js/issues/674

      if (!USE_NATIVE_URL && typeof $fetch == 'function' && typeof Headers == 'function') {
        $({
          global: true,
          enumerable: true,
          forced: true
        }, {
          fetch: function fetch(input
          /* , init */
          ) {
            var args = [input];
            var init, body, headers;

            if (arguments.length > 1) {
              init = arguments[1];

              if (isObject(init)) {
                body = init.body;

                if (classof(body) === URL_SEARCH_PARAMS) {
                  headers = init.headers ? new Headers(init.headers) : new Headers();

                  if (!headers.has('content-type')) {
                    headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
                  }

                  init = create(init, {
                    body: createPropertyDescriptor(0, String(body)),
                    headers: createPropertyDescriptor(0, headers)
                  });
                }
              }

              args.push(init);
            }

            return $fetch.apply(this, args);
          }
        });
      }

      module.exports = {
        URLSearchParams: URLSearchParamsConstructor,
        getState: getInternalParamsState
      };
    }, {
      "../internals/an-instance": 15,
      "../internals/an-object": 16,
      "../internals/classof": 40,
      "../internals/create-iterator-constructor": 53,
      "../internals/create-property-descriptor": 55,
      "../internals/export": 74,
      "../internals/function-bind-context": 79,
      "../internals/get-built-in": 82,
      "../internals/get-iterator": 84,
      "../internals/get-iterator-method": 83,
      "../internals/has": 89,
      "../internals/internal-state": 99,
      "../internals/is-object": 104,
      "../internals/native-url": 122,
      "../internals/object-create": 131,
      "../internals/redefine": 152,
      "../internals/redefine-all": 151,
      "../internals/set-to-string-tag": 165,
      "../internals/well-known-symbol": 197,
      "../modules/es.array.iterator": 217
    }],
    559: [function (require, module, exports) {
      'use strict'; // TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`

      require('../modules/es.string.iterator');

      var $ = require('../internals/export');

      var DESCRIPTORS = require('../internals/descriptors');

      var USE_NATIVE_URL = require('../internals/native-url');

      var global = require('../internals/global');

      var defineProperties = require('../internals/object-define-properties');

      var redefine = require('../internals/redefine');

      var anInstance = require('../internals/an-instance');

      var has = require('../internals/has');

      var assign = require('../internals/object-assign');

      var arrayFrom = require('../internals/array-from');

      var codeAt = require('../internals/string-multibyte').codeAt;

      var toASCII = require('../internals/string-punycode-to-ascii');

      var setToStringTag = require('../internals/set-to-string-tag');

      var URLSearchParamsModule = require('../modules/web.url-search-params');

      var InternalStateModule = require('../internals/internal-state');

      var NativeURL = global.URL;
      var URLSearchParams = URLSearchParamsModule.URLSearchParams;
      var getInternalSearchParamsState = URLSearchParamsModule.getState;
      var setInternalState = InternalStateModule.set;
      var getInternalURLState = InternalStateModule.getterFor('URL');
      var floor = Math.floor;
      var pow = Math.pow;
      var INVALID_AUTHORITY = 'Invalid authority';
      var INVALID_SCHEME = 'Invalid scheme';
      var INVALID_HOST = 'Invalid host';
      var INVALID_PORT = 'Invalid port';
      var ALPHA = /[A-Za-z]/; // eslint-disable-next-line regexp/no-obscure-range -- safe

      var ALPHANUMERIC = /[\d+-.A-Za-z]/;
      var DIGIT = /\d/;
      var HEX_START = /^0x/i;
      var OCT = /^[0-7]+$/;
      var DEC = /^\d+$/;
      var HEX = /^[\dA-Fa-f]+$/;
      /* eslint-disable no-control-regex -- safe */

      var FORBIDDEN_HOST_CODE_POINT = /[\0\t\n\r #%/:<>?@[\\\]^|]/;
      var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\0\t\n\r #/:<>?@[\\\]^|]/;
      var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u001F ]+|[\u0000-\u001F ]+$/g;
      var TAB_AND_NEW_LINE = /[\t\n\r]/g;
      /* eslint-enable no-control-regex -- safe */

      var EOF;

      var parseHost = function parseHost(url, input) {
        var result, codePoints, index;

        if (input.charAt(0) == '[') {
          if (input.charAt(input.length - 1) != ']') return INVALID_HOST;
          result = parseIPv6(input.slice(1, -1));
          if (!result) return INVALID_HOST;
          url.host = result; // opaque host
        } else if (!isSpecial(url)) {
          if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input)) return INVALID_HOST;
          result = '';
          codePoints = arrayFrom(input);

          for (index = 0; index < codePoints.length; index++) {
            result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
          }

          url.host = result;
        } else {
          input = toASCII(input);
          if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;
          result = parseIPv4(input);
          if (result === null) return INVALID_HOST;
          url.host = result;
        }
      };

      var parseIPv4 = function parseIPv4(input) {
        var parts = input.split('.');
        var partsLength, numbers, index, part, radix, number, ipv4;

        if (parts.length && parts[parts.length - 1] == '') {
          parts.pop();
        }

        partsLength = parts.length;
        if (partsLength > 4) return input;
        numbers = [];

        for (index = 0; index < partsLength; index++) {
          part = parts[index];
          if (part == '') return input;
          radix = 10;

          if (part.length > 1 && part.charAt(0) == '0') {
            radix = HEX_START.test(part) ? 16 : 8;
            part = part.slice(radix == 8 ? 1 : 2);
          }

          if (part === '') {
            number = 0;
          } else {
            if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part)) return input;
            number = parseInt(part, radix);
          }

          numbers.push(number);
        }

        for (index = 0; index < partsLength; index++) {
          number = numbers[index];

          if (index == partsLength - 1) {
            if (number >= pow(256, 5 - partsLength)) return null;
          } else if (number > 255) return null;
        }

        ipv4 = numbers.pop();

        for (index = 0; index < numbers.length; index++) {
          ipv4 += numbers[index] * pow(256, 3 - index);
        }

        return ipv4;
      }; // eslint-disable-next-line max-statements -- TODO


      var parseIPv6 = function parseIPv6(input) {
        var address = [0, 0, 0, 0, 0, 0, 0, 0];
        var pieceIndex = 0;
        var compress = null;
        var pointer = 0;
        var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

        var char = function char() {
          return input.charAt(pointer);
        };

        if (char() == ':') {
          if (input.charAt(1) != ':') return;
          pointer += 2;
          pieceIndex++;
          compress = pieceIndex;
        }

        while (char()) {
          if (pieceIndex == 8) return;

          if (char() == ':') {
            if (compress !== null) return;
            pointer++;
            pieceIndex++;
            compress = pieceIndex;
            continue;
          }

          value = length = 0;

          while (length < 4 && HEX.test(char())) {
            value = value * 16 + parseInt(char(), 16);
            pointer++;
            length++;
          }

          if (char() == '.') {
            if (length == 0) return;
            pointer -= length;
            if (pieceIndex > 6) return;
            numbersSeen = 0;

            while (char()) {
              ipv4Piece = null;

              if (numbersSeen > 0) {
                if (char() == '.' && numbersSeen < 4) pointer++;else return;
              }

              if (!DIGIT.test(char())) return;

              while (DIGIT.test(char())) {
                number = parseInt(char(), 10);
                if (ipv4Piece === null) ipv4Piece = number;else if (ipv4Piece == 0) return;else ipv4Piece = ipv4Piece * 10 + number;
                if (ipv4Piece > 255) return;
                pointer++;
              }

              address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
              numbersSeen++;
              if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
            }

            if (numbersSeen != 4) return;
            break;
          } else if (char() == ':') {
            pointer++;
            if (!char()) return;
          } else if (char()) return;

          address[pieceIndex++] = value;
        }

        if (compress !== null) {
          swaps = pieceIndex - compress;
          pieceIndex = 7;

          while (pieceIndex != 0 && swaps > 0) {
            swap = address[pieceIndex];
            address[pieceIndex--] = address[compress + swaps - 1];
            address[compress + --swaps] = swap;
          }
        } else if (pieceIndex != 8) return;

        return address;
      };

      var findLongestZeroSequence = function findLongestZeroSequence(ipv6) {
        var maxIndex = null;
        var maxLength = 1;
        var currStart = null;
        var currLength = 0;
        var index = 0;

        for (; index < 8; index++) {
          if (ipv6[index] !== 0) {
            if (currLength > maxLength) {
              maxIndex = currStart;
              maxLength = currLength;
            }

            currStart = null;
            currLength = 0;
          } else {
            if (currStart === null) currStart = index;
            ++currLength;
          }
        }

        if (currLength > maxLength) {
          maxIndex = currStart;
          maxLength = currLength;
        }

        return maxIndex;
      };

      var serializeHost = function serializeHost(host) {
        var result, index, compress, ignore0; // ipv4

        if (typeof host == 'number') {
          result = [];

          for (index = 0; index < 4; index++) {
            result.unshift(host % 256);
            host = floor(host / 256);
          }

          return result.join('.'); // ipv6
        } else if (typeof host == 'object') {
          result = '';
          compress = findLongestZeroSequence(host);

          for (index = 0; index < 8; index++) {
            if (ignore0 && host[index] === 0) continue;
            if (ignore0) ignore0 = false;

            if (compress === index) {
              result += index ? ':' : '::';
              ignore0 = true;
            } else {
              result += host[index].toString(16);
              if (index < 7) result += ':';
            }
          }

          return '[' + result + ']';
        }

        return host;
      };

      var C0ControlPercentEncodeSet = {};
      var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
        ' ': 1,
        '"': 1,
        '<': 1,
        '>': 1,
        '`': 1
      });
      var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
        '#': 1,
        '?': 1,
        '{': 1,
        '}': 1
      });
      var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
        '/': 1,
        ':': 1,
        ';': 1,
        '=': 1,
        '@': 1,
        '[': 1,
        '\\': 1,
        ']': 1,
        '^': 1,
        '|': 1
      });

      var percentEncode = function percentEncode(char, set) {
        var code = codeAt(char, 0);
        return code > 0x20 && code < 0x7F && !has(set, char) ? char : encodeURIComponent(char);
      };

      var specialSchemes = {
        ftp: 21,
        file: null,
        http: 80,
        https: 443,
        ws: 80,
        wss: 443
      };

      var isSpecial = function isSpecial(url) {
        return has(specialSchemes, url.scheme);
      };

      var includesCredentials = function includesCredentials(url) {
        return url.username != '' || url.password != '';
      };

      var cannotHaveUsernamePasswordPort = function cannotHaveUsernamePasswordPort(url) {
        return !url.host || url.cannotBeABaseURL || url.scheme == 'file';
      };

      var isWindowsDriveLetter = function isWindowsDriveLetter(string, normalized) {
        var second;
        return string.length == 2 && ALPHA.test(string.charAt(0)) && ((second = string.charAt(1)) == ':' || !normalized && second == '|');
      };

      var startsWithWindowsDriveLetter = function startsWithWindowsDriveLetter(string) {
        var third;
        return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (string.length == 2 || (third = string.charAt(2)) === '/' || third === '\\' || third === '?' || third === '#');
      };

      var shortenURLsPath = function shortenURLsPath(url) {
        var path = url.path;
        var pathSize = path.length;

        if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
          path.pop();
        }
      };

      var isSingleDot = function isSingleDot(segment) {
        return segment === '.' || segment.toLowerCase() === '%2e';
      };

      var isDoubleDot = function isDoubleDot(segment) {
        segment = segment.toLowerCase();
        return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
      }; // States:


      var SCHEME_START = {};
      var SCHEME = {};
      var NO_SCHEME = {};
      var SPECIAL_RELATIVE_OR_AUTHORITY = {};
      var PATH_OR_AUTHORITY = {};
      var RELATIVE = {};
      var RELATIVE_SLASH = {};
      var SPECIAL_AUTHORITY_SLASHES = {};
      var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
      var AUTHORITY = {};
      var HOST = {};
      var HOSTNAME = {};
      var PORT = {};
      var FILE = {};
      var FILE_SLASH = {};
      var FILE_HOST = {};
      var PATH_START = {};
      var PATH = {};
      var CANNOT_BE_A_BASE_URL_PATH = {};
      var QUERY = {};
      var FRAGMENT = {}; // eslint-disable-next-line max-statements -- TODO

      var parseURL = function parseURL(url, input, stateOverride, base) {
        var state = stateOverride || SCHEME_START;
        var pointer = 0;
        var buffer = '';
        var seenAt = false;
        var seenBracket = false;
        var seenPasswordToken = false;
        var codePoints, char, bufferCodePoints, failure;

        if (!stateOverride) {
          url.scheme = '';
          url.username = '';
          url.password = '';
          url.host = null;
          url.port = null;
          url.path = [];
          url.query = null;
          url.fragment = null;
          url.cannotBeABaseURL = false;
          input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
        }

        input = input.replace(TAB_AND_NEW_LINE, '');
        codePoints = arrayFrom(input);

        while (pointer <= codePoints.length) {
          char = codePoints[pointer];

          switch (state) {
            case SCHEME_START:
              if (char && ALPHA.test(char)) {
                buffer += char.toLowerCase();
                state = SCHEME;
              } else if (!stateOverride) {
                state = NO_SCHEME;
                continue;
              } else return INVALID_SCHEME;

              break;

            case SCHEME:
              if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) {
                buffer += char.toLowerCase();
              } else if (char == ':') {
                if (stateOverride && (isSpecial(url) != has(specialSchemes, buffer) || buffer == 'file' && (includesCredentials(url) || url.port !== null) || url.scheme == 'file' && !url.host)) return;
                url.scheme = buffer;

                if (stateOverride) {
                  if (isSpecial(url) && specialSchemes[url.scheme] == url.port) url.port = null;
                  return;
                }

                buffer = '';

                if (url.scheme == 'file') {
                  state = FILE;
                } else if (isSpecial(url) && base && base.scheme == url.scheme) {
                  state = SPECIAL_RELATIVE_OR_AUTHORITY;
                } else if (isSpecial(url)) {
                  state = SPECIAL_AUTHORITY_SLASHES;
                } else if (codePoints[pointer + 1] == '/') {
                  state = PATH_OR_AUTHORITY;
                  pointer++;
                } else {
                  url.cannotBeABaseURL = true;
                  url.path.push('');
                  state = CANNOT_BE_A_BASE_URL_PATH;
                }
              } else if (!stateOverride) {
                buffer = '';
                state = NO_SCHEME;
                pointer = 0;
                continue;
              } else return INVALID_SCHEME;

              break;

            case NO_SCHEME:
              if (!base || base.cannotBeABaseURL && char != '#') return INVALID_SCHEME;

              if (base.cannotBeABaseURL && char == '#') {
                url.scheme = base.scheme;
                url.path = base.path.slice();
                url.query = base.query;
                url.fragment = '';
                url.cannotBeABaseURL = true;
                state = FRAGMENT;
                break;
              }

              state = base.scheme == 'file' ? FILE : RELATIVE;
              continue;

            case SPECIAL_RELATIVE_OR_AUTHORITY:
              if (char == '/' && codePoints[pointer + 1] == '/') {
                state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                pointer++;
              } else {
                state = RELATIVE;
                continue;
              }

              break;

            case PATH_OR_AUTHORITY:
              if (char == '/') {
                state = AUTHORITY;
                break;
              } else {
                state = PATH;
                continue;
              }

            case RELATIVE:
              url.scheme = base.scheme;

              if (char == EOF) {
                url.username = base.username;
                url.password = base.password;
                url.host = base.host;
                url.port = base.port;
                url.path = base.path.slice();
                url.query = base.query;
              } else if (char == '/' || char == '\\' && isSpecial(url)) {
                state = RELATIVE_SLASH;
              } else if (char == '?') {
                url.username = base.username;
                url.password = base.password;
                url.host = base.host;
                url.port = base.port;
                url.path = base.path.slice();
                url.query = '';
                state = QUERY;
              } else if (char == '#') {
                url.username = base.username;
                url.password = base.password;
                url.host = base.host;
                url.port = base.port;
                url.path = base.path.slice();
                url.query = base.query;
                url.fragment = '';
                state = FRAGMENT;
              } else {
                url.username = base.username;
                url.password = base.password;
                url.host = base.host;
                url.port = base.port;
                url.path = base.path.slice();
                url.path.pop();
                state = PATH;
                continue;
              }

              break;

            case RELATIVE_SLASH:
              if (isSpecial(url) && (char == '/' || char == '\\')) {
                state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
              } else if (char == '/') {
                state = AUTHORITY;
              } else {
                url.username = base.username;
                url.password = base.password;
                url.host = base.host;
                url.port = base.port;
                state = PATH;
                continue;
              }

              break;

            case SPECIAL_AUTHORITY_SLASHES:
              state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
              if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;
              pointer++;
              break;

            case SPECIAL_AUTHORITY_IGNORE_SLASHES:
              if (char != '/' && char != '\\') {
                state = AUTHORITY;
                continue;
              }

              break;

            case AUTHORITY:
              if (char == '@') {
                if (seenAt) buffer = '%40' + buffer;
                seenAt = true;
                bufferCodePoints = arrayFrom(buffer);

                for (var i = 0; i < bufferCodePoints.length; i++) {
                  var codePoint = bufferCodePoints[i];

                  if (codePoint == ':' && !seenPasswordToken) {
                    seenPasswordToken = true;
                    continue;
                  }

                  var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
                  if (seenPasswordToken) url.password += encodedCodePoints;else url.username += encodedCodePoints;
                }

                buffer = '';
              } else if (char == EOF || char == '/' || char == '?' || char == '#' || char == '\\' && isSpecial(url)) {
                if (seenAt && buffer == '') return INVALID_AUTHORITY;
                pointer -= arrayFrom(buffer).length + 1;
                buffer = '';
                state = HOST;
              } else buffer += char;

              break;

            case HOST:
            case HOSTNAME:
              if (stateOverride && url.scheme == 'file') {
                state = FILE_HOST;
                continue;
              } else if (char == ':' && !seenBracket) {
                if (buffer == '') return INVALID_HOST;
                failure = parseHost(url, buffer);
                if (failure) return failure;
                buffer = '';
                state = PORT;
                if (stateOverride == HOSTNAME) return;
              } else if (char == EOF || char == '/' || char == '?' || char == '#' || char == '\\' && isSpecial(url)) {
                if (isSpecial(url) && buffer == '') return INVALID_HOST;
                if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null)) return;
                failure = parseHost(url, buffer);
                if (failure) return failure;
                buffer = '';
                state = PATH_START;
                if (stateOverride) return;
                continue;
              } else {
                if (char == '[') seenBracket = true;else if (char == ']') seenBracket = false;
                buffer += char;
              }

              break;

            case PORT:
              if (DIGIT.test(char)) {
                buffer += char;
              } else if (char == EOF || char == '/' || char == '?' || char == '#' || char == '\\' && isSpecial(url) || stateOverride) {
                if (buffer != '') {
                  var port = parseInt(buffer, 10);
                  if (port > 0xFFFF) return INVALID_PORT;
                  url.port = isSpecial(url) && port === specialSchemes[url.scheme] ? null : port;
                  buffer = '';
                }

                if (stateOverride) return;
                state = PATH_START;
                continue;
              } else return INVALID_PORT;

              break;

            case FILE:
              url.scheme = 'file';
              if (char == '/' || char == '\\') state = FILE_SLASH;else if (base && base.scheme == 'file') {
                if (char == EOF) {
                  url.host = base.host;
                  url.path = base.path.slice();
                  url.query = base.query;
                } else if (char == '?') {
                  url.host = base.host;
                  url.path = base.path.slice();
                  url.query = '';
                  state = QUERY;
                } else if (char == '#') {
                  url.host = base.host;
                  url.path = base.path.slice();
                  url.query = base.query;
                  url.fragment = '';
                  state = FRAGMENT;
                } else {
                  if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
                    url.host = base.host;
                    url.path = base.path.slice();
                    shortenURLsPath(url);
                  }

                  state = PATH;
                  continue;
                }
              } else {
                state = PATH;
                continue;
              }
              break;

            case FILE_SLASH:
              if (char == '/' || char == '\\') {
                state = FILE_HOST;
                break;
              }

              if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
                if (isWindowsDriveLetter(base.path[0], true)) url.path.push(base.path[0]);else url.host = base.host;
              }

              state = PATH;
              continue;

            case FILE_HOST:
              if (char == EOF || char == '/' || char == '\\' || char == '?' || char == '#') {
                if (!stateOverride && isWindowsDriveLetter(buffer)) {
                  state = PATH;
                } else if (buffer == '') {
                  url.host = '';
                  if (stateOverride) return;
                  state = PATH_START;
                } else {
                  failure = parseHost(url, buffer);
                  if (failure) return failure;
                  if (url.host == 'localhost') url.host = '';
                  if (stateOverride) return;
                  buffer = '';
                  state = PATH_START;
                }

                continue;
              } else buffer += char;

              break;

            case PATH_START:
              if (isSpecial(url)) {
                state = PATH;
                if (char != '/' && char != '\\') continue;
              } else if (!stateOverride && char == '?') {
                url.query = '';
                state = QUERY;
              } else if (!stateOverride && char == '#') {
                url.fragment = '';
                state = FRAGMENT;
              } else if (char != EOF) {
                state = PATH;
                if (char != '/') continue;
              }

              break;

            case PATH:
              if (char == EOF || char == '/' || char == '\\' && isSpecial(url) || !stateOverride && (char == '?' || char == '#')) {
                if (isDoubleDot(buffer)) {
                  shortenURLsPath(url);

                  if (char != '/' && !(char == '\\' && isSpecial(url))) {
                    url.path.push('');
                  }
                } else if (isSingleDot(buffer)) {
                  if (char != '/' && !(char == '\\' && isSpecial(url))) {
                    url.path.push('');
                  }
                } else {
                  if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
                    if (url.host) url.host = '';
                    buffer = buffer.charAt(0) + ':'; // normalize windows drive letter
                  }

                  url.path.push(buffer);
                }

                buffer = '';

                if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) {
                  while (url.path.length > 1 && url.path[0] === '') {
                    url.path.shift();
                  }
                }

                if (char == '?') {
                  url.query = '';
                  state = QUERY;
                } else if (char == '#') {
                  url.fragment = '';
                  state = FRAGMENT;
                }
              } else {
                buffer += percentEncode(char, pathPercentEncodeSet);
              }

              break;

            case CANNOT_BE_A_BASE_URL_PATH:
              if (char == '?') {
                url.query = '';
                state = QUERY;
              } else if (char == '#') {
                url.fragment = '';
                state = FRAGMENT;
              } else if (char != EOF) {
                url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
              }

              break;

            case QUERY:
              if (!stateOverride && char == '#') {
                url.fragment = '';
                state = FRAGMENT;
              } else if (char != EOF) {
                if (char == "'" && isSpecial(url)) url.query += '%27';else if (char == '#') url.query += '%23';else url.query += percentEncode(char, C0ControlPercentEncodeSet);
              }

              break;

            case FRAGMENT:
              if (char != EOF) url.fragment += percentEncode(char, fragmentPercentEncodeSet);
              break;
          }

          pointer++;
        }
      }; // `URL` constructor
      // https://url.spec.whatwg.org/#url-class


      var URLConstructor = function URL(url
      /* , base */
      ) {
        var that = anInstance(this, URLConstructor, 'URL');
        var base = arguments.length > 1 ? arguments[1] : undefined;
        var urlString = String(url);
        var state = setInternalState(that, {
          type: 'URL'
        });
        var baseState, failure;

        if (base !== undefined) {
          if (base instanceof URLConstructor) baseState = getInternalURLState(base);else {
            failure = parseURL(baseState = {}, String(base));
            if (failure) throw TypeError(failure);
          }
        }

        failure = parseURL(state, urlString, null, baseState);
        if (failure) throw TypeError(failure);
        var searchParams = state.searchParams = new URLSearchParams();
        var searchParamsState = getInternalSearchParamsState(searchParams);
        searchParamsState.updateSearchParams(state.query);

        searchParamsState.updateURL = function () {
          state.query = String(searchParams) || null;
        };

        if (!DESCRIPTORS) {
          that.href = serializeURL.call(that);
          that.origin = getOrigin.call(that);
          that.protocol = getProtocol.call(that);
          that.username = getUsername.call(that);
          that.password = getPassword.call(that);
          that.host = getHost.call(that);
          that.hostname = getHostname.call(that);
          that.port = getPort.call(that);
          that.pathname = getPathname.call(that);
          that.search = getSearch.call(that);
          that.searchParams = getSearchParams.call(that);
          that.hash = getHash.call(that);
        }
      };

      var URLPrototype = URLConstructor.prototype;

      var serializeURL = function serializeURL() {
        var url = getInternalURLState(this);
        var scheme = url.scheme;
        var username = url.username;
        var password = url.password;
        var host = url.host;
        var port = url.port;
        var path = url.path;
        var query = url.query;
        var fragment = url.fragment;
        var output = scheme + ':';

        if (host !== null) {
          output += '//';

          if (includesCredentials(url)) {
            output += username + (password ? ':' + password : '') + '@';
          }

          output += serializeHost(host);
          if (port !== null) output += ':' + port;
        } else if (scheme == 'file') output += '//';

        output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
        if (query !== null) output += '?' + query;
        if (fragment !== null) output += '#' + fragment;
        return output;
      };

      var getOrigin = function getOrigin() {
        var url = getInternalURLState(this);
        var scheme = url.scheme;
        var port = url.port;
        if (scheme == 'blob') try {
          return new URLConstructor(scheme.path[0]).origin;
        } catch (error) {
          return 'null';
        }
        if (scheme == 'file' || !isSpecial(url)) return 'null';
        return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');
      };

      var getProtocol = function getProtocol() {
        return getInternalURLState(this).scheme + ':';
      };

      var getUsername = function getUsername() {
        return getInternalURLState(this).username;
      };

      var getPassword = function getPassword() {
        return getInternalURLState(this).password;
      };

      var getHost = function getHost() {
        var url = getInternalURLState(this);
        var host = url.host;
        var port = url.port;
        return host === null ? '' : port === null ? serializeHost(host) : serializeHost(host) + ':' + port;
      };

      var getHostname = function getHostname() {
        var host = getInternalURLState(this).host;
        return host === null ? '' : serializeHost(host);
      };

      var getPort = function getPort() {
        var port = getInternalURLState(this).port;
        return port === null ? '' : String(port);
      };

      var getPathname = function getPathname() {
        var url = getInternalURLState(this);
        var path = url.path;
        return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
      };

      var getSearch = function getSearch() {
        var query = getInternalURLState(this).query;
        return query ? '?' + query : '';
      };

      var getSearchParams = function getSearchParams() {
        return getInternalURLState(this).searchParams;
      };

      var getHash = function getHash() {
        var fragment = getInternalURLState(this).fragment;
        return fragment ? '#' + fragment : '';
      };

      var accessorDescriptor = function accessorDescriptor(getter, setter) {
        return {
          get: getter,
          set: setter,
          configurable: true,
          enumerable: true
        };
      };

      if (DESCRIPTORS) {
        defineProperties(URLPrototype, {
          // `URL.prototype.href` accessors pair
          // https://url.spec.whatwg.org/#dom-url-href
          href: accessorDescriptor(serializeURL, function (href) {
            var url = getInternalURLState(this);
            var urlString = String(href);
            var failure = parseURL(url, urlString);
            if (failure) throw TypeError(failure);
            getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
          }),
          // `URL.prototype.origin` getter
          // https://url.spec.whatwg.org/#dom-url-origin
          origin: accessorDescriptor(getOrigin),
          // `URL.prototype.protocol` accessors pair
          // https://url.spec.whatwg.org/#dom-url-protocol
          protocol: accessorDescriptor(getProtocol, function (protocol) {
            var url = getInternalURLState(this);
            parseURL(url, String(protocol) + ':', SCHEME_START);
          }),
          // `URL.prototype.username` accessors pair
          // https://url.spec.whatwg.org/#dom-url-username
          username: accessorDescriptor(getUsername, function (username) {
            var url = getInternalURLState(this);
            var codePoints = arrayFrom(String(username));
            if (cannotHaveUsernamePasswordPort(url)) return;
            url.username = '';

            for (var i = 0; i < codePoints.length; i++) {
              url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
            }
          }),
          // `URL.prototype.password` accessors pair
          // https://url.spec.whatwg.org/#dom-url-password
          password: accessorDescriptor(getPassword, function (password) {
            var url = getInternalURLState(this);
            var codePoints = arrayFrom(String(password));
            if (cannotHaveUsernamePasswordPort(url)) return;
            url.password = '';

            for (var i = 0; i < codePoints.length; i++) {
              url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
            }
          }),
          // `URL.prototype.host` accessors pair
          // https://url.spec.whatwg.org/#dom-url-host
          host: accessorDescriptor(getHost, function (host) {
            var url = getInternalURLState(this);
            if (url.cannotBeABaseURL) return;
            parseURL(url, String(host), HOST);
          }),
          // `URL.prototype.hostname` accessors pair
          // https://url.spec.whatwg.org/#dom-url-hostname
          hostname: accessorDescriptor(getHostname, function (hostname) {
            var url = getInternalURLState(this);
            if (url.cannotBeABaseURL) return;
            parseURL(url, String(hostname), HOSTNAME);
          }),
          // `URL.prototype.port` accessors pair
          // https://url.spec.whatwg.org/#dom-url-port
          port: accessorDescriptor(getPort, function (port) {
            var url = getInternalURLState(this);
            if (cannotHaveUsernamePasswordPort(url)) return;
            port = String(port);
            if (port == '') url.port = null;else parseURL(url, port, PORT);
          }),
          // `URL.prototype.pathname` accessors pair
          // https://url.spec.whatwg.org/#dom-url-pathname
          pathname: accessorDescriptor(getPathname, function (pathname) {
            var url = getInternalURLState(this);
            if (url.cannotBeABaseURL) return;
            url.path = [];
            parseURL(url, pathname + '', PATH_START);
          }),
          // `URL.prototype.search` accessors pair
          // https://url.spec.whatwg.org/#dom-url-search
          search: accessorDescriptor(getSearch, function (search) {
            var url = getInternalURLState(this);
            search = String(search);

            if (search == '') {
              url.query = null;
            } else {
              if ('?' == search.charAt(0)) search = search.slice(1);
              url.query = '';
              parseURL(url, search, QUERY);
            }

            getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
          }),
          // `URL.prototype.searchParams` getter
          // https://url.spec.whatwg.org/#dom-url-searchparams
          searchParams: accessorDescriptor(getSearchParams),
          // `URL.prototype.hash` accessors pair
          // https://url.spec.whatwg.org/#dom-url-hash
          hash: accessorDescriptor(getHash, function (hash) {
            var url = getInternalURLState(this);
            hash = String(hash);

            if (hash == '') {
              url.fragment = null;
              return;
            }

            if ('#' == hash.charAt(0)) hash = hash.slice(1);
            url.fragment = '';
            parseURL(url, hash, FRAGMENT);
          })
        });
      } // `URL.prototype.toJSON` method
      // https://url.spec.whatwg.org/#dom-url-tojson


      redefine(URLPrototype, 'toJSON', function toJSON() {
        return serializeURL.call(this);
      }, {
        enumerable: true
      }); // `URL.prototype.toString` method
      // https://url.spec.whatwg.org/#URL-stringification-behavior

      redefine(URLPrototype, 'toString', function toString() {
        return serializeURL.call(this);
      }, {
        enumerable: true
      });

      if (NativeURL) {
        var nativeCreateObjectURL = NativeURL.createObjectURL;
        var nativeRevokeObjectURL = NativeURL.revokeObjectURL; // `URL.createObjectURL` method
        // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
        // eslint-disable-next-line no-unused-vars -- required for `.length`

        if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', function createObjectURL(blob) {
          return nativeCreateObjectURL.apply(NativeURL, arguments);
        }); // `URL.revokeObjectURL` method
        // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
        // eslint-disable-next-line no-unused-vars -- required for `.length`

        if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL(url) {
          return nativeRevokeObjectURL.apply(NativeURL, arguments);
        });
      }

      setToStringTag(URLConstructor, 'URL');
      $({
        global: true,
        forced: !USE_NATIVE_URL,
        sham: !DESCRIPTORS
      }, {
        URL: URLConstructor
      });
    }, {
      "../internals/an-instance": 15,
      "../internals/array-from": 23,
      "../internals/descriptors": 61,
      "../internals/export": 74,
      "../internals/global": 88,
      "../internals/has": 89,
      "../internals/internal-state": 99,
      "../internals/native-url": 122,
      "../internals/object-assign": 130,
      "../internals/object-define-properties": 132,
      "../internals/redefine": 152,
      "../internals/set-to-string-tag": 165,
      "../internals/string-multibyte": 171,
      "../internals/string-punycode-to-ascii": 174,
      "../modules/es.string.iterator": 344,
      "../modules/web.url-search-params": 558
    }],
    560: [function (require, module, exports) {
      'use strict';

      var $ = require('../internals/export'); // `URL.prototype.toJSON` method
      // https://url.spec.whatwg.org/#dom-url-tojson


      $({
        target: 'URL',
        proto: true,
        enumerable: true
      }, {
        toJSON: function toJSON() {
          return URL.prototype.toString.call(this);
        }
      });
    }, {
      "../internals/export": 74
    }],
    561: [function (require, module, exports) {
      /*!
       * Cropper.js v1.5.7
       * https://fengyuanchen.github.io/cropperjs
       *
       * Copyright 2015-present Chen Fengyuan
       * Released under the MIT license
       *
       * Date: 2020-05-23T05:23:00.081Z
       */
      (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = global || self, global.Cropper = factory());
      })(this, function () {
        'use strict';

        function _typeof(obj) {
          "@babel/helpers - typeof";

          if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof = function _typeof(obj) {
              return typeof obj;
            };
          } else {
            _typeof = function _typeof(obj) {
              return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
          }

          return _typeof(obj);
        }

        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }

        function _defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }

        function _createClass(Constructor, protoProps, staticProps) {
          if (protoProps) _defineProperties(Constructor.prototype, protoProps);
          if (staticProps) _defineProperties(Constructor, staticProps);
          return Constructor;
        }

        function _defineProperty(obj, key, value) {
          if (key in obj) {
            Object.defineProperty(obj, key, {
              value: value,
              enumerable: true,
              configurable: true,
              writable: true
            });
          } else {
            obj[key] = value;
          }

          return obj;
        }

        function ownKeys(object, enumerableOnly) {
          var keys = Object.keys(object);

          if (Object.getOwnPropertySymbols) {
            var symbols = Object.getOwnPropertySymbols(object);
            if (enumerableOnly) symbols = symbols.filter(function (sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
            keys.push.apply(keys, symbols);
          }

          return keys;
        }

        function _objectSpread2(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i] != null ? arguments[i] : {};

            if (i % 2) {
              ownKeys(Object(source), true).forEach(function (key) {
                _defineProperty(target, key, source[key]);
              });
            } else if (Object.getOwnPropertyDescriptors) {
              Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
            } else {
              ownKeys(Object(source)).forEach(function (key) {
                Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
              });
            }
          }

          return target;
        }

        function _toConsumableArray(arr) {
          return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
        }

        function _arrayWithoutHoles(arr) {
          if (Array.isArray(arr)) return _arrayLikeToArray(arr);
        }

        function _iterableToArray(iter) {
          if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
        }

        function _unsupportedIterableToArray(o, minLen) {
          if (!o) return;
          if (typeof o === "string") return _arrayLikeToArray(o, minLen);
          var n = Object.prototype.toString.call(o).slice(8, -1);
          if (n === "Object" && o.constructor) n = o.constructor.name;
          if (n === "Map" || n === "Set") return Array.from(o);
          if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
        }

        function _arrayLikeToArray(arr, len) {
          if (len == null || len > arr.length) len = arr.length;

          for (var i = 0, arr2 = new Array(len); i < len; i++) {
            arr2[i] = arr[i];
          }

          return arr2;
        }

        function _nonIterableSpread() {
          throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }

        var IS_BROWSER = typeof window !== 'undefined' && typeof window.document !== 'undefined';
        var WINDOW = IS_BROWSER ? window : {};
        var IS_TOUCH_DEVICE = IS_BROWSER && WINDOW.document.documentElement ? 'ontouchstart' in WINDOW.document.documentElement : false;
        var HAS_POINTER_EVENT = IS_BROWSER ? 'PointerEvent' in WINDOW : false;
        var NAMESPACE = 'cropper'; // Actions

        var ACTION_ALL = 'all';
        var ACTION_CROP = 'crop';
        var ACTION_MOVE = 'move';
        var ACTION_ZOOM = 'zoom';
        var ACTION_EAST = 'e';
        var ACTION_WEST = 'w';
        var ACTION_SOUTH = 's';
        var ACTION_NORTH = 'n';
        var ACTION_NORTH_EAST = 'ne';
        var ACTION_NORTH_WEST = 'nw';
        var ACTION_SOUTH_EAST = 'se';
        var ACTION_SOUTH_WEST = 'sw'; // Classes

        var CLASS_CROP = "".concat(NAMESPACE, "-crop");
        var CLASS_DISABLED = "".concat(NAMESPACE, "-disabled");
        var CLASS_HIDDEN = "".concat(NAMESPACE, "-hidden");
        var CLASS_HIDE = "".concat(NAMESPACE, "-hide");
        var CLASS_INVISIBLE = "".concat(NAMESPACE, "-invisible");
        var CLASS_MODAL = "".concat(NAMESPACE, "-modal");
        var CLASS_MOVE = "".concat(NAMESPACE, "-move"); // Data keys

        var DATA_ACTION = "".concat(NAMESPACE, "Action");
        var DATA_PREVIEW = "".concat(NAMESPACE, "Preview"); // Drag modes

        var DRAG_MODE_CROP = 'crop';
        var DRAG_MODE_MOVE = 'move';
        var DRAG_MODE_NONE = 'none'; // Events

        var EVENT_CROP = 'crop';
        var EVENT_CROP_END = 'cropend';
        var EVENT_CROP_MOVE = 'cropmove';
        var EVENT_CROP_START = 'cropstart';
        var EVENT_DBLCLICK = 'dblclick';
        var EVENT_TOUCH_START = IS_TOUCH_DEVICE ? 'touchstart' : 'mousedown';
        var EVENT_TOUCH_MOVE = IS_TOUCH_DEVICE ? 'touchmove' : 'mousemove';
        var EVENT_TOUCH_END = IS_TOUCH_DEVICE ? 'touchend touchcancel' : 'mouseup';
        var EVENT_POINTER_DOWN = HAS_POINTER_EVENT ? 'pointerdown' : EVENT_TOUCH_START;
        var EVENT_POINTER_MOVE = HAS_POINTER_EVENT ? 'pointermove' : EVENT_TOUCH_MOVE;
        var EVENT_POINTER_UP = HAS_POINTER_EVENT ? 'pointerup pointercancel' : EVENT_TOUCH_END;
        var EVENT_READY = 'ready';
        var EVENT_RESIZE = 'resize';
        var EVENT_WHEEL = 'wheel';
        var EVENT_ZOOM = 'zoom'; // Mime types

        var MIME_TYPE_JPEG = 'image/jpeg'; // RegExps

        var REGEXP_ACTIONS = /^e|w|s|n|se|sw|ne|nw|all|crop|move|zoom$/;
        var REGEXP_DATA_URL = /^data:/;
        var REGEXP_DATA_URL_JPEG = /^data:image\/jpeg;base64,/;
        var REGEXP_TAG_NAME = /^img|canvas$/i; // Misc

        var DEFAULTS = {
          // Define the view mode of the cropper
          viewMode: 0,
          // 0, 1, 2, 3
          // Define the dragging mode of the cropper
          dragMode: DRAG_MODE_CROP,
          // 'crop', 'move' or 'none'
          // Define the initial aspect ratio of the crop box
          initialAspectRatio: NaN,
          // Define the aspect ratio of the crop box
          aspectRatio: NaN,
          // An object with the previous cropping result data
          data: null,
          // A selector for adding extra containers to preview
          preview: '',
          // Re-render the cropper when resize the window
          responsive: true,
          // Restore the cropped area after resize the window
          restore: true,
          // Check if the current image is a cross-origin image
          checkCrossOrigin: true,
          // Check the current image's Exif Orientation information
          checkOrientation: true,
          // Show the black modal
          modal: true,
          // Show the dashed lines for guiding
          guides: true,
          // Show the center indicator for guiding
          center: true,
          // Show the white modal to highlight the crop box
          highlight: true,
          // Show the grid background
          background: true,
          // Enable to crop the image automatically when initialize
          autoCrop: true,
          // Define the percentage of automatic cropping area when initializes
          autoCropArea: 0.8,
          // Enable to move the image
          movable: true,
          // Enable to rotate the image
          rotatable: true,
          // Enable to scale the image
          scalable: true,
          // Enable to zoom the image
          zoomable: true,
          // Enable to zoom the image by dragging touch
          zoomOnTouch: true,
          // Enable to zoom the image by wheeling mouse
          zoomOnWheel: true,
          // Define zoom ratio when zoom the image by wheeling mouse
          wheelZoomRatio: 0.1,
          // Enable to move the crop box
          cropBoxMovable: true,
          // Enable to resize the crop box
          cropBoxResizable: true,
          // Toggle drag mode between "crop" and "move" when click twice on the cropper
          toggleDragModeOnDblclick: true,
          // Size limitation
          minCanvasWidth: 0,
          minCanvasHeight: 0,
          minCropBoxWidth: 0,
          minCropBoxHeight: 0,
          minContainerWidth: 200,
          minContainerHeight: 100,
          // Shortcuts of events
          ready: null,
          cropstart: null,
          cropmove: null,
          cropend: null,
          crop: null,
          zoom: null
        };
        var TEMPLATE = '<div class="cropper-container" touch-action="none">' + '<div class="cropper-wrap-box">' + '<div class="cropper-canvas"></div>' + '</div>' + '<div class="cropper-drag-box"></div>' + '<div class="cropper-crop-box">' + '<span class="cropper-view-box"></span>' + '<span class="cropper-dashed dashed-h"></span>' + '<span class="cropper-dashed dashed-v"></span>' + '<span class="cropper-center"></span>' + '<span class="cropper-face"></span>' + '<span class="cropper-line line-e" data-cropper-action="e"></span>' + '<span class="cropper-line line-n" data-cropper-action="n"></span>' + '<span class="cropper-line line-w" data-cropper-action="w"></span>' + '<span class="cropper-line line-s" data-cropper-action="s"></span>' + '<span class="cropper-point point-e" data-cropper-action="e"></span>' + '<span class="cropper-point point-n" data-cropper-action="n"></span>' + '<span class="cropper-point point-w" data-cropper-action="w"></span>' + '<span class="cropper-point point-s" data-cropper-action="s"></span>' + '<span class="cropper-point point-ne" data-cropper-action="ne"></span>' + '<span class="cropper-point point-nw" data-cropper-action="nw"></span>' + '<span class="cropper-point point-sw" data-cropper-action="sw"></span>' + '<span class="cropper-point point-se" data-cropper-action="se"></span>' + '</div>' + '</div>';
        /**
         * Check if the given value is not a number.
         */

        var isNaN = Number.isNaN || WINDOW.isNaN;
        /**
         * Check if the given value is a number.
         * @param {*} value - The value to check.
         * @returns {boolean} Returns `true` if the given value is a number, else `false`.
         */

        function isNumber(value) {
          return typeof value === 'number' && !isNaN(value);
        }
        /**
         * Check if the given value is a positive number.
         * @param {*} value - The value to check.
         * @returns {boolean} Returns `true` if the given value is a positive number, else `false`.
         */


        var isPositiveNumber = function isPositiveNumber(value) {
          return value > 0 && value < Infinity;
        };
        /**
         * Check if the given value is undefined.
         * @param {*} value - The value to check.
         * @returns {boolean} Returns `true` if the given value is undefined, else `false`.
         */


        function isUndefined(value) {
          return typeof value === 'undefined';
        }
        /**
         * Check if the given value is an object.
         * @param {*} value - The value to check.
         * @returns {boolean} Returns `true` if the given value is an object, else `false`.
         */


        function isObject(value) {
          return _typeof(value) === 'object' && value !== null;
        }

        var hasOwnProperty = Object.prototype.hasOwnProperty;
        /**
         * Check if the given value is a plain object.
         * @param {*} value - The value to check.
         * @returns {boolean} Returns `true` if the given value is a plain object, else `false`.
         */

        function isPlainObject(value) {
          if (!isObject(value)) {
            return false;
          }

          try {
            var _constructor = value.constructor;
            var prototype = _constructor.prototype;
            return _constructor && prototype && hasOwnProperty.call(prototype, 'isPrototypeOf');
          } catch (error) {
            return false;
          }
        }
        /**
         * Check if the given value is a function.
         * @param {*} value - The value to check.
         * @returns {boolean} Returns `true` if the given value is a function, else `false`.
         */


        function isFunction(value) {
          return typeof value === 'function';
        }

        var slice = Array.prototype.slice;
        /**
         * Convert array-like or iterable object to an array.
         * @param {*} value - The value to convert.
         * @returns {Array} Returns a new array.
         */

        function toArray(value) {
          return Array.from ? Array.from(value) : slice.call(value);
        }
        /**
         * Iterate the given data.
         * @param {*} data - The data to iterate.
         * @param {Function} callback - The process function for each element.
         * @returns {*} The original data.
         */


        function forEach(data, callback) {
          if (data && isFunction(callback)) {
            if (Array.isArray(data) || isNumber(data.length)
            /* array-like */
            ) {
                toArray(data).forEach(function (value, key) {
                  callback.call(data, value, key, data);
                });
              } else if (isObject(data)) {
              Object.keys(data).forEach(function (key) {
                callback.call(data, data[key], key, data);
              });
            }
          }

          return data;
        }
        /**
         * Extend the given object.
         * @param {*} target - The target object to extend.
         * @param {*} args - The rest objects for merging to the target object.
         * @returns {Object} The extended object.
         */


        var assign = Object.assign || function assign(target) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          if (isObject(target) && args.length > 0) {
            args.forEach(function (arg) {
              if (isObject(arg)) {
                Object.keys(arg).forEach(function (key) {
                  target[key] = arg[key];
                });
              }
            });
          }

          return target;
        };

        var REGEXP_DECIMALS = /\.\d*(?:0|9){12}\d*$/;
        /**
         * Normalize decimal number.
         * Check out {@link https://0.30000000000000004.com/}
         * @param {number} value - The value to normalize.
         * @param {number} [times=100000000000] - The times for normalizing.
         * @returns {number} Returns the normalized number.
         */

        function normalizeDecimalNumber(value) {
          var times = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100000000000;
          return REGEXP_DECIMALS.test(value) ? Math.round(value * times) / times : value;
        }

        var REGEXP_SUFFIX = /^width|height|left|top|marginLeft|marginTop$/;
        /**
         * Apply styles to the given element.
         * @param {Element} element - The target element.
         * @param {Object} styles - The styles for applying.
         */

        function setStyle(element, styles) {
          var style = element.style;
          forEach(styles, function (value, property) {
            if (REGEXP_SUFFIX.test(property) && isNumber(value)) {
              value = "".concat(value, "px");
            }

            style[property] = value;
          });
        }
        /**
         * Check if the given element has a special class.
         * @param {Element} element - The element to check.
         * @param {string} value - The class to search.
         * @returns {boolean} Returns `true` if the special class was found.
         */


        function hasClass(element, value) {
          return element.classList ? element.classList.contains(value) : element.className.indexOf(value) > -1;
        }
        /**
         * Add classes to the given element.
         * @param {Element} element - The target element.
         * @param {string} value - The classes to be added.
         */


        function addClass(element, value) {
          if (!value) {
            return;
          }

          if (isNumber(element.length)) {
            forEach(element, function (elem) {
              addClass(elem, value);
            });
            return;
          }

          if (element.classList) {
            element.classList.add(value);
            return;
          }

          var className = element.className.trim();

          if (!className) {
            element.className = value;
          } else if (className.indexOf(value) < 0) {
            element.className = "".concat(className, " ").concat(value);
          }
        }
        /**
         * Remove classes from the given element.
         * @param {Element} element - The target element.
         * @param {string} value - The classes to be removed.
         */


        function removeClass(element, value) {
          if (!value) {
            return;
          }

          if (isNumber(element.length)) {
            forEach(element, function (elem) {
              removeClass(elem, value);
            });
            return;
          }

          if (element.classList) {
            element.classList.remove(value);
            return;
          }

          if (element.className.indexOf(value) >= 0) {
            element.className = element.className.replace(value, '');
          }
        }
        /**
         * Add or remove classes from the given element.
         * @param {Element} element - The target element.
         * @param {string} value - The classes to be toggled.
         * @param {boolean} added - Add only.
         */


        function toggleClass(element, value, added) {
          if (!value) {
            return;
          }

          if (isNumber(element.length)) {
            forEach(element, function (elem) {
              toggleClass(elem, value, added);
            });
            return;
          } // IE10-11 doesn't support the second parameter of `classList.toggle`


          if (added) {
            addClass(element, value);
          } else {
            removeClass(element, value);
          }
        }

        var REGEXP_CAMEL_CASE = /([a-z\d])([A-Z])/g;
        /**
         * Transform the given string from camelCase to kebab-case
         * @param {string} value - The value to transform.
         * @returns {string} The transformed value.
         */

        function toParamCase(value) {
          return value.replace(REGEXP_CAMEL_CASE, '$1-$2').toLowerCase();
        }
        /**
         * Get data from the given element.
         * @param {Element} element - The target element.
         * @param {string} name - The data key to get.
         * @returns {string} The data value.
         */


        function getData(element, name) {
          if (isObject(element[name])) {
            return element[name];
          }

          if (element.dataset) {
            return element.dataset[name];
          }

          return element.getAttribute("data-".concat(toParamCase(name)));
        }
        /**
         * Set data to the given element.
         * @param {Element} element - The target element.
         * @param {string} name - The data key to set.
         * @param {string} data - The data value.
         */


        function setData(element, name, data) {
          if (isObject(data)) {
            element[name] = data;
          } else if (element.dataset) {
            element.dataset[name] = data;
          } else {
            element.setAttribute("data-".concat(toParamCase(name)), data);
          }
        }
        /**
         * Remove data from the given element.
         * @param {Element} element - The target element.
         * @param {string} name - The data key to remove.
         */


        function removeData(element, name) {
          if (isObject(element[name])) {
            try {
              delete element[name];
            } catch (error) {
              element[name] = undefined;
            }
          } else if (element.dataset) {
            // #128 Safari not allows to delete dataset property
            try {
              delete element.dataset[name];
            } catch (error) {
              element.dataset[name] = undefined;
            }
          } else {
            element.removeAttribute("data-".concat(toParamCase(name)));
          }
        }

        var REGEXP_SPACES = /\s\s*/;

        var onceSupported = function () {
          var supported = false;

          if (IS_BROWSER) {
            var once = false;

            var listener = function listener() {};

            var options = Object.defineProperty({}, 'once', {
              get: function get() {
                supported = true;
                return once;
              },

              /**
               * This setter can fix a `TypeError` in strict mode
               * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only}
               * @param {boolean} value - The value to set
               */
              set: function set(value) {
                once = value;
              }
            });
            WINDOW.addEventListener('test', listener, options);
            WINDOW.removeEventListener('test', listener, options);
          }

          return supported;
        }();
        /**
         * Remove event listener from the target element.
         * @param {Element} element - The event target.
         * @param {string} type - The event type(s).
         * @param {Function} listener - The event listener.
         * @param {Object} options - The event options.
         */


        function removeListener(element, type, listener) {
          var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
          var handler = listener;
          type.trim().split(REGEXP_SPACES).forEach(function (event) {
            if (!onceSupported) {
              var listeners = element.listeners;

              if (listeners && listeners[event] && listeners[event][listener]) {
                handler = listeners[event][listener];
                delete listeners[event][listener];

                if (Object.keys(listeners[event]).length === 0) {
                  delete listeners[event];
                }

                if (Object.keys(listeners).length === 0) {
                  delete element.listeners;
                }
              }
            }

            element.removeEventListener(event, handler, options);
          });
        }
        /**
         * Add event listener to the target element.
         * @param {Element} element - The event target.
         * @param {string} type - The event type(s).
         * @param {Function} listener - The event listener.
         * @param {Object} options - The event options.
         */


        function addListener(element, type, listener) {
          var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
          var _handler = listener;
          type.trim().split(REGEXP_SPACES).forEach(function (event) {
            if (options.once && !onceSupported) {
              var _element$listeners = element.listeners,
                  listeners = _element$listeners === void 0 ? {} : _element$listeners;

              _handler = function handler() {
                delete listeners[event][listener];
                element.removeEventListener(event, _handler, options);

                for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                  args[_key2] = arguments[_key2];
                }

                listener.apply(element, args);
              };

              if (!listeners[event]) {
                listeners[event] = {};
              }

              if (listeners[event][listener]) {
                element.removeEventListener(event, listeners[event][listener], options);
              }

              listeners[event][listener] = _handler;
              element.listeners = listeners;
            }

            element.addEventListener(event, _handler, options);
          });
        }
        /**
         * Dispatch event on the target element.
         * @param {Element} element - The event target.
         * @param {string} type - The event type(s).
         * @param {Object} data - The additional event data.
         * @returns {boolean} Indicate if the event is default prevented or not.
         */


        function dispatchEvent(element, type, data) {
          var event; // Event and CustomEvent on IE9-11 are global objects, not constructors

          if (isFunction(Event) && isFunction(CustomEvent)) {
            event = new CustomEvent(type, {
              detail: data,
              bubbles: true,
              cancelable: true
            });
          } else {
            event = document.createEvent('CustomEvent');
            event.initCustomEvent(type, true, true, data);
          }

          return element.dispatchEvent(event);
        }
        /**
         * Get the offset base on the document.
         * @param {Element} element - The target element.
         * @returns {Object} The offset data.
         */


        function getOffset(element) {
          var box = element.getBoundingClientRect();
          return {
            left: box.left + (window.pageXOffset - document.documentElement.clientLeft),
            top: box.top + (window.pageYOffset - document.documentElement.clientTop)
          };
        }

        var location = WINDOW.location;
        var REGEXP_ORIGINS = /^(\w+:)\/\/([^:/?#]*):?(\d*)/i;
        /**
         * Check if the given URL is a cross origin URL.
         * @param {string} url - The target URL.
         * @returns {boolean} Returns `true` if the given URL is a cross origin URL, else `false`.
         */

        function isCrossOriginURL(url) {
          var parts = url.match(REGEXP_ORIGINS);
          return parts !== null && (parts[1] !== location.protocol || parts[2] !== location.hostname || parts[3] !== location.port);
        }
        /**
         * Add timestamp to the given URL.
         * @param {string} url - The target URL.
         * @returns {string} The result URL.
         */


        function addTimestamp(url) {
          var timestamp = "timestamp=".concat(new Date().getTime());
          return url + (url.indexOf('?') === -1 ? '?' : '&') + timestamp;
        }
        /**
         * Get transforms base on the given object.
         * @param {Object} obj - The target object.
         * @returns {string} A string contains transform values.
         */


        function getTransforms(_ref) {
          var rotate = _ref.rotate,
              scaleX = _ref.scaleX,
              scaleY = _ref.scaleY,
              translateX = _ref.translateX,
              translateY = _ref.translateY;
          var values = [];

          if (isNumber(translateX) && translateX !== 0) {
            values.push("translateX(".concat(translateX, "px)"));
          }

          if (isNumber(translateY) && translateY !== 0) {
            values.push("translateY(".concat(translateY, "px)"));
          } // Rotate should come first before scale to match orientation transform


          if (isNumber(rotate) && rotate !== 0) {
            values.push("rotate(".concat(rotate, "deg)"));
          }

          if (isNumber(scaleX) && scaleX !== 1) {
            values.push("scaleX(".concat(scaleX, ")"));
          }

          if (isNumber(scaleY) && scaleY !== 1) {
            values.push("scaleY(".concat(scaleY, ")"));
          }

          var transform = values.length ? values.join(' ') : 'none';
          return {
            WebkitTransform: transform,
            msTransform: transform,
            transform: transform
          };
        }
        /**
         * Get the max ratio of a group of pointers.
         * @param {string} pointers - The target pointers.
         * @returns {number} The result ratio.
         */


        function getMaxZoomRatio(pointers) {
          var pointers2 = _objectSpread2({}, pointers);

          var ratios = [];
          forEach(pointers, function (pointer, pointerId) {
            delete pointers2[pointerId];
            forEach(pointers2, function (pointer2) {
              var x1 = Math.abs(pointer.startX - pointer2.startX);
              var y1 = Math.abs(pointer.startY - pointer2.startY);
              var x2 = Math.abs(pointer.endX - pointer2.endX);
              var y2 = Math.abs(pointer.endY - pointer2.endY);
              var z1 = Math.sqrt(x1 * x1 + y1 * y1);
              var z2 = Math.sqrt(x2 * x2 + y2 * y2);
              var ratio = (z2 - z1) / z1;
              ratios.push(ratio);
            });
          });
          ratios.sort(function (a, b) {
            return Math.abs(a) < Math.abs(b);
          });
          return ratios[0];
        }
        /**
         * Get a pointer from an event object.
         * @param {Object} event - The target event object.
         * @param {boolean} endOnly - Indicates if only returns the end point coordinate or not.
         * @returns {Object} The result pointer contains start and/or end point coordinates.
         */


        function getPointer(_ref2, endOnly) {
          var pageX = _ref2.pageX,
              pageY = _ref2.pageY;
          var end = {
            endX: pageX,
            endY: pageY
          };
          return endOnly ? end : _objectSpread2({
            startX: pageX,
            startY: pageY
          }, end);
        }
        /**
         * Get the center point coordinate of a group of pointers.
         * @param {Object} pointers - The target pointers.
         * @returns {Object} The center point coordinate.
         */


        function getPointersCenter(pointers) {
          var pageX = 0;
          var pageY = 0;
          var count = 0;
          forEach(pointers, function (_ref3) {
            var startX = _ref3.startX,
                startY = _ref3.startY;
            pageX += startX;
            pageY += startY;
            count += 1;
          });
          pageX /= count;
          pageY /= count;
          return {
            pageX: pageX,
            pageY: pageY
          };
        }
        /**
         * Get the max sizes in a rectangle under the given aspect ratio.
         * @param {Object} data - The original sizes.
         * @param {string} [type='contain'] - The adjust type.
         * @returns {Object} The result sizes.
         */


        function getAdjustedSizes(_ref4) // or 'cover'
        {
          var aspectRatio = _ref4.aspectRatio,
              height = _ref4.height,
              width = _ref4.width;
          var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'contain';
          var isValidWidth = isPositiveNumber(width);
          var isValidHeight = isPositiveNumber(height);

          if (isValidWidth && isValidHeight) {
            var adjustedWidth = height * aspectRatio;

            if (type === 'contain' && adjustedWidth > width || type === 'cover' && adjustedWidth < width) {
              height = width / aspectRatio;
            } else {
              width = height * aspectRatio;
            }
          } else if (isValidWidth) {
            height = width / aspectRatio;
          } else if (isValidHeight) {
            width = height * aspectRatio;
          }

          return {
            width: width,
            height: height
          };
        }
        /**
         * Get the new sizes of a rectangle after rotated.
         * @param {Object} data - The original sizes.
         * @returns {Object} The result sizes.
         */


        function getRotatedSizes(_ref5) {
          var width = _ref5.width,
              height = _ref5.height,
              degree = _ref5.degree;
          degree = Math.abs(degree) % 180;

          if (degree === 90) {
            return {
              width: height,
              height: width
            };
          }

          var arc = degree % 90 * Math.PI / 180;
          var sinArc = Math.sin(arc);
          var cosArc = Math.cos(arc);
          var newWidth = width * cosArc + height * sinArc;
          var newHeight = width * sinArc + height * cosArc;
          return degree > 90 ? {
            width: newHeight,
            height: newWidth
          } : {
            width: newWidth,
            height: newHeight
          };
        }
        /**
         * Get a canvas which drew the given image.
         * @param {HTMLImageElement} image - The image for drawing.
         * @param {Object} imageData - The image data.
         * @param {Object} canvasData - The canvas data.
         * @param {Object} options - The options.
         * @returns {HTMLCanvasElement} The result canvas.
         */


        function getSourceCanvas(image, _ref6, _ref7, _ref8) {
          var imageAspectRatio = _ref6.aspectRatio,
              imageNaturalWidth = _ref6.naturalWidth,
              imageNaturalHeight = _ref6.naturalHeight,
              _ref6$rotate = _ref6.rotate,
              rotate = _ref6$rotate === void 0 ? 0 : _ref6$rotate,
              _ref6$scaleX = _ref6.scaleX,
              scaleX = _ref6$scaleX === void 0 ? 1 : _ref6$scaleX,
              _ref6$scaleY = _ref6.scaleY,
              scaleY = _ref6$scaleY === void 0 ? 1 : _ref6$scaleY;
          var aspectRatio = _ref7.aspectRatio,
              naturalWidth = _ref7.naturalWidth,
              naturalHeight = _ref7.naturalHeight;
          var _ref8$fillColor = _ref8.fillColor,
              fillColor = _ref8$fillColor === void 0 ? 'transparent' : _ref8$fillColor,
              _ref8$imageSmoothingE = _ref8.imageSmoothingEnabled,
              imageSmoothingEnabled = _ref8$imageSmoothingE === void 0 ? true : _ref8$imageSmoothingE,
              _ref8$imageSmoothingQ = _ref8.imageSmoothingQuality,
              imageSmoothingQuality = _ref8$imageSmoothingQ === void 0 ? 'low' : _ref8$imageSmoothingQ,
              _ref8$maxWidth = _ref8.maxWidth,
              maxWidth = _ref8$maxWidth === void 0 ? Infinity : _ref8$maxWidth,
              _ref8$maxHeight = _ref8.maxHeight,
              maxHeight = _ref8$maxHeight === void 0 ? Infinity : _ref8$maxHeight,
              _ref8$minWidth = _ref8.minWidth,
              minWidth = _ref8$minWidth === void 0 ? 0 : _ref8$minWidth,
              _ref8$minHeight = _ref8.minHeight,
              minHeight = _ref8$minHeight === void 0 ? 0 : _ref8$minHeight;
          var canvas = document.createElement('canvas');
          var context = canvas.getContext('2d');
          var maxSizes = getAdjustedSizes({
            aspectRatio: aspectRatio,
            width: maxWidth,
            height: maxHeight
          });
          var minSizes = getAdjustedSizes({
            aspectRatio: aspectRatio,
            width: minWidth,
            height: minHeight
          }, 'cover');
          var width = Math.min(maxSizes.width, Math.max(minSizes.width, naturalWidth));
          var height = Math.min(maxSizes.height, Math.max(minSizes.height, naturalHeight)); // Note: should always use image's natural sizes for drawing as
          // imageData.naturalWidth === canvasData.naturalHeight when rotate % 180 === 90

          var destMaxSizes = getAdjustedSizes({
            aspectRatio: imageAspectRatio,
            width: maxWidth,
            height: maxHeight
          });
          var destMinSizes = getAdjustedSizes({
            aspectRatio: imageAspectRatio,
            width: minWidth,
            height: minHeight
          }, 'cover');
          var destWidth = Math.min(destMaxSizes.width, Math.max(destMinSizes.width, imageNaturalWidth));
          var destHeight = Math.min(destMaxSizes.height, Math.max(destMinSizes.height, imageNaturalHeight));
          var params = [-destWidth / 2, -destHeight / 2, destWidth, destHeight];
          canvas.width = normalizeDecimalNumber(width);
          canvas.height = normalizeDecimalNumber(height);
          context.fillStyle = fillColor;
          context.fillRect(0, 0, width, height);
          context.save();
          context.translate(width / 2, height / 2);
          context.rotate(rotate * Math.PI / 180);
          context.scale(scaleX, scaleY);
          context.imageSmoothingEnabled = imageSmoothingEnabled;
          context.imageSmoothingQuality = imageSmoothingQuality;
          context.drawImage.apply(context, [image].concat(_toConsumableArray(params.map(function (param) {
            return Math.floor(normalizeDecimalNumber(param));
          }))));
          context.restore();
          return canvas;
        }

        var fromCharCode = String.fromCharCode;
        /**
         * Get string from char code in data view.
         * @param {DataView} dataView - The data view for read.
         * @param {number} start - The start index.
         * @param {number} length - The read length.
         * @returns {string} The read result.
         */

        function getStringFromCharCode(dataView, start, length) {
          var str = '';
          length += start;

          for (var i = start; i < length; i += 1) {
            str += fromCharCode(dataView.getUint8(i));
          }

          return str;
        }

        var REGEXP_DATA_URL_HEAD = /^data:.*,/;
        /**
         * Transform Data URL to array buffer.
         * @param {string} dataURL - The Data URL to transform.
         * @returns {ArrayBuffer} The result array buffer.
         */

        function dataURLToArrayBuffer(dataURL) {
          var base64 = dataURL.replace(REGEXP_DATA_URL_HEAD, '');
          var binary = atob(base64);
          var arrayBuffer = new ArrayBuffer(binary.length);
          var uint8 = new Uint8Array(arrayBuffer);
          forEach(uint8, function (value, i) {
            uint8[i] = binary.charCodeAt(i);
          });
          return arrayBuffer;
        }
        /**
         * Transform array buffer to Data URL.
         * @param {ArrayBuffer} arrayBuffer - The array buffer to transform.
         * @param {string} mimeType - The mime type of the Data URL.
         * @returns {string} The result Data URL.
         */


        function arrayBufferToDataURL(arrayBuffer, mimeType) {
          var chunks = []; // Chunk Typed Array for better performance (#435)

          var chunkSize = 8192;
          var uint8 = new Uint8Array(arrayBuffer);

          while (uint8.length > 0) {
            // XXX: Babel's `toConsumableArray` helper will throw error in IE or Safari 9
            // eslint-disable-next-line prefer-spread
            chunks.push(fromCharCode.apply(null, toArray(uint8.subarray(0, chunkSize))));
            uint8 = uint8.subarray(chunkSize);
          }

          return "data:".concat(mimeType, ";base64,").concat(btoa(chunks.join('')));
        }
        /**
         * Get orientation value from given array buffer.
         * @param {ArrayBuffer} arrayBuffer - The array buffer to read.
         * @returns {number} The read orientation value.
         */


        function resetAndGetOrientation(arrayBuffer) {
          var dataView = new DataView(arrayBuffer);
          var orientation; // Ignores range error when the image does not have correct Exif information

          try {
            var littleEndian;
            var app1Start;
            var ifdStart; // Only handle JPEG image (start by 0xFFD8)

            if (dataView.getUint8(0) === 0xFF && dataView.getUint8(1) === 0xD8) {
              var length = dataView.byteLength;
              var offset = 2;

              while (offset + 1 < length) {
                if (dataView.getUint8(offset) === 0xFF && dataView.getUint8(offset + 1) === 0xE1) {
                  app1Start = offset;
                  break;
                }

                offset += 1;
              }
            }

            if (app1Start) {
              var exifIDCode = app1Start + 4;
              var tiffOffset = app1Start + 10;

              if (getStringFromCharCode(dataView, exifIDCode, 4) === 'Exif') {
                var endianness = dataView.getUint16(tiffOffset);
                littleEndian = endianness === 0x4949;

                if (littleEndian || endianness === 0x4D4D
                /* bigEndian */
                ) {
                    if (dataView.getUint16(tiffOffset + 2, littleEndian) === 0x002A) {
                      var firstIFDOffset = dataView.getUint32(tiffOffset + 4, littleEndian);

                      if (firstIFDOffset >= 0x00000008) {
                        ifdStart = tiffOffset + firstIFDOffset;
                      }
                    }
                  }
              }
            }

            if (ifdStart) {
              var _length = dataView.getUint16(ifdStart, littleEndian);

              var _offset;

              var i;

              for (i = 0; i < _length; i += 1) {
                _offset = ifdStart + i * 12 + 2;

                if (dataView.getUint16(_offset, littleEndian) === 0x0112
                /* Orientation */
                ) {
                    // 8 is the offset of the current tag's value
                    _offset += 8; // Get the original orientation value

                    orientation = dataView.getUint16(_offset, littleEndian); // Override the orientation with its default value

                    dataView.setUint16(_offset, 1, littleEndian);
                    break;
                  }
              }
            }
          } catch (error) {
            orientation = 1;
          }

          return orientation;
        }
        /**
         * Parse Exif Orientation value.
         * @param {number} orientation - The orientation to parse.
         * @returns {Object} The parsed result.
         */


        function parseOrientation(orientation) {
          var rotate = 0;
          var scaleX = 1;
          var scaleY = 1;

          switch (orientation) {
            // Flip horizontal
            case 2:
              scaleX = -1;
              break;
            // Rotate left 180°

            case 3:
              rotate = -180;
              break;
            // Flip vertical

            case 4:
              scaleY = -1;
              break;
            // Flip vertical and rotate right 90°

            case 5:
              rotate = 90;
              scaleY = -1;
              break;
            // Rotate right 90°

            case 6:
              rotate = 90;
              break;
            // Flip horizontal and rotate right 90°

            case 7:
              rotate = 90;
              scaleX = -1;
              break;
            // Rotate left 90°

            case 8:
              rotate = -90;
              break;
          }

          return {
            rotate: rotate,
            scaleX: scaleX,
            scaleY: scaleY
          };
        }

        var render = {
          render: function render() {
            this.initContainer();
            this.initCanvas();
            this.initCropBox();
            this.renderCanvas();

            if (this.cropped) {
              this.renderCropBox();
            }
          },
          initContainer: function initContainer() {
            var element = this.element,
                options = this.options,
                container = this.container,
                cropper = this.cropper;
            addClass(cropper, CLASS_HIDDEN);
            removeClass(element, CLASS_HIDDEN);
            var containerData = {
              width: Math.max(container.offsetWidth, Number(options.minContainerWidth) || 200),
              height: Math.max(container.offsetHeight, Number(options.minContainerHeight) || 100)
            };
            this.containerData = containerData;
            setStyle(cropper, {
              width: containerData.width,
              height: containerData.height
            });
            addClass(element, CLASS_HIDDEN);
            removeClass(cropper, CLASS_HIDDEN);
          },
          // Canvas (image wrapper)
          initCanvas: function initCanvas() {
            var containerData = this.containerData,
                imageData = this.imageData;
            var viewMode = this.options.viewMode;
            var rotated = Math.abs(imageData.rotate) % 180 === 90;
            var naturalWidth = rotated ? imageData.naturalHeight : imageData.naturalWidth;
            var naturalHeight = rotated ? imageData.naturalWidth : imageData.naturalHeight;
            var aspectRatio = naturalWidth / naturalHeight;
            var canvasWidth = containerData.width;
            var canvasHeight = containerData.height;

            if (containerData.height * aspectRatio > containerData.width) {
              if (viewMode === 3) {
                canvasWidth = containerData.height * aspectRatio;
              } else {
                canvasHeight = containerData.width / aspectRatio;
              }
            } else if (viewMode === 3) {
              canvasHeight = containerData.width / aspectRatio;
            } else {
              canvasWidth = containerData.height * aspectRatio;
            }

            var canvasData = {
              aspectRatio: aspectRatio,
              naturalWidth: naturalWidth,
              naturalHeight: naturalHeight,
              width: canvasWidth,
              height: canvasHeight
            };
            canvasData.left = (containerData.width - canvasWidth) / 2;
            canvasData.top = (containerData.height - canvasHeight) / 2;
            canvasData.oldLeft = canvasData.left;
            canvasData.oldTop = canvasData.top;
            this.canvasData = canvasData;
            this.limited = viewMode === 1 || viewMode === 2;
            this.limitCanvas(true, true);
            this.initialImageData = assign({}, imageData);
            this.initialCanvasData = assign({}, canvasData);
          },
          limitCanvas: function limitCanvas(sizeLimited, positionLimited) {
            var options = this.options,
                containerData = this.containerData,
                canvasData = this.canvasData,
                cropBoxData = this.cropBoxData;
            var viewMode = options.viewMode;
            var aspectRatio = canvasData.aspectRatio;
            var cropped = this.cropped && cropBoxData;

            if (sizeLimited) {
              var minCanvasWidth = Number(options.minCanvasWidth) || 0;
              var minCanvasHeight = Number(options.minCanvasHeight) || 0;

              if (viewMode > 1) {
                minCanvasWidth = Math.max(minCanvasWidth, containerData.width);
                minCanvasHeight = Math.max(minCanvasHeight, containerData.height);

                if (viewMode === 3) {
                  if (minCanvasHeight * aspectRatio > minCanvasWidth) {
                    minCanvasWidth = minCanvasHeight * aspectRatio;
                  } else {
                    minCanvasHeight = minCanvasWidth / aspectRatio;
                  }
                }
              } else if (viewMode > 0) {
                if (minCanvasWidth) {
                  minCanvasWidth = Math.max(minCanvasWidth, cropped ? cropBoxData.width : 0);
                } else if (minCanvasHeight) {
                  minCanvasHeight = Math.max(minCanvasHeight, cropped ? cropBoxData.height : 0);
                } else if (cropped) {
                  minCanvasWidth = cropBoxData.width;
                  minCanvasHeight = cropBoxData.height;

                  if (minCanvasHeight * aspectRatio > minCanvasWidth) {
                    minCanvasWidth = minCanvasHeight * aspectRatio;
                  } else {
                    minCanvasHeight = minCanvasWidth / aspectRatio;
                  }
                }
              }

              var _getAdjustedSizes = getAdjustedSizes({
                aspectRatio: aspectRatio,
                width: minCanvasWidth,
                height: minCanvasHeight
              });

              minCanvasWidth = _getAdjustedSizes.width;
              minCanvasHeight = _getAdjustedSizes.height;
              canvasData.minWidth = minCanvasWidth;
              canvasData.minHeight = minCanvasHeight;
              canvasData.maxWidth = Infinity;
              canvasData.maxHeight = Infinity;
            }

            if (positionLimited) {
              if (viewMode > (cropped ? 0 : 1)) {
                var newCanvasLeft = containerData.width - canvasData.width;
                var newCanvasTop = containerData.height - canvasData.height;
                canvasData.minLeft = Math.min(0, newCanvasLeft);
                canvasData.minTop = Math.min(0, newCanvasTop);
                canvasData.maxLeft = Math.max(0, newCanvasLeft);
                canvasData.maxTop = Math.max(0, newCanvasTop);

                if (cropped && this.limited) {
                  canvasData.minLeft = Math.min(cropBoxData.left, cropBoxData.left + (cropBoxData.width - canvasData.width));
                  canvasData.minTop = Math.min(cropBoxData.top, cropBoxData.top + (cropBoxData.height - canvasData.height));
                  canvasData.maxLeft = cropBoxData.left;
                  canvasData.maxTop = cropBoxData.top;

                  if (viewMode === 2) {
                    if (canvasData.width >= containerData.width) {
                      canvasData.minLeft = Math.min(0, newCanvasLeft);
                      canvasData.maxLeft = Math.max(0, newCanvasLeft);
                    }

                    if (canvasData.height >= containerData.height) {
                      canvasData.minTop = Math.min(0, newCanvasTop);
                      canvasData.maxTop = Math.max(0, newCanvasTop);
                    }
                  }
                }
              } else {
                canvasData.minLeft = -canvasData.width;
                canvasData.minTop = -canvasData.height;
                canvasData.maxLeft = containerData.width;
                canvasData.maxTop = containerData.height;
              }
            }
          },
          renderCanvas: function renderCanvas(changed, transformed) {
            var canvasData = this.canvasData,
                imageData = this.imageData;

            if (transformed) {
              var _getRotatedSizes = getRotatedSizes({
                width: imageData.naturalWidth * Math.abs(imageData.scaleX || 1),
                height: imageData.naturalHeight * Math.abs(imageData.scaleY || 1),
                degree: imageData.rotate || 0
              }),
                  naturalWidth = _getRotatedSizes.width,
                  naturalHeight = _getRotatedSizes.height;

              var width = canvasData.width * (naturalWidth / canvasData.naturalWidth);
              var height = canvasData.height * (naturalHeight / canvasData.naturalHeight);
              canvasData.left -= (width - canvasData.width) / 2;
              canvasData.top -= (height - canvasData.height) / 2;
              canvasData.width = width;
              canvasData.height = height;
              canvasData.aspectRatio = naturalWidth / naturalHeight;
              canvasData.naturalWidth = naturalWidth;
              canvasData.naturalHeight = naturalHeight;
              this.limitCanvas(true, false);
            }

            if (canvasData.width > canvasData.maxWidth || canvasData.width < canvasData.minWidth) {
              canvasData.left = canvasData.oldLeft;
            }

            if (canvasData.height > canvasData.maxHeight || canvasData.height < canvasData.minHeight) {
              canvasData.top = canvasData.oldTop;
            }

            canvasData.width = Math.min(Math.max(canvasData.width, canvasData.minWidth), canvasData.maxWidth);
            canvasData.height = Math.min(Math.max(canvasData.height, canvasData.minHeight), canvasData.maxHeight);
            this.limitCanvas(false, true);
            canvasData.left = Math.min(Math.max(canvasData.left, canvasData.minLeft), canvasData.maxLeft);
            canvasData.top = Math.min(Math.max(canvasData.top, canvasData.minTop), canvasData.maxTop);
            canvasData.oldLeft = canvasData.left;
            canvasData.oldTop = canvasData.top;
            setStyle(this.canvas, assign({
              width: canvasData.width,
              height: canvasData.height
            }, getTransforms({
              translateX: canvasData.left,
              translateY: canvasData.top
            })));
            this.renderImage(changed);

            if (this.cropped && this.limited) {
              this.limitCropBox(true, true);
            }
          },
          renderImage: function renderImage(changed) {
            var canvasData = this.canvasData,
                imageData = this.imageData;
            var width = imageData.naturalWidth * (canvasData.width / canvasData.naturalWidth);
            var height = imageData.naturalHeight * (canvasData.height / canvasData.naturalHeight);
            assign(imageData, {
              width: width,
              height: height,
              left: (canvasData.width - width) / 2,
              top: (canvasData.height - height) / 2
            });
            setStyle(this.image, assign({
              width: imageData.width,
              height: imageData.height
            }, getTransforms(assign({
              translateX: imageData.left,
              translateY: imageData.top
            }, imageData))));

            if (changed) {
              this.output();
            }
          },
          initCropBox: function initCropBox() {
            var options = this.options,
                canvasData = this.canvasData;
            var aspectRatio = options.aspectRatio || options.initialAspectRatio;
            var autoCropArea = Number(options.autoCropArea) || 0.8;
            var cropBoxData = {
              width: canvasData.width,
              height: canvasData.height
            };

            if (aspectRatio) {
              if (canvasData.height * aspectRatio > canvasData.width) {
                cropBoxData.height = cropBoxData.width / aspectRatio;
              } else {
                cropBoxData.width = cropBoxData.height * aspectRatio;
              }
            }

            this.cropBoxData = cropBoxData;
            this.limitCropBox(true, true); // Initialize auto crop area

            cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);
            cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight); // The width/height of auto crop area must large than "minWidth/Height"

            cropBoxData.width = Math.max(cropBoxData.minWidth, cropBoxData.width * autoCropArea);
            cropBoxData.height = Math.max(cropBoxData.minHeight, cropBoxData.height * autoCropArea);
            cropBoxData.left = canvasData.left + (canvasData.width - cropBoxData.width) / 2;
            cropBoxData.top = canvasData.top + (canvasData.height - cropBoxData.height) / 2;
            cropBoxData.oldLeft = cropBoxData.left;
            cropBoxData.oldTop = cropBoxData.top;
            this.initialCropBoxData = assign({}, cropBoxData);
          },
          limitCropBox: function limitCropBox(sizeLimited, positionLimited) {
            var options = this.options,
                containerData = this.containerData,
                canvasData = this.canvasData,
                cropBoxData = this.cropBoxData,
                limited = this.limited;
            var aspectRatio = options.aspectRatio;

            if (sizeLimited) {
              var minCropBoxWidth = Number(options.minCropBoxWidth) || 0;
              var minCropBoxHeight = Number(options.minCropBoxHeight) || 0;
              var maxCropBoxWidth = limited ? Math.min(containerData.width, canvasData.width, canvasData.width + canvasData.left, containerData.width - canvasData.left) : containerData.width;
              var maxCropBoxHeight = limited ? Math.min(containerData.height, canvasData.height, canvasData.height + canvasData.top, containerData.height - canvasData.top) : containerData.height; // The min/maxCropBoxWidth/Height must be less than container's width/height

              minCropBoxWidth = Math.min(minCropBoxWidth, containerData.width);
              minCropBoxHeight = Math.min(minCropBoxHeight, containerData.height);

              if (aspectRatio) {
                if (minCropBoxWidth && minCropBoxHeight) {
                  if (minCropBoxHeight * aspectRatio > minCropBoxWidth) {
                    minCropBoxHeight = minCropBoxWidth / aspectRatio;
                  } else {
                    minCropBoxWidth = minCropBoxHeight * aspectRatio;
                  }
                } else if (minCropBoxWidth) {
                  minCropBoxHeight = minCropBoxWidth / aspectRatio;
                } else if (minCropBoxHeight) {
                  minCropBoxWidth = minCropBoxHeight * aspectRatio;
                }

                if (maxCropBoxHeight * aspectRatio > maxCropBoxWidth) {
                  maxCropBoxHeight = maxCropBoxWidth / aspectRatio;
                } else {
                  maxCropBoxWidth = maxCropBoxHeight * aspectRatio;
                }
              } // The minWidth/Height must be less than maxWidth/Height


              cropBoxData.minWidth = Math.min(minCropBoxWidth, maxCropBoxWidth);
              cropBoxData.minHeight = Math.min(minCropBoxHeight, maxCropBoxHeight);
              cropBoxData.maxWidth = maxCropBoxWidth;
              cropBoxData.maxHeight = maxCropBoxHeight;
            }

            if (positionLimited) {
              if (limited) {
                cropBoxData.minLeft = Math.max(0, canvasData.left);
                cropBoxData.minTop = Math.max(0, canvasData.top);
                cropBoxData.maxLeft = Math.min(containerData.width, canvasData.left + canvasData.width) - cropBoxData.width;
                cropBoxData.maxTop = Math.min(containerData.height, canvasData.top + canvasData.height) - cropBoxData.height;
              } else {
                cropBoxData.minLeft = 0;
                cropBoxData.minTop = 0;
                cropBoxData.maxLeft = containerData.width - cropBoxData.width;
                cropBoxData.maxTop = containerData.height - cropBoxData.height;
              }
            }
          },
          renderCropBox: function renderCropBox() {
            var options = this.options,
                containerData = this.containerData,
                cropBoxData = this.cropBoxData;

            if (cropBoxData.width > cropBoxData.maxWidth || cropBoxData.width < cropBoxData.minWidth) {
              cropBoxData.left = cropBoxData.oldLeft;
            }

            if (cropBoxData.height > cropBoxData.maxHeight || cropBoxData.height < cropBoxData.minHeight) {
              cropBoxData.top = cropBoxData.oldTop;
            }

            cropBoxData.width = Math.min(Math.max(cropBoxData.width, cropBoxData.minWidth), cropBoxData.maxWidth);
            cropBoxData.height = Math.min(Math.max(cropBoxData.height, cropBoxData.minHeight), cropBoxData.maxHeight);
            this.limitCropBox(false, true);
            cropBoxData.left = Math.min(Math.max(cropBoxData.left, cropBoxData.minLeft), cropBoxData.maxLeft);
            cropBoxData.top = Math.min(Math.max(cropBoxData.top, cropBoxData.minTop), cropBoxData.maxTop);
            cropBoxData.oldLeft = cropBoxData.left;
            cropBoxData.oldTop = cropBoxData.top;

            if (options.movable && options.cropBoxMovable) {
              // Turn to move the canvas when the crop box is equal to the container
              setData(this.face, DATA_ACTION, cropBoxData.width >= containerData.width && cropBoxData.height >= containerData.height ? ACTION_MOVE : ACTION_ALL);
            }

            setStyle(this.cropBox, assign({
              width: cropBoxData.width,
              height: cropBoxData.height
            }, getTransforms({
              translateX: cropBoxData.left,
              translateY: cropBoxData.top
            })));

            if (this.cropped && this.limited) {
              this.limitCanvas(true, true);
            }

            if (!this.disabled) {
              this.output();
            }
          },
          output: function output() {
            this.preview();
            dispatchEvent(this.element, EVENT_CROP, this.getData());
          }
        };
        var preview = {
          initPreview: function initPreview() {
            var element = this.element,
                crossOrigin = this.crossOrigin;
            var preview = this.options.preview;
            var url = crossOrigin ? this.crossOriginUrl : this.url;
            var alt = element.alt || 'The image to preview';
            var image = document.createElement('img');

            if (crossOrigin) {
              image.crossOrigin = crossOrigin;
            }

            image.src = url;
            image.alt = alt;
            this.viewBox.appendChild(image);
            this.viewBoxImage = image;

            if (!preview) {
              return;
            }

            var previews = preview;

            if (typeof preview === 'string') {
              previews = element.ownerDocument.querySelectorAll(preview);
            } else if (preview.querySelector) {
              previews = [preview];
            }

            this.previews = previews;
            forEach(previews, function (el) {
              var img = document.createElement('img'); // Save the original size for recover

              setData(el, DATA_PREVIEW, {
                width: el.offsetWidth,
                height: el.offsetHeight,
                html: el.innerHTML
              });

              if (crossOrigin) {
                img.crossOrigin = crossOrigin;
              }

              img.src = url;
              img.alt = alt;
              /**
               * Override img element styles
               * Add `display:block` to avoid margin top issue
               * Add `height:auto` to override `height` attribute on IE8
               * (Occur only when margin-top <= -height)
               */

              img.style.cssText = 'display:block;' + 'width:100%;' + 'height:auto;' + 'min-width:0!important;' + 'min-height:0!important;' + 'max-width:none!important;' + 'max-height:none!important;' + 'image-orientation:0deg!important;"';
              el.innerHTML = '';
              el.appendChild(img);
            });
          },
          resetPreview: function resetPreview() {
            forEach(this.previews, function (element) {
              var data = getData(element, DATA_PREVIEW);
              setStyle(element, {
                width: data.width,
                height: data.height
              });
              element.innerHTML = data.html;
              removeData(element, DATA_PREVIEW);
            });
          },
          preview: function preview() {
            var imageData = this.imageData,
                canvasData = this.canvasData,
                cropBoxData = this.cropBoxData;
            var cropBoxWidth = cropBoxData.width,
                cropBoxHeight = cropBoxData.height;
            var width = imageData.width,
                height = imageData.height;
            var left = cropBoxData.left - canvasData.left - imageData.left;
            var top = cropBoxData.top - canvasData.top - imageData.top;

            if (!this.cropped || this.disabled) {
              return;
            }

            setStyle(this.viewBoxImage, assign({
              width: width,
              height: height
            }, getTransforms(assign({
              translateX: -left,
              translateY: -top
            }, imageData))));
            forEach(this.previews, function (element) {
              var data = getData(element, DATA_PREVIEW);
              var originalWidth = data.width;
              var originalHeight = data.height;
              var newWidth = originalWidth;
              var newHeight = originalHeight;
              var ratio = 1;

              if (cropBoxWidth) {
                ratio = originalWidth / cropBoxWidth;
                newHeight = cropBoxHeight * ratio;
              }

              if (cropBoxHeight && newHeight > originalHeight) {
                ratio = originalHeight / cropBoxHeight;
                newWidth = cropBoxWidth * ratio;
                newHeight = originalHeight;
              }

              setStyle(element, {
                width: newWidth,
                height: newHeight
              });
              setStyle(element.getElementsByTagName('img')[0], assign({
                width: width * ratio,
                height: height * ratio
              }, getTransforms(assign({
                translateX: -left * ratio,
                translateY: -top * ratio
              }, imageData))));
            });
          }
        };
        var events = {
          bind: function bind() {
            var element = this.element,
                options = this.options,
                cropper = this.cropper;

            if (isFunction(options.cropstart)) {
              addListener(element, EVENT_CROP_START, options.cropstart);
            }

            if (isFunction(options.cropmove)) {
              addListener(element, EVENT_CROP_MOVE, options.cropmove);
            }

            if (isFunction(options.cropend)) {
              addListener(element, EVENT_CROP_END, options.cropend);
            }

            if (isFunction(options.crop)) {
              addListener(element, EVENT_CROP, options.crop);
            }

            if (isFunction(options.zoom)) {
              addListener(element, EVENT_ZOOM, options.zoom);
            }

            addListener(cropper, EVENT_POINTER_DOWN, this.onCropStart = this.cropStart.bind(this));

            if (options.zoomable && options.zoomOnWheel) {
              addListener(cropper, EVENT_WHEEL, this.onWheel = this.wheel.bind(this), {
                passive: false,
                capture: true
              });
            }

            if (options.toggleDragModeOnDblclick) {
              addListener(cropper, EVENT_DBLCLICK, this.onDblclick = this.dblclick.bind(this));
            }

            addListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove = this.cropMove.bind(this));
            addListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd = this.cropEnd.bind(this));

            if (options.responsive) {
              addListener(window, EVENT_RESIZE, this.onResize = this.resize.bind(this));
            }
          },
          unbind: function unbind() {
            var element = this.element,
                options = this.options,
                cropper = this.cropper;

            if (isFunction(options.cropstart)) {
              removeListener(element, EVENT_CROP_START, options.cropstart);
            }

            if (isFunction(options.cropmove)) {
              removeListener(element, EVENT_CROP_MOVE, options.cropmove);
            }

            if (isFunction(options.cropend)) {
              removeListener(element, EVENT_CROP_END, options.cropend);
            }

            if (isFunction(options.crop)) {
              removeListener(element, EVENT_CROP, options.crop);
            }

            if (isFunction(options.zoom)) {
              removeListener(element, EVENT_ZOOM, options.zoom);
            }

            removeListener(cropper, EVENT_POINTER_DOWN, this.onCropStart);

            if (options.zoomable && options.zoomOnWheel) {
              removeListener(cropper, EVENT_WHEEL, this.onWheel, {
                passive: false,
                capture: true
              });
            }

            if (options.toggleDragModeOnDblclick) {
              removeListener(cropper, EVENT_DBLCLICK, this.onDblclick);
            }

            removeListener(element.ownerDocument, EVENT_POINTER_MOVE, this.onCropMove);
            removeListener(element.ownerDocument, EVENT_POINTER_UP, this.onCropEnd);

            if (options.responsive) {
              removeListener(window, EVENT_RESIZE, this.onResize);
            }
          }
        };
        var handlers = {
          resize: function resize() {
            if (this.disabled) {
              return;
            }

            var options = this.options,
                container = this.container,
                containerData = this.containerData;
            var ratio = container.offsetWidth / containerData.width; // Resize when width changed or height changed

            if (ratio !== 1 || container.offsetHeight !== containerData.height) {
              var canvasData;
              var cropBoxData;

              if (options.restore) {
                canvasData = this.getCanvasData();
                cropBoxData = this.getCropBoxData();
              }

              this.render();

              if (options.restore) {
                this.setCanvasData(forEach(canvasData, function (n, i) {
                  canvasData[i] = n * ratio;
                }));
                this.setCropBoxData(forEach(cropBoxData, function (n, i) {
                  cropBoxData[i] = n * ratio;
                }));
              }
            }
          },
          dblclick: function dblclick() {
            if (this.disabled || this.options.dragMode === DRAG_MODE_NONE) {
              return;
            }

            this.setDragMode(hasClass(this.dragBox, CLASS_CROP) ? DRAG_MODE_MOVE : DRAG_MODE_CROP);
          },
          wheel: function wheel(event) {
            var _this = this;

            var ratio = Number(this.options.wheelZoomRatio) || 0.1;
            var delta = 1;

            if (this.disabled) {
              return;
            }

            event.preventDefault(); // Limit wheel speed to prevent zoom too fast (#21)

            if (this.wheeling) {
              return;
            }

            this.wheeling = true;
            setTimeout(function () {
              _this.wheeling = false;
            }, 50);

            if (event.deltaY) {
              delta = event.deltaY > 0 ? 1 : -1;
            } else if (event.wheelDelta) {
              delta = -event.wheelDelta / 120;
            } else if (event.detail) {
              delta = event.detail > 0 ? 1 : -1;
            }

            this.zoom(-delta * ratio, event);
          },
          cropStart: function cropStart(event) {
            var buttons = event.buttons,
                button = event.button;

            if (this.disabled // Handle mouse event and pointer event and ignore touch event
            || (event.type === 'mousedown' || event.type === 'pointerdown' && event.pointerType === 'mouse') && ( // No primary button (Usually the left button)
            isNumber(buttons) && buttons !== 1 || isNumber(button) && button !== 0 // Open context menu
            || event.ctrlKey)) {
              return;
            }

            var options = this.options,
                pointers = this.pointers;
            var action;

            if (event.changedTouches) {
              // Handle touch event
              forEach(event.changedTouches, function (touch) {
                pointers[touch.identifier] = getPointer(touch);
              });
            } else {
              // Handle mouse event and pointer event
              pointers[event.pointerId || 0] = getPointer(event);
            }

            if (Object.keys(pointers).length > 1 && options.zoomable && options.zoomOnTouch) {
              action = ACTION_ZOOM;
            } else {
              action = getData(event.target, DATA_ACTION);
            }

            if (!REGEXP_ACTIONS.test(action)) {
              return;
            }

            if (dispatchEvent(this.element, EVENT_CROP_START, {
              originalEvent: event,
              action: action
            }) === false) {
              return;
            } // This line is required for preventing page zooming in iOS browsers


            event.preventDefault();
            this.action = action;
            this.cropping = false;

            if (action === ACTION_CROP) {
              this.cropping = true;
              addClass(this.dragBox, CLASS_MODAL);
            }
          },
          cropMove: function cropMove(event) {
            var action = this.action;

            if (this.disabled || !action) {
              return;
            }

            var pointers = this.pointers;
            event.preventDefault();

            if (dispatchEvent(this.element, EVENT_CROP_MOVE, {
              originalEvent: event,
              action: action
            }) === false) {
              return;
            }

            if (event.changedTouches) {
              forEach(event.changedTouches, function (touch) {
                // The first parameter should not be undefined (#432)
                assign(pointers[touch.identifier] || {}, getPointer(touch, true));
              });
            } else {
              assign(pointers[event.pointerId || 0] || {}, getPointer(event, true));
            }

            this.change(event);
          },
          cropEnd: function cropEnd(event) {
            if (this.disabled) {
              return;
            }

            var action = this.action,
                pointers = this.pointers;

            if (event.changedTouches) {
              forEach(event.changedTouches, function (touch) {
                delete pointers[touch.identifier];
              });
            } else {
              delete pointers[event.pointerId || 0];
            }

            if (!action) {
              return;
            }

            event.preventDefault();

            if (!Object.keys(pointers).length) {
              this.action = '';
            }

            if (this.cropping) {
              this.cropping = false;
              toggleClass(this.dragBox, CLASS_MODAL, this.cropped && this.options.modal);
            }

            dispatchEvent(this.element, EVENT_CROP_END, {
              originalEvent: event,
              action: action
            });
          }
        };
        var change = {
          change: function change(event) {
            var options = this.options,
                canvasData = this.canvasData,
                containerData = this.containerData,
                cropBoxData = this.cropBoxData,
                pointers = this.pointers;
            var action = this.action;
            var aspectRatio = options.aspectRatio;
            var left = cropBoxData.left,
                top = cropBoxData.top,
                width = cropBoxData.width,
                height = cropBoxData.height;
            var right = left + width;
            var bottom = top + height;
            var minLeft = 0;
            var minTop = 0;
            var maxWidth = containerData.width;
            var maxHeight = containerData.height;
            var renderable = true;
            var offset; // Locking aspect ratio in "free mode" by holding shift key

            if (!aspectRatio && event.shiftKey) {
              aspectRatio = width && height ? width / height : 1;
            }

            if (this.limited) {
              minLeft = cropBoxData.minLeft;
              minTop = cropBoxData.minTop;
              maxWidth = minLeft + Math.min(containerData.width, canvasData.width, canvasData.left + canvasData.width);
              maxHeight = minTop + Math.min(containerData.height, canvasData.height, canvasData.top + canvasData.height);
            }

            var pointer = pointers[Object.keys(pointers)[0]];
            var range = {
              x: pointer.endX - pointer.startX,
              y: pointer.endY - pointer.startY
            };

            var check = function check(side) {
              switch (side) {
                case ACTION_EAST:
                  if (right + range.x > maxWidth) {
                    range.x = maxWidth - right;
                  }

                  break;

                case ACTION_WEST:
                  if (left + range.x < minLeft) {
                    range.x = minLeft - left;
                  }

                  break;

                case ACTION_NORTH:
                  if (top + range.y < minTop) {
                    range.y = minTop - top;
                  }

                  break;

                case ACTION_SOUTH:
                  if (bottom + range.y > maxHeight) {
                    range.y = maxHeight - bottom;
                  }

                  break;
              }
            };

            switch (action) {
              // Move crop box
              case ACTION_ALL:
                left += range.x;
                top += range.y;
                break;
              // Resize crop box

              case ACTION_EAST:
                if (range.x >= 0 && (right >= maxWidth || aspectRatio && (top <= minTop || bottom >= maxHeight))) {
                  renderable = false;
                  break;
                }

                check(ACTION_EAST);
                width += range.x;

                if (width < 0) {
                  action = ACTION_WEST;
                  width = -width;
                  left -= width;
                }

                if (aspectRatio) {
                  height = width / aspectRatio;
                  top += (cropBoxData.height - height) / 2;
                }

                break;

              case ACTION_NORTH:
                if (range.y <= 0 && (top <= minTop || aspectRatio && (left <= minLeft || right >= maxWidth))) {
                  renderable = false;
                  break;
                }

                check(ACTION_NORTH);
                height -= range.y;
                top += range.y;

                if (height < 0) {
                  action = ACTION_SOUTH;
                  height = -height;
                  top -= height;
                }

                if (aspectRatio) {
                  width = height * aspectRatio;
                  left += (cropBoxData.width - width) / 2;
                }

                break;

              case ACTION_WEST:
                if (range.x <= 0 && (left <= minLeft || aspectRatio && (top <= minTop || bottom >= maxHeight))) {
                  renderable = false;
                  break;
                }

                check(ACTION_WEST);
                width -= range.x;
                left += range.x;

                if (width < 0) {
                  action = ACTION_EAST;
                  width = -width;
                  left -= width;
                }

                if (aspectRatio) {
                  height = width / aspectRatio;
                  top += (cropBoxData.height - height) / 2;
                }

                break;

              case ACTION_SOUTH:
                if (range.y >= 0 && (bottom >= maxHeight || aspectRatio && (left <= minLeft || right >= maxWidth))) {
                  renderable = false;
                  break;
                }

                check(ACTION_SOUTH);
                height += range.y;

                if (height < 0) {
                  action = ACTION_NORTH;
                  height = -height;
                  top -= height;
                }

                if (aspectRatio) {
                  width = height * aspectRatio;
                  left += (cropBoxData.width - width) / 2;
                }

                break;

              case ACTION_NORTH_EAST:
                if (aspectRatio) {
                  if (range.y <= 0 && (top <= minTop || right >= maxWidth)) {
                    renderable = false;
                    break;
                  }

                  check(ACTION_NORTH);
                  height -= range.y;
                  top += range.y;
                  width = height * aspectRatio;
                } else {
                  check(ACTION_NORTH);
                  check(ACTION_EAST);

                  if (range.x >= 0) {
                    if (right < maxWidth) {
                      width += range.x;
                    } else if (range.y <= 0 && top <= minTop) {
                      renderable = false;
                    }
                  } else {
                    width += range.x;
                  }

                  if (range.y <= 0) {
                    if (top > minTop) {
                      height -= range.y;
                      top += range.y;
                    }
                  } else {
                    height -= range.y;
                    top += range.y;
                  }
                }

                if (width < 0 && height < 0) {
                  action = ACTION_SOUTH_WEST;
                  height = -height;
                  width = -width;
                  top -= height;
                  left -= width;
                } else if (width < 0) {
                  action = ACTION_NORTH_WEST;
                  width = -width;
                  left -= width;
                } else if (height < 0) {
                  action = ACTION_SOUTH_EAST;
                  height = -height;
                  top -= height;
                }

                break;

              case ACTION_NORTH_WEST:
                if (aspectRatio) {
                  if (range.y <= 0 && (top <= minTop || left <= minLeft)) {
                    renderable = false;
                    break;
                  }

                  check(ACTION_NORTH);
                  height -= range.y;
                  top += range.y;
                  width = height * aspectRatio;
                  left += cropBoxData.width - width;
                } else {
                  check(ACTION_NORTH);
                  check(ACTION_WEST);

                  if (range.x <= 0) {
                    if (left > minLeft) {
                      width -= range.x;
                      left += range.x;
                    } else if (range.y <= 0 && top <= minTop) {
                      renderable = false;
                    }
                  } else {
                    width -= range.x;
                    left += range.x;
                  }

                  if (range.y <= 0) {
                    if (top > minTop) {
                      height -= range.y;
                      top += range.y;
                    }
                  } else {
                    height -= range.y;
                    top += range.y;
                  }
                }

                if (width < 0 && height < 0) {
                  action = ACTION_SOUTH_EAST;
                  height = -height;
                  width = -width;
                  top -= height;
                  left -= width;
                } else if (width < 0) {
                  action = ACTION_NORTH_EAST;
                  width = -width;
                  left -= width;
                } else if (height < 0) {
                  action = ACTION_SOUTH_WEST;
                  height = -height;
                  top -= height;
                }

                break;

              case ACTION_SOUTH_WEST:
                if (aspectRatio) {
                  if (range.x <= 0 && (left <= minLeft || bottom >= maxHeight)) {
                    renderable = false;
                    break;
                  }

                  check(ACTION_WEST);
                  width -= range.x;
                  left += range.x;
                  height = width / aspectRatio;
                } else {
                  check(ACTION_SOUTH);
                  check(ACTION_WEST);

                  if (range.x <= 0) {
                    if (left > minLeft) {
                      width -= range.x;
                      left += range.x;
                    } else if (range.y >= 0 && bottom >= maxHeight) {
                      renderable = false;
                    }
                  } else {
                    width -= range.x;
                    left += range.x;
                  }

                  if (range.y >= 0) {
                    if (bottom < maxHeight) {
                      height += range.y;
                    }
                  } else {
                    height += range.y;
                  }
                }

                if (width < 0 && height < 0) {
                  action = ACTION_NORTH_EAST;
                  height = -height;
                  width = -width;
                  top -= height;
                  left -= width;
                } else if (width < 0) {
                  action = ACTION_SOUTH_EAST;
                  width = -width;
                  left -= width;
                } else if (height < 0) {
                  action = ACTION_NORTH_WEST;
                  height = -height;
                  top -= height;
                }

                break;

              case ACTION_SOUTH_EAST:
                if (aspectRatio) {
                  if (range.x >= 0 && (right >= maxWidth || bottom >= maxHeight)) {
                    renderable = false;
                    break;
                  }

                  check(ACTION_EAST);
                  width += range.x;
                  height = width / aspectRatio;
                } else {
                  check(ACTION_SOUTH);
                  check(ACTION_EAST);

                  if (range.x >= 0) {
                    if (right < maxWidth) {
                      width += range.x;
                    } else if (range.y >= 0 && bottom >= maxHeight) {
                      renderable = false;
                    }
                  } else {
                    width += range.x;
                  }

                  if (range.y >= 0) {
                    if (bottom < maxHeight) {
                      height += range.y;
                    }
                  } else {
                    height += range.y;
                  }
                }

                if (width < 0 && height < 0) {
                  action = ACTION_NORTH_WEST;
                  height = -height;
                  width = -width;
                  top -= height;
                  left -= width;
                } else if (width < 0) {
                  action = ACTION_SOUTH_WEST;
                  width = -width;
                  left -= width;
                } else if (height < 0) {
                  action = ACTION_NORTH_EAST;
                  height = -height;
                  top -= height;
                }

                break;
              // Move canvas

              case ACTION_MOVE:
                this.move(range.x, range.y);
                renderable = false;
                break;
              // Zoom canvas

              case ACTION_ZOOM:
                this.zoom(getMaxZoomRatio(pointers), event);
                renderable = false;
                break;
              // Create crop box

              case ACTION_CROP:
                if (!range.x || !range.y) {
                  renderable = false;
                  break;
                }

                offset = getOffset(this.cropper);
                left = pointer.startX - offset.left;
                top = pointer.startY - offset.top;
                width = cropBoxData.minWidth;
                height = cropBoxData.minHeight;

                if (range.x > 0) {
                  action = range.y > 0 ? ACTION_SOUTH_EAST : ACTION_NORTH_EAST;
                } else if (range.x < 0) {
                  left -= width;
                  action = range.y > 0 ? ACTION_SOUTH_WEST : ACTION_NORTH_WEST;
                }

                if (range.y < 0) {
                  top -= height;
                } // Show the crop box if is hidden


                if (!this.cropped) {
                  removeClass(this.cropBox, CLASS_HIDDEN);
                  this.cropped = true;

                  if (this.limited) {
                    this.limitCropBox(true, true);
                  }
                }

                break;
            }

            if (renderable) {
              cropBoxData.width = width;
              cropBoxData.height = height;
              cropBoxData.left = left;
              cropBoxData.top = top;
              this.action = action;
              this.renderCropBox();
            } // Override


            forEach(pointers, function (p) {
              p.startX = p.endX;
              p.startY = p.endY;
            });
          }
        };
        var methods = {
          // Show the crop box manually
          crop: function crop() {
            if (this.ready && !this.cropped && !this.disabled) {
              this.cropped = true;
              this.limitCropBox(true, true);

              if (this.options.modal) {
                addClass(this.dragBox, CLASS_MODAL);
              }

              removeClass(this.cropBox, CLASS_HIDDEN);
              this.setCropBoxData(this.initialCropBoxData);
            }

            return this;
          },
          // Reset the image and crop box to their initial states
          reset: function reset() {
            if (this.ready && !this.disabled) {
              this.imageData = assign({}, this.initialImageData);
              this.canvasData = assign({}, this.initialCanvasData);
              this.cropBoxData = assign({}, this.initialCropBoxData);
              this.renderCanvas();

              if (this.cropped) {
                this.renderCropBox();
              }
            }

            return this;
          },
          // Clear the crop box
          clear: function clear() {
            if (this.cropped && !this.disabled) {
              assign(this.cropBoxData, {
                left: 0,
                top: 0,
                width: 0,
                height: 0
              });
              this.cropped = false;
              this.renderCropBox();
              this.limitCanvas(true, true); // Render canvas after crop box rendered

              this.renderCanvas();
              removeClass(this.dragBox, CLASS_MODAL);
              addClass(this.cropBox, CLASS_HIDDEN);
            }

            return this;
          },

          /**
           * Replace the image's src and rebuild the cropper
           * @param {string} url - The new URL.
           * @param {boolean} [hasSameSize] - Indicate if the new image has the same size as the old one.
           * @returns {Cropper} this
           */
          replace: function replace(url) {
            var hasSameSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            if (!this.disabled && url) {
              if (this.isImg) {
                this.element.src = url;
              }

              if (hasSameSize) {
                this.url = url;
                this.image.src = url;

                if (this.ready) {
                  this.viewBoxImage.src = url;
                  forEach(this.previews, function (element) {
                    element.getElementsByTagName('img')[0].src = url;
                  });
                }
              } else {
                if (this.isImg) {
                  this.replaced = true;
                }

                this.options.data = null;
                this.uncreate();
                this.load(url);
              }
            }

            return this;
          },
          // Enable (unfreeze) the cropper
          enable: function enable() {
            if (this.ready && this.disabled) {
              this.disabled = false;
              removeClass(this.cropper, CLASS_DISABLED);
            }

            return this;
          },
          // Disable (freeze) the cropper
          disable: function disable() {
            if (this.ready && !this.disabled) {
              this.disabled = true;
              addClass(this.cropper, CLASS_DISABLED);
            }

            return this;
          },

          /**
           * Destroy the cropper and remove the instance from the image
           * @returns {Cropper} this
           */
          destroy: function destroy() {
            var element = this.element;

            if (!element[NAMESPACE]) {
              return this;
            }

            element[NAMESPACE] = undefined;

            if (this.isImg && this.replaced) {
              element.src = this.originalUrl;
            }

            this.uncreate();
            return this;
          },

          /**
           * Move the canvas with relative offsets
           * @param {number} offsetX - The relative offset distance on the x-axis.
           * @param {number} [offsetY=offsetX] - The relative offset distance on the y-axis.
           * @returns {Cropper} this
           */
          move: function move(offsetX) {
            var offsetY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : offsetX;
            var _this$canvasData = this.canvasData,
                left = _this$canvasData.left,
                top = _this$canvasData.top;
            return this.moveTo(isUndefined(offsetX) ? offsetX : left + Number(offsetX), isUndefined(offsetY) ? offsetY : top + Number(offsetY));
          },

          /**
           * Move the canvas to an absolute point
           * @param {number} x - The x-axis coordinate.
           * @param {number} [y=x] - The y-axis coordinate.
           * @returns {Cropper} this
           */
          moveTo: function moveTo(x) {
            var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;
            var canvasData = this.canvasData;
            var changed = false;
            x = Number(x);
            y = Number(y);

            if (this.ready && !this.disabled && this.options.movable) {
              if (isNumber(x)) {
                canvasData.left = x;
                changed = true;
              }

              if (isNumber(y)) {
                canvasData.top = y;
                changed = true;
              }

              if (changed) {
                this.renderCanvas(true);
              }
            }

            return this;
          },

          /**
           * Zoom the canvas with a relative ratio
           * @param {number} ratio - The target ratio.
           * @param {Event} _originalEvent - The original event if any.
           * @returns {Cropper} this
           */
          zoom: function zoom(ratio, _originalEvent) {
            var canvasData = this.canvasData;
            ratio = Number(ratio);

            if (ratio < 0) {
              ratio = 1 / (1 - ratio);
            } else {
              ratio = 1 + ratio;
            }

            return this.zoomTo(canvasData.width * ratio / canvasData.naturalWidth, null, _originalEvent);
          },

          /**
           * Zoom the canvas to an absolute ratio
           * @param {number} ratio - The target ratio.
           * @param {Object} pivot - The zoom pivot point coordinate.
           * @param {Event} _originalEvent - The original event if any.
           * @returns {Cropper} this
           */
          zoomTo: function zoomTo(ratio, pivot, _originalEvent) {
            var options = this.options,
                canvasData = this.canvasData;
            var width = canvasData.width,
                height = canvasData.height,
                naturalWidth = canvasData.naturalWidth,
                naturalHeight = canvasData.naturalHeight;
            ratio = Number(ratio);

            if (ratio >= 0 && this.ready && !this.disabled && options.zoomable) {
              var newWidth = naturalWidth * ratio;
              var newHeight = naturalHeight * ratio;

              if (dispatchEvent(this.element, EVENT_ZOOM, {
                ratio: ratio,
                oldRatio: width / naturalWidth,
                originalEvent: _originalEvent
              }) === false) {
                return this;
              }

              if (_originalEvent) {
                var pointers = this.pointers;
                var offset = getOffset(this.cropper);
                var center = pointers && Object.keys(pointers).length ? getPointersCenter(pointers) : {
                  pageX: _originalEvent.pageX,
                  pageY: _originalEvent.pageY
                }; // Zoom from the triggering point of the event

                canvasData.left -= (newWidth - width) * ((center.pageX - offset.left - canvasData.left) / width);
                canvasData.top -= (newHeight - height) * ((center.pageY - offset.top - canvasData.top) / height);
              } else if (isPlainObject(pivot) && isNumber(pivot.x) && isNumber(pivot.y)) {
                canvasData.left -= (newWidth - width) * ((pivot.x - canvasData.left) / width);
                canvasData.top -= (newHeight - height) * ((pivot.y - canvasData.top) / height);
              } else {
                // Zoom from the center of the canvas
                canvasData.left -= (newWidth - width) / 2;
                canvasData.top -= (newHeight - height) / 2;
              }

              canvasData.width = newWidth;
              canvasData.height = newHeight;
              this.renderCanvas(true);
            }

            return this;
          },

          /**
           * Rotate the canvas with a relative degree
           * @param {number} degree - The rotate degree.
           * @returns {Cropper} this
           */
          rotate: function rotate(degree) {
            return this.rotateTo((this.imageData.rotate || 0) + Number(degree));
          },

          /**
           * Rotate the canvas to an absolute degree
           * @param {number} degree - The rotate degree.
           * @returns {Cropper} this
           */
          rotateTo: function rotateTo(degree) {
            degree = Number(degree);

            if (isNumber(degree) && this.ready && !this.disabled && this.options.rotatable) {
              this.imageData.rotate = degree % 360;
              this.renderCanvas(true, true);
            }

            return this;
          },

          /**
           * Scale the image on the x-axis.
           * @param {number} scaleX - The scale ratio on the x-axis.
           * @returns {Cropper} this
           */
          scaleX: function scaleX(_scaleX) {
            var scaleY = this.imageData.scaleY;
            return this.scale(_scaleX, isNumber(scaleY) ? scaleY : 1);
          },

          /**
           * Scale the image on the y-axis.
           * @param {number} scaleY - The scale ratio on the y-axis.
           * @returns {Cropper} this
           */
          scaleY: function scaleY(_scaleY) {
            var scaleX = this.imageData.scaleX;
            return this.scale(isNumber(scaleX) ? scaleX : 1, _scaleY);
          },

          /**
           * Scale the image
           * @param {number} scaleX - The scale ratio on the x-axis.
           * @param {number} [scaleY=scaleX] - The scale ratio on the y-axis.
           * @returns {Cropper} this
           */
          scale: function scale(scaleX) {
            var scaleY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : scaleX;
            var imageData = this.imageData;
            var transformed = false;
            scaleX = Number(scaleX);
            scaleY = Number(scaleY);

            if (this.ready && !this.disabled && this.options.scalable) {
              if (isNumber(scaleX)) {
                imageData.scaleX = scaleX;
                transformed = true;
              }

              if (isNumber(scaleY)) {
                imageData.scaleY = scaleY;
                transformed = true;
              }

              if (transformed) {
                this.renderCanvas(true, true);
              }
            }

            return this;
          },

          /**
           * Get the cropped area position and size data (base on the original image)
           * @param {boolean} [rounded=false] - Indicate if round the data values or not.
           * @returns {Object} The result cropped data.
           */
          getData: function getData() {
            var rounded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            var options = this.options,
                imageData = this.imageData,
                canvasData = this.canvasData,
                cropBoxData = this.cropBoxData;
            var data;

            if (this.ready && this.cropped) {
              data = {
                x: cropBoxData.left - canvasData.left,
                y: cropBoxData.top - canvasData.top,
                width: cropBoxData.width,
                height: cropBoxData.height
              };
              var ratio = imageData.width / imageData.naturalWidth;
              forEach(data, function (n, i) {
                data[i] = n / ratio;
              });

              if (rounded) {
                // In case rounding off leads to extra 1px in right or bottom border
                // we should round the top-left corner and the dimension (#343).
                var bottom = Math.round(data.y + data.height);
                var right = Math.round(data.x + data.width);
                data.x = Math.round(data.x);
                data.y = Math.round(data.y);
                data.width = right - data.x;
                data.height = bottom - data.y;
              }
            } else {
              data = {
                x: 0,
                y: 0,
                width: 0,
                height: 0
              };
            }

            if (options.rotatable) {
              data.rotate = imageData.rotate || 0;
            }

            if (options.scalable) {
              data.scaleX = imageData.scaleX || 1;
              data.scaleY = imageData.scaleY || 1;
            }

            return data;
          },

          /**
           * Set the cropped area position and size with new data
           * @param {Object} data - The new data.
           * @returns {Cropper} this
           */
          setData: function setData(data) {
            var options = this.options,
                imageData = this.imageData,
                canvasData = this.canvasData;
            var cropBoxData = {};

            if (this.ready && !this.disabled && isPlainObject(data)) {
              var transformed = false;

              if (options.rotatable) {
                if (isNumber(data.rotate) && data.rotate !== imageData.rotate) {
                  imageData.rotate = data.rotate;
                  transformed = true;
                }
              }

              if (options.scalable) {
                if (isNumber(data.scaleX) && data.scaleX !== imageData.scaleX) {
                  imageData.scaleX = data.scaleX;
                  transformed = true;
                }

                if (isNumber(data.scaleY) && data.scaleY !== imageData.scaleY) {
                  imageData.scaleY = data.scaleY;
                  transformed = true;
                }
              }

              if (transformed) {
                this.renderCanvas(true, true);
              }

              var ratio = imageData.width / imageData.naturalWidth;

              if (isNumber(data.x)) {
                cropBoxData.left = data.x * ratio + canvasData.left;
              }

              if (isNumber(data.y)) {
                cropBoxData.top = data.y * ratio + canvasData.top;
              }

              if (isNumber(data.width)) {
                cropBoxData.width = data.width * ratio;
              }

              if (isNumber(data.height)) {
                cropBoxData.height = data.height * ratio;
              }

              this.setCropBoxData(cropBoxData);
            }

            return this;
          },

          /**
           * Get the container size data.
           * @returns {Object} The result container data.
           */
          getContainerData: function getContainerData() {
            return this.ready ? assign({}, this.containerData) : {};
          },

          /**
           * Get the image position and size data.
           * @returns {Object} The result image data.
           */
          getImageData: function getImageData() {
            return this.sized ? assign({}, this.imageData) : {};
          },

          /**
           * Get the canvas position and size data.
           * @returns {Object} The result canvas data.
           */
          getCanvasData: function getCanvasData() {
            var canvasData = this.canvasData;
            var data = {};

            if (this.ready) {
              forEach(['left', 'top', 'width', 'height', 'naturalWidth', 'naturalHeight'], function (n) {
                data[n] = canvasData[n];
              });
            }

            return data;
          },

          /**
           * Set the canvas position and size with new data.
           * @param {Object} data - The new canvas data.
           * @returns {Cropper} this
           */
          setCanvasData: function setCanvasData(data) {
            var canvasData = this.canvasData;
            var aspectRatio = canvasData.aspectRatio;

            if (this.ready && !this.disabled && isPlainObject(data)) {
              if (isNumber(data.left)) {
                canvasData.left = data.left;
              }

              if (isNumber(data.top)) {
                canvasData.top = data.top;
              }

              if (isNumber(data.width)) {
                canvasData.width = data.width;
                canvasData.height = data.width / aspectRatio;
              } else if (isNumber(data.height)) {
                canvasData.height = data.height;
                canvasData.width = data.height * aspectRatio;
              }

              this.renderCanvas(true);
            }

            return this;
          },

          /**
           * Get the crop box position and size data.
           * @returns {Object} The result crop box data.
           */
          getCropBoxData: function getCropBoxData() {
            var cropBoxData = this.cropBoxData;
            var data;

            if (this.ready && this.cropped) {
              data = {
                left: cropBoxData.left,
                top: cropBoxData.top,
                width: cropBoxData.width,
                height: cropBoxData.height
              };
            }

            return data || {};
          },

          /**
           * Set the crop box position and size with new data.
           * @param {Object} data - The new crop box data.
           * @returns {Cropper} this
           */
          setCropBoxData: function setCropBoxData(data) {
            var cropBoxData = this.cropBoxData;
            var aspectRatio = this.options.aspectRatio;
            var widthChanged;
            var heightChanged;

            if (this.ready && this.cropped && !this.disabled && isPlainObject(data)) {
              if (isNumber(data.left)) {
                cropBoxData.left = data.left;
              }

              if (isNumber(data.top)) {
                cropBoxData.top = data.top;
              }

              if (isNumber(data.width) && data.width !== cropBoxData.width) {
                widthChanged = true;
                cropBoxData.width = data.width;
              }

              if (isNumber(data.height) && data.height !== cropBoxData.height) {
                heightChanged = true;
                cropBoxData.height = data.height;
              }

              if (aspectRatio) {
                if (widthChanged) {
                  cropBoxData.height = cropBoxData.width / aspectRatio;
                } else if (heightChanged) {
                  cropBoxData.width = cropBoxData.height * aspectRatio;
                }
              }

              this.renderCropBox();
            }

            return this;
          },

          /**
           * Get a canvas drawn the cropped image.
           * @param {Object} [options={}] - The config options.
           * @returns {HTMLCanvasElement} - The result canvas.
           */
          getCroppedCanvas: function getCroppedCanvas() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            if (!this.ready || !window.HTMLCanvasElement) {
              return null;
            }

            var canvasData = this.canvasData;
            var source = getSourceCanvas(this.image, this.imageData, canvasData, options); // Returns the source canvas if it is not cropped.

            if (!this.cropped) {
              return source;
            }

            var _this$getData = this.getData(),
                initialX = _this$getData.x,
                initialY = _this$getData.y,
                initialWidth = _this$getData.width,
                initialHeight = _this$getData.height;

            var ratio = source.width / Math.floor(canvasData.naturalWidth);

            if (ratio !== 1) {
              initialX *= ratio;
              initialY *= ratio;
              initialWidth *= ratio;
              initialHeight *= ratio;
            }

            var aspectRatio = initialWidth / initialHeight;
            var maxSizes = getAdjustedSizes({
              aspectRatio: aspectRatio,
              width: options.maxWidth || Infinity,
              height: options.maxHeight || Infinity
            });
            var minSizes = getAdjustedSizes({
              aspectRatio: aspectRatio,
              width: options.minWidth || 0,
              height: options.minHeight || 0
            }, 'cover');

            var _getAdjustedSizes = getAdjustedSizes({
              aspectRatio: aspectRatio,
              width: options.width || (ratio !== 1 ? source.width : initialWidth),
              height: options.height || (ratio !== 1 ? source.height : initialHeight)
            }),
                width = _getAdjustedSizes.width,
                height = _getAdjustedSizes.height;

            width = Math.min(maxSizes.width, Math.max(minSizes.width, width));
            height = Math.min(maxSizes.height, Math.max(minSizes.height, height));
            var canvas = document.createElement('canvas');
            var context = canvas.getContext('2d');
            canvas.width = normalizeDecimalNumber(width);
            canvas.height = normalizeDecimalNumber(height);
            context.fillStyle = options.fillColor || 'transparent';
            context.fillRect(0, 0, width, height);
            var _options$imageSmoothi = options.imageSmoothingEnabled,
                imageSmoothingEnabled = _options$imageSmoothi === void 0 ? true : _options$imageSmoothi,
                imageSmoothingQuality = options.imageSmoothingQuality;
            context.imageSmoothingEnabled = imageSmoothingEnabled;

            if (imageSmoothingQuality) {
              context.imageSmoothingQuality = imageSmoothingQuality;
            } // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.drawImage


            var sourceWidth = source.width;
            var sourceHeight = source.height; // Source canvas parameters

            var srcX = initialX;
            var srcY = initialY;
            var srcWidth;
            var srcHeight; // Destination canvas parameters

            var dstX;
            var dstY;
            var dstWidth;
            var dstHeight;

            if (srcX <= -initialWidth || srcX > sourceWidth) {
              srcX = 0;
              srcWidth = 0;
              dstX = 0;
              dstWidth = 0;
            } else if (srcX <= 0) {
              dstX = -srcX;
              srcX = 0;
              srcWidth = Math.min(sourceWidth, initialWidth + srcX);
              dstWidth = srcWidth;
            } else if (srcX <= sourceWidth) {
              dstX = 0;
              srcWidth = Math.min(initialWidth, sourceWidth - srcX);
              dstWidth = srcWidth;
            }

            if (srcWidth <= 0 || srcY <= -initialHeight || srcY > sourceHeight) {
              srcY = 0;
              srcHeight = 0;
              dstY = 0;
              dstHeight = 0;
            } else if (srcY <= 0) {
              dstY = -srcY;
              srcY = 0;
              srcHeight = Math.min(sourceHeight, initialHeight + srcY);
              dstHeight = srcHeight;
            } else if (srcY <= sourceHeight) {
              dstY = 0;
              srcHeight = Math.min(initialHeight, sourceHeight - srcY);
              dstHeight = srcHeight;
            }

            var params = [srcX, srcY, srcWidth, srcHeight]; // Avoid "IndexSizeError"

            if (dstWidth > 0 && dstHeight > 0) {
              var scale = width / initialWidth;
              params.push(dstX * scale, dstY * scale, dstWidth * scale, dstHeight * scale);
            } // All the numerical parameters should be integer for `drawImage`
            // https://github.com/fengyuanchen/cropper/issues/476


            context.drawImage.apply(context, [source].concat(_toConsumableArray(params.map(function (param) {
              return Math.floor(normalizeDecimalNumber(param));
            }))));
            return canvas;
          },

          /**
           * Change the aspect ratio of the crop box.
           * @param {number} aspectRatio - The new aspect ratio.
           * @returns {Cropper} this
           */
          setAspectRatio: function setAspectRatio(aspectRatio) {
            var options = this.options;

            if (!this.disabled && !isUndefined(aspectRatio)) {
              // 0 -> NaN
              options.aspectRatio = Math.max(0, aspectRatio) || NaN;

              if (this.ready) {
                this.initCropBox();

                if (this.cropped) {
                  this.renderCropBox();
                }
              }
            }

            return this;
          },

          /**
           * Change the drag mode.
           * @param {string} mode - The new drag mode.
           * @returns {Cropper} this
           */
          setDragMode: function setDragMode(mode) {
            var options = this.options,
                dragBox = this.dragBox,
                face = this.face;

            if (this.ready && !this.disabled) {
              var croppable = mode === DRAG_MODE_CROP;
              var movable = options.movable && mode === DRAG_MODE_MOVE;
              mode = croppable || movable ? mode : DRAG_MODE_NONE;
              options.dragMode = mode;
              setData(dragBox, DATA_ACTION, mode);
              toggleClass(dragBox, CLASS_CROP, croppable);
              toggleClass(dragBox, CLASS_MOVE, movable);

              if (!options.cropBoxMovable) {
                // Sync drag mode to crop box when it is not movable
                setData(face, DATA_ACTION, mode);
                toggleClass(face, CLASS_CROP, croppable);
                toggleClass(face, CLASS_MOVE, movable);
              }
            }

            return this;
          }
        };
        var AnotherCropper = WINDOW.Cropper;

        var Cropper = /*#__PURE__*/function () {
          /**
           * Create a new Cropper.
           * @param {Element} element - The target element for cropping.
           * @param {Object} [options={}] - The configuration options.
           */
          function Cropper(element) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            _classCallCheck(this, Cropper);

            if (!element || !REGEXP_TAG_NAME.test(element.tagName)) {
              throw new Error('The first argument is required and must be an <img> or <canvas> element.');
            }

            this.element = element;
            this.options = assign({}, DEFAULTS, isPlainObject(options) && options);
            this.cropped = false;
            this.disabled = false;
            this.pointers = {};
            this.ready = false;
            this.reloading = false;
            this.replaced = false;
            this.sized = false;
            this.sizing = false;
            this.init();
          }

          _createClass(Cropper, [{
            key: "init",
            value: function init() {
              var element = this.element;
              var tagName = element.tagName.toLowerCase();
              var url;

              if (element[NAMESPACE]) {
                return;
              }

              element[NAMESPACE] = this;

              if (tagName === 'img') {
                this.isImg = true; // e.g.: "img/picture.jpg"

                url = element.getAttribute('src') || '';
                this.originalUrl = url; // Stop when it's a blank image

                if (!url) {
                  return;
                } // e.g.: "https://example.com/img/picture.jpg"


                url = element.src;
              } else if (tagName === 'canvas' && window.HTMLCanvasElement) {
                url = element.toDataURL();
              }

              this.load(url);
            }
          }, {
            key: "load",
            value: function load(url) {
              var _this = this;

              if (!url) {
                return;
              }

              this.url = url;
              this.imageData = {};
              var element = this.element,
                  options = this.options;

              if (!options.rotatable && !options.scalable) {
                options.checkOrientation = false;
              } // Only IE10+ supports Typed Arrays


              if (!options.checkOrientation || !window.ArrayBuffer) {
                this.clone();
                return;
              } // Detect the mime type of the image directly if it is a Data URL


              if (REGEXP_DATA_URL.test(url)) {
                // Read ArrayBuffer from Data URL of JPEG images directly for better performance
                if (REGEXP_DATA_URL_JPEG.test(url)) {
                  this.read(dataURLToArrayBuffer(url));
                } else {
                  // Only a JPEG image may contains Exif Orientation information,
                  // the rest types of Data URLs are not necessary to check orientation at all.
                  this.clone();
                }

                return;
              } // 1. Detect the mime type of the image by a XMLHttpRequest.
              // 2. Load the image as ArrayBuffer for reading orientation if its a JPEG image.


              var xhr = new XMLHttpRequest();
              var clone = this.clone.bind(this);
              this.reloading = true;
              this.xhr = xhr; // 1. Cross origin requests are only supported for protocol schemes:
              // http, https, data, chrome, chrome-extension.
              // 2. Access to XMLHttpRequest from a Data URL will be blocked by CORS policy
              // in some browsers as IE11 and Safari.

              xhr.onabort = clone;
              xhr.onerror = clone;
              xhr.ontimeout = clone;

              xhr.onprogress = function () {
                // Abort the request directly if it not a JPEG image for better performance
                if (xhr.getResponseHeader('content-type') !== MIME_TYPE_JPEG) {
                  xhr.abort();
                }
              };

              xhr.onload = function () {
                _this.read(xhr.response);
              };

              xhr.onloadend = function () {
                _this.reloading = false;
                _this.xhr = null;
              }; // Bust cache when there is a "crossOrigin" property to avoid browser cache error


              if (options.checkCrossOrigin && isCrossOriginURL(url) && element.crossOrigin) {
                url = addTimestamp(url);
              }

              xhr.open('GET', url);
              xhr.responseType = 'arraybuffer';
              xhr.withCredentials = element.crossOrigin === 'use-credentials';
              xhr.send();
            }
          }, {
            key: "read",
            value: function read(arrayBuffer) {
              var options = this.options,
                  imageData = this.imageData; // Reset the orientation value to its default value 1
              // as some iOS browsers will render image with its orientation

              var orientation = resetAndGetOrientation(arrayBuffer);
              var rotate = 0;
              var scaleX = 1;
              var scaleY = 1;

              if (orientation > 1) {
                // Generate a new URL which has the default orientation value
                this.url = arrayBufferToDataURL(arrayBuffer, MIME_TYPE_JPEG);

                var _parseOrientation = parseOrientation(orientation);

                rotate = _parseOrientation.rotate;
                scaleX = _parseOrientation.scaleX;
                scaleY = _parseOrientation.scaleY;
              }

              if (options.rotatable) {
                imageData.rotate = rotate;
              }

              if (options.scalable) {
                imageData.scaleX = scaleX;
                imageData.scaleY = scaleY;
              }

              this.clone();
            }
          }, {
            key: "clone",
            value: function clone() {
              var element = this.element,
                  url = this.url;
              var crossOrigin = element.crossOrigin;
              var crossOriginUrl = url;

              if (this.options.checkCrossOrigin && isCrossOriginURL(url)) {
                if (!crossOrigin) {
                  crossOrigin = 'anonymous';
                } // Bust cache when there is not a "crossOrigin" property (#519)


                crossOriginUrl = addTimestamp(url);
              }

              this.crossOrigin = crossOrigin;
              this.crossOriginUrl = crossOriginUrl;
              var image = document.createElement('img');

              if (crossOrigin) {
                image.crossOrigin = crossOrigin;
              }

              image.src = crossOriginUrl || url;
              image.alt = element.alt || 'The image to crop';
              this.image = image;
              image.onload = this.start.bind(this);
              image.onerror = this.stop.bind(this);
              addClass(image, CLASS_HIDE);
              element.parentNode.insertBefore(image, element.nextSibling);
            }
          }, {
            key: "start",
            value: function start() {
              var _this2 = this;

              var image = this.image;
              image.onload = null;
              image.onerror = null;
              this.sizing = true; // Match all browsers that use WebKit as the layout engine in iOS devices,
              // such as Safari for iOS, Chrome for iOS, and in-app browsers.

              var isIOSWebKit = WINDOW.navigator && /(?:iPad|iPhone|iPod).*?AppleWebKit/i.test(WINDOW.navigator.userAgent);

              var done = function done(naturalWidth, naturalHeight) {
                assign(_this2.imageData, {
                  naturalWidth: naturalWidth,
                  naturalHeight: naturalHeight,
                  aspectRatio: naturalWidth / naturalHeight
                });
                _this2.sizing = false;
                _this2.sized = true;

                _this2.build();
              }; // Most modern browsers (excepts iOS WebKit)


              if (image.naturalWidth && !isIOSWebKit) {
                done(image.naturalWidth, image.naturalHeight);
                return;
              }

              var sizingImage = document.createElement('img');
              var body = document.body || document.documentElement;
              this.sizingImage = sizingImage;

              sizingImage.onload = function () {
                done(sizingImage.width, sizingImage.height);

                if (!isIOSWebKit) {
                  body.removeChild(sizingImage);
                }
              };

              sizingImage.src = image.src; // iOS WebKit will convert the image automatically
              // with its orientation once append it into DOM (#279)

              if (!isIOSWebKit) {
                sizingImage.style.cssText = 'left:0;' + 'max-height:none!important;' + 'max-width:none!important;' + 'min-height:0!important;' + 'min-width:0!important;' + 'opacity:0;' + 'position:absolute;' + 'top:0;' + 'z-index:-1;';
                body.appendChild(sizingImage);
              }
            }
          }, {
            key: "stop",
            value: function stop() {
              var image = this.image;
              image.onload = null;
              image.onerror = null;
              image.parentNode.removeChild(image);
              this.image = null;
            }
          }, {
            key: "build",
            value: function build() {
              if (!this.sized || this.ready) {
                return;
              }

              var element = this.element,
                  options = this.options,
                  image = this.image; // Create cropper elements

              var container = element.parentNode;
              var template = document.createElement('div');
              template.innerHTML = TEMPLATE;
              var cropper = template.querySelector(".".concat(NAMESPACE, "-container"));
              var canvas = cropper.querySelector(".".concat(NAMESPACE, "-canvas"));
              var dragBox = cropper.querySelector(".".concat(NAMESPACE, "-drag-box"));
              var cropBox = cropper.querySelector(".".concat(NAMESPACE, "-crop-box"));
              var face = cropBox.querySelector(".".concat(NAMESPACE, "-face"));
              this.container = container;
              this.cropper = cropper;
              this.canvas = canvas;
              this.dragBox = dragBox;
              this.cropBox = cropBox;
              this.viewBox = cropper.querySelector(".".concat(NAMESPACE, "-view-box"));
              this.face = face;
              canvas.appendChild(image); // Hide the original image

              addClass(element, CLASS_HIDDEN); // Inserts the cropper after to the current image

              container.insertBefore(cropper, element.nextSibling); // Show the image if is hidden

              if (!this.isImg) {
                removeClass(image, CLASS_HIDE);
              }

              this.initPreview();
              this.bind();
              options.initialAspectRatio = Math.max(0, options.initialAspectRatio) || NaN;
              options.aspectRatio = Math.max(0, options.aspectRatio) || NaN;
              options.viewMode = Math.max(0, Math.min(3, Math.round(options.viewMode))) || 0;
              addClass(cropBox, CLASS_HIDDEN);

              if (!options.guides) {
                addClass(cropBox.getElementsByClassName("".concat(NAMESPACE, "-dashed")), CLASS_HIDDEN);
              }

              if (!options.center) {
                addClass(cropBox.getElementsByClassName("".concat(NAMESPACE, "-center")), CLASS_HIDDEN);
              }

              if (options.background) {
                addClass(cropper, "".concat(NAMESPACE, "-bg"));
              }

              if (!options.highlight) {
                addClass(face, CLASS_INVISIBLE);
              }

              if (options.cropBoxMovable) {
                addClass(face, CLASS_MOVE);
                setData(face, DATA_ACTION, ACTION_ALL);
              }

              if (!options.cropBoxResizable) {
                addClass(cropBox.getElementsByClassName("".concat(NAMESPACE, "-line")), CLASS_HIDDEN);
                addClass(cropBox.getElementsByClassName("".concat(NAMESPACE, "-point")), CLASS_HIDDEN);
              }

              this.render();
              this.ready = true;
              this.setDragMode(options.dragMode);

              if (options.autoCrop) {
                this.crop();
              }

              this.setData(options.data);

              if (isFunction(options.ready)) {
                addListener(element, EVENT_READY, options.ready, {
                  once: true
                });
              }

              dispatchEvent(element, EVENT_READY);
            }
          }, {
            key: "unbuild",
            value: function unbuild() {
              if (!this.ready) {
                return;
              }

              this.ready = false;
              this.unbind();
              this.resetPreview();
              this.cropper.parentNode.removeChild(this.cropper);
              removeClass(this.element, CLASS_HIDDEN);
            }
          }, {
            key: "uncreate",
            value: function uncreate() {
              if (this.ready) {
                this.unbuild();
                this.ready = false;
                this.cropped = false;
              } else if (this.sizing) {
                this.sizingImage.onload = null;
                this.sizing = false;
                this.sized = false;
              } else if (this.reloading) {
                this.xhr.onabort = null;
                this.xhr.abort();
              } else if (this.image) {
                this.stop();
              }
            }
            /**
             * Get the no conflict cropper class.
             * @returns {Cropper} The cropper class.
             */

          }], [{
            key: "noConflict",
            value: function noConflict() {
              window.Cropper = AnotherCropper;
              return Cropper;
            }
            /**
             * Change the default options.
             * @param {Object} options - The new default options.
             */

          }, {
            key: "setDefaults",
            value: function setDefaults(options) {
              assign(DEFAULTS, isPlainObject(options) && options);
            }
          }]);

          return Cropper;
        }();

        assign(Cropper.prototype, render, preview, events, handlers, change, methods);
        return Cropper;
      });
    }, {}],
    562: [function (require, module, exports) {
      (function (process) {
        (function () {
          /* eslint-env browser */

          /**
           * This is the web browser implementation of `debug()`.
           */
          exports.formatArgs = formatArgs;
          exports.save = save;
          exports.load = load;
          exports.useColors = useColors;
          exports.storage = localstorage();

          exports.destroy = function () {
            var warned = false;
            return function () {
              if (!warned) {
                warned = true;
                console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
              }
            };
          }();
          /**
           * Colors.
           */


          exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
          /**
           * Currently only WebKit-based Web Inspectors, Firefox >= v31,
           * and the Firebug extension (any Firefox version) are known
           * to support "%c" CSS customizations.
           *
           * TODO: add a `localStorage` variable to explicitly enable/disable colors
           */
          // eslint-disable-next-line complexity

          function useColors() {
            // NB: In an Electron preload script, document will be defined but not fully
            // initialized. Since we know we're in Chrome, we'll just detect this case
            // explicitly
            if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
              return true;
            } // Internet Explorer and Edge do not support colors.


            if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
              return false;
            } // Is webkit? http://stackoverflow.com/a/16459606/376773
            // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


            return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
            typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
            // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
            typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
            typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
          }
          /**
           * Colorize log arguments if enabled.
           *
           * @api public
           */


          function formatArgs(args) {
            args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

            if (!this.useColors) {
              return;
            }

            var c = 'color: ' + this.color;
            args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
            // arguments passed either before or after the %c, so we need to
            // figure out the correct index to insert the CSS into

            var index = 0;
            var lastC = 0;
            args[0].replace(/%[a-zA-Z%]/g, function (match) {
              if (match === '%%') {
                return;
              }

              index++;

              if (match === '%c') {
                // We only are interested in the *last* %c
                // (the user may have provided their own)
                lastC = index;
              }
            });
            args.splice(lastC, 0, c);
          }
          /**
           * Invokes `console.debug()` when available.
           * No-op when `console.debug` is not a "function".
           * If `console.debug` is not available, falls back
           * to `console.log`.
           *
           * @api public
           */


          exports.log = console.debug || console.log || function () {};
          /**
           * Save `namespaces`.
           *
           * @param {String} namespaces
           * @api private
           */


          function save(namespaces) {
            try {
              if (namespaces) {
                exports.storage.setItem('debug', namespaces);
              } else {
                exports.storage.removeItem('debug');
              }
            } catch (error) {// Swallow
              // XXX (@Qix-) should we be logging these?
            }
          }
          /**
           * Load `namespaces`.
           *
           * @return {String} returns the previously persisted debug modes
           * @api private
           */


          function load() {
            var r;

            try {
              r = exports.storage.getItem('debug');
            } catch (error) {// Swallow
              // XXX (@Qix-) should we be logging these?
            } // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


            if (!r && typeof process !== 'undefined' && 'env' in process) {
              r = process.env.DEBUG;
            }

            return r;
          }
          /**
           * Localstorage attempts to return the localstorage.
           *
           * This is necessary because safari throws
           * when a user disables cookies/localstorage
           * and you attempt to access it.
           *
           * @return {LocalStorage}
           * @api private
           */


          function localstorage() {
            try {
              // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
              // The Browser also has localStorage in the global context.
              return localStorage;
            } catch (error) {// Swallow
              // XXX (@Qix-) should we be logging these?
            }
          }

          module.exports = require('./common')(exports);
          var formatters = module.exports.formatters;
          /**
           * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
           */

          formatters.j = function (v) {
            try {
              return JSON.stringify(v);
            } catch (error) {
              return '[UnexpectedJSONParseError]: ' + error.message;
            }
          };
        }).call(this);
      }).call(this, require('_process'));
    }, {
      "./common": 563,
      "_process": 596
    }],
    563: [function (require, module, exports) {
      /**
       * This is the common logic for both the Node.js and web browser
       * implementations of `debug()`.
       */
      function setup(env) {
        createDebug.debug = createDebug;
        createDebug.default = createDebug;
        createDebug.coerce = coerce;
        createDebug.disable = disable;
        createDebug.enable = enable;
        createDebug.enabled = enabled;
        createDebug.humanize = require('ms');
        createDebug.destroy = destroy;
        Object.keys(env).forEach(function (key) {
          createDebug[key] = env[key];
        });
        /**
        * The currently active debug mode names, and names to skip.
        */

        createDebug.names = [];
        createDebug.skips = [];
        /**
        * Map of special "%n" handling functions, for the debug "format" argument.
        *
        * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
        */

        createDebug.formatters = {};
        /**
        * Selects a color for a debug namespace
        * @param {String} namespace The namespace string for the for the debug instance to be colored
        * @return {Number|String} An ANSI color code for the given namespace
        * @api private
        */

        function selectColor(namespace) {
          var hash = 0;

          for (var i = 0; i < namespace.length; i++) {
            hash = (hash << 5) - hash + namespace.charCodeAt(i);
            hash |= 0; // Convert to 32bit integer
          }

          return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
        }

        createDebug.selectColor = selectColor;
        /**
        * Create a debugger with the given `namespace`.
        *
        * @param {String} namespace
        * @return {Function}
        * @api public
        */

        function createDebug(namespace) {
          var prevTime;
          var enableOverride = null;
          var namespacesCache;
          var enabledCache;

          function debug() {
            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              args[_key3] = arguments[_key3];
            }

            // Disabled?
            if (!debug.enabled) {
              return;
            }

            var self = debug; // Set `diff` timestamp

            var curr = Number(new Date());
            var ms = curr - (prevTime || curr);
            self.diff = ms;
            self.prev = prevTime;
            self.curr = curr;
            prevTime = curr;
            args[0] = createDebug.coerce(args[0]);

            if (typeof args[0] !== 'string') {
              // Anything else let's inspect with %O
              args.unshift('%O');
            } // Apply any `formatters` transformations


            var index = 0;
            args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
              // If we encounter an escaped % then don't increase the array index
              if (match === '%%') {
                return '%';
              }

              index++;
              var formatter = createDebug.formatters[format];

              if (typeof formatter === 'function') {
                var val = args[index];
                match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

                args.splice(index, 1);
                index--;
              }

              return match;
            }); // Apply env-specific formatting (colors, etc.)

            createDebug.formatArgs.call(self, args);
            var logFn = self.log || createDebug.log;
            logFn.apply(self, args);
          }

          debug.namespace = namespace;
          debug.useColors = createDebug.useColors();
          debug.color = createDebug.selectColor(namespace);
          debug.extend = extend;
          debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

          Object.defineProperty(debug, 'enabled', {
            enumerable: true,
            configurable: false,
            get: function get() {
              if (enableOverride !== null) {
                return enableOverride;
              }

              if (namespacesCache !== createDebug.namespaces) {
                namespacesCache = createDebug.namespaces;
                enabledCache = createDebug.enabled(namespace);
              }

              return enabledCache;
            },
            set: function set(v) {
              enableOverride = v;
            }
          }); // Env-specific initialization logic for debug instances

          if (typeof createDebug.init === 'function') {
            createDebug.init(debug);
          }

          return debug;
        }

        function extend(namespace, delimiter) {
          var newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
          newDebug.log = this.log;
          return newDebug;
        }
        /**
        * Enables a debug mode by namespaces. This can include modes
        * separated by a colon and wildcards.
        *
        * @param {String} namespaces
        * @api public
        */


        function enable(namespaces) {
          createDebug.save(namespaces);
          createDebug.namespaces = namespaces;
          createDebug.names = [];
          createDebug.skips = [];
          var i;
          var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
          var len = split.length;

          for (i = 0; i < len; i++) {
            if (!split[i]) {
              // ignore empty strings
              continue;
            }

            namespaces = split[i].replace(/\*/g, '.*?');

            if (namespaces[0] === '-') {
              createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
            } else {
              createDebug.names.push(new RegExp('^' + namespaces + '$'));
            }
          }
        }
        /**
        * Disable debug output.
        *
        * @return {String} namespaces
        * @api public
        */


        function disable() {
          var namespaces = [].concat(createDebug.names.map(toNamespace), createDebug.skips.map(toNamespace).map(function (namespace) {
            return '-' + namespace;
          })).join(',');
          createDebug.enable('');
          return namespaces;
        }
        /**
        * Returns true if the given mode name is enabled, false otherwise.
        *
        * @param {String} name
        * @return {Boolean}
        * @api public
        */


        function enabled(name) {
          if (name[name.length - 1] === '*') {
            return true;
          }

          var i;
          var len;

          for (i = 0, len = createDebug.skips.length; i < len; i++) {
            if (createDebug.skips[i].test(name)) {
              return false;
            }
          }

          for (i = 0, len = createDebug.names.length; i < len; i++) {
            if (createDebug.names[i].test(name)) {
              return true;
            }
          }

          return false;
        }
        /**
        * Convert regexp to namespace
        *
        * @param {RegExp} regxep
        * @return {String} namespace
        * @api private
        */


        function toNamespace(regexp) {
          return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, '*');
        }
        /**
        * Coerce `val`.
        *
        * @param {Mixed} val
        * @return {Mixed}
        * @api private
        */


        function coerce(val) {
          if (val instanceof Error) {
            return val.stack || val.message;
          }

          return val;
        }
        /**
        * XXX DO NOT USE. This is a temporary stub function.
        * XXX It WILL be removed in the next major release.
        */


        function destroy() {
          console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
        }

        createDebug.enable(createDebug.load());
        return createDebug;
      }

      module.exports = setup;
    }, {
      "ms": 591
    }],
    564: [function (require, module, exports) {
      module.exports = function () {
        if (typeof self !== "undefined") {
          return self;
        } else if (typeof window !== "undefined") {
          return window;
        } else {
          return Function("return this")();
        }
      }();
    }, {}],
    565: [function (require, module, exports) {
      var Socket = require("./socket");

      module.exports = function (uri, opts) {
        return new Socket(uri, opts);
      };
      /**
       * Expose deps for legacy compatibility
       * and standalone browser access.
       */


      module.exports.Socket = Socket;
      module.exports.protocol = Socket.protocol; // this is an int

      module.exports.Transport = require("./transport");
      module.exports.transports = require("./transports/index");
      module.exports.parser = require("engine.io-parser");
    }, {
      "./socket": 566,
      "./transport": 567,
      "./transports/index": 568,
      "engine.io-parser": 579
    }],
    566: [function (require, module, exports) {
      var transports = require("./transports/index");

      var Emitter = require("component-emitter");

      var debug = require("debug")("engine.io-client:socket");

      var parser = require("engine.io-parser");

      var parseuri = require("parseuri");

      var parseqs = require("parseqs");

      var Socket = /*#__PURE__*/function (_Emitter2) {
        _inheritsLoose(Socket, _Emitter2);

        /**
         * Socket constructor.
         *
         * @param {String|Object} uri or options
         * @param {Object} options
         * @api public
         */
        function Socket(uri, opts) {
          var _this13;

          if (opts === void 0) {
            opts = {};
          }

          _this13 = _Emitter2.call(this) || this;

          if (uri && "object" === typeof uri) {
            opts = uri;
            uri = null;
          }

          if (uri) {
            uri = parseuri(uri);
            opts.hostname = uri.host;
            opts.secure = uri.protocol === "https" || uri.protocol === "wss";
            opts.port = uri.port;
            if (uri.query) opts.query = uri.query;
          } else if (opts.host) {
            opts.hostname = parseuri(opts.host).host;
          }

          _this13.secure = null != opts.secure ? opts.secure : typeof location !== "undefined" && "https:" === location.protocol;

          if (opts.hostname && !opts.port) {
            // if no port is specified manually, use the protocol default
            opts.port = _this13.secure ? "443" : "80";
          }

          _this13.hostname = opts.hostname || (typeof location !== "undefined" ? location.hostname : "localhost");
          _this13.port = opts.port || (typeof location !== "undefined" && location.port ? location.port : _this13.secure ? 443 : 80);
          _this13.transports = opts.transports || ["polling", "websocket"];
          _this13.readyState = "";
          _this13.writeBuffer = [];
          _this13.prevBufferLen = 0;
          _this13.opts = Object.assign({
            path: "/engine.io",
            agent: false,
            withCredentials: false,
            upgrade: true,
            jsonp: true,
            timestampParam: "t",
            rememberUpgrade: false,
            rejectUnauthorized: true,
            perMessageDeflate: {
              threshold: 1024
            },
            transportOptions: {},
            closeOnBeforeunload: true
          }, opts);
          _this13.opts.path = _this13.opts.path.replace(/\/$/, "") + "/";

          if (typeof _this13.opts.query === "string") {
            _this13.opts.query = parseqs.decode(_this13.opts.query);
          } // set on handshake


          _this13.id = null;
          _this13.upgrades = null;
          _this13.pingInterval = null;
          _this13.pingTimeout = null; // set on heartbeat

          _this13.pingTimeoutTimer = null;

          if (typeof addEventListener === "function") {
            if (_this13.opts.closeOnBeforeunload) {
              // Firefox closes the connection when the "beforeunload" event is emitted but not Chrome. This event listener
              // ensures every browser behaves the same (no "disconnect" event at the Socket.IO level when the page is
              // closed/reloaded)
              addEventListener("beforeunload", function () {
                if (_this13.transport) {
                  // silently close the transport
                  _this13.transport.removeAllListeners();

                  _this13.transport.close();
                }
              }, false);
            }

            if (_this13.hostname !== "localhost") {
              _this13.offlineEventListener = function () {
                _this13.onClose("transport close");
              };

              addEventListener("offline", _this13.offlineEventListener, false);
            }
          }

          _this13.open();

          return _this13;
        }
        /**
         * Creates transport of the given type.
         *
         * @param {String} transport name
         * @return {Transport}
         * @api private
         */


        var _proto = Socket.prototype;

        _proto.createTransport = function createTransport(name) {
          debug('creating transport "%s"', name);
          var query = clone(this.opts.query); // append engine.io protocol identifier

          query.EIO = parser.protocol; // transport name

          query.transport = name; // session id if we already have one

          if (this.id) query.sid = this.id;
          var opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {
            query: query,
            socket: this,
            hostname: this.hostname,
            secure: this.secure,
            port: this.port
          });
          debug("options: %j", opts);
          return new transports[name](opts);
        }
        /**
         * Initializes transport to use and starts probe.
         *
         * @api private
         */
        ;

        _proto.open = function open() {
          var _this14 = this;

          var transport;

          if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf("websocket") !== -1) {
            transport = "websocket";
          } else if (0 === this.transports.length) {
            // Emit error on next tick so it can be listened to
            setTimeout(function () {
              _this14.emit("error", "No transports available");
            }, 0);
            return;
          } else {
            transport = this.transports[0];
          }

          this.readyState = "opening"; // Retry with the next transport if the transport is disabled (jsonp: false)

          try {
            transport = this.createTransport(transport);
          } catch (e) {
            debug("error while creating transport: %s", e);
            this.transports.shift();
            this.open();
            return;
          }

          transport.open();
          this.setTransport(transport);
        }
        /**
         * Sets the current transport. Disables the existing one (if any).
         *
         * @api private
         */
        ;

        _proto.setTransport = function setTransport(transport) {
          var _this15 = this;

          debug("setting transport %s", transport.name);

          if (this.transport) {
            debug("clearing existing transport %s", this.transport.name);
            this.transport.removeAllListeners();
          } // set up transport


          this.transport = transport; // set up transport listeners

          transport.on("drain", this.onDrain.bind(this)).on("packet", this.onPacket.bind(this)).on("error", this.onError.bind(this)).on("close", function () {
            _this15.onClose("transport close");
          });
        }
        /**
         * Probes a transport.
         *
         * @param {String} transport name
         * @api private
         */
        ;

        _proto.probe = function probe(name) {
          var _this16 = this;

          debug('probing transport "%s"', name);
          var transport = this.createTransport(name, {
            probe: 1
          });
          var failed = false;
          Socket.priorWebsocketSuccess = false;

          var onTransportOpen = function onTransportOpen() {
            if (failed) return;
            debug('probe transport "%s" opened', name);
            transport.send([{
              type: "ping",
              data: "probe"
            }]);
            transport.once("packet", function (msg) {
              if (failed) return;

              if ("pong" === msg.type && "probe" === msg.data) {
                debug('probe transport "%s" pong', name);
                _this16.upgrading = true;

                _this16.emit("upgrading", transport);

                if (!transport) return;
                Socket.priorWebsocketSuccess = "websocket" === transport.name;
                debug('pausing current transport "%s"', _this16.transport.name);

                _this16.transport.pause(function () {
                  if (failed) return;
                  if ("closed" === _this16.readyState) return;
                  debug("changing transport and sending upgrade packet");
                  cleanup();

                  _this16.setTransport(transport);

                  transport.send([{
                    type: "upgrade"
                  }]);

                  _this16.emit("upgrade", transport);

                  transport = null;
                  _this16.upgrading = false;

                  _this16.flush();
                });
              } else {
                debug('probe transport "%s" failed', name);
                var err = new Error("probe error");
                err.transport = transport.name;

                _this16.emit("upgradeError", err);
              }
            });
          };

          function freezeTransport() {
            if (failed) return; // Any callback called by transport should be ignored since now

            failed = true;
            cleanup();
            transport.close();
            transport = null;
          } // Handle any error that happens while probing


          var onerror = function onerror(err) {
            var error = new Error("probe error: " + err);
            error.transport = transport.name;
            freezeTransport();
            debug('probe transport "%s" failed because of error: %s', name, err);

            _this16.emit("upgradeError", error);
          };

          function onTransportClose() {
            onerror("transport closed");
          } // When the socket is closed while we're probing


          function onclose() {
            onerror("socket closed");
          } // When the socket is upgraded while we're probing


          function onupgrade(to) {
            if (transport && to.name !== transport.name) {
              debug('"%s" works - aborting "%s"', to.name, transport.name);
              freezeTransport();
            }
          } // Remove all listeners on the transport and on self


          var cleanup = function cleanup() {
            transport.removeListener("open", onTransportOpen);
            transport.removeListener("error", onerror);
            transport.removeListener("close", onTransportClose);

            _this16.removeListener("close", onclose);

            _this16.removeListener("upgrading", onupgrade);
          };

          transport.once("open", onTransportOpen);
          transport.once("error", onerror);
          transport.once("close", onTransportClose);
          this.once("close", onclose);
          this.once("upgrading", onupgrade);
          transport.open();
        }
        /**
         * Called when connection is deemed open.
         *
         * @api public
         */
        ;

        _proto.onOpen = function onOpen() {
          debug("socket open");
          this.readyState = "open";
          Socket.priorWebsocketSuccess = "websocket" === this.transport.name;
          this.emit("open");
          this.flush(); // we check for `readyState` in case an `open`
          // listener already closed the socket

          if ("open" === this.readyState && this.opts.upgrade && this.transport.pause) {
            debug("starting upgrade probes");
            var i = 0;
            var l = this.upgrades.length;

            for (; i < l; i++) {
              this.probe(this.upgrades[i]);
            }
          }
        }
        /**
         * Handles a packet.
         *
         * @api private
         */
        ;

        _proto.onPacket = function onPacket(packet) {
          if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
            debug('socket receive: type "%s", data "%s"', packet.type, packet.data);
            this.emit("packet", packet); // Socket is live - any packet counts

            this.emit("heartbeat");

            switch (packet.type) {
              case "open":
                this.onHandshake(JSON.parse(packet.data));
                break;

              case "ping":
                this.resetPingTimeout();
                this.sendPacket("pong");
                this.emit("ping");
                this.emit("pong");
                break;

              case "error":
                var err = new Error("server error");
                err.code = packet.data;
                this.onError(err);
                break;

              case "message":
                this.emit("data", packet.data);
                this.emit("message", packet.data);
                break;
            }
          } else {
            debug('packet received with socket readyState "%s"', this.readyState);
          }
        }
        /**
         * Called upon handshake completion.
         *
         * @param {Object} handshake obj
         * @api private
         */
        ;

        _proto.onHandshake = function onHandshake(data) {
          this.emit("handshake", data);
          this.id = data.sid;
          this.transport.query.sid = data.sid;
          this.upgrades = this.filterUpgrades(data.upgrades);
          this.pingInterval = data.pingInterval;
          this.pingTimeout = data.pingTimeout;
          this.onOpen(); // In case open handler closes socket

          if ("closed" === this.readyState) return;
          this.resetPingTimeout();
        }
        /**
         * Sets and resets ping timeout timer based on server pings.
         *
         * @api private
         */
        ;

        _proto.resetPingTimeout = function resetPingTimeout() {
          var _this17 = this;

          clearTimeout(this.pingTimeoutTimer);
          this.pingTimeoutTimer = setTimeout(function () {
            _this17.onClose("ping timeout");
          }, this.pingInterval + this.pingTimeout);

          if (this.opts.autoUnref) {
            this.pingTimeoutTimer.unref();
          }
        }
        /**
         * Called on `drain` event
         *
         * @api private
         */
        ;

        _proto.onDrain = function onDrain() {
          this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important
          // for example, when upgrading, upgrade packet is sent over,
          // and a nonzero prevBufferLen could cause problems on `drain`

          this.prevBufferLen = 0;

          if (0 === this.writeBuffer.length) {
            this.emit("drain");
          } else {
            this.flush();
          }
        }
        /**
         * Flush write buffers.
         *
         * @api private
         */
        ;

        _proto.flush = function flush() {
          if ("closed" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
            debug("flushing %d packets in socket", this.writeBuffer.length);
            this.transport.send(this.writeBuffer); // keep track of current length of writeBuffer
            // splice writeBuffer and callbackBuffer on `drain`

            this.prevBufferLen = this.writeBuffer.length;
            this.emit("flush");
          }
        }
        /**
         * Sends a message.
         *
         * @param {String} message.
         * @param {Function} callback function.
         * @param {Object} options.
         * @return {Socket} for chaining.
         * @api public
         */
        ;

        _proto.write = function write(msg, options, fn) {
          this.sendPacket("message", msg, options, fn);
          return this;
        };

        _proto.send = function send(msg, options, fn) {
          this.sendPacket("message", msg, options, fn);
          return this;
        }
        /**
         * Sends a packet.
         *
         * @param {String} packet type.
         * @param {String} data.
         * @param {Object} options.
         * @param {Function} callback function.
         * @api private
         */
        ;

        _proto.sendPacket = function sendPacket(type, data, options, fn) {
          if ("function" === typeof data) {
            fn = data;
            data = undefined;
          }

          if ("function" === typeof options) {
            fn = options;
            options = null;
          }

          if ("closing" === this.readyState || "closed" === this.readyState) {
            return;
          }

          options = options || {};
          options.compress = false !== options.compress;
          var packet = {
            type: type,
            data: data,
            options: options
          };
          this.emit("packetCreate", packet);
          this.writeBuffer.push(packet);
          if (fn) this.once("flush", fn);
          this.flush();
        }
        /**
         * Closes the connection.
         *
         * @api private
         */
        ;

        _proto.close = function close() {
          var _this18 = this;

          var close = function close() {
            _this18.onClose("forced close");

            debug("socket closing - telling transport to close");

            _this18.transport.close();
          };

          var cleanupAndClose = function cleanupAndClose() {
            _this18.removeListener("upgrade", cleanupAndClose);

            _this18.removeListener("upgradeError", cleanupAndClose);

            close();
          };

          var waitForUpgrade = function waitForUpgrade() {
            // wait for upgrade to finish since we can't send packets while pausing a transport
            _this18.once("upgrade", cleanupAndClose);

            _this18.once("upgradeError", cleanupAndClose);
          };

          if ("opening" === this.readyState || "open" === this.readyState) {
            this.readyState = "closing";

            if (this.writeBuffer.length) {
              this.once("drain", function () {
                if (_this18.upgrading) {
                  waitForUpgrade();
                } else {
                  close();
                }
              });
            } else if (this.upgrading) {
              waitForUpgrade();
            } else {
              close();
            }
          }

          return this;
        }
        /**
         * Called upon transport error
         *
         * @api private
         */
        ;

        _proto.onError = function onError(err) {
          debug("socket error %j", err);
          Socket.priorWebsocketSuccess = false;
          this.emit("error", err);
          this.onClose("transport error", err);
        }
        /**
         * Called upon transport close.
         *
         * @api private
         */
        ;

        _proto.onClose = function onClose(reason, desc) {
          if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
            debug('socket close with reason: "%s"', reason); // clear timers

            clearTimeout(this.pingIntervalTimer);
            clearTimeout(this.pingTimeoutTimer); // stop event from firing again for transport

            this.transport.removeAllListeners("close"); // ensure transport won't stay open

            this.transport.close(); // ignore further transport communication

            this.transport.removeAllListeners();

            if (typeof removeEventListener === "function") {
              removeEventListener("offline", this.offlineEventListener, false);
            } // set ready state


            this.readyState = "closed"; // clear session id

            this.id = null; // emit close event

            this.emit("close", reason, desc); // clean buffers after, so users can still
            // grab the buffers on `close` event

            this.writeBuffer = [];
            this.prevBufferLen = 0;
          }
        }
        /**
         * Filters upgrades, returning only those matching client transports.
         *
         * @param {Array} server upgrades
         * @api private
         *
         */
        ;

        _proto.filterUpgrades = function filterUpgrades(upgrades) {
          var filteredUpgrades = [];
          var i = 0;
          var j = upgrades.length;

          for (; i < j; i++) {
            if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);
          }

          return filteredUpgrades;
        };

        return Socket;
      }(Emitter);

      Socket.priorWebsocketSuccess = false;
      /**
       * Protocol version.
       *
       * @api public
       */

      Socket.protocol = parser.protocol; // this is an int

      function clone(obj) {
        var o = {};

        for (var i in obj) {
          if (obj.hasOwnProperty(i)) {
            o[i] = obj[i];
          }
        }

        return o;
      }

      module.exports = Socket;
    }, {
      "./transports/index": 568,
      "component-emitter": 8,
      "debug": 562,
      "engine.io-parser": 579,
      "parseqs": 593,
      "parseuri": 594
    }],
    567: [function (require, module, exports) {
      var parser = require("engine.io-parser");

      var Emitter = require("component-emitter");

      var debug = require("debug")("engine.io-client:transport");

      var Transport = /*#__PURE__*/function (_Emitter3) {
        _inheritsLoose(Transport, _Emitter3);

        /**
         * Transport abstract constructor.
         *
         * @param {Object} options.
         * @api private
         */
        function Transport(opts) {
          var _this19;

          _this19 = _Emitter3.call(this) || this;
          _this19.opts = opts;
          _this19.query = opts.query;
          _this19.readyState = "";
          _this19.socket = opts.socket;
          return _this19;
        }
        /**
         * Emits an error.
         *
         * @param {String} str
         * @return {Transport} for chaining
         * @api public
         */


        var _proto2 = Transport.prototype;

        _proto2.onError = function onError(msg, desc) {
          var err = new Error(msg);
          err.type = "TransportError";
          err.description = desc;
          this.emit("error", err);
          return this;
        }
        /**
         * Opens the transport.
         *
         * @api public
         */
        ;

        _proto2.open = function open() {
          if ("closed" === this.readyState || "" === this.readyState) {
            this.readyState = "opening";
            this.doOpen();
          }

          return this;
        }
        /**
         * Closes the transport.
         *
         * @api private
         */
        ;

        _proto2.close = function close() {
          if ("opening" === this.readyState || "open" === this.readyState) {
            this.doClose();
            this.onClose();
          }

          return this;
        }
        /**
         * Sends multiple packets.
         *
         * @param {Array} packets
         * @api private
         */
        ;

        _proto2.send = function send(packets) {
          if ("open" === this.readyState) {
            this.write(packets);
          } else {
            // this might happen if the transport was silently closed in the beforeunload event handler
            debug("transport is not open, discarding packets");
          }
        }
        /**
         * Called upon open
         *
         * @api private
         */
        ;

        _proto2.onOpen = function onOpen() {
          this.readyState = "open";
          this.writable = true;
          this.emit("open");
        }
        /**
         * Called with data.
         *
         * @param {String} data
         * @api private
         */
        ;

        _proto2.onData = function onData(data) {
          var packet = parser.decodePacket(data, this.socket.binaryType);
          this.onPacket(packet);
        }
        /**
         * Called with a decoded packet.
         */
        ;

        _proto2.onPacket = function onPacket(packet) {
          this.emit("packet", packet);
        }
        /**
         * Called upon close.
         *
         * @api private
         */
        ;

        _proto2.onClose = function onClose() {
          this.readyState = "closed";
          this.emit("close");
        };

        return Transport;
      }(Emitter);

      module.exports = Transport;
    }, {
      "component-emitter": 8,
      "debug": 562,
      "engine.io-parser": 579
    }],
    568: [function (require, module, exports) {
      var XMLHttpRequest = require("../../contrib/xmlhttprequest-ssl/XMLHttpRequest");

      var XHR = require("./polling-xhr");

      var JSONP = require("./polling-jsonp");

      var websocket = require("./websocket");

      exports.polling = polling;
      exports.websocket = websocket;
      /**
       * Polling transport polymorphic constructor.
       * Decides on xhr vs jsonp based on feature detection.
       *
       * @api private
       */

      function polling(opts) {
        var xhr;
        var xd = false;
        var xs = false;
        var jsonp = false !== opts.jsonp;

        if (typeof location !== "undefined") {
          var isSSL = "https:" === location.protocol;
          var port = location.port; // some user agents have empty `location.port`

          if (!port) {
            port = isSSL ? 443 : 80;
          }

          xd = opts.hostname !== location.hostname || port !== opts.port;
          xs = opts.secure !== isSSL;
        }

        opts.xdomain = xd;
        opts.xscheme = xs;
        xhr = new XMLHttpRequest(opts);

        if ("open" in xhr && !opts.forceJSONP) {
          return new XHR(opts);
        } else {
          if (!jsonp) throw new Error("JSONP disabled");
          return new JSONP(opts);
        }
      }
    }, {
      "../../contrib/xmlhttprequest-ssl/XMLHttpRequest": 575,
      "./polling-jsonp": 569,
      "./polling-xhr": 570,
      "./websocket": 573
    }],
    569: [function (require, module, exports) {
      var Polling = require("./polling");

      var globalThis = require("../globalThis");

      var rNewline = /\n/g;
      var rEscapedNewline = /\\n/g;
      /**
       * Global JSONP callbacks.
       */

      var callbacks;

      var JSONPPolling = /*#__PURE__*/function (_Polling) {
        _inheritsLoose(JSONPPolling, _Polling);

        /**
         * JSONP Polling constructor.
         *
         * @param {Object} opts.
         * @api public
         */
        function JSONPPolling(opts) {
          var _this20;

          _this20 = _Polling.call(this, opts) || this;
          _this20.query = _this20.query || {}; // define global callbacks array if not present
          // we do this here (lazily) to avoid unneeded global pollution

          if (!callbacks) {
            // we need to consider multiple engines in the same page
            callbacks = globalThis.___eio = globalThis.___eio || [];
          } // callback identifier


          _this20.index = callbacks.length; // add callback to jsonp global

          callbacks.push(_this20.onData.bind(_assertThisInitialized2(_this20))); // append to query string

          _this20.query.j = _this20.index;
          return _this20;
        }
        /**
         * JSONP only supports binary as base64 encoded strings
         */


        var _proto3 = JSONPPolling.prototype;

        /**
         * Closes the socket.
         *
         * @api private
         */
        _proto3.doClose = function doClose() {
          if (this.script) {
            // prevent spurious errors from being emitted when the window is unloaded
            this.script.onerror = function () {};

            this.script.parentNode.removeChild(this.script);
            this.script = null;
          }

          if (this.form) {
            this.form.parentNode.removeChild(this.form);
            this.form = null;
            this.iframe = null;
          }

          _Polling.prototype.doClose.call(this);
        }
        /**
         * Starts a poll cycle.
         *
         * @api private
         */
        ;

        _proto3.doPoll = function doPoll() {
          var _this21 = this;

          var script = document.createElement("script");

          if (this.script) {
            this.script.parentNode.removeChild(this.script);
            this.script = null;
          }

          script.async = true;
          script.src = this.uri();

          script.onerror = function (e) {
            _this21.onError("jsonp poll error", e);
          };

          var insertAt = document.getElementsByTagName("script")[0];

          if (insertAt) {
            insertAt.parentNode.insertBefore(script, insertAt);
          } else {
            (document.head || document.body).appendChild(script);
          }

          this.script = script;
          var isUAgecko = "undefined" !== typeof navigator && /gecko/i.test(navigator.userAgent);

          if (isUAgecko) {
            setTimeout(function () {
              var iframe = document.createElement("iframe");
              document.body.appendChild(iframe);
              document.body.removeChild(iframe);
            }, 100);
          }
        }
        /**
         * Writes with a hidden iframe.
         *
         * @param {String} data to send
         * @param {Function} called upon flush.
         * @api private
         */
        ;

        _proto3.doWrite = function doWrite(data, fn) {
          var _this22 = this;

          var iframe;

          if (!this.form) {
            var form = document.createElement("form");
            var area = document.createElement("textarea");
            var id = this.iframeId = "eio_iframe_" + this.index;
            form.className = "socketio";
            form.style.position = "absolute";
            form.style.top = "-1000px";
            form.style.left = "-1000px";
            form.target = id;
            form.method = "POST";
            form.setAttribute("accept-charset", "utf-8");
            area.name = "d";
            form.appendChild(area);
            document.body.appendChild(form);
            this.form = form;
            this.area = area;
          }

          this.form.action = this.uri();

          function complete() {
            initIframe();
            fn();
          }

          var initIframe = function initIframe() {
            if (_this22.iframe) {
              try {
                _this22.form.removeChild(_this22.iframe);
              } catch (e) {
                _this22.onError("jsonp polling iframe removal error", e);
              }
            }

            try {
              // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
              var html = '<iframe src="javascript:0" name="' + _this22.iframeId + '">';
              iframe = document.createElement(html);
            } catch (e) {
              iframe = document.createElement("iframe");
              iframe.name = _this22.iframeId;
              iframe.src = "javascript:0";
            }

            iframe.id = _this22.iframeId;

            _this22.form.appendChild(iframe);

            _this22.iframe = iframe;
          };

          initIframe(); // escape \n to prevent it from being converted into \r\n by some UAs
          // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side

          data = data.replace(rEscapedNewline, "\\\n");
          this.area.value = data.replace(rNewline, "\\n");

          try {
            this.form.submit();
          } catch (e) {}

          if (this.iframe.attachEvent) {
            this.iframe.onreadystatechange = function () {
              if (_this22.iframe.readyState === "complete") {
                complete();
              }
            };
          } else {
            this.iframe.onload = complete;
          }
        };

        _createClass2(JSONPPolling, [{
          key: "supportsBinary",
          get: function get() {
            return false;
          }
        }]);

        return JSONPPolling;
      }(Polling);

      module.exports = JSONPPolling;
    }, {
      "../globalThis": 564,
      "./polling": 571
    }],
    570: [function (require, module, exports) {
      /* global attachEvent */
      var XMLHttpRequest = require("../../contrib/xmlhttprequest-ssl/XMLHttpRequest");

      var Polling = require("./polling");

      var Emitter = require("component-emitter");

      var _require = require("../util"),
          pick = _require.pick;

      var globalThis = require("../globalThis");

      var debug = require("debug")("engine.io-client:polling-xhr");
      /**
       * Empty function
       */


      function empty() {}

      var hasXHR2 = function () {
        var xhr = new XMLHttpRequest({
          xdomain: false
        });
        return null != xhr.responseType;
      }();

      var XHR = /*#__PURE__*/function (_Polling2) {
        _inheritsLoose(XHR, _Polling2);

        /**
         * XHR Polling constructor.
         *
         * @param {Object} opts
         * @api public
         */
        function XHR(opts) {
          var _this23;

          _this23 = _Polling2.call(this, opts) || this;

          if (typeof location !== "undefined") {
            var isSSL = "https:" === location.protocol;
            var port = location.port; // some user agents have empty `location.port`

            if (!port) {
              port = isSSL ? 443 : 80;
            }

            _this23.xd = typeof location !== "undefined" && opts.hostname !== location.hostname || port !== opts.port;
            _this23.xs = opts.secure !== isSSL;
          }
          /**
           * XHR supports binary
           */


          var forceBase64 = opts && opts.forceBase64;
          _this23.supportsBinary = hasXHR2 && !forceBase64;
          return _this23;
        }
        /**
         * Creates a request.
         *
         * @param {String} method
         * @api private
         */


        var _proto4 = XHR.prototype;

        _proto4.request = function request(opts) {
          if (opts === void 0) {
            opts = {};
          }

          Object.assign(opts, {
            xd: this.xd,
            xs: this.xs
          }, this.opts);
          return new Request(this.uri(), opts);
        }
        /**
         * Sends data.
         *
         * @param {String} data to send.
         * @param {Function} called upon flush.
         * @api private
         */
        ;

        _proto4.doWrite = function doWrite(data, fn) {
          var _this24 = this;

          var req = this.request({
            method: "POST",
            data: data
          });
          req.on("success", fn);
          req.on("error", function (err) {
            _this24.onError("xhr post error", err);
          });
        }
        /**
         * Starts a poll cycle.
         *
         * @api private
         */
        ;

        _proto4.doPoll = function doPoll() {
          var _this25 = this;

          debug("xhr poll");
          var req = this.request();
          req.on("data", this.onData.bind(this));
          req.on("error", function (err) {
            _this25.onError("xhr poll error", err);
          });
          this.pollXhr = req;
        };

        return XHR;
      }(Polling);

      var Request = /*#__PURE__*/function (_Emitter4) {
        _inheritsLoose(Request, _Emitter4);

        /**
         * Request constructor
         *
         * @param {Object} options
         * @api public
         */
        function Request(uri, opts) {
          var _this26;

          _this26 = _Emitter4.call(this) || this;
          _this26.opts = opts;
          _this26.method = opts.method || "GET";
          _this26.uri = uri;
          _this26.async = false !== opts.async;
          _this26.data = undefined !== opts.data ? opts.data : null;

          _this26.create();

          return _this26;
        }
        /**
         * Creates the XHR object and sends the request.
         *
         * @api private
         */


        var _proto5 = Request.prototype;

        _proto5.create = function create() {
          var _this27 = this;

          var opts = pick(this.opts, "agent", "enablesXDR", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
          opts.xdomain = !!this.opts.xd;
          opts.xscheme = !!this.opts.xs;
          var xhr = this.xhr = new XMLHttpRequest(opts);

          try {
            debug("xhr open %s: %s", this.method, this.uri);
            xhr.open(this.method, this.uri, this.async);

            try {
              if (this.opts.extraHeaders) {
                xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);

                for (var i in this.opts.extraHeaders) {
                  if (this.opts.extraHeaders.hasOwnProperty(i)) {
                    xhr.setRequestHeader(i, this.opts.extraHeaders[i]);
                  }
                }
              }
            } catch (e) {}

            if ("POST" === this.method) {
              try {
                xhr.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
              } catch (e) {}
            }

            try {
              xhr.setRequestHeader("Accept", "*/*");
            } catch (e) {} // ie6 check


            if ("withCredentials" in xhr) {
              xhr.withCredentials = this.opts.withCredentials;
            }

            if (this.opts.requestTimeout) {
              xhr.timeout = this.opts.requestTimeout;
            }

            if (this.hasXDR()) {
              xhr.onload = function () {
                _this27.onLoad();
              };

              xhr.onerror = function () {
                _this27.onError(xhr.responseText);
              };
            } else {
              xhr.onreadystatechange = function () {
                if (4 !== xhr.readyState) return;

                if (200 === xhr.status || 1223 === xhr.status) {
                  _this27.onLoad();
                } else {
                  // make sure the `error` event handler that's user-set
                  // does not throw in the same tick and gets caught here
                  setTimeout(function () {
                    _this27.onError(typeof xhr.status === "number" ? xhr.status : 0);
                  }, 0);
                }
              };
            }

            debug("xhr data %s", this.data);
            xhr.send(this.data);
          } catch (e) {
            // Need to defer since .create() is called directly from the constructor
            // and thus the 'error' event can only be only bound *after* this exception
            // occurs.  Therefore, also, we cannot throw here at all.
            setTimeout(function () {
              _this27.onError(e);
            }, 0);
            return;
          }

          if (typeof document !== "undefined") {
            this.index = Request.requestsCount++;
            Request.requests[this.index] = this;
          }
        }
        /**
         * Called upon successful response.
         *
         * @api private
         */
        ;

        _proto5.onSuccess = function onSuccess() {
          this.emit("success");
          this.cleanup();
        }
        /**
         * Called if we have data.
         *
         * @api private
         */
        ;

        _proto5.onData = function onData(data) {
          this.emit("data", data);
          this.onSuccess();
        }
        /**
         * Called upon error.
         *
         * @api private
         */
        ;

        _proto5.onError = function onError(err) {
          this.emit("error", err);
          this.cleanup(true);
        }
        /**
         * Cleans up house.
         *
         * @api private
         */
        ;

        _proto5.cleanup = function cleanup(fromError) {
          if ("undefined" === typeof this.xhr || null === this.xhr) {
            return;
          } // xmlhttprequest


          if (this.hasXDR()) {
            this.xhr.onload = this.xhr.onerror = empty;
          } else {
            this.xhr.onreadystatechange = empty;
          }

          if (fromError) {
            try {
              this.xhr.abort();
            } catch (e) {}
          }

          if (typeof document !== "undefined") {
            delete Request.requests[this.index];
          }

          this.xhr = null;
        }
        /**
         * Called upon load.
         *
         * @api private
         */
        ;

        _proto5.onLoad = function onLoad() {
          var data = this.xhr.responseText;

          if (data !== null) {
            this.onData(data);
          }
        }
        /**
         * Check if it has XDomainRequest.
         *
         * @api private
         */
        ;

        _proto5.hasXDR = function hasXDR() {
          return typeof XDomainRequest !== "undefined" && !this.xs && this.enablesXDR;
        }
        /**
         * Aborts the request.
         *
         * @api public
         */
        ;

        _proto5.abort = function abort() {
          this.cleanup();
        };

        return Request;
      }(Emitter);
      /**
       * Aborts pending requests when unloading the window. This is needed to prevent
       * memory leaks (e.g. when using IE) and to ensure that no spurious error is
       * emitted.
       */


      Request.requestsCount = 0;
      Request.requests = {};

      if (typeof document !== "undefined") {
        if (typeof attachEvent === "function") {
          attachEvent("onunload", unloadHandler);
        } else if (typeof addEventListener === "function") {
          var terminationEvent = "onpagehide" in globalThis ? "pagehide" : "unload";
          addEventListener(terminationEvent, unloadHandler, false);
        }
      }

      function unloadHandler() {
        for (var i in Request.requests) {
          if (Request.requests.hasOwnProperty(i)) {
            Request.requests[i].abort();
          }
        }
      }

      module.exports = XHR;
      module.exports.Request = Request;
    }, {
      "../../contrib/xmlhttprequest-ssl/XMLHttpRequest": 575,
      "../globalThis": 564,
      "../util": 574,
      "./polling": 571,
      "component-emitter": 8,
      "debug": 562
    }],
    571: [function (require, module, exports) {
      var Transport = require("../transport");

      var parseqs = require("parseqs");

      var parser = require("engine.io-parser");

      var yeast = require("yeast");

      var debug = require("debug")("engine.io-client:polling");

      var Polling = /*#__PURE__*/function (_Transport) {
        _inheritsLoose(Polling, _Transport);

        function Polling() {
          return _Transport.apply(this, arguments) || this;
        }

        var _proto6 = Polling.prototype;

        /**
         * Opens the socket (triggers polling). We write a PING message to determine
         * when the transport is open.
         *
         * @api private
         */
        _proto6.doOpen = function doOpen() {
          this.poll();
        }
        /**
         * Pauses polling.
         *
         * @param {Function} callback upon buffers are flushed and transport is paused
         * @api private
         */
        ;

        _proto6.pause = function pause(onPause) {
          var _this28 = this;

          this.readyState = "pausing";

          var pause = function pause() {
            debug("paused");
            _this28.readyState = "paused";
            onPause();
          };

          if (this.polling || !this.writable) {
            var total = 0;

            if (this.polling) {
              debug("we are currently polling - waiting to pause");
              total++;
              this.once("pollComplete", function () {
                debug("pre-pause polling complete");
                --total || pause();
              });
            }

            if (!this.writable) {
              debug("we are currently writing - waiting to pause");
              total++;
              this.once("drain", function () {
                debug("pre-pause writing complete");
                --total || pause();
              });
            }
          } else {
            pause();
          }
        }
        /**
         * Starts polling cycle.
         *
         * @api public
         */
        ;

        _proto6.poll = function poll() {
          debug("polling");
          this.polling = true;
          this.doPoll();
          this.emit("poll");
        }
        /**
         * Overloads onData to detect payloads.
         *
         * @api private
         */
        ;

        _proto6.onData = function onData(data) {
          var _this29 = this;

          debug("polling got data %s", data);

          var callback = function callback(packet) {
            // if its the first message we consider the transport open
            if ("opening" === _this29.readyState && packet.type === "open") {
              _this29.onOpen();
            } // if its a close packet, we close the ongoing requests


            if ("close" === packet.type) {
              _this29.onClose();

              return false;
            } // otherwise bypass onData and handle the message


            _this29.onPacket(packet);
          }; // decode payload


          parser.decodePayload(data, this.socket.binaryType).forEach(callback); // if an event did not trigger closing

          if ("closed" !== this.readyState) {
            // if we got data we're not polling
            this.polling = false;
            this.emit("pollComplete");

            if ("open" === this.readyState) {
              this.poll();
            } else {
              debug('ignoring poll - transport state "%s"', this.readyState);
            }
          }
        }
        /**
         * For polling, send a close packet.
         *
         * @api private
         */
        ;

        _proto6.doClose = function doClose() {
          var _this30 = this;

          var close = function close() {
            debug("writing close packet");

            _this30.write([{
              type: "close"
            }]);
          };

          if ("open" === this.readyState) {
            debug("transport open - closing");
            close();
          } else {
            // in case we're trying to close while
            // handshaking is in progress (GH-164)
            debug("transport not open - deferring close");
            this.once("open", close);
          }
        }
        /**
         * Writes a packets payload.
         *
         * @param {Array} data packets
         * @param {Function} drain callback
         * @api private
         */
        ;

        _proto6.write = function write(packets) {
          var _this31 = this;

          this.writable = false;
          parser.encodePayload(packets, function (data) {
            _this31.doWrite(data, function () {
              _this31.writable = true;

              _this31.emit("drain");
            });
          });
        }
        /**
         * Generates uri for connection.
         *
         * @api private
         */
        ;

        _proto6.uri = function uri() {
          var query = this.query || {};
          var schema = this.opts.secure ? "https" : "http";
          var port = ""; // cache busting is forced

          if (false !== this.opts.timestampRequests) {
            query[this.opts.timestampParam] = yeast();
          }

          if (!this.supportsBinary && !query.sid) {
            query.b64 = 1;
          }

          query = parseqs.encode(query); // avoid port if default for schema

          if (this.opts.port && ("https" === schema && Number(this.opts.port) !== 443 || "http" === schema && Number(this.opts.port) !== 80)) {
            port = ":" + this.opts.port;
          } // prepend ? to query


          if (query.length) {
            query = "?" + query;
          }

          var ipv6 = this.opts.hostname.indexOf(":") !== -1;
          return schema + "://" + (ipv6 ? "[" + this.opts.hostname + "]" : this.opts.hostname) + port + this.opts.path + query;
        };

        _createClass2(Polling, [{
          key: "name",
          get:
          /**
           * Transport name.
           */
          function get() {
            return "polling";
          }
        }]);

        return Polling;
      }(Transport);

      module.exports = Polling;
    }, {
      "../transport": 567,
      "debug": 562,
      "engine.io-parser": 579,
      "parseqs": 593,
      "yeast": 626
    }],
    572: [function (require, module, exports) {
      var globalThis = require("../globalThis");

      var nextTick = function () {
        var isPromiseAvailable = typeof Promise === "function" && typeof Promise.resolve === "function";

        if (isPromiseAvailable) {
          return function (cb) {
            return Promise.resolve().then(cb);
          };
        } else {
          return function (cb) {
            return setTimeout(cb, 0);
          };
        }
      }();

      module.exports = {
        WebSocket: globalThis.WebSocket || globalThis.MozWebSocket,
        usingBrowserWebSocket: true,
        defaultBinaryType: "arraybuffer",
        nextTick: nextTick
      };
    }, {
      "../globalThis": 564
    }],
    573: [function (require, module, exports) {
      (function (Buffer) {
        (function () {
          var Transport = require("../transport");

          var parser = require("engine.io-parser");

          var parseqs = require("parseqs");

          var yeast = require("yeast");

          var _require2 = require("../util"),
              pick = _require2.pick;

          var _require3 = require("./websocket-constructor"),
              WebSocket = _require3.WebSocket,
              usingBrowserWebSocket = _require3.usingBrowserWebSocket,
              defaultBinaryType = _require3.defaultBinaryType,
              nextTick = _require3.nextTick;

          var debug = require("debug")("engine.io-client:websocket"); // detect ReactNative environment


          var isReactNative = typeof navigator !== "undefined" && typeof navigator.product === "string" && navigator.product.toLowerCase() === "reactnative";

          var WS = /*#__PURE__*/function (_Transport2) {
            _inheritsLoose(WS, _Transport2);

            /**
             * WebSocket transport constructor.
             *
             * @api {Object} connection options
             * @api public
             */
            function WS(opts) {
              var _this32;

              _this32 = _Transport2.call(this, opts) || this;
              _this32.supportsBinary = !opts.forceBase64;
              return _this32;
            }
            /**
             * Transport name.
             *
             * @api public
             */


            var _proto7 = WS.prototype;

            /**
             * Opens socket.
             *
             * @api private
             */
            _proto7.doOpen = function doOpen() {
              if (!this.check()) {
                // let probe timeout
                return;
              }

              var uri = this.uri();
              var protocols = this.opts.protocols; // React Native only supports the 'headers' option, and will print a warning if anything else is passed

              var opts = isReactNative ? {} : pick(this.opts, "agent", "perMessageDeflate", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "localAddress", "protocolVersion", "origin", "maxPayload", "family", "checkServerIdentity");

              if (this.opts.extraHeaders) {
                opts.headers = this.opts.extraHeaders;
              }

              try {
                this.ws = usingBrowserWebSocket && !isReactNative ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);
              } catch (err) {
                return this.emit("error", err);
              }

              this.ws.binaryType = this.socket.binaryType || defaultBinaryType;
              this.addEventListeners();
            }
            /**
             * Adds event listeners to the socket
             *
             * @api private
             */
            ;

            _proto7.addEventListeners = function addEventListeners() {
              var _this33 = this;

              this.ws.onopen = function () {
                if (_this33.opts.autoUnref) {
                  _this33.ws._socket.unref();
                }

                _this33.onOpen();
              };

              this.ws.onclose = this.onClose.bind(this);

              this.ws.onmessage = function (ev) {
                return _this33.onData(ev.data);
              };

              this.ws.onerror = function (e) {
                return _this33.onError("websocket error", e);
              };
            }
            /**
             * Writes data to socket.
             *
             * @param {Array} array of packets.
             * @api private
             */
            ;

            _proto7.write = function write(packets) {
              var _this34 = this;

              this.writable = false; // encodePacket efficient as it uses WS framing
              // no need for encodePayload

              var _loop = function _loop(i) {
                var packet = packets[i];
                var lastPacket = i === packets.length - 1;
                parser.encodePacket(packet, _this34.supportsBinary, function (data) {
                  // always create a new object (GH-437)
                  var opts = {};

                  if (!usingBrowserWebSocket) {
                    if (packet.options) {
                      opts.compress = packet.options.compress;
                    }

                    if (_this34.opts.perMessageDeflate) {
                      var len = "string" === typeof data ? Buffer.byteLength(data) : data.length;

                      if (len < _this34.opts.perMessageDeflate.threshold) {
                        opts.compress = false;
                      }
                    }
                  } // Sometimes the websocket has already been closed but the browser didn't
                  // have a chance of informing us about it yet, in that case send will
                  // throw an error


                  try {
                    if (usingBrowserWebSocket) {
                      // TypeError is thrown when passing the second argument on Safari
                      _this34.ws.send(data);
                    } else {
                      _this34.ws.send(data, opts);
                    }
                  } catch (e) {
                    debug("websocket closed before onclose event");
                  }

                  if (lastPacket) {
                    // fake drain
                    // defer to next tick to allow Socket to clear writeBuffer
                    nextTick(function () {
                      _this34.writable = true;

                      _this34.emit("drain");
                    });
                  }
                });
              };

              for (var i = 0; i < packets.length; i++) {
                _loop(i);
              }
            }
            /**
             * Called upon close
             *
             * @api private
             */
            ;

            _proto7.onClose = function onClose() {
              Transport.prototype.onClose.call(this);
            }
            /**
             * Closes socket.
             *
             * @api private
             */
            ;

            _proto7.doClose = function doClose() {
              if (typeof this.ws !== "undefined") {
                this.ws.close();
                this.ws = null;
              }
            }
            /**
             * Generates uri for connection.
             *
             * @api private
             */
            ;

            _proto7.uri = function uri() {
              var query = this.query || {};
              var schema = this.opts.secure ? "wss" : "ws";
              var port = ""; // avoid port if default for schema

              if (this.opts.port && ("wss" === schema && Number(this.opts.port) !== 443 || "ws" === schema && Number(this.opts.port) !== 80)) {
                port = ":" + this.opts.port;
              } // append timestamp to URI


              if (this.opts.timestampRequests) {
                query[this.opts.timestampParam] = yeast();
              } // communicate binary support capabilities


              if (!this.supportsBinary) {
                query.b64 = 1;
              }

              query = parseqs.encode(query); // prepend ? to query

              if (query.length) {
                query = "?" + query;
              }

              var ipv6 = this.opts.hostname.indexOf(":") !== -1;
              return schema + "://" + (ipv6 ? "[" + this.opts.hostname + "]" : this.opts.hostname) + port + this.opts.path + query;
            }
            /**
             * Feature detection for WebSocket.
             *
             * @return {Boolean} whether this transport is available.
             * @api public
             */
            ;

            _proto7.check = function check() {
              return !!WebSocket && !("__initialize" in WebSocket && this.name === WS.prototype.name);
            };

            _createClass2(WS, [{
              key: "name",
              get: function get() {
                return "websocket";
              }
            }]);

            return WS;
          }(Transport);

          module.exports = WS;
        }).call(this);
      }).call(this, require("buffer").Buffer);
    }, {
      "../transport": 567,
      "../util": 574,
      "./websocket-constructor": 572,
      "buffer": 6,
      "debug": 562,
      "engine.io-parser": 579,
      "parseqs": 593,
      "yeast": 626
    }],
    574: [function (require, module, exports) {
      module.exports.pick = function (obj) {
        for (var _len4 = arguments.length, attr = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          attr[_key4 - 1] = arguments[_key4];
        }

        return attr.reduce(function (acc, k) {
          if (obj.hasOwnProperty(k)) {
            acc[k] = obj[k];
          }

          return acc;
        }, {});
      };
    }, {}],
    575: [function (require, module, exports) {
      // browser shim for xmlhttprequest module
      var hasCORS = require("has-cors");

      var globalThis = require("./globalThis");

      module.exports = function (opts) {
        var xdomain = opts.xdomain; // scheme must be same when usign XDomainRequest
        // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx

        var xscheme = opts.xscheme; // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
        // https://github.com/Automattic/engine.io-client/pull/217

        var enablesXDR = opts.enablesXDR; // XMLHttpRequest can be disabled on IE

        try {
          if ("undefined" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
            return new XMLHttpRequest();
          }
        } catch (e) {} // Use XDomainRequest for IE8 if enablesXDR is true
        // because loading bar keeps flashing when using jsonp-polling
        // https://github.com/yujiosaka/socke.io-ie8-loading-example


        try {
          if ("undefined" !== typeof XDomainRequest && !xscheme && enablesXDR) {
            return new XDomainRequest();
          }
        } catch (e) {}

        if (!xdomain) {
          try {
            return new globalThis[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
          } catch (e) {}
        }
      };
    }, {
      "./globalThis": 564,
      "has-cors": 582
    }],
    576: [function (require, module, exports) {
      var PACKET_TYPES = Object.create(null); // no Map = no polyfill

      PACKET_TYPES["open"] = "0";
      PACKET_TYPES["close"] = "1";
      PACKET_TYPES["ping"] = "2";
      PACKET_TYPES["pong"] = "3";
      PACKET_TYPES["message"] = "4";
      PACKET_TYPES["upgrade"] = "5";
      PACKET_TYPES["noop"] = "6";
      var PACKET_TYPES_REVERSE = Object.create(null);
      Object.keys(PACKET_TYPES).forEach(function (key) {
        PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;
      });
      var ERROR_PACKET = {
        type: "error",
        data: "parser error"
      };
      module.exports = {
        PACKET_TYPES: PACKET_TYPES,
        PACKET_TYPES_REVERSE: PACKET_TYPES_REVERSE,
        ERROR_PACKET: ERROR_PACKET
      };
    }, {}],
    577: [function (require, module, exports) {
      var _require4 = require("./commons"),
          PACKET_TYPES_REVERSE = _require4.PACKET_TYPES_REVERSE,
          ERROR_PACKET = _require4.ERROR_PACKET;

      var withNativeArrayBuffer = typeof ArrayBuffer === "function";
      var base64decoder;

      if (withNativeArrayBuffer) {
        base64decoder = require("base64-arraybuffer");
      }

      var decodePacket = function decodePacket(encodedPacket, binaryType) {
        if (typeof encodedPacket !== "string") {
          return {
            type: "message",
            data: mapBinary(encodedPacket, binaryType)
          };
        }

        var type = encodedPacket.charAt(0);

        if (type === "b") {
          return {
            type: "message",
            data: decodeBase64Packet(encodedPacket.substring(1), binaryType)
          };
        }

        var packetType = PACKET_TYPES_REVERSE[type];

        if (!packetType) {
          return ERROR_PACKET;
        }

        return encodedPacket.length > 1 ? {
          type: PACKET_TYPES_REVERSE[type],
          data: encodedPacket.substring(1)
        } : {
          type: PACKET_TYPES_REVERSE[type]
        };
      };

      var decodeBase64Packet = function decodeBase64Packet(data, binaryType) {
        if (base64decoder) {
          var decoded = base64decoder.decode(data);
          return mapBinary(decoded, binaryType);
        } else {
          return {
            base64: true,
            data: data
          }; // fallback for old browsers
        }
      };

      var mapBinary = function mapBinary(data, binaryType) {
        switch (binaryType) {
          case "blob":
            return data instanceof ArrayBuffer ? new Blob([data]) : data;

          case "arraybuffer":
          default:
            return data;
          // assuming the data is already an ArrayBuffer
        }
      };

      module.exports = decodePacket;
    }, {
      "./commons": 576,
      "base64-arraybuffer": 4
    }],
    578: [function (require, module, exports) {
      var _require5 = require("./commons"),
          PACKET_TYPES = _require5.PACKET_TYPES;

      var withNativeBlob = typeof Blob === "function" || typeof Blob !== "undefined" && Object.prototype.toString.call(Blob) === "[object BlobConstructor]";
      var withNativeArrayBuffer = typeof ArrayBuffer === "function"; // ArrayBuffer.isView method is not defined in IE10

      var isView = function isView(obj) {
        return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj && obj.buffer instanceof ArrayBuffer;
      };

      var encodePacket = function encodePacket(_ref9, supportsBinary, callback) {
        var type = _ref9.type,
            data = _ref9.data;

        if (withNativeBlob && data instanceof Blob) {
          if (supportsBinary) {
            return callback(data);
          } else {
            return encodeBlobAsBase64(data, callback);
          }
        } else if (withNativeArrayBuffer && (data instanceof ArrayBuffer || isView(data))) {
          if (supportsBinary) {
            return callback(data instanceof ArrayBuffer ? data : data.buffer);
          } else {
            return encodeBlobAsBase64(new Blob([data]), callback);
          }
        } // plain string


        return callback(PACKET_TYPES[type] + (data || ""));
      };

      var encodeBlobAsBase64 = function encodeBlobAsBase64(data, callback) {
        var fileReader = new FileReader();

        fileReader.onload = function () {
          var content = fileReader.result.split(",")[1];
          callback("b" + content);
        };

        return fileReader.readAsDataURL(data);
      };

      module.exports = encodePacket;
    }, {
      "./commons": 576
    }],
    579: [function (require, module, exports) {
      var encodePacket = require("./encodePacket");

      var decodePacket = require("./decodePacket");

      var SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text

      var encodePayload = function encodePayload(packets, callback) {
        // some packets may be added to the array while encoding, so the initial length must be saved
        var length = packets.length;
        var encodedPackets = new Array(length);
        var count = 0;
        packets.forEach(function (packet, i) {
          // force base64 encoding for binary packets
          encodePacket(packet, false, function (encodedPacket) {
            encodedPackets[i] = encodedPacket;

            if (++count === length) {
              callback(encodedPackets.join(SEPARATOR));
            }
          });
        });
      };

      var decodePayload = function decodePayload(encodedPayload, binaryType) {
        var encodedPackets = encodedPayload.split(SEPARATOR);
        var packets = [];

        for (var i = 0; i < encodedPackets.length; i++) {
          var decodedPacket = decodePacket(encodedPackets[i], binaryType);
          packets.push(decodedPacket);

          if (decodedPacket.type === "error") {
            break;
          }
        }

        return packets;
      };

      module.exports = {
        protocol: 4,
        encodePacket: encodePacket,
        encodePayload: encodePayload,
        decodePacket: decodePacket,
        decodePayload: decodePayload
      };
    }, {
      "./decodePacket": 577,
      "./encodePacket": 578
    }],
    580: [function (require, module, exports) {
      (function (process, global, Buffer) {
        (function () {
          !function (e, t) {
            "object" == typeof exports && "undefined" != typeof module ? t(exports) : "function" == typeof define && define.amd ? define("exifr", ["exports"], t) : t((e = "undefined" != typeof globalThis ? globalThis : e || self).exifr = {});
          }(this, function (e) {
            "use strict";

            function t(e, t) {
              if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
            }

            function n(e, t) {
              for (var n = 0; n < t.length; n++) {
                var r = t[n];
                r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
              }
            }

            function r(e, t, r) {
              return t && n(e.prototype, t), r && n(e, r), e;
            }

            function i(e, t, n) {
              return t in e ? Object.defineProperty(e, t, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0
              }) : e[t] = n, e;
            }

            function a(e, t) {
              if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function");
              e.prototype = Object.create(t && t.prototype, {
                constructor: {
                  value: e,
                  writable: !0,
                  configurable: !0
                }
              });
              var n = ["prototype", "__proto__", "caller", "arguments", "length", "name"];
              Object.getOwnPropertyNames(t).forEach(function (r) {
                -1 === n.indexOf(r) && e[r] !== t[r] && (e[r] = t[r]);
              }), t && u(e, t);
            }

            function s(e) {
              return (s = Object.setPrototypeOf ? Object.getPrototypeOf : function (e) {
                return e.__proto__ || Object.getPrototypeOf(e);
              })(e);
            }

            function u(e, t) {
              return (u = Object.setPrototypeOf || function (e, t) {
                return e.__proto__ = t, e;
              })(e, t);
            }

            function o() {
              if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
              if (Reflect.construct.sham) return !1;
              if ("function" == typeof Proxy) return !0;

              try {
                return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})), !0;
              } catch (e) {
                return !1;
              }
            }

            function f(e, t, n) {
              return (f = o() ? Reflect.construct : function (e, t, n) {
                var r = [null];
                r.push.apply(r, t);
                var i = new (Function.bind.apply(e, r))();
                return n && u(i, n.prototype), i;
              }).apply(null, arguments);
            }

            function c(e) {
              var t = "function" == typeof Map ? new Map() : void 0;
              return (c = function c(e) {
                if (null === e || (n = e, -1 === Function.toString.call(n).indexOf("[native code]"))) return e;
                var n;
                if ("function" != typeof e) throw new TypeError("Super expression must either be null or a function");

                if (void 0 !== t) {
                  if (t.has(e)) return t.get(e);
                  t.set(e, r);
                }

                function r() {
                  return f(e, arguments, s(this).constructor);
                }

                return r.prototype = Object.create(e.prototype, {
                  constructor: {
                    value: r,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                  }
                }), u(r, e);
              })(e);
            }

            function h(e) {
              if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
              return e;
            }

            function l(e, t) {
              return !t || "object" != typeof t && "function" != typeof t ? h(e) : t;
            }

            function d(e) {
              var t = o();
              return function () {
                var n,
                    r = s(e);

                if (t) {
                  var i = s(this).constructor;
                  n = Reflect.construct(r, arguments, i);
                } else n = r.apply(this, arguments);

                return l(this, n);
              };
            }

            function v(e, t, n) {
              return (v = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function (e, t, n) {
                var r = function (e, t) {
                  for (; !Object.prototype.hasOwnProperty.call(e, t) && null !== (e = s(e));) {
                    ;
                  }

                  return e;
                }(e, t);

                if (r) {
                  var i = Object.getOwnPropertyDescriptor(r, t);
                  return i.get ? i.get.call(n) : i.value;
                }
              })(e, t, n || e);
            }

            var p = Object.values || function (e) {
              var t = [];

              for (var n in e) {
                t.push(e[n]);
              }

              return t;
            },
                y = Object.entries || function (e) {
              var t = [];

              for (var n in e) {
                t.push([n, e[n]]);
              }

              return t;
            },
                g = Object.assign || function (e) {
              for (var t = arguments.length, n = new Array(t > 1 ? t - 1 : 0), r = 1; r < t; r++) {
                n[r - 1] = arguments[r];
              }

              return n.forEach(function (t) {
                for (var n in t) {
                  e[n] = t[n];
                }
              }), e;
            },
                k = Object.fromEntries || function (e) {
              var t = {};
              return m(e).forEach(function (e) {
                var n = e[0],
                    r = e[1];
                t[n] = r;
              }), t;
            },
                m = Array.from || function (e) {
              if (e instanceof P) {
                var t = [];
                return e.forEach(function (e, n) {
                  return t.push([n, e]);
                }), t;
              }

              return Array.prototype.slice.call(e);
            };

            function b(e) {
              return -1 !== this.indexOf(e);
            }

            Array.prototype.includes || (Array.prototype.includes = b), String.prototype.includes || (String.prototype.includes = b), String.prototype.startsWith || (String.prototype.startsWith = function (e) {
              var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
              return this.substring(t, t + e.length) === e;
            }), String.prototype.endsWith || (String.prototype.endsWith = function (e) {
              var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.length;
              return this.substring(t - e.length, t) === e;
            });

            var A = "undefined" != typeof self ? self : global,
                w = A.fetch || function (e) {
              var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
              return new Promise(function (n, r) {
                var i = new XMLHttpRequest();
                if (i.open("get", e, !0), i.responseType = "arraybuffer", i.onerror = r, t.headers) for (var a in t.headers) {
                  i.setRequestHeader(a, t.headers[a]);
                }
                i.onload = function () {
                  n({
                    ok: i.status >= 200 && i.status < 300,
                    status: i.status,
                    arrayBuffer: function arrayBuffer() {
                      return Promise.resolve(i.response);
                    }
                  });
                }, i.send(null);
              });
            },
                O = function O(e) {
              var t = [];
              if (Object.defineProperties(t, {
                size: {
                  get: function get() {
                    return this.length;
                  }
                },
                has: {
                  value: function value(e) {
                    return -1 !== this.indexOf(e);
                  }
                },
                add: {
                  value: function value(e) {
                    this.has(e) || this.push(e);
                  }
                },
                delete: {
                  value: function value(e) {
                    if (this.has(e)) {
                      var t = this.indexOf(e);
                      this.splice(t, 1);
                    }
                  }
                }
              }), Array.isArray(e)) for (var n = 0; n < e.length; n++) {
                t.add(e[n]);
              }
              return t;
            },
                S = function S(e) {
              return new P(e);
            },
                P = void 0 !== A.Map && void 0 !== A.Map.prototype.keys ? A.Map : function () {
              function e(n) {
                if (t(this, e), this.clear(), n) for (var r = 0; r < n.length; r++) {
                  this.set(n[r][0], n[r][1]);
                }
              }

              return r(e, [{
                key: "clear",
                value: function value() {
                  this._map = {}, this._keys = [];
                }
              }, {
                key: "size",
                get: function get() {
                  return this._keys.length;
                }
              }, {
                key: "get",
                value: function value(e) {
                  return this._map["map_" + e];
                }
              }, {
                key: "set",
                value: function value(e, t) {
                  return this._map["map_" + e] = t, this._keys.indexOf(e) < 0 && this._keys.push(e), this;
                }
              }, {
                key: "has",
                value: function value(e) {
                  return this._keys.indexOf(e) >= 0;
                }
              }, {
                key: "delete",
                value: function value(e) {
                  var t = this._keys.indexOf(e);

                  return !(t < 0) && (delete this._map["map_" + e], this._keys.splice(t, 1), !0);
                }
              }, {
                key: "keys",
                value: function value() {
                  return this._keys.slice(0);
                }
              }, {
                key: "values",
                value: function value() {
                  var e = this;
                  return this._keys.map(function (t) {
                    return e.get(t);
                  });
                }
              }, {
                key: "entries",
                value: function value() {
                  var e = this;
                  return this._keys.map(function (t) {
                    return [t, e.get(t)];
                  });
                }
              }, {
                key: "forEach",
                value: function value(e, t) {
                  for (var n = 0; n < this._keys.length; n++) {
                    e.call(t, this._map["map_" + this._keys[n]], this._keys[n], this);
                  }
                }
              }]), e;
            }(),
                U = "undefined" != typeof self ? self : global,
                x = "undefined" != typeof navigator,
                C = x && "undefined" == typeof HTMLImageElement,
                B = !("undefined" == typeof global || "undefined" == typeof process || !process.versions || !process.versions.node),
                j = U.Buffer,
                _ = !!j;

            var V = function V(e) {
              return void 0 !== e;
            };

            function I(e) {
              return void 0 === e || (e instanceof P ? 0 === e.size : 0 === p(e).filter(V).length);
            }

            function L(e) {
              var t = new Error(e);
              throw delete t.stack, t;
            }

            function T(e) {
              var t = function (e) {
                var t = 0;
                return e.ifd0.enabled && (t += 1024), e.exif.enabled && (t += 2048), e.makerNote && (t += 2048), e.userComment && (t += 1024), e.gps.enabled && (t += 512), e.interop.enabled && (t += 100), e.ifd1.enabled && (t += 1024), t + 2048;
              }(e);

              return e.jfif.enabled && (t += 50), e.xmp.enabled && (t += 2e4), e.iptc.enabled && (t += 14e3), e.icc.enabled && (t += 6e3), t;
            }

            var z = function z(e) {
              return String.fromCharCode.apply(null, e);
            },
                F = "undefined" != typeof TextDecoder ? new TextDecoder("utf-8") : void 0;

            function E(e) {
              return F ? F.decode(e) : _ ? Buffer.from(e).toString("utf8") : decodeURIComponent(escape(z(e)));
            }

            var D = function () {
              function e(n) {
                var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
                    i = arguments.length > 2 ? arguments[2] : void 0,
                    a = arguments.length > 3 ? arguments[3] : void 0;
                if (t(this, e), "boolean" == typeof a && (this.le = a), Array.isArray(n) && (n = new Uint8Array(n)), 0 === n) this.byteOffset = 0, this.byteLength = 0;else if (n instanceof ArrayBuffer) {
                  void 0 === i && (i = n.byteLength - r);
                  var s = new DataView(n, r, i);

                  this._swapDataView(s);
                } else if (n instanceof Uint8Array || n instanceof DataView || n instanceof e) {
                  void 0 === i && (i = n.byteLength - r), (r += n.byteOffset) + i > n.byteOffset + n.byteLength && L("Creating view outside of available memory in ArrayBuffer");
                  var u = new DataView(n.buffer, r, i);

                  this._swapDataView(u);
                } else if ("number" == typeof n) {
                  var o = new DataView(new ArrayBuffer(n));

                  this._swapDataView(o);
                } else L("Invalid input argument for BufferView: " + n);
              }

              return r(e, [{
                key: "_swapArrayBuffer",
                value: function value(e) {
                  this._swapDataView(new DataView(e));
                }
              }, {
                key: "_swapBuffer",
                value: function value(e) {
                  this._swapDataView(new DataView(e.buffer, e.byteOffset, e.byteLength));
                }
              }, {
                key: "_swapDataView",
                value: function value(e) {
                  this.dataView = e, this.buffer = e.buffer, this.byteOffset = e.byteOffset, this.byteLength = e.byteLength;
                }
              }, {
                key: "_lengthToEnd",
                value: function value(e) {
                  return this.byteLength - e;
                }
              }, {
                key: "set",
                value: function value(t, n) {
                  var r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : e;
                  t instanceof DataView || t instanceof e ? t = new Uint8Array(t.buffer, t.byteOffset, t.byteLength) : t instanceof ArrayBuffer && (t = new Uint8Array(t)), t instanceof Uint8Array || L("BufferView.set(): Invalid data argument.");
                  var i = this.toUint8();
                  return i.set(t, n), new r(this, n, t.byteLength);
                }
              }, {
                key: "subarray",
                value: function value(t, n) {
                  return new e(this, t, n = n || this._lengthToEnd(t));
                }
              }, {
                key: "toUint8",
                value: function value() {
                  return new Uint8Array(this.buffer, this.byteOffset, this.byteLength);
                }
              }, {
                key: "getUint8Array",
                value: function value(e, t) {
                  return new Uint8Array(this.buffer, this.byteOffset + e, t);
                }
              }, {
                key: "getString",
                value: function value() {
                  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                      t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.byteLength,
                      n = this.getUint8Array(e, t);
                  return E(n);
                }
              }, {
                key: "getLatin1String",
                value: function value() {
                  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                      t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.byteLength,
                      n = this.getUint8Array(e, t);
                  return z(n);
                }
              }, {
                key: "getUnicodeString",
                value: function value() {
                  for (var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0, t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.byteLength, n = [], r = 0; r < t && e + r < this.byteLength; r += 2) {
                    n.push(this.getUint16(e + r));
                  }

                  return z(n);
                }
              }, {
                key: "getInt8",
                value: function value(e) {
                  return this.dataView.getInt8(e);
                }
              }, {
                key: "getUint8",
                value: function value(e) {
                  return this.dataView.getUint8(e);
                }
              }, {
                key: "getInt16",
                value: function value(e) {
                  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.le;
                  return this.dataView.getInt16(e, t);
                }
              }, {
                key: "getInt32",
                value: function value(e) {
                  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.le;
                  return this.dataView.getInt32(e, t);
                }
              }, {
                key: "getUint16",
                value: function value(e) {
                  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.le;
                  return this.dataView.getUint16(e, t);
                }
              }, {
                key: "getUint32",
                value: function value(e) {
                  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.le;
                  return this.dataView.getUint32(e, t);
                }
              }, {
                key: "getFloat32",
                value: function value(e) {
                  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.le;
                  return this.dataView.getFloat32(e, t);
                }
              }, {
                key: "getFloat64",
                value: function value(e) {
                  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.le;
                  return this.dataView.getFloat64(e, t);
                }
              }, {
                key: "getFloat",
                value: function value(e) {
                  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.le;
                  return this.dataView.getFloat32(e, t);
                }
              }, {
                key: "getDouble",
                value: function value(e) {
                  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.le;
                  return this.dataView.getFloat64(e, t);
                }
              }, {
                key: "getUintBytes",
                value: function value(e, t, n) {
                  switch (t) {
                    case 1:
                      return this.getUint8(e, n);

                    case 2:
                      return this.getUint16(e, n);

                    case 4:
                      return this.getUint32(e, n);

                    case 8:
                      return this.getUint64 && this.getUint64(e, n);
                  }
                }
              }, {
                key: "getUint",
                value: function value(e, t, n) {
                  switch (t) {
                    case 8:
                      return this.getUint8(e, n);

                    case 16:
                      return this.getUint16(e, n);

                    case 32:
                      return this.getUint32(e, n);

                    case 64:
                      return this.getUint64 && this.getUint64(e, n);
                  }
                }
              }, {
                key: "toString",
                value: function value(e) {
                  return this.dataView.toString(e, this.constructor.name);
                }
              }, {
                key: "ensureChunk",
                value: function value() {}
              }], [{
                key: "from",
                value: function value(t, n) {
                  return t instanceof this && t.le === n ? t : new e(t, void 0, void 0, n);
                }
              }]), e;
            }();

            function R(e, t) {
              L("".concat(e, " '").concat(t, "' was not loaded, try using full build of exifr."));
            }

            var N = function (e) {
              a(i, e);
              var n = d(i);

              function i(e) {
                var r;
                return t(this, i), (r = n.call(this)).kind = e, r;
              }

              return r(i, [{
                key: "get",
                value: function value(e, t) {
                  return this.has(e) || R(this.kind, e), t && (e in t || function (e, t) {
                    L("Unknown ".concat(e, " '").concat(t, "'."));
                  }(this.kind, e), t[e].enabled || R(this.kind, e)), v(s(i.prototype), "get", this).call(this, e);
                }
              }, {
                key: "keyList",
                value: function value() {
                  return m(this.keys());
                }
              }]), i;
            }(c(P)),
                M = new N("file parser"),
                W = new N("segment parser"),
                K = new N("file reader");

            function H(e) {
              return function () {
                for (var t = [], n = 0; n < arguments.length; n++) {
                  t[n] = arguments[n];
                }

                try {
                  return Promise.resolve(e.apply(this, t));
                } catch (e) {
                  return Promise.reject(e);
                }
              };
            }

            function X(e, t, n) {
              return n ? t ? t(e) : e : (e && e.then || (e = Promise.resolve(e)), t ? e.then(t) : e);
            }

            var Y = H(function (e) {
              return new Promise(function (t, n) {
                var r = new FileReader();
                r.onloadend = function () {
                  return t(r.result || new ArrayBuffer());
                }, r.onerror = n, r.readAsArrayBuffer(e);
              });
            }),
                G = H(function (e) {
              return w(e).then(function (e) {
                return e.arrayBuffer();
              });
            }),
                J = H(function (e, t) {
              return X(t(e), function (e) {
                return new D(e);
              });
            }),
                q = H(function (e, t, n) {
              var r = new (K.get(n))(e, t);
              return X(r.read(), function () {
                return r;
              });
            }),
                Q = H(function (e, t, n, r) {
              return K.has(n) ? q(e, t, n) : r ? J(e, r) : (L("Parser ".concat(n, " is not loaded")), X());
            }),
                Z = "Invalid input argument";

            function $(e, t) {
              return (n = e).startsWith("data:") || n.length > 1e4 ? q(e, t, "base64") : x ? Q(e, t, "url", G) : B ? q(e, t, "fs") : void L(Z);
              var n;
            }

            var ee = function (e) {
              a(i, e);
              var n = d(i);

              function i() {
                return t(this, i), n.apply(this, arguments);
              }

              return r(i, [{
                key: "tagKeys",
                get: function get() {
                  return this.allKeys || (this.allKeys = m(this.keys())), this.allKeys;
                }
              }, {
                key: "tagValues",
                get: function get() {
                  return this.allValues || (this.allValues = m(this.values())), this.allValues;
                }
              }]), i;
            }(c(P));

            function te(e, t, n) {
              var r = new ee(),
                  i = n;
              Array.isArray(i) || ("function" == typeof i.entries && (i = i.entries()), i = m(i));

              for (var a = 0; a < i.length; a++) {
                var s = i[a],
                    u = s[0],
                    o = s[1];
                r.set(u, o);
              }

              if (Array.isArray(t)) {
                var f = t;
                Array.isArray(f) || ("function" == typeof f.entries && (f = f.entries()), f = m(f));

                for (var c = 0; c < f.length; c++) {
                  var h = f[c];
                  e.set(h, r);
                }
              } else e.set(t, r);

              return r;
            }

            function ne(e, t, n) {
              var r,
                  i = e.get(t),
                  a = n;
              Array.isArray(a) || ("function" == typeof a.entries && (a = a.entries()), a = m(a));

              for (var s = 0; s < a.length; s++) {
                r = a[s], i.set(r[0], r[1]);
              }
            }

            var re = S(),
                ie = S(),
                ae = S(),
                se = 37500,
                ue = 37510,
                oe = 33723,
                fe = 34675,
                ce = 34665,
                he = 34853,
                le = 40965,
                de = ["chunked", "firstChunkSize", "firstChunkSizeNode", "firstChunkSizeBrowser", "chunkSize", "chunkLimit"],
                ve = ["jfif", "xmp", "icc", "iptc", "ihdr"],
                pe = ["tiff"].concat(ve),
                ye = ["ifd0", "ifd1", "exif", "gps", "interop"],
                ge = [].concat(pe, ye),
                ke = ["makerNote", "userComment"],
                me = ["translateKeys", "translateValues", "reviveValues", "multiSegment"],
                be = [].concat(me, ["sanitize", "mergeOutput", "silentErrors"]),
                Ae = function () {
              function e() {
                t(this, e);
              }

              return r(e, [{
                key: "translate",
                get: function get() {
                  return this.translateKeys || this.translateValues || this.reviveValues;
                }
              }]), e;
            }(),
                we = function (e) {
              a(s, e);
              var n = d(s);

              function s(e, r, a, u) {
                var o;
                if (t(this, s), i(h(o = n.call(this)), "enabled", !1), i(h(o), "skip", O()), i(h(o), "pick", O()), i(h(o), "deps", O()), i(h(o), "translateKeys", !1), i(h(o), "translateValues", !1), i(h(o), "reviveValues", !1), o.key = e, o.enabled = r, o.parse = o.enabled, o.applyInheritables(u), o.canBeFiltered = ye.includes(e), o.canBeFiltered && (o.dict = re.get(e)), void 0 !== a) if (Array.isArray(a)) o.parse = o.enabled = !0, o.canBeFiltered && a.length > 0 && o.translateTagSet(a, o.pick);else if ("object" == typeof a) {
                  if (o.enabled = !0, o.parse = !1 !== a.parse, o.canBeFiltered) {
                    var f = a.pick,
                        c = a.skip;
                    f && f.length > 0 && o.translateTagSet(f, o.pick), c && c.length > 0 && o.translateTagSet(c, o.skip);
                  }

                  o.applyInheritables(a);
                } else !0 === a || !1 === a ? o.parse = o.enabled = a : L("Invalid options argument: ".concat(a));
                return o;
              }

              return r(s, [{
                key: "needed",
                get: function get() {
                  return this.enabled || this.deps.size > 0;
                }
              }, {
                key: "applyInheritables",
                value: function value(e) {
                  var t,
                      n,
                      r = me;
                  Array.isArray(r) || ("function" == typeof r.entries && (r = r.entries()), r = m(r));

                  for (var i = 0; i < r.length; i++) {
                    void 0 !== (n = e[t = r[i]]) && (this[t] = n);
                  }
                }
              }, {
                key: "translateTagSet",
                value: function value(e, t) {
                  if (this.dict) {
                    var n,
                        r,
                        i = this.dict,
                        a = i.tagKeys,
                        s = i.tagValues,
                        u = e;
                    Array.isArray(u) || ("function" == typeof u.entries && (u = u.entries()), u = m(u));

                    for (var o = 0; o < u.length; o++) {
                      "string" == typeof (n = u[o]) ? (-1 === (r = s.indexOf(n)) && (r = a.indexOf(Number(n))), -1 !== r && t.add(Number(a[r]))) : t.add(n);
                    }
                  } else {
                    var f = e;
                    Array.isArray(f) || ("function" == typeof f.entries && (f = f.entries()), f = m(f));

                    for (var c = 0; c < f.length; c++) {
                      var h = f[c];
                      t.add(h);
                    }
                  }
                }
              }, {
                key: "finalizeFilters",
                value: function value() {
                  !this.enabled && this.deps.size > 0 ? (this.enabled = !0, Ce(this.pick, this.deps)) : this.enabled && this.pick.size > 0 && Ce(this.pick, this.deps);
                }
              }]), s;
            }(Ae),
                Oe = {
              jfif: !1,
              tiff: !0,
              xmp: !1,
              icc: !1,
              iptc: !1,
              ifd0: !0,
              ifd1: !1,
              exif: !0,
              gps: !0,
              interop: !1,
              ihdr: void 0,
              makerNote: !1,
              userComment: !1,
              multiSegment: !1,
              skip: [],
              pick: [],
              translateKeys: !0,
              translateValues: !0,
              reviveValues: !0,
              sanitize: !0,
              mergeOutput: !0,
              silentErrors: !0,
              chunked: !0,
              firstChunkSize: void 0,
              firstChunkSizeNode: 512,
              firstChunkSizeBrowser: 65536,
              chunkSize: 65536,
              chunkLimit: 5
            },
                Se = S(),
                Pe = function (e) {
              a(i, e);
              var n = d(i);

              function i(e) {
                var r;
                return t(this, i), r = n.call(this), !0 === e ? r.setupFromTrue() : void 0 === e ? r.setupFromUndefined() : Array.isArray(e) ? r.setupFromArray(e) : "object" == typeof e ? r.setupFromObject(e) : L("Invalid options argument ".concat(e)), void 0 === r.firstChunkSize && (r.firstChunkSize = x ? r.firstChunkSizeBrowser : r.firstChunkSizeNode), r.mergeOutput && (r.ifd1.enabled = !1), r.filterNestedSegmentTags(), r.traverseTiffDependencyTree(), r.checkLoadedPlugins(), r;
              }

              return r(i, [{
                key: "setupFromUndefined",
                value: function value() {
                  var e,
                      t = de;
                  Array.isArray(t) || ("function" == typeof t.entries && (t = t.entries()), t = m(t));

                  for (var n = 0; n < t.length; n++) {
                    this[e = t[n]] = Oe[e];
                  }

                  var r = be;
                  Array.isArray(r) || ("function" == typeof r.entries && (r = r.entries()), r = m(r));

                  for (var i = 0; i < r.length; i++) {
                    this[e = r[i]] = Oe[e];
                  }

                  var a = ke;
                  Array.isArray(a) || ("function" == typeof a.entries && (a = a.entries()), a = m(a));

                  for (var s = 0; s < a.length; s++) {
                    this[e = a[s]] = Oe[e];
                  }

                  var u = ge;
                  Array.isArray(u) || ("function" == typeof u.entries && (u = u.entries()), u = m(u));

                  for (var o = 0; o < u.length; o++) {
                    this[e = u[o]] = new we(e, Oe[e], void 0, this);
                  }
                }
              }, {
                key: "setupFromTrue",
                value: function value() {
                  var e,
                      t = de;
                  Array.isArray(t) || ("function" == typeof t.entries && (t = t.entries()), t = m(t));

                  for (var n = 0; n < t.length; n++) {
                    this[e = t[n]] = Oe[e];
                  }

                  var r = be;
                  Array.isArray(r) || ("function" == typeof r.entries && (r = r.entries()), r = m(r));

                  for (var i = 0; i < r.length; i++) {
                    this[e = r[i]] = Oe[e];
                  }

                  var a = ke;
                  Array.isArray(a) || ("function" == typeof a.entries && (a = a.entries()), a = m(a));

                  for (var s = 0; s < a.length; s++) {
                    this[e = a[s]] = !0;
                  }

                  var u = ge;
                  Array.isArray(u) || ("function" == typeof u.entries && (u = u.entries()), u = m(u));

                  for (var o = 0; o < u.length; o++) {
                    this[e = u[o]] = new we(e, !0, void 0, this);
                  }
                }
              }, {
                key: "setupFromArray",
                value: function value(e) {
                  var t,
                      n = de;
                  Array.isArray(n) || ("function" == typeof n.entries && (n = n.entries()), n = m(n));

                  for (var r = 0; r < n.length; r++) {
                    this[t = n[r]] = Oe[t];
                  }

                  var i = be;
                  Array.isArray(i) || ("function" == typeof i.entries && (i = i.entries()), i = m(i));

                  for (var a = 0; a < i.length; a++) {
                    this[t = i[a]] = Oe[t];
                  }

                  var s = ke;
                  Array.isArray(s) || ("function" == typeof s.entries && (s = s.entries()), s = m(s));

                  for (var u = 0; u < s.length; u++) {
                    this[t = s[u]] = Oe[t];
                  }

                  var o = ge;
                  Array.isArray(o) || ("function" == typeof o.entries && (o = o.entries()), o = m(o));

                  for (var f = 0; f < o.length; f++) {
                    this[t = o[f]] = new we(t, !1, void 0, this);
                  }

                  this.setupGlobalFilters(e, void 0, ye);
                }
              }, {
                key: "setupFromObject",
                value: function value(e) {
                  var t;
                  ye.ifd0 = ye.ifd0 || ye.image, ye.ifd1 = ye.ifd1 || ye.thumbnail, g(this, e);
                  var n = de;
                  Array.isArray(n) || ("function" == typeof n.entries && (n = n.entries()), n = m(n));

                  for (var r = 0; r < n.length; r++) {
                    this[t = n[r]] = xe(e[t], Oe[t]);
                  }

                  var i = be;
                  Array.isArray(i) || ("function" == typeof i.entries && (i = i.entries()), i = m(i));

                  for (var a = 0; a < i.length; a++) {
                    this[t = i[a]] = xe(e[t], Oe[t]);
                  }

                  var s = ke;
                  Array.isArray(s) || ("function" == typeof s.entries && (s = s.entries()), s = m(s));

                  for (var u = 0; u < s.length; u++) {
                    this[t = s[u]] = xe(e[t], Oe[t]);
                  }

                  var o = pe;
                  Array.isArray(o) || ("function" == typeof o.entries && (o = o.entries()), o = m(o));

                  for (var f = 0; f < o.length; f++) {
                    this[t = o[f]] = new we(t, Oe[t], e[t], this);
                  }

                  var c = ye;
                  Array.isArray(c) || ("function" == typeof c.entries && (c = c.entries()), c = m(c));

                  for (var h = 0; h < c.length; h++) {
                    this[t = c[h]] = new we(t, Oe[t], e[t], this.tiff);
                  }

                  this.setupGlobalFilters(e.pick, e.skip, ye, ge), !0 === e.tiff ? this.batchEnableWithBool(ye, !0) : !1 === e.tiff ? this.batchEnableWithUserValue(ye, e) : Array.isArray(e.tiff) ? this.setupGlobalFilters(e.tiff, void 0, ye) : "object" == typeof e.tiff && this.setupGlobalFilters(e.tiff.pick, e.tiff.skip, ye);
                }
              }, {
                key: "batchEnableWithBool",
                value: function value(e, t) {
                  var n = e;
                  Array.isArray(n) || ("function" == typeof n.entries && (n = n.entries()), n = m(n));

                  for (var r = 0; r < n.length; r++) {
                    this[n[r]].enabled = t;
                  }
                }
              }, {
                key: "batchEnableWithUserValue",
                value: function value(e, t) {
                  var n = e;
                  Array.isArray(n) || ("function" == typeof n.entries && (n = n.entries()), n = m(n));

                  for (var r = 0; r < n.length; r++) {
                    var i = n[r],
                        a = t[i];
                    this[i].enabled = !1 !== a && void 0 !== a;
                  }
                }
              }, {
                key: "setupGlobalFilters",
                value: function value(e, t, n) {
                  var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : n;

                  if (e && e.length) {
                    var i = r;
                    Array.isArray(i) || ("function" == typeof i.entries && (i = i.entries()), i = m(i));

                    for (var a = 0; a < i.length; a++) {
                      var s = i[a];
                      this[s].enabled = !1;
                    }

                    var u = Ue(e, n),
                        o = u;
                    Array.isArray(o) || ("function" == typeof o.entries && (o = o.entries()), o = m(o));

                    for (var f = 0; f < o.length; f++) {
                      var c = o[f],
                          h = c[0],
                          l = c[1];
                      Ce(this[h].pick, l), this[h].enabled = !0;
                    }
                  } else if (t && t.length) {
                    var d = Ue(t, n),
                        v = d;
                    Array.isArray(v) || ("function" == typeof v.entries && (v = v.entries()), v = m(v));

                    for (var p = 0; p < v.length; p++) {
                      var y = v[p],
                          g = y[0],
                          k = y[1];
                      Ce(this[g].skip, k);
                    }
                  }
                }
              }, {
                key: "filterNestedSegmentTags",
                value: function value() {
                  var e = this.ifd0,
                      t = this.exif,
                      n = this.xmp,
                      r = this.iptc,
                      i = this.icc;
                  this.makerNote ? t.deps.add(se) : t.skip.add(se), this.userComment ? t.deps.add(ue) : t.skip.add(ue), n.enabled || e.skip.add(700), r.enabled || e.skip.add(oe), i.enabled || e.skip.add(fe);
                }
              }, {
                key: "traverseTiffDependencyTree",
                value: function value() {
                  var e = this,
                      t = this.ifd0,
                      n = this.exif,
                      r = this.gps;
                  this.interop.needed && (n.deps.add(le), t.deps.add(le)), n.needed && t.deps.add(ce), r.needed && t.deps.add(he), this.tiff.enabled = ye.some(function (t) {
                    return !0 === e[t].enabled;
                  }) || this.makerNote || this.userComment;
                  var i = ye;
                  Array.isArray(i) || ("function" == typeof i.entries && (i = i.entries()), i = m(i));

                  for (var a = 0; a < i.length; a++) {
                    this[i[a]].finalizeFilters();
                  }
                }
              }, {
                key: "onlyTiff",
                get: function get() {
                  var e = this;
                  return !ve.map(function (t) {
                    return e[t].enabled;
                  }).some(function (e) {
                    return !0 === e;
                  }) && this.tiff.enabled;
                }
              }, {
                key: "checkLoadedPlugins",
                value: function value() {
                  var e = pe;
                  Array.isArray(e) || ("function" == typeof e.entries && (e = e.entries()), e = m(e));

                  for (var t = 0; t < e.length; t++) {
                    var n = e[t];
                    this[n].enabled && !W.has(n) && R("segment parser", n);
                  }
                }
              }], [{
                key: "useCached",
                value: function value(e) {
                  var t = Se.get(e);
                  return void 0 !== t || (t = new this(e), Se.set(e, t)), t;
                }
              }]), i;
            }(Ae);

            function Ue(e, t) {
              var n,
                  r,
                  i,
                  a = [],
                  s = t;
              Array.isArray(s) || ("function" == typeof s.entries && (s = s.entries()), s = m(s));

              for (var u = 0; u < s.length; u++) {
                r = s[u], n = [];
                var o = re.get(r);
                Array.isArray(o) || ("function" == typeof o.entries && (o = o.entries()), o = m(o));

                for (var f = 0; f < o.length; f++) {
                  i = o[f], (e.includes(i[0]) || e.includes(i[1])) && n.push(i[0]);
                }

                n.length && a.push([r, n]);
              }

              return a;
            }

            function xe(e, t) {
              return void 0 !== e ? e : void 0 !== t ? t : void 0;
            }

            function Ce(e, t) {
              var n = t;
              Array.isArray(n) || ("function" == typeof n.entries && (n = n.entries()), n = m(n));

              for (var r = 0; r < n.length; r++) {
                var i = n[r];
                e.add(i);
              }
            }

            function Be(e, t, n) {
              return n ? t ? t(e) : e : (e && e.then || (e = Promise.resolve(e)), t ? e.then(t) : e);
            }

            function je() {}

            function _e(e, t) {
              if (!t) return e && e.then ? e.then(je) : Promise.resolve();
            }

            function Ve(e, t) {
              var n = e();
              return n && n.then ? n.then(t) : t(n);
            }

            i(Pe, "default", Oe);

            var Ie = function () {
              function e(n) {
                t(this, e), i(this, "parsers", {}), this.options = Pe.useCached(n);
              }

              return r(e, [{
                key: "setup",
                value: function value() {
                  if (!this.fileParser) {
                    var e = this.file,
                        t = e.getUint16(0),
                        n = M;
                    Array.isArray(n) || ("function" == typeof n.entries && (n = n.entries()), n = m(n));

                    for (var r = 0; r < n.length; r++) {
                      var i = n[r],
                          a = i[0],
                          s = i[1];
                      if (s.canHandle(e, t)) return this.fileParser = new s(this.options, this.file, this.parsers), e[a] = !0;
                    }

                    L("Unknown file format");
                  }
                }
              }, {
                key: "read",
                value: function value(e) {
                  try {
                    var t = this;
                    return Be(function (e, t) {
                      return "string" == typeof e ? $(e, t) : x && !C && e instanceof HTMLImageElement ? $(e.src, t) : e instanceof Uint8Array || e instanceof ArrayBuffer || e instanceof DataView ? new D(e) : x && e instanceof Blob ? Q(e, t, "blob", Y) : void L(Z);
                    }(e, t.options), function (e) {
                      t.file = e;
                    });
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }, {
                key: "parse",
                value: function value() {
                  try {
                    var e = this;
                    e.setup();
                    var t = {},
                        n = [];
                    return Ve(function () {
                      return e.options.silentErrors ? Be(e.doParse(t, n).catch(function (e) {
                        return n.push(e);
                      }), function () {
                        n.push.apply(n, e.fileParser.errors);
                      }) : _e(e.doParse(t, n));
                    }, function () {
                      return e.file.close && e.file.close(), e.options.silentErrors && n.length > 0 && (t.errors = n), I(r = t) ? void 0 : r;
                      var r;
                    });
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }, {
                key: "doParse",
                value: function value(e, t) {
                  try {
                    var n = this;
                    return Be(n.fileParser.parse(), function () {
                      var r,
                          i = p(n.parsers).map((r = function r(t) {
                        return Be(t.parse(), function (n) {
                          t.assignToOutput(e, n);
                        });
                      }, function () {
                        for (var e = [], t = 0; t < arguments.length; t++) {
                          e[t] = arguments[t];
                        }

                        try {
                          return Promise.resolve(r.apply(this, e));
                        } catch (e) {
                          return Promise.reject(e);
                        }
                      }));

                      if (n.options.silentErrors) {
                        var a = function a(e) {
                          return t.push(e);
                        };

                        i = i.map(function (e) {
                          return e.catch(a);
                        });
                      }

                      return _e(Promise.all(i));
                    });
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }, {
                key: "extractThumbnail",
                value: function value() {
                  try {
                    var e = this;
                    e.setup();
                    var t,
                        n = e.options,
                        r = e.file,
                        i = W.get("tiff", n);
                    return Ve(function () {
                      if (!r.tiff) return function (e) {
                        var t = e();
                        if (t && t.then) return t.then(je);
                      }(function () {
                        if (r.jpeg) return Be(e.fileParser.getOrFindSegment("tiff"), function (e) {
                          t = e;
                        });
                      });
                      t = {
                        start: 0,
                        type: "tiff"
                      };
                    }, function () {
                      if (void 0 !== t) return Be(e.fileParser.ensureSegmentChunk(t), function (t) {
                        return Be((e.parsers.tiff = new i(t, n, r)).extractThumbnail(), function (e) {
                          return r.close && r.close(), e;
                        });
                      });
                    });
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }]), e;
            }();

            var Le,
                Te = (Le = function Le(e, t) {
              var n,
                  r,
                  i,
                  a = new Ie(t);
              return n = a.read(e), r = function r() {
                return a.parse();
              }, i ? r ? r(n) : n : (n && n.then || (n = Promise.resolve(n)), r ? n.then(r) : n);
            }, function () {
              for (var e = [], t = 0; t < arguments.length; t++) {
                e[t] = arguments[t];
              }

              try {
                return Promise.resolve(Le.apply(this, e));
              } catch (e) {
                return Promise.reject(e);
              }
            }),
                ze = Object.freeze({
              __proto__: null,
              parse: Te,
              Exifr: Ie,
              fileParsers: M,
              segmentParsers: W,
              fileReaders: K,
              tagKeys: re,
              tagValues: ie,
              tagRevivers: ae,
              createDictionary: te,
              extendDictionary: ne,
              fetchUrlAsArrayBuffer: G,
              readBlobAsArrayBuffer: Y,
              chunkedProps: de,
              otherSegments: ve,
              segments: pe,
              tiffBlocks: ye,
              segmentsAndBlocks: ge,
              tiffExtractables: ke,
              inheritables: me,
              allFormatters: be,
              Options: Pe
            });

            function Fe() {}

            var Ee = function () {
              function e(n, r, a) {
                var s = this;
                t(this, e), i(this, "errors", []), i(this, "ensureSegmentChunk", function (e) {
                  return function () {
                    for (var t = [], n = 0; n < arguments.length; n++) {
                      t[n] = arguments[n];
                    }

                    try {
                      return Promise.resolve(e.apply(this, t));
                    } catch (e) {
                      return Promise.reject(e);
                    }
                  };
                }(function (e) {
                  var t,
                      n,
                      r,
                      i = e.start,
                      a = e.size || 65536;
                  return t = function t() {
                    if (s.file.chunked) return function (e) {
                      var t = e();
                      if (t && t.then) return t.then(Fe);
                    }(function () {
                      if (!s.file.available(i, a)) return function (e) {
                        if (e && e.then) return e.then(Fe);
                      }(function (e, t) {
                        try {
                          var n = e();
                        } catch (e) {
                          return t(e);
                        }

                        return n && n.then ? n.then(void 0, t) : n;
                      }(function () {
                        return t = s.file.readChunk(i, a), n = function n(t) {
                          e.chunk = t;
                        }, r ? n ? n(t) : t : (t && t.then || (t = Promise.resolve(t)), n ? t.then(n) : t);
                        var t, n, r;
                      }, function (t) {
                        L("Couldn't read segment: ".concat(JSON.stringify(e), ". ").concat(t.message));
                      }));
                      e.chunk = s.file.subarray(i, a);
                    });
                    s.file.byteLength > i + a ? e.chunk = s.file.subarray(i, a) : void 0 === e.size ? e.chunk = s.file.subarray(i) : L("Segment unreachable: " + JSON.stringify(e));
                  }, n = function n() {
                    return e.chunk;
                  }, (r = t()) && r.then ? r.then(n) : n(r);
                })), this.extendOptions && this.extendOptions(n), this.options = n, this.file = r, this.parsers = a;
              }

              return r(e, [{
                key: "injectSegment",
                value: function value(e, t) {
                  this.options[e].enabled && this.createParser(e, t);
                }
              }, {
                key: "createParser",
                value: function value(e, t) {
                  var n = new (W.get(e))(t, this.options, this.file);
                  return this.parsers[e] = n;
                }
              }, {
                key: "createParsers",
                value: function value(e) {
                  var t = e;
                  Array.isArray(t) || ("function" == typeof t.entries && (t = t.entries()), t = m(t));

                  for (var n = 0; n < t.length; n++) {
                    var r = t[n],
                        i = r.type,
                        a = r.chunk,
                        s = this.options[i];

                    if (s && s.enabled) {
                      var u = this.parsers[i];
                      u && u.append || u || this.createParser(i, a);
                    }
                  }
                }
              }, {
                key: "readSegments",
                value: function value(e) {
                  try {
                    var t = e.map(this.ensureSegmentChunk);
                    return function (e, t) {
                      if (!t) return e && e.then ? e.then(Fe) : Promise.resolve();
                    }(Promise.all(t));
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }]), e;
            }(),
                De = function () {
              function e(n) {
                var r = this,
                    a = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                    s = arguments.length > 2 ? arguments[2] : void 0;
                t(this, e), i(this, "errors", []), i(this, "raw", S()), i(this, "handleError", function (e) {
                  if (!r.options.silentErrors) throw e;
                  r.errors.push(e.message);
                }), this.chunk = this.normalizeInput(n), this.file = s, this.type = this.constructor.type, this.globalOptions = this.options = a, this.localOptions = a[this.type], this.canTranslate = this.localOptions && this.localOptions.translate;
              }

              return r(e, [{
                key: "normalizeInput",
                value: function value(e) {
                  return e instanceof D ? e : new D(e);
                }
              }, {
                key: "translate",
                value: function value() {
                  this.canTranslate && (this.translated = this.translateBlock(this.raw, this.type));
                }
              }, {
                key: "output",
                get: function get() {
                  return this.translated ? this.translated : this.raw ? k(this.raw) : void 0;
                }
              }, {
                key: "translateBlock",
                value: function value(e, t) {
                  var n = ae.get(t),
                      r = ie.get(t),
                      i = re.get(t),
                      a = this.options[t],
                      s = a.reviveValues && !!n,
                      u = a.translateValues && !!r,
                      o = a.translateKeys && !!i,
                      f = {},
                      c = e;
                  Array.isArray(c) || ("function" == typeof c.entries && (c = c.entries()), c = m(c));

                  for (var h = 0; h < c.length; h++) {
                    var l = c[h],
                        d = l[0],
                        v = l[1];
                    s && n.has(d) ? v = n.get(d)(v) : u && r.has(d) && (v = this.translateValue(v, r.get(d))), o && i.has(d) && (d = i.get(d) || d), f[d] = v;
                  }

                  return f;
                }
              }, {
                key: "translateValue",
                value: function value(e, t) {
                  return t[e] || t.DEFAULT || e;
                }
              }, {
                key: "assignToOutput",
                value: function value(e, t) {
                  this.assignObjectToOutput(e, this.constructor.type, t);
                }
              }, {
                key: "assignObjectToOutput",
                value: function value(e, t, n) {
                  if (this.globalOptions.mergeOutput) return g(e, n);
                  e[t] ? g(e[t], n) : e[t] = n;
                }
              }], [{
                key: "findPosition",
                value: function value(e, t) {
                  var n = e.getUint16(t + 2) + 2,
                      r = "function" == typeof this.headerLength ? this.headerLength(e, t, n) : this.headerLength,
                      i = t + r,
                      a = n - r;
                  return {
                    offset: t,
                    length: n,
                    headerLength: r,
                    start: i,
                    size: a,
                    end: i + a
                  };
                }
              }, {
                key: "parse",
                value: function value(e) {
                  var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
                      n = new Pe(i({}, this.type, t)),
                      r = new this(e, n);
                  return r.parse();
                }
              }]), e;
            }();

            function Re(e, t, n) {
              return n ? t ? t(e) : e : (e && e.then || (e = Promise.resolve(e)), t ? e.then(t) : e);
            }

            i(De, "headerLength", 4), i(De, "type", void 0), i(De, "multiSegment", !1), i(De, "canHandle", function () {
              return !1;
            });

            function Ne() {}

            function Me(e, t) {
              if (!t) return e && e.then ? e.then(Ne) : Promise.resolve();
            }

            function We(e) {
              var t = e();
              if (t && t.then) return t.then(Ne);
            }

            function Ke(e, t) {
              var n = e();
              return n && n.then ? n.then(t) : t(n);
            }

            function He(e, t, n) {
              if (!e.s) {
                if (n instanceof Xe) {
                  if (!n.s) return void (n.o = He.bind(null, e, t));
                  1 & t && (t = n.s), n = n.v;
                }

                if (n && n.then) return void n.then(He.bind(null, e, t), He.bind(null, e, 2));
                e.s = t, e.v = n;
                var r = e.o;
                r && r(e);
              }
            }

            var Xe = function () {
              function e() {}

              return e.prototype.then = function (t, n) {
                var r = new e(),
                    i = this.s;

                if (i) {
                  var a = 1 & i ? t : n;

                  if (a) {
                    try {
                      He(r, 1, a(this.v));
                    } catch (e) {
                      He(r, 2, e);
                    }

                    return r;
                  }

                  return this;
                }

                return this.o = function (e) {
                  try {
                    var i = e.v;
                    1 & e.s ? He(r, 1, t ? t(i) : i) : n ? He(r, 1, n(i)) : He(r, 2, i);
                  } catch (e) {
                    He(r, 2, e);
                  }
                }, r;
              }, e;
            }();

            function Ye(e) {
              return e instanceof Xe && 1 & e.s;
            }

            function Ge(e, t, n) {
              for (var r;;) {
                var i = e();
                if (Ye(i) && (i = i.v), !i) return a;

                if (i.then) {
                  r = 0;
                  break;
                }

                var a = n();

                if (a && a.then) {
                  if (!Ye(a)) {
                    r = 1;
                    break;
                  }

                  a = a.s;
                }

                if (t) {
                  var s = t();

                  if (s && s.then && !Ye(s)) {
                    r = 2;
                    break;
                  }
                }
              }

              var u = new Xe(),
                  o = He.bind(null, u, 2);
              return (0 === r ? i.then(c) : 1 === r ? a.then(f) : s.then(h)).then(void 0, o), u;

              function f(r) {
                a = r;

                do {
                  if (t && (s = t()) && s.then && !Ye(s)) return void s.then(h).then(void 0, o);
                  if (!(i = e()) || Ye(i) && !i.v) return void He(u, 1, a);
                  if (i.then) return void i.then(c).then(void 0, o);
                  Ye(a = n()) && (a = a.v);
                } while (!a || !a.then);

                a.then(f).then(void 0, o);
              }

              function c(e) {
                e ? (a = n()) && a.then ? a.then(f).then(void 0, o) : f(a) : He(u, 1, a);
              }

              function h() {
                (i = e()) ? i.then ? i.then(c).then(void 0, o) : c(i) : He(u, 1, a);
              }
            }

            function Je(e) {
              return 192 === e || 194 === e || 196 === e || 219 === e || 221 === e || 218 === e || 254 === e;
            }

            function qe(e) {
              return e >= 224 && e <= 239;
            }

            function Qe(e, t, n) {
              var r = W;
              Array.isArray(r) || ("function" == typeof r.entries && (r = r.entries()), r = m(r));

              for (var i = 0; i < r.length; i++) {
                var a = r[i],
                    s = a[0];
                if (a[1].canHandle(e, t, n)) return s;
              }
            }

            var Ze = function (e) {
              a(s, e);
              var n = d(s);

              function s() {
                var e;
                t(this, s);

                for (var r = arguments.length, a = new Array(r), u = 0; u < r; u++) {
                  a[u] = arguments[u];
                }

                return i(h(e = n.call.apply(n, [this].concat(a))), "appSegments", []), i(h(e), "jpegSegments", []), i(h(e), "unknownSegments", []), e;
              }

              return r(s, [{
                key: "parse",
                value: function value() {
                  try {
                    var e = this;
                    return Re(e.findAppSegments(), function () {
                      return Re(e.readSegments(e.appSegments), function () {
                        e.mergeMultiSegments(), e.createParsers(e.mergedAppSegments || e.appSegments);
                      });
                    });
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }, {
                key: "setupSegmentFinderArgs",
                value: function value(e) {
                  var t = this;
                  !0 === e ? (this.findAll = !0, this.wanted = O(W.keyList())) : (e = void 0 === e ? W.keyList().filter(function (e) {
                    return t.options[e].enabled;
                  }) : e.filter(function (e) {
                    return t.options[e].enabled && W.has(e);
                  }), this.findAll = !1, this.remaining = O(e), this.wanted = O(e)), this.unfinishedMultiSegment = !1;
                }
              }, {
                key: "findAppSegments",
                value: function value() {
                  var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0,
                      t = arguments.length > 1 ? arguments[1] : void 0;

                  try {
                    var n = this;
                    n.setupSegmentFinderArgs(t);
                    var r = n.file,
                        i = n.findAll,
                        a = n.wanted,
                        s = n.remaining;
                    return Ke(function () {
                      if (!i && n.file.chunked) return i = m(a).some(function (e) {
                        var t = W.get(e),
                            r = n.options[e];
                        return t.multiSegment && r.multiSegment;
                      }), We(function () {
                        if (i) return Me(n.file.readWhole());
                      });
                    }, function () {
                      var t = !1;
                      if (e = n.findAppSegmentsInRange(e, r.byteLength), !n.options.onlyTiff) return function () {
                        if (r.chunked) {
                          var i = !1;
                          return Ge(function () {
                            return !t && s.size > 0 && !i && (!!r.canReadNextChunk || !!n.unfinishedMultiSegment);
                          }, void 0, function () {
                            var a = r.nextChunkOffset,
                                s = n.appSegments.some(function (e) {
                              return !n.file.available(e.offset || e.start, e.length || e.size);
                            });
                            return Ke(function () {
                              return e > a && !s ? Re(r.readNextChunk(e), function (e) {
                                i = !e;
                              }) : Re(r.readNextChunk(a), function (e) {
                                i = !e;
                              });
                            }, function () {
                              void 0 === (e = n.findAppSegmentsInRange(e, r.byteLength)) && (t = !0);
                            });
                          });
                        }
                      }();
                    });
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }, {
                key: "findAppSegmentsInRange",
                value: function value(e, t) {
                  t -= 2;

                  for (var n, r, i, a, s, u, o = this.file, f = this.findAll, c = this.wanted, h = this.remaining, l = this.options; e < t; e++) {
                    if (255 === o.getUint8(e)) if (qe(n = o.getUint8(e + 1))) {
                      if (r = o.getUint16(e + 2), (i = Qe(o, e, r)) && c.has(i) && (s = (a = W.get(i)).findPosition(o, e), u = l[i], s.type = i, this.appSegments.push(s), !f && (a.multiSegment && u.multiSegment ? (this.unfinishedMultiSegment = s.chunkNumber < s.chunkCount, this.unfinishedMultiSegment || h.delete(i)) : h.delete(i), 0 === h.size))) break;
                      l.recordUnknownSegments && ((s = De.findPosition(o, e)).marker = n, this.unknownSegments.push(s)), e += r + 1;
                    } else if (Je(n)) {
                      if (r = o.getUint16(e + 2), 218 === n && !1 !== l.stopAfterSos) return;
                      l.recordJpegSegments && this.jpegSegments.push({
                        offset: e,
                        length: r,
                        marker: n
                      }), e += r + 1;
                    }
                  }

                  return e;
                }
              }, {
                key: "mergeMultiSegments",
                value: function value() {
                  var e = this;

                  if (this.appSegments.some(function (e) {
                    return e.multiSegment;
                  })) {
                    var t = function (e, t) {
                      for (var n, r, i, a = S(), s = 0; s < e.length; s++) {
                        r = (n = e[s])[t], a.has(r) ? i = a.get(r) : a.set(r, i = []), i.push(n);
                      }

                      return m(a);
                    }(this.appSegments, "type");

                    this.mergedAppSegments = t.map(function (t) {
                      var n = t[0],
                          r = t[1],
                          i = W.get(n, e.options);
                      return i.handleMultiSegments ? {
                        type: n,
                        chunk: i.handleMultiSegments(r)
                      } : r[0];
                    });
                  }
                }
              }, {
                key: "getSegment",
                value: function value(e) {
                  return this.appSegments.find(function (t) {
                    return t.type === e;
                  });
                }
              }, {
                key: "getOrFindSegment",
                value: function value(e) {
                  try {
                    var t = this,
                        n = t.getSegment(e);
                    return Ke(function () {
                      if (void 0 === n) return Re(t.findAppSegments(0, [e]), function () {
                        n = t.getSegment(e);
                      });
                    }, function () {
                      return n;
                    });
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }], [{
                key: "canHandle",
                value: function value(e, t) {
                  return 65496 === t;
                }
              }]), s;
            }(Ee);

            function $e() {}

            i(Ze, "type", "jpeg"), M.set("jpeg", Ze);

            function et(e, t) {
              if (!t) return e && e.then ? e.then($e) : Promise.resolve();
            }

            function tt(e, t) {
              var n = e();
              return n && n.then ? n.then(t) : t(n);
            }

            var nt = [void 0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8, 4];

            var rt = function (e) {
              a(i, e);
              var n = d(i);

              function i() {
                return t(this, i), n.apply(this, arguments);
              }

              return r(i, [{
                key: "parse",
                value: function value() {
                  try {
                    var e = this;
                    e.parseHeader();
                    var t = e.options;
                    return tt(function () {
                      if (t.ifd0.enabled) return et(e.parseIfd0Block());
                    }, function () {
                      return tt(function () {
                        if (t.exif.enabled) return et(e.safeParse("parseExifBlock"));
                      }, function () {
                        return tt(function () {
                          if (t.gps.enabled) return et(e.safeParse("parseGpsBlock"));
                        }, function () {
                          return tt(function () {
                            if (t.interop.enabled) return et(e.safeParse("parseInteropBlock"));
                          }, function () {
                            return tt(function () {
                              if (t.ifd1.enabled) return et(e.safeParse("parseThumbnailBlock"));
                            }, function () {
                              return e.createOutput();
                            });
                          });
                        });
                      });
                    });
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }, {
                key: "safeParse",
                value: function value(e) {
                  var t = this[e]();
                  return void 0 !== t.catch && (t = t.catch(this.handleError)), t;
                }
              }, {
                key: "findIfd0Offset",
                value: function value() {
                  void 0 === this.ifd0Offset && (this.ifd0Offset = this.chunk.getUint32(4));
                }
              }, {
                key: "findIfd1Offset",
                value: function value() {
                  if (void 0 === this.ifd1Offset) {
                    this.findIfd0Offset();
                    var e = this.chunk.getUint16(this.ifd0Offset),
                        t = this.ifd0Offset + 2 + 12 * e;
                    this.ifd1Offset = this.chunk.getUint32(t);
                  }
                }
              }, {
                key: "parseBlock",
                value: function value(e, t) {
                  var n = S();
                  return this[t] = n, this.parseTags(e, t, n), n;
                }
              }, {
                key: "parseIfd0Block",
                value: function value() {
                  try {
                    var e = this;
                    if (e.ifd0) return;
                    var t = e.file;
                    return e.findIfd0Offset(), e.ifd0Offset < 8 && L("Malformed EXIF data"), !t.chunked && e.ifd0Offset > t.byteLength && L("IFD0 offset points to outside of file.\nthis.ifd0Offset: ".concat(e.ifd0Offset, ", file.byteLength: ").concat(t.byteLength)), tt(function () {
                      if (t.tiff) return et(t.ensureChunk(e.ifd0Offset, T(e.options)));
                    }, function () {
                      var t = e.parseBlock(e.ifd0Offset, "ifd0");
                      if (0 !== t.size) return e.exifOffset = t.get(ce), e.interopOffset = t.get(le), e.gpsOffset = t.get(he), e.xmp = t.get(700), e.iptc = t.get(oe), e.icc = t.get(fe), e.options.sanitize && (t.delete(ce), t.delete(le), t.delete(he), t.delete(700), t.delete(oe), t.delete(fe)), t;
                    });
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }, {
                key: "parseExifBlock",
                value: function value() {
                  try {
                    var e = this;
                    if (e.exif) return;
                    return tt(function () {
                      if (!e.ifd0) return et(e.parseIfd0Block());
                    }, function () {
                      if (void 0 !== e.exifOffset) return tt(function () {
                        if (e.file.tiff) return et(e.file.ensureChunk(e.exifOffset, T(e.options)));
                      }, function () {
                        var t = e.parseBlock(e.exifOffset, "exif");
                        return e.interopOffset || (e.interopOffset = t.get(le)), e.makerNote = t.get(se), e.userComment = t.get(ue), e.options.sanitize && (t.delete(le), t.delete(se), t.delete(ue)), e.unpack(t, 41728), e.unpack(t, 41729), t;
                      });
                    });
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }, {
                key: "unpack",
                value: function value(e, t) {
                  var n = e.get(t);
                  n && 1 === n.length && e.set(t, n[0]);
                }
              }, {
                key: "parseGpsBlock",
                value: function value() {
                  try {
                    var e = this;
                    if (e.gps) return;
                    return tt(function () {
                      if (!e.ifd0) return et(e.parseIfd0Block());
                    }, function () {
                      if (void 0 !== e.gpsOffset) {
                        var t = e.parseBlock(e.gpsOffset, "gps");
                        return t && t.has(2) && t.has(4) && (t.set("latitude", it.apply(void 0, t.get(2).concat([t.get(1)]))), t.set("longitude", it.apply(void 0, t.get(4).concat([t.get(3)])))), t;
                      }
                    });
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }, {
                key: "parseInteropBlock",
                value: function value() {
                  try {
                    var e = this;
                    if (e.interop) return;
                    return tt(function () {
                      if (!e.ifd0) return et(e.parseIfd0Block());
                    }, function () {
                      return tt(function () {
                        if (void 0 === e.interopOffset && !e.exif) return et(e.parseExifBlock());
                      }, function () {
                        if (void 0 !== e.interopOffset) return e.parseBlock(e.interopOffset, "interop");
                      });
                    });
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }, {
                key: "parseThumbnailBlock",
                value: function value() {
                  var e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];

                  try {
                    var t = this;
                    if (t.ifd1 || t.ifd1Parsed) return;
                    if (t.options.mergeOutput && !e) return;
                    return t.findIfd1Offset(), t.ifd1Offset > 0 && (t.parseBlock(t.ifd1Offset, "ifd1"), t.ifd1Parsed = !0), t.ifd1;
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }, {
                key: "extractThumbnail",
                value: function value() {
                  try {
                    var e = this;
                    return e.headerParsed || e.parseHeader(), tt(function () {
                      if (!e.ifd1Parsed) return et(e.parseThumbnailBlock(!0));
                    }, function () {
                      if (void 0 !== e.ifd1) {
                        var t = e.ifd1.get(513),
                            n = e.ifd1.get(514);
                        return e.chunk.getUint8Array(t, n);
                      }
                    });
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }, {
                key: "image",
                get: function get() {
                  return this.ifd0;
                }
              }, {
                key: "thumbnail",
                get: function get() {
                  return this.ifd1;
                }
              }, {
                key: "createOutput",
                value: function value() {
                  var e,
                      t,
                      n,
                      r = {},
                      i = ye;
                  Array.isArray(i) || ("function" == typeof i.entries && (i = i.entries()), i = m(i));

                  for (var a = 0; a < i.length; a++) {
                    if (!I(e = this[t = i[a]])) if (n = this.canTranslate ? this.translateBlock(e, t) : k(e), this.options.mergeOutput) {
                      if ("ifd1" === t) continue;
                      g(r, n);
                    } else r[t] = n;
                  }

                  return this.makerNote && (r.makerNote = this.makerNote), this.userComment && (r.userComment = this.userComment), r;
                }
              }, {
                key: "assignToOutput",
                value: function value(e, t) {
                  if (this.globalOptions.mergeOutput) g(e, t);else {
                    var n = y(t);
                    Array.isArray(n) || ("function" == typeof n.entries && (n = n.entries()), n = m(n));

                    for (var r = 0; r < n.length; r++) {
                      var i = n[r],
                          a = i[0],
                          s = i[1];
                      this.assignObjectToOutput(e, a, s);
                    }
                  }
                }
              }], [{
                key: "canHandle",
                value: function value(e, t) {
                  return 225 === e.getUint8(t + 1) && 1165519206 === e.getUint32(t + 4) && 0 === e.getUint16(t + 8);
                }
              }]), i;
            }(function (e) {
              a(i, e);
              var n = d(i);

              function i() {
                return t(this, i), n.apply(this, arguments);
              }

              return r(i, [{
                key: "parseHeader",
                value: function value() {
                  var e = this.chunk.getUint16();
                  18761 === e ? this.le = !0 : 19789 === e && (this.le = !1), this.chunk.le = this.le, this.headerParsed = !0;
                }
              }, {
                key: "parseTags",
                value: function value(e, t) {
                  var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : S(),
                      r = this.options[t],
                      i = r.pick,
                      a = r.skip,
                      s = (i = O(i)).size > 0,
                      u = 0 === a.size,
                      o = this.chunk.getUint16(e);
                  e += 2;

                  for (var f = 0; f < o; f++) {
                    var c = this.chunk.getUint16(e);

                    if (s) {
                      if (i.has(c) && (n.set(c, this.parseTag(e, c, t)), i.delete(c), 0 === i.size)) break;
                    } else !u && a.has(c) || n.set(c, this.parseTag(e, c, t));

                    e += 12;
                  }

                  return n;
                }
              }, {
                key: "parseTag",
                value: function value(e, t, n) {
                  var r,
                      i = this.chunk,
                      a = i.getUint16(e + 2),
                      s = i.getUint32(e + 4),
                      u = nt[a];
                  if (u * s <= 4 ? e += 8 : e = i.getUint32(e + 8), (a < 1 || a > 13) && L("Invalid TIFF value type. block: ".concat(n.toUpperCase(), ", tag: ").concat(t.toString(16), ", type: ").concat(a, ", offset ").concat(e)), e > i.byteLength && L("Invalid TIFF value offset. block: ".concat(n.toUpperCase(), ", tag: ").concat(t.toString(16), ", type: ").concat(a, ", offset ").concat(e, " is outside of chunk size ").concat(i.byteLength)), 1 === a) return i.getUint8Array(e, s);
                  if (2 === a) return "" === (r = function (e) {
                    for (; e.endsWith("\0");) {
                      e = e.slice(0, -1);
                    }

                    return e;
                  }(r = i.getString(e, s)).trim()) ? void 0 : r;
                  if (7 === a) return i.getUint8Array(e, s);
                  if (1 === s) return this.parseTagValue(a, e);

                  for (var o = new (function (e) {
                    switch (e) {
                      case 1:
                        return Uint8Array;

                      case 3:
                        return Uint16Array;

                      case 4:
                        return Uint32Array;

                      case 5:
                        return Array;

                      case 6:
                        return Int8Array;

                      case 8:
                        return Int16Array;

                      case 9:
                        return Int32Array;

                      case 10:
                        return Array;

                      case 11:
                        return Float32Array;

                      case 12:
                        return Float64Array;

                      default:
                        return Array;
                    }
                  }(a))(s), f = u, c = 0; c < s; c++) {
                    o[c] = this.parseTagValue(a, e), e += f;
                  }

                  return o;
                }
              }, {
                key: "parseTagValue",
                value: function value(e, t) {
                  var n = this.chunk;

                  switch (e) {
                    case 1:
                      return n.getUint8(t);

                    case 3:
                      return n.getUint16(t);

                    case 4:
                      return n.getUint32(t);

                    case 5:
                      return n.getUint32(t) / n.getUint32(t + 4);

                    case 6:
                      return n.getInt8(t);

                    case 8:
                      return n.getInt16(t);

                    case 9:
                      return n.getInt32(t);

                    case 10:
                      return n.getInt32(t) / n.getInt32(t + 4);

                    case 11:
                      return n.getFloat(t);

                    case 12:
                      return n.getDouble(t);

                    case 13:
                      return n.getUint32(t);

                    default:
                      L("Invalid tiff type ".concat(e));
                  }
                }
              }]), i;
            }(De));

            function it(e, t, n, r) {
              var i = e + t / 60 + n / 3600;
              return "S" !== r && "W" !== r || (i *= -1), i;
            }

            i(rt, "type", "tiff"), i(rt, "headerLength", 10), W.set("tiff", rt);
            var at = Object.freeze({
              __proto__: null,
              default: ze,
              Exifr: Ie,
              fileParsers: M,
              segmentParsers: W,
              fileReaders: K,
              tagKeys: re,
              tagValues: ie,
              tagRevivers: ae,
              createDictionary: te,
              extendDictionary: ne,
              fetchUrlAsArrayBuffer: G,
              readBlobAsArrayBuffer: Y,
              chunkedProps: de,
              otherSegments: ve,
              segments: pe,
              tiffBlocks: ye,
              segmentsAndBlocks: ge,
              tiffExtractables: ke,
              inheritables: me,
              allFormatters: be,
              Options: Pe,
              parse: Te
            });

            function st(e, t, n) {
              return n ? t ? t(e) : e : (e && e.then || (e = Promise.resolve(e)), t ? e.then(t) : e);
            }

            function ut(e) {
              return function () {
                for (var t = [], n = 0; n < arguments.length; n++) {
                  t[n] = arguments[n];
                }

                try {
                  return Promise.resolve(e.apply(this, t));
                } catch (e) {
                  return Promise.reject(e);
                }
              };
            }

            var ot = ut(function (e) {
              var t = new Ie(vt);
              return st(t.read(e), function () {
                return st(t.parse(), function (e) {
                  if (e && e.ifd0) return e.ifd0[274];
                });
              });
            }),
                ft = ut(function (e) {
              var t = new Ie(dt);
              return st(t.read(e), function () {
                return st(t.parse(), function (e) {
                  if (e && e.gps) {
                    var t = e.gps;
                    return {
                      latitude: t.latitude,
                      longitude: t.longitude
                    };
                  }
                });
              });
            }),
                ct = ut(function (e) {
              return st(this.thumbnail(e), function (e) {
                if (void 0 !== e) {
                  var t = new Blob([e]);
                  return URL.createObjectURL(t);
                }
              });
            }),
                ht = ut(function (e) {
              var t = new Ie(pt);
              return st(t.read(e), function () {
                return st(t.extractThumbnail(), function (e) {
                  return e && _ ? j.from(e) : e;
                });
              });
            }),
                lt = {
              ifd0: !1,
              ifd1: !1,
              exif: !1,
              gps: !1,
              interop: !1,
              sanitize: !1,
              reviveValues: !0,
              translateKeys: !1,
              translateValues: !1,
              mergeOutput: !1
            },
                dt = g({}, lt, {
              firstChunkSize: 4e4,
              gps: [1, 2, 3, 4]
            }),
                vt = g({}, lt, {
              firstChunkSize: 4e4,
              ifd0: [274]
            }),
                pt = g({}, lt, {
              tiff: !1,
              ifd1: !0,
              mergeOutput: !1
            }),
                yt = Object.freeze({
              1: {
                dimensionSwapped: !1,
                scaleX: 1,
                scaleY: 1,
                deg: 0,
                rad: 0
              },
              2: {
                dimensionSwapped: !1,
                scaleX: -1,
                scaleY: 1,
                deg: 0,
                rad: 0
              },
              3: {
                dimensionSwapped: !1,
                scaleX: 1,
                scaleY: 1,
                deg: 180,
                rad: 180 * Math.PI / 180
              },
              4: {
                dimensionSwapped: !1,
                scaleX: -1,
                scaleY: 1,
                deg: 180,
                rad: 180 * Math.PI / 180
              },
              5: {
                dimensionSwapped: !0,
                scaleX: 1,
                scaleY: -1,
                deg: 90,
                rad: 90 * Math.PI / 180
              },
              6: {
                dimensionSwapped: !0,
                scaleX: 1,
                scaleY: 1,
                deg: 90,
                rad: 90 * Math.PI / 180
              },
              7: {
                dimensionSwapped: !0,
                scaleX: 1,
                scaleY: -1,
                deg: 270,
                rad: 270 * Math.PI / 180
              },
              8: {
                dimensionSwapped: !0,
                scaleX: 1,
                scaleY: 1,
                deg: 270,
                rad: 270 * Math.PI / 180
              }
            });

            if (e.rotateCanvas = !0, e.rotateCss = !0, "object" == typeof navigator) {
              var gt = navigator.userAgent;

              if (gt.includes("iPad") || gt.includes("iPhone")) {
                var kt = gt.match(/OS (\d+)_(\d+)/);

                if (kt) {
                  var mt = kt[1],
                      bt = kt[2],
                      At = Number(mt) + .1 * Number(bt);
                  e.rotateCanvas = At < 13.4, e.rotateCss = !1;
                }
              } else if (gt.includes("OS X 10")) {
                var wt = gt.match(/OS X 10[_.](\d+)/)[1];
                e.rotateCanvas = e.rotateCss = Number(wt) < 15;
              }

              if (gt.includes("Chrome/")) {
                var Ot = gt.match(/Chrome\/(\d+)/)[1];
                e.rotateCanvas = e.rotateCss = Number(Ot) < 81;
              } else if (gt.includes("Firefox/")) {
                var St = gt.match(/Firefox\/(\d+)/)[1];
                e.rotateCanvas = e.rotateCss = Number(St) < 77;
              }
            }

            function Pt() {}

            var Ut = function (e) {
              a(u, e);
              var n = d(u);

              function u() {
                var e;
                t(this, u);

                for (var r = arguments.length, a = new Array(r), s = 0; s < r; s++) {
                  a[s] = arguments[s];
                }

                return i(h(e = n.call.apply(n, [this].concat(a))), "ranges", new xt()), 0 !== e.byteLength && e.ranges.add(0, e.byteLength), e;
              }

              return r(u, [{
                key: "_tryExtend",
                value: function value(e, t, n) {
                  if (0 === e && 0 === this.byteLength && n) {
                    var r = new DataView(n.buffer || n, n.byteOffset, n.byteLength);

                    this._swapDataView(r);
                  } else {
                    var i = e + t;

                    if (i > this.byteLength) {
                      var a = this._extend(i).dataView;

                      this._swapDataView(a);
                    }
                  }
                }
              }, {
                key: "_extend",
                value: function value(e) {
                  var t;
                  t = _ ? j.allocUnsafe(e) : new Uint8Array(e);
                  var n = new DataView(t.buffer, t.byteOffset, t.byteLength);
                  return t.set(new Uint8Array(this.buffer, this.byteOffset, this.byteLength), 0), {
                    uintView: t,
                    dataView: n
                  };
                }
              }, {
                key: "subarray",
                value: function value(e, t) {
                  var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                  return t = t || this._lengthToEnd(e), n && this._tryExtend(e, t), this.ranges.add(e, t), v(s(u.prototype), "subarray", this).call(this, e, t);
                }
              }, {
                key: "set",
                value: function value(e, t) {
                  var n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
                  n && this._tryExtend(t, e.byteLength, e);
                  var r = v(s(u.prototype), "set", this).call(this, e, t);
                  return this.ranges.add(t, r.byteLength), r;
                }
              }, {
                key: "ensureChunk",
                value: function value(e, t) {
                  try {
                    var n = this;
                    if (!n.chunked) return;
                    if (n.ranges.available(e, t)) return;
                    return function (e, t) {
                      if (!t) return e && e.then ? e.then(Pt) : Promise.resolve();
                    }(n.readChunk(e, t));
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }, {
                key: "available",
                value: function value(e, t) {
                  return this.ranges.available(e, t);
                }
              }]), u;
            }(D),
                xt = function () {
              function e() {
                t(this, e), i(this, "list", []);
              }

              return r(e, [{
                key: "length",
                get: function get() {
                  return this.list.length;
                }
              }, {
                key: "add",
                value: function value(e, t) {
                  var n = e + t,
                      r = this.list.filter(function (t) {
                    return Ct(e, t.offset, n) || Ct(e, t.end, n);
                  });

                  if (r.length > 0) {
                    e = Math.min.apply(Math, [e].concat(r.map(function (e) {
                      return e.offset;
                    }))), t = (n = Math.max.apply(Math, [n].concat(r.map(function (e) {
                      return e.end;
                    })))) - e;
                    var i = r.shift();
                    i.offset = e, i.length = t, i.end = n, this.list = this.list.filter(function (e) {
                      return !r.includes(e);
                    });
                  } else this.list.push({
                    offset: e,
                    length: t,
                    end: n
                  });
                }
              }, {
                key: "available",
                value: function value(e, t) {
                  var n = e + t;
                  return this.list.some(function (t) {
                    return t.offset <= e && n <= t.end;
                  });
                }
              }]), e;
            }();

            function Ct(e, t, n) {
              return e <= t && t <= n;
            }

            function Bt() {}

            function jt(e, t) {
              if (!t) return e && e.then ? e.then(Bt) : Promise.resolve();
            }

            function _t(e, t, n) {
              return n ? t ? t(e) : e : (e && e.then || (e = Promise.resolve(e)), t ? e.then(t) : e);
            }

            var Vt = function (e) {
              a(i, e);
              var n = d(i);

              function i() {
                return t(this, i), n.apply(this, arguments);
              }

              return r(i, [{
                key: "readWhole",
                value: function value() {
                  try {
                    var e = this;
                    return e.chunked = !1, _t(Y(e.input), function (t) {
                      e._swapArrayBuffer(t);
                    });
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }, {
                key: "readChunked",
                value: function value() {
                  return this.chunked = !0, this.size = this.input.size, v(s(i.prototype), "readChunked", this).call(this);
                }
              }, {
                key: "_readChunk",
                value: function value(e, t) {
                  try {
                    var n = this,
                        r = t ? e + t : void 0,
                        i = n.input.slice(e, r);
                    return _t(Y(i), function (t) {
                      return n.set(t, e, !0);
                    });
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }]), i;
            }(function (e) {
              a(s, e);
              var n = d(s);

              function s(e, r) {
                var a;
                return t(this, s), i(h(a = n.call(this, 0)), "chunksRead", 0), a.input = e, a.options = r, a;
              }

              return r(s, [{
                key: "readWhole",
                value: function value() {
                  try {
                    var e = this;
                    return e.chunked = !1, jt(e.readChunk(e.nextChunkOffset));
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }, {
                key: "readChunked",
                value: function value() {
                  try {
                    var e = this;
                    return e.chunked = !0, jt(e.readChunk(0, e.options.firstChunkSize));
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }, {
                key: "readNextChunk",
                value: function value(e) {
                  try {
                    var t = this;
                    if (void 0 === e && (e = t.nextChunkOffset), t.fullyRead) return t.chunksRead++, !1;
                    var n = t.options.chunkSize;
                    return r = t.readChunk(e, n), i = function i(e) {
                      return !!e && e.byteLength === n;
                    }, a ? i ? i(r) : r : (r && r.then || (r = Promise.resolve(r)), i ? r.then(i) : r);
                  } catch (e) {
                    return Promise.reject(e);
                  }

                  var r, i, a;
                }
              }, {
                key: "readChunk",
                value: function value(e, t) {
                  try {
                    var n = this;
                    if (n.chunksRead++, 0 === (t = n.safeWrapAddress(e, t))) return;
                    return n._readChunk(e, t);
                  } catch (e) {
                    return Promise.reject(e);
                  }
                }
              }, {
                key: "safeWrapAddress",
                value: function value(e, t) {
                  return void 0 !== this.size && e + t > this.size ? Math.max(0, this.size - e) : t;
                }
              }, {
                key: "nextChunkOffset",
                get: function get() {
                  if (0 !== this.ranges.list.length) return this.ranges.list[0].length;
                }
              }, {
                key: "canReadNextChunk",
                get: function get() {
                  return this.chunksRead < this.options.chunkLimit;
                }
              }, {
                key: "fullyRead",
                get: function get() {
                  return void 0 !== this.size && this.nextChunkOffset === this.size;
                }
              }, {
                key: "read",
                value: function value() {
                  return this.options.chunked ? this.readChunked() : this.readWhole();
                }
              }, {
                key: "close",
                value: function value() {}
              }]), s;
            }(Ut));

            K.set("blob", Vt), e.Exifr = Ie, e.Options = Pe, e.allFormatters = be, e.chunkedProps = de, e.createDictionary = te, e.default = at, e.disableAllOptions = lt, e.extendDictionary = ne, e.fetchUrlAsArrayBuffer = G, e.fileParsers = M, e.fileReaders = K, e.gps = ft, e.gpsOnlyOptions = dt, e.inheritables = me, e.orientation = ot, e.orientationOnlyOptions = vt, e.otherSegments = ve, e.parse = Te, e.readBlobAsArrayBuffer = Y, e.rotation = function (t) {
              return st(ot(t), function (t) {
                return g({
                  canvas: e.rotateCanvas,
                  css: e.rotateCss
                }, yt[t]);
              });
            }, e.rotations = yt, e.segmentParsers = W, e.segments = pe, e.segmentsAndBlocks = ge, e.tagKeys = re, e.tagRevivers = ae, e.tagValues = ie, e.thumbnail = ht, e.thumbnailOnlyOptions = pt, e.thumbnailUrl = ct, e.tiffBlocks = ye, e.tiffExtractables = ke, Object.defineProperty(e, "__esModule", {
              value: !0
            });
          });
        }).call(this);
      }).call(this, require('_process'), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {}, require("buffer").Buffer);
    }, {
      "_process": 596,
      "buffer": 6
    }],
    581: [function (require, module, exports) {
      'use strict';

      exports.__esModule = true;
      exports.default = getFormData;
      exports.getFieldData = getFieldData;
      var NODE_LIST_CLASSES = {
        '[object HTMLCollection]': true,
        '[object NodeList]': true,
        '[object RadioNodeList]': true // .type values for elements which can appear in .elements and should be ignored

      };
      var IGNORED_ELEMENT_TYPES = {
        'button': true,
        'fieldset': true,
        'reset': true,
        'submit': true
      };
      var CHECKED_INPUT_TYPES = {
        'checkbox': true,
        'radio': true
      };
      var TRIM_RE = /^\s+|\s+$/g;
      var slice = Array.prototype.slice;
      var toString = Object.prototype.toString;
      /**
       * @param {HTMLFormElement} form
       * @param {Object} options
       * @return {Object.<string,(string|Array.<string>)>} an object containing
       *   submittable value(s) held in the form's .elements collection, with
       *   properties named as per element names or ids.
       */

      function getFormData(form) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
          trim: false
        };

        if (!form) {
          throw new Error('A form is required by getFormData, was given form=' + form);
        }

        var data = {};
        var elementName = void 0;
        var elementNames = [];
        var elementNameLookup = {}; // Get unique submittable element names for the form

        for (var i = 0, l = form.elements.length; i < l; i++) {
          var element = form.elements[i];

          if (IGNORED_ELEMENT_TYPES[element.type] || element.disabled) {
            continue;
          }

          elementName = element.name || element.id;

          if (elementName && !elementNameLookup[elementName]) {
            elementNames.push(elementName);
            elementNameLookup[elementName] = true;
          }
        } // Extract element data name-by-name for consistent handling of special cases
        // around elements which contain multiple inputs.


        for (var _i = 0, _l = elementNames.length; _i < _l; _i++) {
          elementName = elementNames[_i];
          var value = getFieldData(form, elementName, options);

          if (value != null) {
            data[elementName] = value;
          }
        }

        return data;
      }
      /**
       * @param {HTMLFormElement} form
       * @param {string} fieldName
       * @param {Object} options
       * @return {(string|Array.<string>)} submittable value(s) in the form for a
       *   named element from its .elements collection, or null if there was no
       *   element with that name or the element had no submittable value(s).
       */


      function getFieldData(form, fieldName) {
        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
          trim: false
        };

        if (!form) {
          throw new Error('A form is required by getFieldData, was given form=' + form);
        }

        if (!fieldName && toString.call(fieldName) !== '[object String]') {
          throw new Error('A field name is required by getFieldData, was given fieldName=' + fieldName);
        }

        var element = form.elements[fieldName];

        if (!element || element.disabled) {
          return null;
        }

        if (!NODE_LIST_CLASSES[toString.call(element)]) {
          return getFormElementValue(element, options.trim);
        } // Deal with multiple form controls which have the same name


        var data = [];
        var allRadios = true;

        for (var i = 0, l = element.length; i < l; i++) {
          if (element[i].disabled) {
            continue;
          }

          if (allRadios && element[i].type !== 'radio') {
            allRadios = false;
          }

          var value = getFormElementValue(element[i], options.trim);

          if (value != null) {
            data = data.concat(value);
          }
        } // Special case for an element with multiple same-named inputs which were all
        // radio buttons: if there was a selected value, only return the value.


        if (allRadios && data.length === 1) {
          return data[0];
        }

        return data.length > 0 ? data : null;
      }
      /**
       * @param {HTMLElement} element a form element.
       * @param {booleam} trim should values for text entry inputs be trimmed?
       * @return {(string|Array.<string>|File|Array.<File>)} the element's submittable
       *   value(s), or null if it had none.
       */


      function getFormElementValue(element, trim) {
        var value = null;
        var type = element.type;

        if (type === 'select-one') {
          if (element.options.length) {
            value = element.options[element.selectedIndex].value;
          }

          return value;
        }

        if (type === 'select-multiple') {
          value = [];

          for (var i = 0, l = element.options.length; i < l; i++) {
            if (element.options[i].selected) {
              value.push(element.options[i].value);
            }
          }

          if (value.length === 0) {
            value = null;
          }

          return value;
        } // If a file input doesn't have a files attribute, fall through to using its
        // value attribute.


        if (type === 'file' && 'files' in element) {
          if (element.multiple) {
            value = slice.call(element.files);

            if (value.length === 0) {
              value = null;
            }
          } else {
            // Should be null if not present, according to the spec
            value = element.files[0];
          }

          return value;
        }

        if (!CHECKED_INPUT_TYPES[type]) {
          value = trim ? element.value.replace(TRIM_RE, '') : element.value;
        } else if (element.checked) {
          value = element.value;
        }

        return value;
      } // For UMD build access to getFieldData


      getFormData.getFieldData = getFieldData;
    }, {}],
    582: [function (require, module, exports) {
      /**
       * Module exports.
       *
       * Logic borrowed from Modernizr:
       *
       *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
       */
      try {
        module.exports = typeof XMLHttpRequest !== 'undefined' && 'withCredentials' in new XMLHttpRequest();
      } catch (err) {
        // if XMLHttp support is disabled in IE then it will throw
        // when trying to create
        module.exports = false;
      }
    }, {}],
    583: [function (require, module, exports) {
      exports.read = function (buffer, offset, isLE, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE ? nBytes - 1 : 0;
        var d = isLE ? -1 : 1;
        var s = buffer[offset + i];
        i += d;
        e = s & (1 << -nBits) - 1;
        s >>= -nBits;
        nBits += eLen;

        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;

        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }

        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
      };

      exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE ? 0 : nBytes - 1;
        var d = isLE ? 1 : -1;
        var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);

        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);

          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }

          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }

          if (value * c >= 2) {
            e++;
            c /= 2;
          }

          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }

        for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

        e = e << mLen | m;
        eLen += mLen;

        for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

        buffer[offset + i - d] |= s * 128;
      };
    }, {}],
    584: [function (require, module, exports) {
      module.exports = function isShallowEqual(a, b) {
        if (a === b) return true;

        for (var i in a) {
          if (!(i in b)) return false;
        }

        for (var i in b) {
          if (a[i] !== b[i]) return false;
        }

        return true;
      };
    }, {}],
    585: [function (require, module, exports) {
      (function (global) {
        (function () {
          /*
           *  base64.js
           *
           *  Licensed under the BSD 3-Clause License.
           *    http://opensource.org/licenses/BSD-3-Clause
           *
           *  References:
           *    http://en.wikipedia.org/wiki/Base64
           */
          ;

          (function (global, factory) {
            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(global) : typeof define === 'function' && define.amd ? define(factory) : factory(global);
          })(typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : this, function (global) {
            'use strict'; // existing version for noConflict()

            global = global || {};
            var _Base64 = global.Base64;
            var version = "2.6.4"; // constants

            var b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

            var b64tab = function (bin) {
              var t = {};

              for (var i = 0, l = bin.length; i < l; i++) {
                t[bin.charAt(i)] = i;
              }

              return t;
            }(b64chars);

            var fromCharCode = String.fromCharCode; // encoder stuff

            var cb_utob = function cb_utob(c) {
              if (c.length < 2) {
                var cc = c.charCodeAt(0);
                return cc < 0x80 ? c : cc < 0x800 ? fromCharCode(0xc0 | cc >>> 6) + fromCharCode(0x80 | cc & 0x3f) : fromCharCode(0xe0 | cc >>> 12 & 0x0f) + fromCharCode(0x80 | cc >>> 6 & 0x3f) + fromCharCode(0x80 | cc & 0x3f);
              } else {
                var cc = 0x10000 + (c.charCodeAt(0) - 0xD800) * 0x400 + (c.charCodeAt(1) - 0xDC00);
                return fromCharCode(0xf0 | cc >>> 18 & 0x07) + fromCharCode(0x80 | cc >>> 12 & 0x3f) + fromCharCode(0x80 | cc >>> 6 & 0x3f) + fromCharCode(0x80 | cc & 0x3f);
              }
            };

            var re_utob = /[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g;

            var utob = function utob(u) {
              return u.replace(re_utob, cb_utob);
            };

            var cb_encode = function cb_encode(ccc) {
              var padlen = [0, 2, 1][ccc.length % 3],
                  ord = ccc.charCodeAt(0) << 16 | (ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8 | (ccc.length > 2 ? ccc.charCodeAt(2) : 0),
                  chars = [b64chars.charAt(ord >>> 18), b64chars.charAt(ord >>> 12 & 63), padlen >= 2 ? '=' : b64chars.charAt(ord >>> 6 & 63), padlen >= 1 ? '=' : b64chars.charAt(ord & 63)];
              return chars.join('');
            };

            var btoa = global.btoa && typeof global.btoa == 'function' ? function (b) {
              return global.btoa(b);
            } : function (b) {
              if (b.match(/[^\x00-\xFF]/)) throw new RangeError('The string contains invalid characters.');
              return b.replace(/[\s\S]{1,3}/g, cb_encode);
            };

            var _encode = function _encode(u) {
              return btoa(utob(String(u)));
            };

            var mkUriSafe = function mkUriSafe(b64) {
              return b64.replace(/[+\/]/g, function (m0) {
                return m0 == '+' ? '-' : '_';
              }).replace(/=/g, '');
            };

            var encode = function encode(u, urisafe) {
              return urisafe ? mkUriSafe(_encode(u)) : _encode(u);
            };

            var encodeURI = function encodeURI(u) {
              return encode(u, true);
            };

            var fromUint8Array;
            if (global.Uint8Array) fromUint8Array = function fromUint8Array(a, urisafe) {
              // return btoa(fromCharCode.apply(null, a));
              var b64 = '';

              for (var i = 0, l = a.length; i < l; i += 3) {
                var a0 = a[i],
                    a1 = a[i + 1],
                    a2 = a[i + 2];
                var ord = a0 << 16 | a1 << 8 | a2;
                b64 += b64chars.charAt(ord >>> 18) + b64chars.charAt(ord >>> 12 & 63) + (typeof a1 != 'undefined' ? b64chars.charAt(ord >>> 6 & 63) : '=') + (typeof a2 != 'undefined' ? b64chars.charAt(ord & 63) : '=');
              }

              return urisafe ? mkUriSafe(b64) : b64;
            }; // decoder stuff

            var re_btou = /[\xC0-\xDF][\x80-\xBF]|[\xE0-\xEF][\x80-\xBF]{2}|[\xF0-\xF7][\x80-\xBF]{3}/g;

            var cb_btou = function cb_btou(cccc) {
              switch (cccc.length) {
                case 4:
                  var cp = (0x07 & cccc.charCodeAt(0)) << 18 | (0x3f & cccc.charCodeAt(1)) << 12 | (0x3f & cccc.charCodeAt(2)) << 6 | 0x3f & cccc.charCodeAt(3),
                      offset = cp - 0x10000;
                  return fromCharCode((offset >>> 10) + 0xD800) + fromCharCode((offset & 0x3FF) + 0xDC00);

                case 3:
                  return fromCharCode((0x0f & cccc.charCodeAt(0)) << 12 | (0x3f & cccc.charCodeAt(1)) << 6 | 0x3f & cccc.charCodeAt(2));

                default:
                  return fromCharCode((0x1f & cccc.charCodeAt(0)) << 6 | 0x3f & cccc.charCodeAt(1));
              }
            };

            var btou = function btou(b) {
              return b.replace(re_btou, cb_btou);
            };

            var cb_decode = function cb_decode(cccc) {
              var len = cccc.length,
                  padlen = len % 4,
                  n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0) | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0) | (len > 2 ? b64tab[cccc.charAt(2)] << 6 : 0) | (len > 3 ? b64tab[cccc.charAt(3)] : 0),
                  chars = [fromCharCode(n >>> 16), fromCharCode(n >>> 8 & 0xff), fromCharCode(n & 0xff)];
              chars.length -= [0, 0, 2, 1][padlen];
              return chars.join('');
            };

            var _atob = global.atob && typeof global.atob == 'function' ? function (a) {
              return global.atob(a);
            } : function (a) {
              return a.replace(/\S{1,4}/g, cb_decode);
            };

            var atob = function atob(a) {
              return _atob(String(a).replace(/[^A-Za-z0-9\+\/]/g, ''));
            };

            var _decode = function _decode(a) {
              return btou(_atob(a));
            };

            var _fromURI = function _fromURI(a) {
              return String(a).replace(/[-_]/g, function (m0) {
                return m0 == '-' ? '+' : '/';
              }).replace(/[^A-Za-z0-9\+\/]/g, '');
            };

            var decode = function decode(a) {
              return _decode(_fromURI(a));
            };

            var toUint8Array;
            if (global.Uint8Array) toUint8Array = function toUint8Array(a) {
              return Uint8Array.from(atob(_fromURI(a)), function (c) {
                return c.charCodeAt(0);
              });
            };

            var noConflict = function noConflict() {
              var Base64 = global.Base64;
              global.Base64 = _Base64;
              return Base64;
            }; // export Base64


            global.Base64 = {
              VERSION: version,
              atob: atob,
              btoa: btoa,
              fromBase64: decode,
              toBase64: encode,
              utob: utob,
              encode: encode,
              encodeURI: encodeURI,
              btou: btou,
              decode: decode,
              noConflict: noConflict,
              fromUint8Array: fromUint8Array,
              toUint8Array: toUint8Array
            }; // if ES5 is available, make Base64.extendString() available

            if (typeof Object.defineProperty === 'function') {
              var noEnum = function noEnum(v) {
                return {
                  value: v,
                  enumerable: false,
                  writable: true,
                  configurable: true
                };
              };

              global.Base64.extendString = function () {
                Object.defineProperty(String.prototype, 'fromBase64', noEnum(function () {
                  return decode(this);
                }));
                Object.defineProperty(String.prototype, 'toBase64', noEnum(function (urisafe) {
                  return encode(this, urisafe);
                }));
                Object.defineProperty(String.prototype, 'toBase64URI', noEnum(function () {
                  return encode(this, true);
                }));
              };
            } //
            // export Base64 to the namespace
            //


            if (global['Meteor']) {
              // Meteor.js
              Base64 = global.Base64;
            } // module.exports and AMD are mutually exclusive.
            // module.exports has precedence.


            if (typeof module !== 'undefined' && module.exports) {
              module.exports.Base64 = global.Base64;
            } else if (typeof define === 'function' && define.amd) {
              // AMD. Register as an anonymous module.
              define([], function () {
                return global.Base64;
              });
            } // that's it!


            return {
              Base64: global.Base64
            };
          });
        }).call(this);
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    586: [function (require, module, exports) {
      (function (global) {
        (function () {
          /**
           * lodash (Custom Build) <https://lodash.com/>
           * Build: `lodash modularize exports="npm" -o ./`
           * Copyright jQuery Foundation and other contributors <https://jquery.org/>
           * Released under MIT license <https://lodash.com/license>
           * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
           * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
           */

          /** Used as the `TypeError` message for "Functions" methods. */
          var FUNC_ERROR_TEXT = 'Expected a function';
          /** Used as references for various `Number` constants. */

          var NAN = 0 / 0;
          /** `Object#toString` result references. */

          var symbolTag = '[object Symbol]';
          /** Used to match leading and trailing whitespace. */

          var reTrim = /^\s+|\s+$/g;
          /** Used to detect bad signed hexadecimal string values. */

          var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
          /** Used to detect binary string values. */

          var reIsBinary = /^0b[01]+$/i;
          /** Used to detect octal string values. */

          var reIsOctal = /^0o[0-7]+$/i;
          /** Built-in method references without a dependency on `root`. */

          var freeParseInt = parseInt;
          /** Detect free variable `global` from Node.js. */

          var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
          /** Detect free variable `self`. */

          var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
          /** Used as a reference to the global object. */

          var root = freeGlobal || freeSelf || Function('return this')();
          /** Used for built-in method references. */

          var objectProto = Object.prototype;
          /**
           * Used to resolve the
           * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
           * of values.
           */

          var objectToString = objectProto.toString;
          /* Built-in method references for those with the same name as other `lodash` methods. */

          var nativeMax = Math.max,
              nativeMin = Math.min;
          /**
           * Gets the timestamp of the number of milliseconds that have elapsed since
           * the Unix epoch (1 January 1970 00:00:00 UTC).
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Date
           * @returns {number} Returns the timestamp.
           * @example
           *
           * _.defer(function(stamp) {
           *   console.log(_.now() - stamp);
           * }, _.now());
           * // => Logs the number of milliseconds it took for the deferred invocation.
           */

          var now = function now() {
            return root.Date.now();
          };
          /**
           * Creates a debounced function that delays invoking `func` until after `wait`
           * milliseconds have elapsed since the last time the debounced function was
           * invoked. The debounced function comes with a `cancel` method to cancel
           * delayed `func` invocations and a `flush` method to immediately invoke them.
           * Provide `options` to indicate whether `func` should be invoked on the
           * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
           * with the last arguments provided to the debounced function. Subsequent
           * calls to the debounced function return the result of the last `func`
           * invocation.
           *
           * **Note:** If `leading` and `trailing` options are `true`, `func` is
           * invoked on the trailing edge of the timeout only if the debounced function
           * is invoked more than once during the `wait` timeout.
           *
           * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
           * until to the next tick, similar to `setTimeout` with a timeout of `0`.
           *
           * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
           * for details over the differences between `_.debounce` and `_.throttle`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to debounce.
           * @param {number} [wait=0] The number of milliseconds to delay.
           * @param {Object} [options={}] The options object.
           * @param {boolean} [options.leading=false]
           *  Specify invoking on the leading edge of the timeout.
           * @param {number} [options.maxWait]
           *  The maximum time `func` is allowed to be delayed before it's invoked.
           * @param {boolean} [options.trailing=true]
           *  Specify invoking on the trailing edge of the timeout.
           * @returns {Function} Returns the new debounced function.
           * @example
           *
           * // Avoid costly calculations while the window size is in flux.
           * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
           *
           * // Invoke `sendMail` when clicked, debouncing subsequent calls.
           * jQuery(element).on('click', _.debounce(sendMail, 300, {
           *   'leading': true,
           *   'trailing': false
           * }));
           *
           * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
           * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
           * var source = new EventSource('/stream');
           * jQuery(source).on('message', debounced);
           *
           * // Cancel the trailing debounced invocation.
           * jQuery(window).on('popstate', debounced.cancel);
           */


          function debounce(func, wait, options) {
            var lastArgs,
                lastThis,
                maxWait,
                result,
                timerId,
                lastCallTime,
                lastInvokeTime = 0,
                leading = false,
                maxing = false,
                trailing = true;

            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            wait = toNumber(wait) || 0;

            if (isObject(options)) {
              leading = !!options.leading;
              maxing = 'maxWait' in options;
              maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
              trailing = 'trailing' in options ? !!options.trailing : trailing;
            }

            function invokeFunc(time) {
              var args = lastArgs,
                  thisArg = lastThis;
              lastArgs = lastThis = undefined;
              lastInvokeTime = time;
              result = func.apply(thisArg, args);
              return result;
            }

            function leadingEdge(time) {
              // Reset any `maxWait` timer.
              lastInvokeTime = time; // Start the timer for the trailing edge.

              timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.

              return leading ? invokeFunc(time) : result;
            }

            function remainingWait(time) {
              var timeSinceLastCall = time - lastCallTime,
                  timeSinceLastInvoke = time - lastInvokeTime,
                  result = wait - timeSinceLastCall;
              return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
            }

            function shouldInvoke(time) {
              var timeSinceLastCall = time - lastCallTime,
                  timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the
              // trailing edge, the system time has gone backwards and we're treating
              // it as the trailing edge, or we've hit the `maxWait` limit.

              return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }

            function timerExpired() {
              var time = now();

              if (shouldInvoke(time)) {
                return trailingEdge(time);
              } // Restart the timer.


              timerId = setTimeout(timerExpired, remainingWait(time));
            }

            function trailingEdge(time) {
              timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been
              // debounced at least once.

              if (trailing && lastArgs) {
                return invokeFunc(time);
              }

              lastArgs = lastThis = undefined;
              return result;
            }

            function cancel() {
              if (timerId !== undefined) {
                clearTimeout(timerId);
              }

              lastInvokeTime = 0;
              lastArgs = lastCallTime = lastThis = timerId = undefined;
            }

            function flush() {
              return timerId === undefined ? result : trailingEdge(now());
            }

            function debounced() {
              var time = now(),
                  isInvoking = shouldInvoke(time);
              lastArgs = arguments;
              lastThis = this;
              lastCallTime = time;

              if (isInvoking) {
                if (timerId === undefined) {
                  return leadingEdge(lastCallTime);
                }

                if (maxing) {
                  // Handle invocations in a tight loop.
                  timerId = setTimeout(timerExpired, wait);
                  return invokeFunc(lastCallTime);
                }
              }

              if (timerId === undefined) {
                timerId = setTimeout(timerExpired, wait);
              }

              return result;
            }

            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
          }
          /**
           * Checks if `value` is the
           * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
           * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an object, else `false`.
           * @example
           *
           * _.isObject({});
           * // => true
           *
           * _.isObject([1, 2, 3]);
           * // => true
           *
           * _.isObject(_.noop);
           * // => true
           *
           * _.isObject(null);
           * // => false
           */


          function isObject(value) {
            var type = typeof value;
            return !!value && (type == 'object' || type == 'function');
          }
          /**
           * Checks if `value` is object-like. A value is object-like if it's not `null`
           * and has a `typeof` result of "object".
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
           * @example
           *
           * _.isObjectLike({});
           * // => true
           *
           * _.isObjectLike([1, 2, 3]);
           * // => true
           *
           * _.isObjectLike(_.noop);
           * // => false
           *
           * _.isObjectLike(null);
           * // => false
           */


          function isObjectLike(value) {
            return !!value && typeof value == 'object';
          }
          /**
           * Checks if `value` is classified as a `Symbol` primitive or object.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
           * @example
           *
           * _.isSymbol(Symbol.iterator);
           * // => true
           *
           * _.isSymbol('abc');
           * // => false
           */


          function isSymbol(value) {
            return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
          }
          /**
           * Converts `value` to a number.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to process.
           * @returns {number} Returns the number.
           * @example
           *
           * _.toNumber(3.2);
           * // => 3.2
           *
           * _.toNumber(Number.MIN_VALUE);
           * // => 5e-324
           *
           * _.toNumber(Infinity);
           * // => Infinity
           *
           * _.toNumber('3.2');
           * // => 3.2
           */


          function toNumber(value) {
            if (typeof value == 'number') {
              return value;
            }

            if (isSymbol(value)) {
              return NAN;
            }

            if (isObject(value)) {
              var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
              value = isObject(other) ? other + '' : other;
            }

            if (typeof value != 'string') {
              return value === 0 ? value : +value;
            }

            value = value.replace(reTrim, '');
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
          }

          module.exports = debounce;
        }).call(this);
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    587: [function (require, module, exports) {
      (function (global) {
        (function () {
          /**
           * lodash (Custom Build) <https://lodash.com/>
           * Build: `lodash modularize exports="npm" -o ./`
           * Copyright jQuery Foundation and other contributors <https://jquery.org/>
           * Released under MIT license <https://lodash.com/license>
           * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
           * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
           */

          /** Used as the `TypeError` message for "Functions" methods. */
          var FUNC_ERROR_TEXT = 'Expected a function';
          /** Used as references for various `Number` constants. */

          var NAN = 0 / 0;
          /** `Object#toString` result references. */

          var symbolTag = '[object Symbol]';
          /** Used to match leading and trailing whitespace. */

          var reTrim = /^\s+|\s+$/g;
          /** Used to detect bad signed hexadecimal string values. */

          var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
          /** Used to detect binary string values. */

          var reIsBinary = /^0b[01]+$/i;
          /** Used to detect octal string values. */

          var reIsOctal = /^0o[0-7]+$/i;
          /** Built-in method references without a dependency on `root`. */

          var freeParseInt = parseInt;
          /** Detect free variable `global` from Node.js. */

          var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
          /** Detect free variable `self`. */

          var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
          /** Used as a reference to the global object. */

          var root = freeGlobal || freeSelf || Function('return this')();
          /** Used for built-in method references. */

          var objectProto = Object.prototype;
          /**
           * Used to resolve the
           * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
           * of values.
           */

          var objectToString = objectProto.toString;
          /* Built-in method references for those with the same name as other `lodash` methods. */

          var nativeMax = Math.max,
              nativeMin = Math.min;
          /**
           * Gets the timestamp of the number of milliseconds that have elapsed since
           * the Unix epoch (1 January 1970 00:00:00 UTC).
           *
           * @static
           * @memberOf _
           * @since 2.4.0
           * @category Date
           * @returns {number} Returns the timestamp.
           * @example
           *
           * _.defer(function(stamp) {
           *   console.log(_.now() - stamp);
           * }, _.now());
           * // => Logs the number of milliseconds it took for the deferred invocation.
           */

          var now = function now() {
            return root.Date.now();
          };
          /**
           * Creates a debounced function that delays invoking `func` until after `wait`
           * milliseconds have elapsed since the last time the debounced function was
           * invoked. The debounced function comes with a `cancel` method to cancel
           * delayed `func` invocations and a `flush` method to immediately invoke them.
           * Provide `options` to indicate whether `func` should be invoked on the
           * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
           * with the last arguments provided to the debounced function. Subsequent
           * calls to the debounced function return the result of the last `func`
           * invocation.
           *
           * **Note:** If `leading` and `trailing` options are `true`, `func` is
           * invoked on the trailing edge of the timeout only if the debounced function
           * is invoked more than once during the `wait` timeout.
           *
           * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
           * until to the next tick, similar to `setTimeout` with a timeout of `0`.
           *
           * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
           * for details over the differences between `_.debounce` and `_.throttle`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to debounce.
           * @param {number} [wait=0] The number of milliseconds to delay.
           * @param {Object} [options={}] The options object.
           * @param {boolean} [options.leading=false]
           *  Specify invoking on the leading edge of the timeout.
           * @param {number} [options.maxWait]
           *  The maximum time `func` is allowed to be delayed before it's invoked.
           * @param {boolean} [options.trailing=true]
           *  Specify invoking on the trailing edge of the timeout.
           * @returns {Function} Returns the new debounced function.
           * @example
           *
           * // Avoid costly calculations while the window size is in flux.
           * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
           *
           * // Invoke `sendMail` when clicked, debouncing subsequent calls.
           * jQuery(element).on('click', _.debounce(sendMail, 300, {
           *   'leading': true,
           *   'trailing': false
           * }));
           *
           * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
           * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
           * var source = new EventSource('/stream');
           * jQuery(source).on('message', debounced);
           *
           * // Cancel the trailing debounced invocation.
           * jQuery(window).on('popstate', debounced.cancel);
           */


          function debounce(func, wait, options) {
            var lastArgs,
                lastThis,
                maxWait,
                result,
                timerId,
                lastCallTime,
                lastInvokeTime = 0,
                leading = false,
                maxing = false,
                trailing = true;

            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            wait = toNumber(wait) || 0;

            if (isObject(options)) {
              leading = !!options.leading;
              maxing = 'maxWait' in options;
              maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
              trailing = 'trailing' in options ? !!options.trailing : trailing;
            }

            function invokeFunc(time) {
              var args = lastArgs,
                  thisArg = lastThis;
              lastArgs = lastThis = undefined;
              lastInvokeTime = time;
              result = func.apply(thisArg, args);
              return result;
            }

            function leadingEdge(time) {
              // Reset any `maxWait` timer.
              lastInvokeTime = time; // Start the timer for the trailing edge.

              timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.

              return leading ? invokeFunc(time) : result;
            }

            function remainingWait(time) {
              var timeSinceLastCall = time - lastCallTime,
                  timeSinceLastInvoke = time - lastInvokeTime,
                  result = wait - timeSinceLastCall;
              return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
            }

            function shouldInvoke(time) {
              var timeSinceLastCall = time - lastCallTime,
                  timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the
              // trailing edge, the system time has gone backwards and we're treating
              // it as the trailing edge, or we've hit the `maxWait` limit.

              return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }

            function timerExpired() {
              var time = now();

              if (shouldInvoke(time)) {
                return trailingEdge(time);
              } // Restart the timer.


              timerId = setTimeout(timerExpired, remainingWait(time));
            }

            function trailingEdge(time) {
              timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been
              // debounced at least once.

              if (trailing && lastArgs) {
                return invokeFunc(time);
              }

              lastArgs = lastThis = undefined;
              return result;
            }

            function cancel() {
              if (timerId !== undefined) {
                clearTimeout(timerId);
              }

              lastInvokeTime = 0;
              lastArgs = lastCallTime = lastThis = timerId = undefined;
            }

            function flush() {
              return timerId === undefined ? result : trailingEdge(now());
            }

            function debounced() {
              var time = now(),
                  isInvoking = shouldInvoke(time);
              lastArgs = arguments;
              lastThis = this;
              lastCallTime = time;

              if (isInvoking) {
                if (timerId === undefined) {
                  return leadingEdge(lastCallTime);
                }

                if (maxing) {
                  // Handle invocations in a tight loop.
                  timerId = setTimeout(timerExpired, wait);
                  return invokeFunc(lastCallTime);
                }
              }

              if (timerId === undefined) {
                timerId = setTimeout(timerExpired, wait);
              }

              return result;
            }

            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
          }
          /**
           * Creates a throttled function that only invokes `func` at most once per
           * every `wait` milliseconds. The throttled function comes with a `cancel`
           * method to cancel delayed `func` invocations and a `flush` method to
           * immediately invoke them. Provide `options` to indicate whether `func`
           * should be invoked on the leading and/or trailing edge of the `wait`
           * timeout. The `func` is invoked with the last arguments provided to the
           * throttled function. Subsequent calls to the throttled function return the
           * result of the last `func` invocation.
           *
           * **Note:** If `leading` and `trailing` options are `true`, `func` is
           * invoked on the trailing edge of the timeout only if the throttled function
           * is invoked more than once during the `wait` timeout.
           *
           * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
           * until to the next tick, similar to `setTimeout` with a timeout of `0`.
           *
           * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
           * for details over the differences between `_.throttle` and `_.debounce`.
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Function
           * @param {Function} func The function to throttle.
           * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
           * @param {Object} [options={}] The options object.
           * @param {boolean} [options.leading=true]
           *  Specify invoking on the leading edge of the timeout.
           * @param {boolean} [options.trailing=true]
           *  Specify invoking on the trailing edge of the timeout.
           * @returns {Function} Returns the new throttled function.
           * @example
           *
           * // Avoid excessively updating the position while scrolling.
           * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
           *
           * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
           * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
           * jQuery(element).on('click', throttled);
           *
           * // Cancel the trailing throttled invocation.
           * jQuery(window).on('popstate', throttled.cancel);
           */


          function throttle(func, wait, options) {
            var leading = true,
                trailing = true;

            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }

            if (isObject(options)) {
              leading = 'leading' in options ? !!options.leading : leading;
              trailing = 'trailing' in options ? !!options.trailing : trailing;
            }

            return debounce(func, wait, {
              'leading': leading,
              'maxWait': wait,
              'trailing': trailing
            });
          }
          /**
           * Checks if `value` is the
           * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
           * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
           *
           * @static
           * @memberOf _
           * @since 0.1.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is an object, else `false`.
           * @example
           *
           * _.isObject({});
           * // => true
           *
           * _.isObject([1, 2, 3]);
           * // => true
           *
           * _.isObject(_.noop);
           * // => true
           *
           * _.isObject(null);
           * // => false
           */


          function isObject(value) {
            var type = typeof value;
            return !!value && (type == 'object' || type == 'function');
          }
          /**
           * Checks if `value` is object-like. A value is object-like if it's not `null`
           * and has a `typeof` result of "object".
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
           * @example
           *
           * _.isObjectLike({});
           * // => true
           *
           * _.isObjectLike([1, 2, 3]);
           * // => true
           *
           * _.isObjectLike(_.noop);
           * // => false
           *
           * _.isObjectLike(null);
           * // => false
           */


          function isObjectLike(value) {
            return !!value && typeof value == 'object';
          }
          /**
           * Checks if `value` is classified as a `Symbol` primitive or object.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to check.
           * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
           * @example
           *
           * _.isSymbol(Symbol.iterator);
           * // => true
           *
           * _.isSymbol('abc');
           * // => false
           */


          function isSymbol(value) {
            return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
          }
          /**
           * Converts `value` to a number.
           *
           * @static
           * @memberOf _
           * @since 4.0.0
           * @category Lang
           * @param {*} value The value to process.
           * @returns {number} Returns the number.
           * @example
           *
           * _.toNumber(3.2);
           * // => 3.2
           *
           * _.toNumber(Number.MIN_VALUE);
           * // => 5e-324
           *
           * _.toNumber(Infinity);
           * // => Infinity
           *
           * _.toNumber('3.2');
           * // => 3.2
           */


          function toNumber(value) {
            if (typeof value == 'number') {
              return value;
            }

            if (isSymbol(value)) {
              return NAN;
            }

            if (isObject(value)) {
              var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
              value = isObject(other) ? other + '' : other;
            }

            if (typeof value != 'string') {
              return value === 0 ? value : +value;
            }

            value = value.replace(reTrim, '');
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
          }

          module.exports = throttle;
        }).call(this);
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    588: [function (require, module, exports) {
      (function () {
        var promisifiedOldGUM = function promisifiedOldGUM(constraints, successCallback, errorCallback) {
          // First get ahold of getUserMedia, if present
          var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia; // Some browsers just don't implement it - return a rejected promise with an error
          // to keep a consistent interface

          if (!getUserMedia) {
            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));
          } // Otherwise, wrap the call to the old navigator.getUserMedia with a Promise


          return new Promise(function (successCallback, errorCallback) {
            getUserMedia.call(navigator, constraints, successCallback, errorCallback);
          });
        }; // Older browsers might not implement mediaDevices at all, so we set an empty object first


        if (navigator.mediaDevices === undefined) {
          navigator.mediaDevices = {};
        } // Some browsers partially implement mediaDevices. We can't just assign an object
        // with getUserMedia as it would overwrite existing properties.
        // Here, we will just add the getUserMedia property if it's missing.


        if (navigator.mediaDevices.getUserMedia === undefined) {
          navigator.mediaDevices.getUserMedia = promisifiedOldGUM;
        }
      })();
    }, {}],
    589: [function (require, module, exports) {
      'use strict';

      var safeIsNaN = Number.isNaN || function ponyfill(value) {
        return typeof value === 'number' && value !== value;
      };

      function isEqual(first, second) {
        if (first === second) {
          return true;
        }

        if (safeIsNaN(first) && safeIsNaN(second)) {
          return true;
        }

        return false;
      }

      function areInputsEqual(newInputs, lastInputs) {
        if (newInputs.length !== lastInputs.length) {
          return false;
        }

        for (var i = 0; i < newInputs.length; i++) {
          if (!isEqual(newInputs[i], lastInputs[i])) {
            return false;
          }
        }

        return true;
      }

      function memoizeOne(resultFn, isEqual) {
        if (isEqual === void 0) {
          isEqual = areInputsEqual;
        }

        var lastThis;
        var lastArgs = [];
        var lastResult;
        var calledOnce = false;

        function memoized() {
          var newArgs = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            newArgs[_i] = arguments[_i];
          }

          if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {
            return lastResult;
          }

          lastResult = resultFn.apply(this, newArgs);
          calledOnce = true;
          lastThis = this;
          lastArgs = newArgs;
          return lastResult;
        }

        return memoized;
      }

      module.exports = memoizeOne;
    }, {}],
    590: [function (require, module, exports) {
      var wildcard = require('wildcard');

      var reMimePartSplit = /[\/\+\.]/;
      /**
        # mime-match
      
        A simple function to checker whether a target mime type matches a mime-type
        pattern (e.g. image/jpeg matches image/jpeg OR image/*).
      
        ## Example Usage
      
        <<< example.js
      
      **/

      module.exports = function (target, pattern) {
        function test(pattern) {
          var result = wildcard(pattern, target, reMimePartSplit); // ensure that we have a valid mime type (should have two parts)

          return result && result.length >= 2;
        }

        return pattern ? test(pattern.split(';')[0]) : test;
      };
    }, {
      "wildcard": 625
    }],
    591: [function (require, module, exports) {
      /**
       * Helpers.
       */
      var s = 1000;
      var m = s * 60;
      var h = m * 60;
      var d = h * 24;
      var w = d * 7;
      var y = d * 365.25;
      /**
       * Parse or format the given `val`.
       *
       * Options:
       *
       *  - `long` verbose formatting [false]
       *
       * @param {String|Number} val
       * @param {Object} [options]
       * @throws {Error} throw an error if val is not a non-empty string or a number
       * @return {String|Number}
       * @api public
       */

      module.exports = function (val, options) {
        options = options || {};
        var type = typeof val;

        if (type === 'string' && val.length > 0) {
          return parse(val);
        } else if (type === 'number' && isFinite(val)) {
          return options.long ? fmtLong(val) : fmtShort(val);
        }

        throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
      };
      /**
       * Parse the given `str` and return milliseconds.
       *
       * @param {String} str
       * @return {Number}
       * @api private
       */


      function parse(str) {
        str = String(str);

        if (str.length > 100) {
          return;
        }

        var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);

        if (!match) {
          return;
        }

        var n = parseFloat(match[1]);
        var type = (match[2] || 'ms').toLowerCase();

        switch (type) {
          case 'years':
          case 'year':
          case 'yrs':
          case 'yr':
          case 'y':
            return n * y;

          case 'weeks':
          case 'week':
          case 'w':
            return n * w;

          case 'days':
          case 'day':
          case 'd':
            return n * d;

          case 'hours':
          case 'hour':
          case 'hrs':
          case 'hr':
          case 'h':
            return n * h;

          case 'minutes':
          case 'minute':
          case 'mins':
          case 'min':
          case 'm':
            return n * m;

          case 'seconds':
          case 'second':
          case 'secs':
          case 'sec':
          case 's':
            return n * s;

          case 'milliseconds':
          case 'millisecond':
          case 'msecs':
          case 'msec':
          case 'ms':
            return n;

          default:
            return undefined;
        }
      }
      /**
       * Short format for `ms`.
       *
       * @param {Number} ms
       * @return {String}
       * @api private
       */


      function fmtShort(ms) {
        var msAbs = Math.abs(ms);

        if (msAbs >= d) {
          return Math.round(ms / d) + 'd';
        }

        if (msAbs >= h) {
          return Math.round(ms / h) + 'h';
        }

        if (msAbs >= m) {
          return Math.round(ms / m) + 'm';
        }

        if (msAbs >= s) {
          return Math.round(ms / s) + 's';
        }

        return ms + 'ms';
      }
      /**
       * Long format for `ms`.
       *
       * @param {Number} ms
       * @return {String}
       * @api private
       */


      function fmtLong(ms) {
        var msAbs = Math.abs(ms);

        if (msAbs >= d) {
          return plural(ms, msAbs, d, 'day');
        }

        if (msAbs >= h) {
          return plural(ms, msAbs, h, 'hour');
        }

        if (msAbs >= m) {
          return plural(ms, msAbs, m, 'minute');
        }

        if (msAbs >= s) {
          return plural(ms, msAbs, s, 'second');
        }

        return ms + ' ms';
      }
      /**
       * Pluralization helper.
       */


      function plural(ms, msAbs, n, name) {
        var isPlural = msAbs >= n * 1.5;
        return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
      }
    }, {}],
    592: [function (require, module, exports) {
      /**
      * Create an event emitter with namespaces
      * @name createNamespaceEmitter
      * @example
      * var emitter = require('./index')()
      *
      * emitter.on('*', function () {
      *   console.log('all events emitted', this.event)
      * })
      *
      * emitter.on('example', function () {
      *   console.log('example event emitted')
      * })
      */
      module.exports = function createNamespaceEmitter() {
        var emitter = {};

        var _fns = emitter._fns = {};
        /**
        * Emit an event. Optionally namespace the event. Handlers are fired in the order in which they were added with exact matches taking precedence. Separate the namespace and event with a `:`
        * @name emit
        * @param {String} event – the name of the event, with optional namespace
        * @param {...*} data – up to 6 arguments that are passed to the event listener
        * @example
        * emitter.emit('example')
        * emitter.emit('demo:test')
        * emitter.emit('data', { example: true}, 'a string', 1)
        */


        emitter.emit = function emit(event, arg1, arg2, arg3, arg4, arg5, arg6) {
          var toEmit = getListeners(event);

          if (toEmit.length) {
            emitAll(event, toEmit, [arg1, arg2, arg3, arg4, arg5, arg6]);
          }
        };
        /**
        * Create en event listener.
        * @name on
        * @param {String} event
        * @param {Function} fn
        * @example
        * emitter.on('example', function () {})
        * emitter.on('demo', function () {})
        */


        emitter.on = function on(event, fn) {
          if (!_fns[event]) {
            _fns[event] = [];
          }

          _fns[event].push(fn);
        };
        /**
        * Create en event listener that fires once.
        * @name once
        * @param {String} event
        * @param {Function} fn
        * @example
        * emitter.once('example', function () {})
        * emitter.once('demo', function () {})
        */


        emitter.once = function once(event, fn) {
          function one() {
            fn.apply(this, arguments);
            emitter.off(event, one);
          }

          this.on(event, one);
        };
        /**
        * Stop listening to an event. Stop all listeners on an event by only passing the event name. Stop a single listener by passing that event handler as a callback.
        * You must be explicit about what will be unsubscribed: `emitter.off('demo')` will unsubscribe an `emitter.on('demo')` listener,
        * `emitter.off('demo:example')` will unsubscribe an `emitter.on('demo:example')` listener
        * @name off
        * @param {String} event
        * @param {Function} [fn] – the specific handler
        * @example
        * emitter.off('example')
        * emitter.off('demo', function () {})
        */


        emitter.off = function off(event, fn) {
          var keep = [];

          if (event && fn) {
            var fns = this._fns[event];
            var i = 0;
            var l = fns ? fns.length : 0;

            for (i; i < l; i++) {
              if (fns[i] !== fn) {
                keep.push(fns[i]);
              }
            }
          }

          keep.length ? this._fns[event] = keep : delete this._fns[event];
        };

        function getListeners(e) {
          var out = _fns[e] ? _fns[e] : [];
          var idx = e.indexOf(':');
          var args = idx === -1 ? [e] : [e.substring(0, idx), e.substring(idx + 1)];
          var keys = Object.keys(_fns);
          var i = 0;
          var l = keys.length;

          for (i; i < l; i++) {
            var key = keys[i];

            if (key === '*') {
              out = out.concat(_fns[key]);
            }

            if (args.length === 2 && args[0] === key) {
              out = out.concat(_fns[key]);
              break;
            }
          }

          return out;
        }

        function emitAll(e, fns, args) {
          var i = 0;
          var l = fns.length;

          for (i; i < l; i++) {
            if (!fns[i]) break;
            fns[i].event = e;
            fns[i].apply(fns[i], args);
          }
        }

        return emitter;
      };
    }, {}],
    593: [function (require, module, exports) {
      /**
       * Compiles a querystring
       * Returns string representation of the object
       *
       * @param {Object}
       * @api private
       */
      exports.encode = function (obj) {
        var str = '';

        for (var i in obj) {
          if (obj.hasOwnProperty(i)) {
            if (str.length) str += '&';
            str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
          }
        }

        return str;
      };
      /**
       * Parses a simple querystring into an object
       *
       * @param {String} qs
       * @api private
       */


      exports.decode = function (qs) {
        var qry = {};
        var pairs = qs.split('&');

        for (var i = 0, l = pairs.length; i < l; i++) {
          var pair = pairs[i].split('=');
          qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
        }

        return qry;
      };
    }, {}],
    594: [function (require, module, exports) {
      /**
       * Parses an URI
       *
       * @author Steven Levithan <stevenlevithan.com> (MIT license)
       * @api private
       */
      var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
      var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];

      module.exports = function parseuri(str) {
        var src = str,
            b = str.indexOf('['),
            e = str.indexOf(']');

        if (b != -1 && e != -1) {
          str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
        }

        var m = re.exec(str || ''),
            uri = {},
            i = 14;

        while (i--) {
          uri[parts[i]] = m[i] || '';
        }

        if (b != -1 && e != -1) {
          uri.source = src;
          uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
          uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
          uri.ipv6uri = true;
        }

        uri.pathNames = pathNames(uri, uri['path']);
        uri.queryKey = queryKey(uri, uri['query']);
        return uri;
      };

      function pathNames(obj, path) {
        var regx = /\/{2,9}/g,
            names = path.replace(regx, "/").split("/");

        if (path.substr(0, 1) == '/' || path.length === 0) {
          names.splice(0, 1);
        }

        if (path.substr(path.length - 1, 1) == '/') {
          names.splice(names.length - 1, 1);
        }

        return names;
      }

      function queryKey(uri, query) {
        var data = {};
        query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {
          if ($1) {
            data[$1] = $2;
          }
        });
        return data;
      }
    }, {}],
    595: [function (require, module, exports) {
      var n,
          l,
          u,
          t,
          i,
          o,
          r,
          f,
          e = {},
          c = [],
          s = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;

      function a(n, l) {
        for (var u in l) {
          n[u] = l[u];
        }

        return n;
      }

      function p(n) {
        var l = n.parentNode;
        l && l.removeChild(n);
      }

      function v(l, u, t) {
        var i,
            o,
            r,
            f = {};

        for (r in u) {
          "key" == r ? i = u[r] : "ref" == r ? o = u[r] : f[r] = u[r];
        }

        if (arguments.length > 2 && (f.children = arguments.length > 3 ? n.call(arguments, 2) : t), "function" == typeof l && null != l.defaultProps) for (r in l.defaultProps) {
          void 0 === f[r] && (f[r] = l.defaultProps[r]);
        }
        return h(l, f, i, o, null);
      }

      function h(n, t, i, o, r) {
        var f = {
          type: n,
          props: t,
          key: i,
          ref: o,
          __k: null,
          __: null,
          __b: 0,
          __e: null,
          __d: void 0,
          __c: null,
          __h: null,
          constructor: void 0,
          __v: null == r ? ++u : r
        };
        return null != l.vnode && l.vnode(f), f;
      }

      function y(n) {
        return n.children;
      }

      function d(n, l) {
        this.props = n, this.context = l;
      }

      function _(n, l) {
        if (null == l) return n.__ ? _(n.__, n.__.__k.indexOf(n) + 1) : null;

        for (var u; l < n.__k.length; l++) {
          if (null != (u = n.__k[l]) && null != u.__e) return u.__e;
        }

        return "function" == typeof n.type ? _(n) : null;
      }

      function k(n) {
        var l, u;

        if (null != (n = n.__) && null != n.__c) {
          for (n.__e = n.__c.base = null, l = 0; l < n.__k.length; l++) {
            if (null != (u = n.__k[l]) && null != u.__e) {
              n.__e = n.__c.base = u.__e;
              break;
            }
          }

          return k(n);
        }
      }

      function x(n) {
        (!n.__d && (n.__d = !0) && i.push(n) && !b.__r++ || r !== l.debounceRendering) && ((r = l.debounceRendering) || o)(b);
      }

      function b() {
        for (var n; b.__r = i.length;) {
          n = i.sort(function (n, l) {
            return n.__v.__b - l.__v.__b;
          }), i = [], n.some(function (n) {
            var l, u, t, i, o, r;
            n.__d && (o = (i = (l = n).__v).__e, (r = l.__P) && (u = [], (t = a({}, i)).__v = i.__v + 1, I(r, i, t, l.__n, void 0 !== r.ownerSVGElement, null != i.__h ? [o] : null, u, null == o ? _(i) : o, i.__h), T(u, i), i.__e != o && k(i)));
          });
        }
      }

      function m(n, l, u, t, i, o, r, f, s, a) {
        var p,
            v,
            d,
            k,
            x,
            b,
            m,
            A = t && t.__k || c,
            P = A.length;

        for (u.__k = [], p = 0; p < l.length; p++) {
          if (null != (k = u.__k[p] = null == (k = l[p]) || "boolean" == typeof k ? null : "string" == typeof k || "number" == typeof k || "bigint" == typeof k ? h(null, k, null, null, k) : Array.isArray(k) ? h(y, {
            children: k
          }, null, null, null) : k.__b > 0 ? h(k.type, k.props, k.key, null, k.__v) : k)) {
            if (k.__ = u, k.__b = u.__b + 1, null === (d = A[p]) || d && k.key == d.key && k.type === d.type) A[p] = void 0;else for (v = 0; v < P; v++) {
              if ((d = A[v]) && k.key == d.key && k.type === d.type) {
                A[v] = void 0;
                break;
              }

              d = null;
            }
            I(n, k, d = d || e, i, o, r, f, s, a), x = k.__e, (v = k.ref) && d.ref != v && (m || (m = []), d.ref && m.push(d.ref, null, k), m.push(v, k.__c || x, k)), null != x ? (null == b && (b = x), "function" == typeof k.type && null != k.__k && k.__k === d.__k ? k.__d = s = g(k, s, n) : s = w(n, k, d, A, x, s), a || "option" !== u.type ? "function" == typeof u.type && (u.__d = s) : n.value = "") : s && d.__e == s && s.parentNode != n && (s = _(d));
          }
        }

        for (u.__e = b, p = P; p--;) {
          null != A[p] && ("function" == typeof u.type && null != A[p].__e && A[p].__e == u.__d && (u.__d = _(t, p + 1)), L(A[p], A[p]));
        }

        if (m) for (p = 0; p < m.length; p++) {
          z(m[p], m[++p], m[++p]);
        }
      }

      function g(n, l, u) {
        var t, i;

        for (t = 0; t < n.__k.length; t++) {
          (i = n.__k[t]) && (i.__ = n, l = "function" == typeof i.type ? g(i, l, u) : w(u, i, i, n.__k, i.__e, l));
        }

        return l;
      }

      function w(n, l, u, t, i, o) {
        var r, f, e;
        if (void 0 !== l.__d) r = l.__d, l.__d = void 0;else if (null == u || i != o || null == i.parentNode) n: if (null == o || o.parentNode !== n) n.appendChild(i), r = null;else {
          for (f = o, e = 0; (f = f.nextSibling) && e < t.length; e += 2) {
            if (f == i) break n;
          }

          n.insertBefore(i, o), r = o;
        }
        return void 0 !== r ? r : i.nextSibling;
      }

      function A(n, l, u, t, i) {
        var o;

        for (o in u) {
          "children" === o || "key" === o || o in l || C(n, o, null, u[o], t);
        }

        for (o in l) {
          i && "function" != typeof l[o] || "children" === o || "key" === o || "value" === o || "checked" === o || u[o] === l[o] || C(n, o, l[o], u[o], t);
        }
      }

      function P(n, l, u) {
        "-" === l[0] ? n.setProperty(l, u) : n[l] = null == u ? "" : "number" != typeof u || s.test(l) ? u : u + "px";
      }

      function C(n, l, u, t, i) {
        var o;

        n: if ("style" === l) {
          if ("string" == typeof u) n.style.cssText = u;else {
            if ("string" == typeof t && (n.style.cssText = t = ""), t) for (l in t) {
              u && l in u || P(n.style, l, "");
            }
            if (u) for (l in u) {
              t && u[l] === t[l] || P(n.style, l, u[l]);
            }
          }
        } else if ("o" === l[0] && "n" === l[1]) o = l !== (l = l.replace(/Capture$/, "")), l = l.toLowerCase() in n ? l.toLowerCase().slice(2) : l.slice(2), n.l || (n.l = {}), n.l[l + o] = u, u ? t || n.addEventListener(l, o ? H : $, o) : n.removeEventListener(l, o ? H : $, o);else if ("dangerouslySetInnerHTML" !== l) {
          if (i) l = l.replace(/xlink[H:h]/, "h").replace(/sName$/, "s");else if ("href" !== l && "list" !== l && "form" !== l && "tabIndex" !== l && "download" !== l && l in n) try {
            n[l] = null == u ? "" : u;
            break n;
          } catch (n) {}
          "function" == typeof u || (null != u && (!1 !== u || "a" === l[0] && "r" === l[1]) ? n.setAttribute(l, u) : n.removeAttribute(l));
        }
      }

      function $(n) {
        this.l[n.type + !1](l.event ? l.event(n) : n);
      }

      function H(n) {
        this.l[n.type + !0](l.event ? l.event(n) : n);
      }

      function I(n, u, t, i, o, r, f, e, c) {
        var s,
            p,
            v,
            h,
            _,
            k,
            x,
            b,
            g,
            w,
            A,
            P = u.type;

        if (void 0 !== u.constructor) return null;
        null != t.__h && (c = t.__h, e = u.__e = t.__e, u.__h = null, r = [e]), (s = l.__b) && s(u);

        try {
          n: if ("function" == typeof P) {
            if (b = u.props, g = (s = P.contextType) && i[s.__c], w = s ? g ? g.props.value : s.__ : i, t.__c ? x = (p = u.__c = t.__c).__ = p.__E : ("prototype" in P && P.prototype.render ? u.__c = p = new P(b, w) : (u.__c = p = new d(b, w), p.constructor = P, p.render = M), g && g.sub(p), p.props = b, p.state || (p.state = {}), p.context = w, p.__n = i, v = p.__d = !0, p.__h = []), null == p.__s && (p.__s = p.state), null != P.getDerivedStateFromProps && (p.__s == p.state && (p.__s = a({}, p.__s)), a(p.__s, P.getDerivedStateFromProps(b, p.__s))), h = p.props, _ = p.state, v) null == P.getDerivedStateFromProps && null != p.componentWillMount && p.componentWillMount(), null != p.componentDidMount && p.__h.push(p.componentDidMount);else {
              if (null == P.getDerivedStateFromProps && b !== h && null != p.componentWillReceiveProps && p.componentWillReceiveProps(b, w), !p.__e && null != p.shouldComponentUpdate && !1 === p.shouldComponentUpdate(b, p.__s, w) || u.__v === t.__v) {
                p.props = b, p.state = p.__s, u.__v !== t.__v && (p.__d = !1), p.__v = u, u.__e = t.__e, u.__k = t.__k, u.__k.forEach(function (n) {
                  n && (n.__ = u);
                }), p.__h.length && f.push(p);
                break n;
              }

              null != p.componentWillUpdate && p.componentWillUpdate(b, p.__s, w), null != p.componentDidUpdate && p.__h.push(function () {
                p.componentDidUpdate(h, _, k);
              });
            }
            p.context = w, p.props = b, p.state = p.__s, (s = l.__r) && s(u), p.__d = !1, p.__v = u, p.__P = n, s = p.render(p.props, p.state, p.context), p.state = p.__s, null != p.getChildContext && (i = a(a({}, i), p.getChildContext())), v || null == p.getSnapshotBeforeUpdate || (k = p.getSnapshotBeforeUpdate(h, _)), A = null != s && s.type === y && null == s.key ? s.props.children : s, m(n, Array.isArray(A) ? A : [A], u, t, i, o, r, f, e, c), p.base = u.__e, u.__h = null, p.__h.length && f.push(p), x && (p.__E = p.__ = null), p.__e = !1;
          } else null == r && u.__v === t.__v ? (u.__k = t.__k, u.__e = t.__e) : u.__e = j(t.__e, u, t, i, o, r, f, c);

          (s = l.diffed) && s(u);
        } catch (n) {
          u.__v = null, (c || null != r) && (u.__e = e, u.__h = !!c, r[r.indexOf(e)] = null), l.__e(n, u, t);
        }
      }

      function T(n, u) {
        l.__c && l.__c(u, n), n.some(function (u) {
          try {
            n = u.__h, u.__h = [], n.some(function (n) {
              n.call(u);
            });
          } catch (n) {
            l.__e(n, u.__v);
          }
        });
      }

      function j(l, u, t, i, o, r, f, c) {
        var s,
            a,
            v,
            h = t.props,
            y = u.props,
            d = u.type,
            k = 0;
        if ("svg" === d && (o = !0), null != r) for (; k < r.length; k++) {
          if ((s = r[k]) && (s === l || (d ? s.localName == d : 3 == s.nodeType))) {
            l = s, r[k] = null;
            break;
          }
        }

        if (null == l) {
          if (null === d) return document.createTextNode(y);
          l = o ? document.createElementNS("http://www.w3.org/2000/svg", d) : document.createElement(d, y.is && y), r = null, c = !1;
        }

        if (null === d) h === y || c && l.data === y || (l.data = y);else {
          if (r = r && n.call(l.childNodes), a = (h = t.props || e).dangerouslySetInnerHTML, v = y.dangerouslySetInnerHTML, !c) {
            if (null != r) for (h = {}, k = 0; k < l.attributes.length; k++) {
              h[l.attributes[k].name] = l.attributes[k].value;
            }
            (v || a) && (v && (a && v.__html == a.__html || v.__html === l.innerHTML) || (l.innerHTML = v && v.__html || ""));
          }

          if (A(l, y, h, o, c), v) u.__k = [];else if (k = u.props.children, m(l, Array.isArray(k) ? k : [k], u, t, i, o && "foreignObject" !== d, r, f, r ? r[0] : t.__k && _(t, 0), c), null != r) for (k = r.length; k--;) {
            null != r[k] && p(r[k]);
          }
          c || ("value" in y && void 0 !== (k = y.value) && (k !== l.value || "progress" === d && !k) && C(l, "value", k, h.value, !1), "checked" in y && void 0 !== (k = y.checked) && k !== l.checked && C(l, "checked", k, h.checked, !1));
        }
        return l;
      }

      function z(n, u, t) {
        try {
          "function" == typeof n ? n(u) : n.current = u;
        } catch (n) {
          l.__e(n, t);
        }
      }

      function L(n, u, t) {
        var i, o;

        if (l.unmount && l.unmount(n), (i = n.ref) && (i.current && i.current !== n.__e || z(i, null, u)), null != (i = n.__c)) {
          if (i.componentWillUnmount) try {
            i.componentWillUnmount();
          } catch (n) {
            l.__e(n, u);
          }
          i.base = i.__P = null;
        }

        if (i = n.__k) for (o = 0; o < i.length; o++) {
          i[o] && L(i[o], u, "function" != typeof n.type);
        }
        t || null == n.__e || p(n.__e), n.__e = n.__d = void 0;
      }

      function M(n, l, u) {
        return this.constructor(n, u);
      }

      function N(u, t, i) {
        var o, r, f;
        l.__ && l.__(u, t), r = (o = "function" == typeof i) ? null : i && i.__k || t.__k, f = [], I(t, u = (!o && i || t).__k = v(y, null, [u]), r || e, e, void 0 !== t.ownerSVGElement, !o && i ? [i] : r ? null : t.firstChild ? n.call(t.childNodes) : null, f, !o && i ? i : r ? r.__e : t.firstChild, o), T(f, u);
      }

      n = c.slice, l = {
        __e: function __e(n, l) {
          for (var u, t, i; l = l.__;) {
            if ((u = l.__c) && !u.__) try {
              if ((t = u.constructor) && null != t.getDerivedStateFromError && (u.setState(t.getDerivedStateFromError(n)), i = u.__d), null != u.componentDidCatch && (u.componentDidCatch(n), i = u.__d), i) return u.__E = u;
            } catch (l) {
              n = l;
            }
          }

          throw n;
        }
      }, u = 0, t = function t(n) {
        return null != n && void 0 === n.constructor;
      }, d.prototype.setState = function (n, l) {
        var u;
        u = null != this.__s && this.__s !== this.state ? this.__s : this.__s = a({}, this.state), "function" == typeof n && (n = n(a({}, u), this.props)), n && a(u, n), null != n && this.__v && (l && this.__h.push(l), x(this));
      }, d.prototype.forceUpdate = function (n) {
        this.__v && (this.__e = !0, n && this.__h.push(n), x(this));
      }, d.prototype.render = y, i = [], o = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, b.__r = 0, f = 0, exports.render = N, exports.hydrate = function n(l, u) {
        N(l, u, n);
      }, exports.createElement = v, exports.h = v, exports.Fragment = y, exports.createRef = function () {
        return {
          current: null
        };
      }, exports.isValidElement = t, exports.Component = d, exports.cloneElement = function (l, u, t) {
        var i,
            o,
            r,
            f = a({}, l.props);

        for (r in u) {
          "key" == r ? i = u[r] : "ref" == r ? o = u[r] : f[r] = u[r];
        }

        return arguments.length > 2 && (f.children = arguments.length > 3 ? n.call(arguments, 2) : t), h(l.type, f, i || l.key, o || l.ref, null);
      }, exports.createContext = function (n, l) {
        var u = {
          __c: l = "__cC" + f++,
          __: n,
          Consumer: function Consumer(n, l) {
            return n.children(l);
          },
          Provider: function Provider(n) {
            var u, t;
            return this.getChildContext || (u = [], (t = {})[l] = this, this.getChildContext = function () {
              return t;
            }, this.shouldComponentUpdate = function (n) {
              this.props.value !== n.value && u.some(x);
            }, this.sub = function (n) {
              u.push(n);
              var l = n.componentWillUnmount;

              n.componentWillUnmount = function () {
                u.splice(u.indexOf(n), 1), l && l.call(n);
              };
            }), n.children;
          }
        };
        return u.Provider.__ = u.Consumer.contextType = u;
      }, exports.toChildArray = function n(l, u) {
        return u = u || [], null == l || "boolean" == typeof l || (Array.isArray(l) ? l.some(function (l) {
          n(l, u);
        }) : u.push(l)), u;
      }, exports.options = l;
    }, {}],
    596: [function (require, module, exports) {
      // shim for using process in browser
      var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
      // don't break things.  But we need to wrap it in a try catch in case it is
      // wrapped in strict mode code which doesn't define any globals.  It's inside a
      // function because try/catches deoptimize in certain engines.

      var cachedSetTimeout;
      var cachedClearTimeout;

      function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
      }

      function defaultClearTimeout() {
        throw new Error('clearTimeout has not been defined');
      }

      (function () {
        try {
          if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
          } else {
            cachedSetTimeout = defaultSetTimout;
          }
        } catch (e) {
          cachedSetTimeout = defaultSetTimout;
        }

        try {
          if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
          } else {
            cachedClearTimeout = defaultClearTimeout;
          }
        } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
        }
      })();

      function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
        } // if setTimeout wasn't available but was latter defined


        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
        }

        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
          }
        }
      }

      function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
        } // if clearTimeout wasn't available but was latter defined


        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
        }

        try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
        } catch (e) {
          try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
          } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
          }
        }
      }

      var queue = [];
      var draining = false;
      var currentQueue;
      var queueIndex = -1;

      function cleanUpNextTick() {
        if (!draining || !currentQueue) {
          return;
        }

        draining = false;

        if (currentQueue.length) {
          queue = currentQueue.concat(queue);
        } else {
          queueIndex = -1;
        }

        if (queue.length) {
          drainQueue();
        }
      }

      function drainQueue() {
        if (draining) {
          return;
        }

        var timeout = runTimeout(cleanUpNextTick);
        draining = true;
        var len = queue.length;

        while (len) {
          currentQueue = queue;
          queue = [];

          while (++queueIndex < len) {
            if (currentQueue) {
              currentQueue[queueIndex].run();
            }
          }

          queueIndex = -1;
          len = queue.length;
        }

        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
      }

      process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);

        if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
          }
        }

        queue.push(new Item(fun, args));

        if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
        }
      }; // v8 likes predictible objects


      function Item(fun, array) {
        this.fun = fun;
        this.array = array;
      }

      Item.prototype.run = function () {
        this.fun.apply(null, this.array);
      };

      process.title = 'browser';
      process.browser = true;
      process.env = {};
      process.argv = [];
      process.version = ''; // empty string to avoid regexp issues

      process.versions = {};

      function noop() {}

      process.on = noop;
      process.addListener = noop;
      process.once = noop;
      process.off = noop;
      process.removeListener = noop;
      process.removeAllListeners = noop;
      process.emit = noop;
      process.prependListener = noop;
      process.prependOnceListener = noop;

      process.listeners = function (name) {
        return [];
      };

      process.binding = function (name) {
        throw new Error('process.binding is not supported');
      };

      process.cwd = function () {
        return '/';
      };

      process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
      };

      process.umask = function () {
        return 0;
      };
    }, {}],
    597: [function (require, module, exports) {
      'use strict';

      var has = Object.prototype.hasOwnProperty,
          undef;
      /**
       * Decode a URI encoded string.
       *
       * @param {String} input The URI encoded string.
       * @returns {String|Null} The decoded string.
       * @api private
       */

      function decode(input) {
        try {
          return decodeURIComponent(input.replace(/\+/g, ' '));
        } catch (e) {
          return null;
        }
      }
      /**
       * Attempts to encode a given input.
       *
       * @param {String} input The string that needs to be encoded.
       * @returns {String|Null} The encoded string.
       * @api private
       */


      function encode(input) {
        try {
          return encodeURIComponent(input);
        } catch (e) {
          return null;
        }
      }
      /**
       * Simple query string parser.
       *
       * @param {String} query The query string that needs to be parsed.
       * @returns {Object}
       * @api public
       */


      function querystring(query) {
        var parser = /([^=?#&]+)=?([^&]*)/g,
            result = {},
            part;

        while (part = parser.exec(query)) {
          var key = decode(part[1]),
              value = decode(part[2]); //
          // Prevent overriding of existing properties. This ensures that build-in
          // methods like `toString` or __proto__ are not overriden by malicious
          // querystrings.
          //
          // In the case if failed decoding, we want to omit the key/value pairs
          // from the result.
          //

          if (key === null || value === null || key in result) continue;
          result[key] = value;
        }

        return result;
      }
      /**
       * Transform a query string to an object.
       *
       * @param {Object} obj Object that should be transformed.
       * @param {String} prefix Optional prefix.
       * @returns {String}
       * @api public
       */


      function querystringify(obj, prefix) {
        prefix = prefix || '';
        var pairs = [],
            value,
            key; //
        // Optionally prefix with a '?' if needed
        //

        if ('string' !== typeof prefix) prefix = '?';

        for (key in obj) {
          if (has.call(obj, key)) {
            value = obj[key]; //
            // Edge cases where we actually want to encode the value to an empty
            // string instead of the stringified value.
            //

            if (!value && (value === null || value === undef || isNaN(value))) {
              value = '';
            }

            key = encode(key);
            value = encode(value); //
            // If we failed to encode the strings, we should bail out as we don't
            // want to add invalid strings to the query.
            //

            if (key === null || value === null) continue;
            pairs.push(key + '=' + value);
          }
        }

        return pairs.length ? prefix + pairs.join('&') : '';
      } //
      // Expose the module.
      //


      exports.stringify = querystringify;
      exports.parse = querystring;
    }, {}],
    598: [function (require, module, exports) {
      'use strict';
      /**
       * Check if we're required to add a port number.
       *
       * @see https://url.spec.whatwg.org/#default-port
       * @param {Number|String} port Port number we need to check
       * @param {String} protocol Protocol we need to check against.
       * @returns {Boolean} Is it a default port for the given protocol
       * @api private
       */

      module.exports = function required(port, protocol) {
        protocol = protocol.split(':')[0];
        port = +port;
        if (!port) return false;

        switch (protocol) {
          case 'http':
          case 'ws':
            return port !== 80;

          case 'https':
          case 'wss':
            return port !== 443;

          case 'ftp':
            return port !== 21;

          case 'gopher':
            return port !== 70;

          case 'file':
            return false;
        }

        return port !== 0;
      };
    }, {}],
    599: [function (require, module, exports) {
      (function (global) {
        (function () {
          (function (global, factory) {
            typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.ResizeObserver = factory();
          })(this, function () {
            'use strict';
            /**
             * A collection of shims that provide minimal functionality of the ES6 collections.
             *
             * These implementations are not meant to be used outside of the ResizeObserver
             * modules as they cover only a limited range of use cases.
             */

            /* eslint-disable require-jsdoc, valid-jsdoc */

            var MapShim = function () {
              if (typeof Map !== 'undefined') {
                return Map;
              }
              /**
               * Returns index in provided array that matches the specified key.
               *
               * @param {Array<Array>} arr
               * @param {*} key
               * @returns {number}
               */


              function getIndex(arr, key) {
                var result = -1;
                arr.some(function (entry, index) {
                  if (entry[0] === key) {
                    result = index;
                    return true;
                  }

                  return false;
                });
                return result;
              }

              return (
                /** @class */
                function () {
                  function class_1() {
                    this.__entries__ = [];
                  }

                  Object.defineProperty(class_1.prototype, "size", {
                    /**
                     * @returns {boolean}
                     */
                    get: function get() {
                      return this.__entries__.length;
                    },
                    enumerable: true,
                    configurable: true
                  });
                  /**
                   * @param {*} key
                   * @returns {*}
                   */

                  class_1.prototype.get = function (key) {
                    var index = getIndex(this.__entries__, key);
                    var entry = this.__entries__[index];
                    return entry && entry[1];
                  };
                  /**
                   * @param {*} key
                   * @param {*} value
                   * @returns {void}
                   */


                  class_1.prototype.set = function (key, value) {
                    var index = getIndex(this.__entries__, key);

                    if (~index) {
                      this.__entries__[index][1] = value;
                    } else {
                      this.__entries__.push([key, value]);
                    }
                  };
                  /**
                   * @param {*} key
                   * @returns {void}
                   */


                  class_1.prototype.delete = function (key) {
                    var entries = this.__entries__;
                    var index = getIndex(entries, key);

                    if (~index) {
                      entries.splice(index, 1);
                    }
                  };
                  /**
                   * @param {*} key
                   * @returns {void}
                   */


                  class_1.prototype.has = function (key) {
                    return !!~getIndex(this.__entries__, key);
                  };
                  /**
                   * @returns {void}
                   */


                  class_1.prototype.clear = function () {
                    this.__entries__.splice(0);
                  };
                  /**
                   * @param {Function} callback
                   * @param {*} [ctx=null]
                   * @returns {void}
                   */


                  class_1.prototype.forEach = function (callback, ctx) {
                    if (ctx === void 0) {
                      ctx = null;
                    }

                    for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
                      var entry = _a[_i];
                      callback.call(ctx, entry[1], entry[0]);
                    }
                  };

                  return class_1;
                }()
              );
            }();
            /**
             * Detects whether window and document objects are available in current environment.
             */


            var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document; // Returns global object of a current environment.

            var global$1 = function () {
              if (typeof global !== 'undefined' && global.Math === Math) {
                return global;
              }

              if (typeof self !== 'undefined' && self.Math === Math) {
                return self;
              }

              if (typeof window !== 'undefined' && window.Math === Math) {
                return window;
              } // eslint-disable-next-line no-new-func


              return Function('return this')();
            }();
            /**
             * A shim for the requestAnimationFrame which falls back to the setTimeout if
             * first one is not supported.
             *
             * @returns {number} Requests' identifier.
             */


            var requestAnimationFrame$1 = function () {
              if (typeof requestAnimationFrame === 'function') {
                // It's required to use a bounded function because IE sometimes throws
                // an "Invalid calling object" error if rAF is invoked without the global
                // object on the left hand side.
                return requestAnimationFrame.bind(global$1);
              }

              return function (callback) {
                return setTimeout(function () {
                  return callback(Date.now());
                }, 1000 / 60);
              };
            }(); // Defines minimum timeout before adding a trailing call.


            var trailingTimeout = 2;
            /**
             * Creates a wrapper function which ensures that provided callback will be
             * invoked only once during the specified delay period.
             *
             * @param {Function} callback - Function to be invoked after the delay period.
             * @param {number} delay - Delay after which to invoke callback.
             * @returns {Function}
             */

            function throttle(callback, delay) {
              var leadingCall = false,
                  trailingCall = false,
                  lastCallTime = 0;
              /**
               * Invokes the original callback function and schedules new invocation if
               * the "proxy" was called during current request.
               *
               * @returns {void}
               */

              function resolvePending() {
                if (leadingCall) {
                  leadingCall = false;
                  callback();
                }

                if (trailingCall) {
                  proxy();
                }
              }
              /**
               * Callback invoked after the specified delay. It will further postpone
               * invocation of the original function delegating it to the
               * requestAnimationFrame.
               *
               * @returns {void}
               */


              function timeoutCallback() {
                requestAnimationFrame$1(resolvePending);
              }
              /**
               * Schedules invocation of the original function.
               *
               * @returns {void}
               */


              function proxy() {
                var timeStamp = Date.now();

                if (leadingCall) {
                  // Reject immediately following calls.
                  if (timeStamp - lastCallTime < trailingTimeout) {
                    return;
                  } // Schedule new call to be in invoked when the pending one is resolved.
                  // This is important for "transitions" which never actually start
                  // immediately so there is a chance that we might miss one if change
                  // happens amids the pending invocation.


                  trailingCall = true;
                } else {
                  leadingCall = true;
                  trailingCall = false;
                  setTimeout(timeoutCallback, delay);
                }

                lastCallTime = timeStamp;
              }

              return proxy;
            } // Minimum delay before invoking the update of observers.


            var REFRESH_DELAY = 20; // A list of substrings of CSS properties used to find transition events that
            // might affect dimensions of observed elements.

            var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight']; // Check if MutationObserver is available.

            var mutationObserverSupported = typeof MutationObserver !== 'undefined';
            /**
             * Singleton controller class which handles updates of ResizeObserver instances.
             */

            var ResizeObserverController =
            /** @class */
            function () {
              /**
               * Creates a new instance of ResizeObserverController.
               *
               * @private
               */
              function ResizeObserverController() {
                /**
                 * Indicates whether DOM listeners have been added.
                 *
                 * @private {boolean}
                 */
                this.connected_ = false;
                /**
                 * Tells that controller has subscribed for Mutation Events.
                 *
                 * @private {boolean}
                 */

                this.mutationEventsAdded_ = false;
                /**
                 * Keeps reference to the instance of MutationObserver.
                 *
                 * @private {MutationObserver}
                 */

                this.mutationsObserver_ = null;
                /**
                 * A list of connected observers.
                 *
                 * @private {Array<ResizeObserverSPI>}
                 */

                this.observers_ = [];
                this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
                this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
              }
              /**
               * Adds observer to observers list.
               *
               * @param {ResizeObserverSPI} observer - Observer to be added.
               * @returns {void}
               */


              ResizeObserverController.prototype.addObserver = function (observer) {
                if (!~this.observers_.indexOf(observer)) {
                  this.observers_.push(observer);
                } // Add listeners if they haven't been added yet.


                if (!this.connected_) {
                  this.connect_();
                }
              };
              /**
               * Removes observer from observers list.
               *
               * @param {ResizeObserverSPI} observer - Observer to be removed.
               * @returns {void}
               */


              ResizeObserverController.prototype.removeObserver = function (observer) {
                var observers = this.observers_;
                var index = observers.indexOf(observer); // Remove observer if it's present in registry.

                if (~index) {
                  observers.splice(index, 1);
                } // Remove listeners if controller has no connected observers.


                if (!observers.length && this.connected_) {
                  this.disconnect_();
                }
              };
              /**
               * Invokes the update of observers. It will continue running updates insofar
               * it detects changes.
               *
               * @returns {void}
               */


              ResizeObserverController.prototype.refresh = function () {
                var changesDetected = this.updateObservers_(); // Continue running updates if changes have been detected as there might
                // be future ones caused by CSS transitions.

                if (changesDetected) {
                  this.refresh();
                }
              };
              /**
               * Updates every observer from observers list and notifies them of queued
               * entries.
               *
               * @private
               * @returns {boolean} Returns "true" if any observer has detected changes in
               *      dimensions of it's elements.
               */


              ResizeObserverController.prototype.updateObservers_ = function () {
                // Collect observers that have active observations.
                var activeObservers = this.observers_.filter(function (observer) {
                  return observer.gatherActive(), observer.hasActive();
                }); // Deliver notifications in a separate cycle in order to avoid any
                // collisions between observers, e.g. when multiple instances of
                // ResizeObserver are tracking the same element and the callback of one
                // of them changes content dimensions of the observed target. Sometimes
                // this may result in notifications being blocked for the rest of observers.

                activeObservers.forEach(function (observer) {
                  return observer.broadcastActive();
                });
                return activeObservers.length > 0;
              };
              /**
               * Initializes DOM listeners.
               *
               * @private
               * @returns {void}
               */


              ResizeObserverController.prototype.connect_ = function () {
                // Do nothing if running in a non-browser environment or if listeners
                // have been already added.
                if (!isBrowser || this.connected_) {
                  return;
                } // Subscription to the "Transitionend" event is used as a workaround for
                // delayed transitions. This way it's possible to capture at least the
                // final state of an element.


                document.addEventListener('transitionend', this.onTransitionEnd_);
                window.addEventListener('resize', this.refresh);

                if (mutationObserverSupported) {
                  this.mutationsObserver_ = new MutationObserver(this.refresh);
                  this.mutationsObserver_.observe(document, {
                    attributes: true,
                    childList: true,
                    characterData: true,
                    subtree: true
                  });
                } else {
                  document.addEventListener('DOMSubtreeModified', this.refresh);
                  this.mutationEventsAdded_ = true;
                }

                this.connected_ = true;
              };
              /**
               * Removes DOM listeners.
               *
               * @private
               * @returns {void}
               */


              ResizeObserverController.prototype.disconnect_ = function () {
                // Do nothing if running in a non-browser environment or if listeners
                // have been already removed.
                if (!isBrowser || !this.connected_) {
                  return;
                }

                document.removeEventListener('transitionend', this.onTransitionEnd_);
                window.removeEventListener('resize', this.refresh);

                if (this.mutationsObserver_) {
                  this.mutationsObserver_.disconnect();
                }

                if (this.mutationEventsAdded_) {
                  document.removeEventListener('DOMSubtreeModified', this.refresh);
                }

                this.mutationsObserver_ = null;
                this.mutationEventsAdded_ = false;
                this.connected_ = false;
              };
              /**
               * "Transitionend" event handler.
               *
               * @private
               * @param {TransitionEvent} event
               * @returns {void}
               */


              ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
                var _b = _a.propertyName,
                    propertyName = _b === void 0 ? '' : _b; // Detect whether transition may affect dimensions of an element.

                var isReflowProperty = transitionKeys.some(function (key) {
                  return !!~propertyName.indexOf(key);
                });

                if (isReflowProperty) {
                  this.refresh();
                }
              };
              /**
               * Returns instance of the ResizeObserverController.
               *
               * @returns {ResizeObserverController}
               */


              ResizeObserverController.getInstance = function () {
                if (!this.instance_) {
                  this.instance_ = new ResizeObserverController();
                }

                return this.instance_;
              };
              /**
               * Holds reference to the controller's instance.
               *
               * @private {ResizeObserverController}
               */


              ResizeObserverController.instance_ = null;
              return ResizeObserverController;
            }();
            /**
             * Defines non-writable/enumerable properties of the provided target object.
             *
             * @param {Object} target - Object for which to define properties.
             * @param {Object} props - Properties to be defined.
             * @returns {Object} Target object.
             */


            var defineConfigurable = function defineConfigurable(target, props) {
              for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
                var key = _a[_i];
                Object.defineProperty(target, key, {
                  value: props[key],
                  enumerable: false,
                  writable: false,
                  configurable: true
                });
              }

              return target;
            };
            /**
             * Returns the global object associated with provided element.
             *
             * @param {Object} target
             * @returns {Object}
             */


            var getWindowOf = function getWindowOf(target) {
              // Assume that the element is an instance of Node, which means that it
              // has the "ownerDocument" property from which we can retrieve a
              // corresponding global object.
              var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView; // Return the local global object if it's not possible extract one from
              // provided element.

              return ownerGlobal || global$1;
            }; // Placeholder of an empty content rectangle.


            var emptyRect = createRectInit(0, 0, 0, 0);
            /**
             * Converts provided string to a number.
             *
             * @param {number|string} value
             * @returns {number}
             */

            function toFloat(value) {
              return parseFloat(value) || 0;
            }
            /**
             * Extracts borders size from provided styles.
             *
             * @param {CSSStyleDeclaration} styles
             * @param {...string} positions - Borders positions (top, right, ...)
             * @returns {number}
             */


            function getBordersSize(styles) {
              var positions = [];

              for (var _i = 1; _i < arguments.length; _i++) {
                positions[_i - 1] = arguments[_i];
              }

              return positions.reduce(function (size, position) {
                var value = styles['border-' + position + '-width'];
                return size + toFloat(value);
              }, 0);
            }
            /**
             * Extracts paddings sizes from provided styles.
             *
             * @param {CSSStyleDeclaration} styles
             * @returns {Object} Paddings box.
             */


            function getPaddings(styles) {
              var positions = ['top', 'right', 'bottom', 'left'];
              var paddings = {};

              for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
                var position = positions_1[_i];
                var value = styles['padding-' + position];
                paddings[position] = toFloat(value);
              }

              return paddings;
            }
            /**
             * Calculates content rectangle of provided SVG element.
             *
             * @param {SVGGraphicsElement} target - Element content rectangle of which needs
             *      to be calculated.
             * @returns {DOMRectInit}
             */


            function getSVGContentRect(target) {
              var bbox = target.getBBox();
              return createRectInit(0, 0, bbox.width, bbox.height);
            }
            /**
             * Calculates content rectangle of provided HTMLElement.
             *
             * @param {HTMLElement} target - Element for which to calculate the content rectangle.
             * @returns {DOMRectInit}
             */


            function getHTMLElementContentRect(target) {
              // Client width & height properties can't be
              // used exclusively as they provide rounded values.
              var clientWidth = target.clientWidth,
                  clientHeight = target.clientHeight; // By this condition we can catch all non-replaced inline, hidden and
              // detached elements. Though elements with width & height properties less
              // than 0.5 will be discarded as well.
              //
              // Without it we would need to implement separate methods for each of
              // those cases and it's not possible to perform a precise and performance
              // effective test for hidden elements. E.g. even jQuery's ':visible' filter
              // gives wrong results for elements with width & height less than 0.5.

              if (!clientWidth && !clientHeight) {
                return emptyRect;
              }

              var styles = getWindowOf(target).getComputedStyle(target);
              var paddings = getPaddings(styles);
              var horizPad = paddings.left + paddings.right;
              var vertPad = paddings.top + paddings.bottom; // Computed styles of width & height are being used because they are the
              // only dimensions available to JS that contain non-rounded values. It could
              // be possible to utilize the getBoundingClientRect if only it's data wasn't
              // affected by CSS transformations let alone paddings, borders and scroll bars.

              var width = toFloat(styles.width),
                  height = toFloat(styles.height); // Width & height include paddings and borders when the 'border-box' box
              // model is applied (except for IE).

              if (styles.boxSizing === 'border-box') {
                // Following conditions are required to handle Internet Explorer which
                // doesn't include paddings and borders to computed CSS dimensions.
                //
                // We can say that if CSS dimensions + paddings are equal to the "client"
                // properties then it's either IE, and thus we don't need to subtract
                // anything, or an element merely doesn't have paddings/borders styles.
                if (Math.round(width + horizPad) !== clientWidth) {
                  width -= getBordersSize(styles, 'left', 'right') + horizPad;
                }

                if (Math.round(height + vertPad) !== clientHeight) {
                  height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
                }
              } // Following steps can't be applied to the document's root element as its
              // client[Width/Height] properties represent viewport area of the window.
              // Besides, it's as well not necessary as the <html> itself neither has
              // rendered scroll bars nor it can be clipped.


              if (!isDocumentElement(target)) {
                // In some browsers (only in Firefox, actually) CSS width & height
                // include scroll bars size which can be removed at this step as scroll
                // bars are the only difference between rounded dimensions + paddings
                // and "client" properties, though that is not always true in Chrome.
                var vertScrollbar = Math.round(width + horizPad) - clientWidth;
                var horizScrollbar = Math.round(height + vertPad) - clientHeight; // Chrome has a rather weird rounding of "client" properties.
                // E.g. for an element with content width of 314.2px it sometimes gives
                // the client width of 315px and for the width of 314.7px it may give
                // 314px. And it doesn't happen all the time. So just ignore this delta
                // as a non-relevant.

                if (Math.abs(vertScrollbar) !== 1) {
                  width -= vertScrollbar;
                }

                if (Math.abs(horizScrollbar) !== 1) {
                  height -= horizScrollbar;
                }
              }

              return createRectInit(paddings.left, paddings.top, width, height);
            }
            /**
             * Checks whether provided element is an instance of the SVGGraphicsElement.
             *
             * @param {Element} target - Element to be checked.
             * @returns {boolean}
             */


            var isSVGGraphicsElement = function () {
              // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
              // interface.
              if (typeof SVGGraphicsElement !== 'undefined') {
                return function (target) {
                  return target instanceof getWindowOf(target).SVGGraphicsElement;
                };
              } // If it's so, then check that element is at least an instance of the
              // SVGElement and that it has the "getBBox" method.
              // eslint-disable-next-line no-extra-parens


              return function (target) {
                return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';
              };
            }();
            /**
             * Checks whether provided element is a document element (<html>).
             *
             * @param {Element} target - Element to be checked.
             * @returns {boolean}
             */


            function isDocumentElement(target) {
              return target === getWindowOf(target).document.documentElement;
            }
            /**
             * Calculates an appropriate content rectangle for provided html or svg element.
             *
             * @param {Element} target - Element content rectangle of which needs to be calculated.
             * @returns {DOMRectInit}
             */


            function getContentRect(target) {
              if (!isBrowser) {
                return emptyRect;
              }

              if (isSVGGraphicsElement(target)) {
                return getSVGContentRect(target);
              }

              return getHTMLElementContentRect(target);
            }
            /**
             * Creates rectangle with an interface of the DOMRectReadOnly.
             * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
             *
             * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
             * @returns {DOMRectReadOnly}
             */


            function createReadOnlyRect(_a) {
              var x = _a.x,
                  y = _a.y,
                  width = _a.width,
                  height = _a.height; // If DOMRectReadOnly is available use it as a prototype for the rectangle.

              var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
              var rect = Object.create(Constr.prototype); // Rectangle's properties are not writable and non-enumerable.

              defineConfigurable(rect, {
                x: x,
                y: y,
                width: width,
                height: height,
                top: y,
                right: x + width,
                bottom: height + y,
                left: x
              });
              return rect;
            }
            /**
             * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
             * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
             *
             * @param {number} x - X coordinate.
             * @param {number} y - Y coordinate.
             * @param {number} width - Rectangle's width.
             * @param {number} height - Rectangle's height.
             * @returns {DOMRectInit}
             */


            function createRectInit(x, y, width, height) {
              return {
                x: x,
                y: y,
                width: width,
                height: height
              };
            }
            /**
             * Class that is responsible for computations of the content rectangle of
             * provided DOM element and for keeping track of it's changes.
             */


            var ResizeObservation =
            /** @class */
            function () {
              /**
               * Creates an instance of ResizeObservation.
               *
               * @param {Element} target - Element to be observed.
               */
              function ResizeObservation(target) {
                /**
                 * Broadcasted width of content rectangle.
                 *
                 * @type {number}
                 */
                this.broadcastWidth = 0;
                /**
                 * Broadcasted height of content rectangle.
                 *
                 * @type {number}
                 */

                this.broadcastHeight = 0;
                /**
                 * Reference to the last observed content rectangle.
                 *
                 * @private {DOMRectInit}
                 */

                this.contentRect_ = createRectInit(0, 0, 0, 0);
                this.target = target;
              }
              /**
               * Updates content rectangle and tells whether it's width or height properties
               * have changed since the last broadcast.
               *
               * @returns {boolean}
               */


              ResizeObservation.prototype.isActive = function () {
                var rect = getContentRect(this.target);
                this.contentRect_ = rect;
                return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
              };
              /**
               * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
               * from the corresponding properties of the last observed content rectangle.
               *
               * @returns {DOMRectInit} Last observed content rectangle.
               */


              ResizeObservation.prototype.broadcastRect = function () {
                var rect = this.contentRect_;
                this.broadcastWidth = rect.width;
                this.broadcastHeight = rect.height;
                return rect;
              };

              return ResizeObservation;
            }();

            var ResizeObserverEntry =
            /** @class */
            function () {
              /**
               * Creates an instance of ResizeObserverEntry.
               *
               * @param {Element} target - Element that is being observed.
               * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
               */
              function ResizeObserverEntry(target, rectInit) {
                var contentRect = createReadOnlyRect(rectInit); // According to the specification following properties are not writable
                // and are also not enumerable in the native implementation.
                //
                // Property accessors are not being used as they'd require to define a
                // private WeakMap storage which may cause memory leaks in browsers that
                // don't support this type of collections.

                defineConfigurable(this, {
                  target: target,
                  contentRect: contentRect
                });
              }

              return ResizeObserverEntry;
            }();

            var ResizeObserverSPI =
            /** @class */
            function () {
              /**
               * Creates a new instance of ResizeObserver.
               *
               * @param {ResizeObserverCallback} callback - Callback function that is invoked
               *      when one of the observed elements changes it's content dimensions.
               * @param {ResizeObserverController} controller - Controller instance which
               *      is responsible for the updates of observer.
               * @param {ResizeObserver} callbackCtx - Reference to the public
               *      ResizeObserver instance which will be passed to callback function.
               */
              function ResizeObserverSPI(callback, controller, callbackCtx) {
                /**
                 * Collection of resize observations that have detected changes in dimensions
                 * of elements.
                 *
                 * @private {Array<ResizeObservation>}
                 */
                this.activeObservations_ = [];
                /**
                 * Registry of the ResizeObservation instances.
                 *
                 * @private {Map<Element, ResizeObservation>}
                 */

                this.observations_ = new MapShim();

                if (typeof callback !== 'function') {
                  throw new TypeError('The callback provided as parameter 1 is not a function.');
                }

                this.callback_ = callback;
                this.controller_ = controller;
                this.callbackCtx_ = callbackCtx;
              }
              /**
               * Starts observing provided element.
               *
               * @param {Element} target - Element to be observed.
               * @returns {void}
               */


              ResizeObserverSPI.prototype.observe = function (target) {
                if (!arguments.length) {
                  throw new TypeError('1 argument required, but only 0 present.');
                } // Do nothing if current environment doesn't have the Element interface.


                if (typeof Element === 'undefined' || !(Element instanceof Object)) {
                  return;
                }

                if (!(target instanceof getWindowOf(target).Element)) {
                  throw new TypeError('parameter 1 is not of type "Element".');
                }

                var observations = this.observations_; // Do nothing if element is already being observed.

                if (observations.has(target)) {
                  return;
                }

                observations.set(target, new ResizeObservation(target));
                this.controller_.addObserver(this); // Force the update of observations.

                this.controller_.refresh();
              };
              /**
               * Stops observing provided element.
               *
               * @param {Element} target - Element to stop observing.
               * @returns {void}
               */


              ResizeObserverSPI.prototype.unobserve = function (target) {
                if (!arguments.length) {
                  throw new TypeError('1 argument required, but only 0 present.');
                } // Do nothing if current environment doesn't have the Element interface.


                if (typeof Element === 'undefined' || !(Element instanceof Object)) {
                  return;
                }

                if (!(target instanceof getWindowOf(target).Element)) {
                  throw new TypeError('parameter 1 is not of type "Element".');
                }

                var observations = this.observations_; // Do nothing if element is not being observed.

                if (!observations.has(target)) {
                  return;
                }

                observations.delete(target);

                if (!observations.size) {
                  this.controller_.removeObserver(this);
                }
              };
              /**
               * Stops observing all elements.
               *
               * @returns {void}
               */


              ResizeObserverSPI.prototype.disconnect = function () {
                this.clearActive();
                this.observations_.clear();
                this.controller_.removeObserver(this);
              };
              /**
               * Collects observation instances the associated element of which has changed
               * it's content rectangle.
               *
               * @returns {void}
               */


              ResizeObserverSPI.prototype.gatherActive = function () {
                var _this = this;

                this.clearActive();
                this.observations_.forEach(function (observation) {
                  if (observation.isActive()) {
                    _this.activeObservations_.push(observation);
                  }
                });
              };
              /**
               * Invokes initial callback function with a list of ResizeObserverEntry
               * instances collected from active resize observations.
               *
               * @returns {void}
               */


              ResizeObserverSPI.prototype.broadcastActive = function () {
                // Do nothing if observer doesn't have active observations.
                if (!this.hasActive()) {
                  return;
                }

                var ctx = this.callbackCtx_; // Create ResizeObserverEntry instance for every active observation.

                var entries = this.activeObservations_.map(function (observation) {
                  return new ResizeObserverEntry(observation.target, observation.broadcastRect());
                });
                this.callback_.call(ctx, entries, ctx);
                this.clearActive();
              };
              /**
               * Clears the collection of active observations.
               *
               * @returns {void}
               */


              ResizeObserverSPI.prototype.clearActive = function () {
                this.activeObservations_.splice(0);
              };
              /**
               * Tells whether observer has active observations.
               *
               * @returns {boolean}
               */


              ResizeObserverSPI.prototype.hasActive = function () {
                return this.activeObservations_.length > 0;
              };

              return ResizeObserverSPI;
            }(); // Registry of internal observers. If WeakMap is not available use current shim
            // for the Map collection as it has all required methods and because WeakMap
            // can't be fully polyfilled anyway.


            var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
            /**
             * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
             * exposing only those methods and properties that are defined in the spec.
             */

            var ResizeObserver =
            /** @class */
            function () {
              /**
               * Creates a new instance of ResizeObserver.
               *
               * @param {ResizeObserverCallback} callback - Callback that is invoked when
               *      dimensions of the observed elements change.
               */
              function ResizeObserver(callback) {
                if (!(this instanceof ResizeObserver)) {
                  throw new TypeError('Cannot call a class as a function.');
                }

                if (!arguments.length) {
                  throw new TypeError('1 argument required, but only 0 present.');
                }

                var controller = ResizeObserverController.getInstance();
                var observer = new ResizeObserverSPI(callback, controller, this);
                observers.set(this, observer);
              }

              return ResizeObserver;
            }(); // Expose public methods of ResizeObserver.


            ['observe', 'unobserve', 'disconnect'].forEach(function (method) {
              ResizeObserver.prototype[method] = function () {
                var _a;

                return (_a = observers.get(this))[method].apply(_a, arguments);
              };
            });

            var index = function () {
              // Export existing implementation if available.
              if (typeof global$1.ResizeObserver !== 'undefined') {
                return global$1.ResizeObserver;
              }

              return ResizeObserver;
            }();

            return index;
          });
        }).call(this);
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {}],
    600: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.io = exports.Socket = exports.Manager = exports.protocol = void 0;

      var url_1 = require("./url");

      var manager_1 = require("./manager");

      var debug = require("debug")("socket.io-client");
      /**
       * Module exports.
       */


      module.exports = exports = lookup;
      /**
       * Managers cache.
       */

      var cache = exports.managers = {};

      function lookup(uri, opts) {
        if (typeof uri === "object") {
          opts = uri;
          uri = undefined;
        }

        opts = opts || {};
        var parsed = url_1.url(uri, opts.path || "/socket.io");
        var source = parsed.source;
        var id = parsed.id;
        var path = parsed.path;
        var sameNamespace = cache[id] && path in cache[id]["nsps"];
        var newConnection = opts.forceNew || opts["force new connection"] || false === opts.multiplex || sameNamespace;
        var io;

        if (newConnection) {
          debug("ignoring socket cache for %s", source);
          io = new manager_1.Manager(source, opts);
        } else {
          if (!cache[id]) {
            debug("new io instance for %s", source);
            cache[id] = new manager_1.Manager(source, opts);
          }

          io = cache[id];
        }

        if (parsed.query && !opts.query) {
          opts.query = parsed.queryKey;
        }

        return io.socket(parsed.path, opts);
      }

      exports.io = lookup;
      /**
       * Protocol version.
       *
       * @public
       */

      var socket_io_parser_1 = require("socket.io-parser");

      Object.defineProperty(exports, "protocol", {
        enumerable: true,
        get: function get() {
          return socket_io_parser_1.protocol;
        }
      });
      /**
       * `connect`.
       *
       * @param {String} uri
       * @public
       */

      exports.connect = lookup;
      /**
       * Expose constructors for standalone build.
       *
       * @public
       */

      var manager_2 = require("./manager");

      Object.defineProperty(exports, "Manager", {
        enumerable: true,
        get: function get() {
          return manager_2.Manager;
        }
      });

      var socket_1 = require("./socket");

      Object.defineProperty(exports, "Socket", {
        enumerable: true,
        get: function get() {
          return socket_1.Socket;
        }
      });
      exports.default = lookup;
    }, {
      "./manager": 601,
      "./socket": 603,
      "./url": 605,
      "debug": 562,
      "socket.io-parser": 607
    }],
    601: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Manager = void 0;

      var eio = require("engine.io-client");

      var socket_1 = require("./socket");

      var parser = require("socket.io-parser");

      var on_1 = require("./on");

      var Backoff = require("backo2");

      var typed_events_1 = require("./typed-events");

      var debug = require("debug")("socket.io-client:manager");

      var Manager = /*#__PURE__*/function (_typed_events_1$Stric) {
        _inheritsLoose(Manager, _typed_events_1$Stric);

        function Manager(uri, opts) {
          var _this35;

          _this35 = _typed_events_1$Stric.call(this) || this;
          _this35.nsps = {};
          _this35.subs = [];

          if (uri && "object" === typeof uri) {
            opts = uri;
            uri = undefined;
          }

          opts = opts || {};
          opts.path = opts.path || "/socket.io";
          _this35.opts = opts;

          _this35.reconnection(opts.reconnection !== false);

          _this35.reconnectionAttempts(opts.reconnectionAttempts || Infinity);

          _this35.reconnectionDelay(opts.reconnectionDelay || 1000);

          _this35.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);

          _this35.randomizationFactor(opts.randomizationFactor || 0.5);

          _this35.backoff = new Backoff({
            min: _this35.reconnectionDelay(),
            max: _this35.reconnectionDelayMax(),
            jitter: _this35.randomizationFactor()
          });

          _this35.timeout(null == opts.timeout ? 20000 : opts.timeout);

          _this35._readyState = "closed";
          _this35.uri = uri;

          var _parser = opts.parser || parser;

          _this35.encoder = new _parser.Encoder();
          _this35.decoder = new _parser.Decoder();
          _this35._autoConnect = opts.autoConnect !== false;
          if (_this35._autoConnect) _this35.open();
          return _this35;
        }

        var _proto8 = Manager.prototype;

        _proto8.reconnection = function reconnection(v) {
          if (!arguments.length) return this._reconnection;
          this._reconnection = !!v;
          return this;
        };

        _proto8.reconnectionAttempts = function reconnectionAttempts(v) {
          if (v === undefined) return this._reconnectionAttempts;
          this._reconnectionAttempts = v;
          return this;
        };

        _proto8.reconnectionDelay = function reconnectionDelay(v) {
          var _a;

          if (v === undefined) return this._reconnectionDelay;
          this._reconnectionDelay = v;
          (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);
          return this;
        };

        _proto8.randomizationFactor = function randomizationFactor(v) {
          var _a;

          if (v === undefined) return this._randomizationFactor;
          this._randomizationFactor = v;
          (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);
          return this;
        };

        _proto8.reconnectionDelayMax = function reconnectionDelayMax(v) {
          var _a;

          if (v === undefined) return this._reconnectionDelayMax;
          this._reconnectionDelayMax = v;
          (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);
          return this;
        };

        _proto8.timeout = function timeout(v) {
          if (!arguments.length) return this._timeout;
          this._timeout = v;
          return this;
        }
        /**
         * Starts trying to reconnect if reconnection is enabled and we have not
         * started reconnecting yet
         *
         * @private
         */
        ;

        _proto8.maybeReconnectOnOpen = function maybeReconnectOnOpen() {
          // Only try to reconnect if it's the first time we're connecting
          if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {
            // keeps reconnection from firing twice for the same reconnection loop
            this.reconnect();
          }
        }
        /**
         * Sets the current transport `socket`.
         *
         * @param {Function} fn - optional, callback
         * @return self
         * @public
         */
        ;

        _proto8.open = function open(fn) {
          var _this36 = this;

          debug("readyState %s", this._readyState);
          if (~this._readyState.indexOf("open")) return this;
          debug("opening %s", this.uri);
          this.engine = eio(this.uri, this.opts);
          var socket = this.engine;
          var self = this;
          this._readyState = "opening";
          this.skipReconnect = false; // emit `open`

          var openSubDestroy = on_1.on(socket, "open", function () {
            self.onopen();
            fn && fn();
          }); // emit `error`

          var errorSub = on_1.on(socket, "error", function (err) {
            debug("error");
            self.cleanup();
            self._readyState = "closed";

            _this36.emitReserved("error", err);

            if (fn) {
              fn(err);
            } else {
              // Only do this if there is no fn to handle the error
              self.maybeReconnectOnOpen();
            }
          });

          if (false !== this._timeout) {
            var timeout = this._timeout;
            debug("connect attempt will timeout after %d", timeout);

            if (timeout === 0) {
              openSubDestroy(); // prevents a race condition with the 'open' event
            } // set timer


            var timer = setTimeout(function () {
              debug("connect attempt timed out after %d", timeout);
              openSubDestroy();
              socket.close();
              socket.emit("error", new Error("timeout"));
            }, timeout);

            if (this.opts.autoUnref) {
              timer.unref();
            }

            this.subs.push(function subDestroy() {
              clearTimeout(timer);
            });
          }

          this.subs.push(openSubDestroy);
          this.subs.push(errorSub);
          return this;
        }
        /**
         * Alias for open()
         *
         * @return self
         * @public
         */
        ;

        _proto8.connect = function connect(fn) {
          return this.open(fn);
        }
        /**
         * Called upon transport open.
         *
         * @private
         */
        ;

        _proto8.onopen = function onopen() {
          debug("open"); // clear old subs

          this.cleanup(); // mark as open

          this._readyState = "open";
          this.emitReserved("open"); // add new subs

          var socket = this.engine;
          this.subs.push(on_1.on(socket, "ping", this.onping.bind(this)), on_1.on(socket, "data", this.ondata.bind(this)), on_1.on(socket, "error", this.onerror.bind(this)), on_1.on(socket, "close", this.onclose.bind(this)), on_1.on(this.decoder, "decoded", this.ondecoded.bind(this)));
        }
        /**
         * Called upon a ping.
         *
         * @private
         */
        ;

        _proto8.onping = function onping() {
          this.emitReserved("ping");
        }
        /**
         * Called with data.
         *
         * @private
         */
        ;

        _proto8.ondata = function ondata(data) {
          this.decoder.add(data);
        }
        /**
         * Called when parser fully decodes a packet.
         *
         * @private
         */
        ;

        _proto8.ondecoded = function ondecoded(packet) {
          this.emitReserved("packet", packet);
        }
        /**
         * Called upon socket error.
         *
         * @private
         */
        ;

        _proto8.onerror = function onerror(err) {
          debug("error", err);
          this.emitReserved("error", err);
        }
        /**
         * Creates a new socket for the given `nsp`.
         *
         * @return {Socket}
         * @public
         */
        ;

        _proto8.socket = function socket(nsp, opts) {
          var socket = this.nsps[nsp];

          if (!socket) {
            socket = new socket_1.Socket(this, nsp, opts);
            this.nsps[nsp] = socket;
          }

          return socket;
        }
        /**
         * Called upon a socket close.
         *
         * @param socket
         * @private
         */
        ;

        _proto8._destroy = function _destroy(socket) {
          var nsps = Object.keys(this.nsps);

          for (var _i2 = 0, _nsps = nsps; _i2 < _nsps.length; _i2++) {
            var nsp = _nsps[_i2];
            var _socket2 = this.nsps[nsp];

            if (_socket2.active) {
              debug("socket %s is still active, skipping close", nsp);
              return;
            }
          }

          this._close();
        }
        /**
         * Writes a packet.
         *
         * @param packet
         * @private
         */
        ;

        _proto8._packet = function _packet(packet) {
          debug("writing packet %j", packet);
          var encodedPackets = this.encoder.encode(packet);

          for (var i = 0; i < encodedPackets.length; i++) {
            this.engine.write(encodedPackets[i], packet.options);
          }
        }
        /**
         * Clean up transport subscriptions and packet buffer.
         *
         * @private
         */
        ;

        _proto8.cleanup = function cleanup() {
          debug("cleanup");
          this.subs.forEach(function (subDestroy) {
            return subDestroy();
          });
          this.subs.length = 0;
          this.decoder.destroy();
        }
        /**
         * Close the current socket.
         *
         * @private
         */
        ;

        _proto8._close = function _close() {
          debug("disconnect");
          this.skipReconnect = true;
          this._reconnecting = false;

          if ("opening" === this._readyState) {
            // `onclose` will not fire because
            // an open event never happened
            this.cleanup();
          }

          this.backoff.reset();
          this._readyState = "closed";
          if (this.engine) this.engine.close();
        }
        /**
         * Alias for close()
         *
         * @private
         */
        ;

        _proto8.disconnect = function disconnect() {
          return this._close();
        }
        /**
         * Called upon engine close.
         *
         * @private
         */
        ;

        _proto8.onclose = function onclose(reason) {
          debug("onclose");
          this.cleanup();
          this.backoff.reset();
          this._readyState = "closed";
          this.emitReserved("close", reason);

          if (this._reconnection && !this.skipReconnect) {
            this.reconnect();
          }
        }
        /**
         * Attempt a reconnection.
         *
         * @private
         */
        ;

        _proto8.reconnect = function reconnect() {
          var _this37 = this;

          if (this._reconnecting || this.skipReconnect) return this;
          var self = this;

          if (this.backoff.attempts >= this._reconnectionAttempts) {
            debug("reconnect failed");
            this.backoff.reset();
            this.emitReserved("reconnect_failed");
            this._reconnecting = false;
          } else {
            var delay = this.backoff.duration();
            debug("will wait %dms before reconnect attempt", delay);
            this._reconnecting = true;
            var timer = setTimeout(function () {
              if (self.skipReconnect) return;
              debug("attempting reconnect");

              _this37.emitReserved("reconnect_attempt", self.backoff.attempts); // check again for the case socket closed in above events


              if (self.skipReconnect) return;
              self.open(function (err) {
                if (err) {
                  debug("reconnect attempt error");
                  self._reconnecting = false;
                  self.reconnect();

                  _this37.emitReserved("reconnect_error", err);
                } else {
                  debug("reconnect success");
                  self.onreconnect();
                }
              });
            }, delay);

            if (this.opts.autoUnref) {
              timer.unref();
            }

            this.subs.push(function subDestroy() {
              clearTimeout(timer);
            });
          }
        }
        /**
         * Called upon successful reconnect.
         *
         * @private
         */
        ;

        _proto8.onreconnect = function onreconnect() {
          var attempt = this.backoff.attempts;
          this._reconnecting = false;
          this.backoff.reset();
          this.emitReserved("reconnect", attempt);
        };

        return Manager;
      }(typed_events_1.StrictEventEmitter);

      exports.Manager = Manager;
    }, {
      "./on": 602,
      "./socket": 603,
      "./typed-events": 604,
      "backo2": 3,
      "debug": 562,
      "engine.io-client": 565,
      "socket.io-parser": 607
    }],
    602: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.on = void 0;

      function on(obj, ev, fn) {
        obj.on(ev, fn);
        return function subDestroy() {
          obj.off(ev, fn);
        };
      }

      exports.on = on;
    }, {}],
    603: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Socket = void 0;

      var socket_io_parser_1 = require("socket.io-parser");

      var on_1 = require("./on");

      var typed_events_1 = require("./typed-events");

      var debug = require("debug")("socket.io-client:socket");
      /**
       * Internal events.
       * These events can't be emitted by the user.
       */


      var RESERVED_EVENTS = Object.freeze({
        connect: 1,
        connect_error: 1,
        disconnect: 1,
        disconnecting: 1,
        // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener
        newListener: 1,
        removeListener: 1
      });

      var Socket = /*#__PURE__*/function (_typed_events_1$Stric2) {
        _inheritsLoose(Socket, _typed_events_1$Stric2);

        /**
         * `Socket` constructor.
         *
         * @public
         */
        function Socket(io, nsp, opts) {
          var _this38;

          _this38 = _typed_events_1$Stric2.call(this) || this;
          _this38.receiveBuffer = [];
          _this38.sendBuffer = [];
          _this38.ids = 0;
          _this38.acks = {};
          _this38.flags = {};
          _this38.io = io;
          _this38.nsp = nsp;
          _this38.ids = 0;
          _this38.acks = {};
          _this38.receiveBuffer = [];
          _this38.sendBuffer = [];
          _this38.connected = false;
          _this38.disconnected = true;
          _this38.flags = {};

          if (opts && opts.auth) {
            _this38.auth = opts.auth;
          }

          if (_this38.io._autoConnect) _this38.open();
          return _this38;
        }
        /**
         * Subscribe to open, close and packet events
         *
         * @private
         */


        var _proto9 = Socket.prototype;

        _proto9.subEvents = function subEvents() {
          if (this.subs) return;
          var io = this.io;
          this.subs = [on_1.on(io, "open", this.onopen.bind(this)), on_1.on(io, "packet", this.onpacket.bind(this)), on_1.on(io, "error", this.onerror.bind(this)), on_1.on(io, "close", this.onclose.bind(this))];
        }
        /**
         * Whether the Socket will try to reconnect when its Manager connects or reconnects
         */
        ;

        /**
         * "Opens" the socket.
         *
         * @public
         */
        _proto9.connect = function connect() {
          if (this.connected) return this;
          this.subEvents();
          if (!this.io["_reconnecting"]) this.io.open(); // ensure open

          if ("open" === this.io._readyState) this.onopen();
          return this;
        }
        /**
         * Alias for connect()
         */
        ;

        _proto9.open = function open() {
          return this.connect();
        }
        /**
         * Sends a `message` event.
         *
         * @return self
         * @public
         */
        ;

        _proto9.send = function send() {
          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }

          args.unshift("message");
          this.emit.apply(this, args);
          return this;
        }
        /**
         * Override `emit`.
         * If the event is in `events`, it's emitted normally.
         *
         * @return self
         * @public
         */
        ;

        _proto9.emit = function emit(ev) {
          if (RESERVED_EVENTS.hasOwnProperty(ev)) {
            throw new Error('"' + ev + '" is a reserved event name');
          }

          for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
            args[_key6 - 1] = arguments[_key6];
          }

          args.unshift(ev);
          var packet = {
            type: socket_io_parser_1.PacketType.EVENT,
            data: args
          };
          packet.options = {};
          packet.options.compress = this.flags.compress !== false; // event ack callback

          if ("function" === typeof args[args.length - 1]) {
            debug("emitting packet with ack id %d", this.ids);
            this.acks[this.ids] = args.pop();
            packet.id = this.ids++;
          }

          var isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;
          var discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);

          if (discardPacket) {
            debug("discard packet as the transport is not currently writable");
          } else if (this.connected) {
            this.packet(packet);
          } else {
            this.sendBuffer.push(packet);
          }

          this.flags = {};
          return this;
        }
        /**
         * Sends a packet.
         *
         * @param packet
         * @private
         */
        ;

        _proto9.packet = function packet(_packet2) {
          _packet2.nsp = this.nsp;

          this.io._packet(_packet2);
        }
        /**
         * Called upon engine `open`.
         *
         * @private
         */
        ;

        _proto9.onopen = function onopen() {
          var _this39 = this;

          debug("transport is open - connecting");

          if (typeof this.auth == "function") {
            this.auth(function (data) {
              _this39.packet({
                type: socket_io_parser_1.PacketType.CONNECT,
                data: data
              });
            });
          } else {
            this.packet({
              type: socket_io_parser_1.PacketType.CONNECT,
              data: this.auth
            });
          }
        }
        /**
         * Called upon engine or manager `error`.
         *
         * @param err
         * @private
         */
        ;

        _proto9.onerror = function onerror(err) {
          if (!this.connected) {
            this.emitReserved("connect_error", err);
          }
        }
        /**
         * Called upon engine `close`.
         *
         * @param reason
         * @private
         */
        ;

        _proto9.onclose = function onclose(reason) {
          debug("close (%s)", reason);
          this.connected = false;
          this.disconnected = true;
          delete this.id;
          this.emitReserved("disconnect", reason);
        }
        /**
         * Called with socket packet.
         *
         * @param packet
         * @private
         */
        ;

        _proto9.onpacket = function onpacket(packet) {
          var sameNamespace = packet.nsp === this.nsp;
          if (!sameNamespace) return;

          switch (packet.type) {
            case socket_io_parser_1.PacketType.CONNECT:
              if (packet.data && packet.data.sid) {
                var id = packet.data.sid;
                this.onconnect(id);
              } else {
                this.emitReserved("connect_error", new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));
              }

              break;

            case socket_io_parser_1.PacketType.EVENT:
              this.onevent(packet);
              break;

            case socket_io_parser_1.PacketType.BINARY_EVENT:
              this.onevent(packet);
              break;

            case socket_io_parser_1.PacketType.ACK:
              this.onack(packet);
              break;

            case socket_io_parser_1.PacketType.BINARY_ACK:
              this.onack(packet);
              break;

            case socket_io_parser_1.PacketType.DISCONNECT:
              this.ondisconnect();
              break;

            case socket_io_parser_1.PacketType.CONNECT_ERROR:
              var err = new Error(packet.data.message); // @ts-ignore

              err.data = packet.data.data;
              this.emitReserved("connect_error", err);
              break;
          }
        }
        /**
         * Called upon a server event.
         *
         * @param packet
         * @private
         */
        ;

        _proto9.onevent = function onevent(packet) {
          var args = packet.data || [];
          debug("emitting event %j", args);

          if (null != packet.id) {
            debug("attaching ack callback to event");
            args.push(this.ack(packet.id));
          }

          if (this.connected) {
            this.emitEvent(args);
          } else {
            this.receiveBuffer.push(Object.freeze(args));
          }
        };

        _proto9.emitEvent = function emitEvent(args) {
          if (this._anyListeners && this._anyListeners.length) {
            var listeners = this._anyListeners.slice();

            for (var _iterator = _createForOfIteratorHelperLoose(listeners), _step; !(_step = _iterator()).done;) {
              var listener = _step.value;
              listener.apply(this, args);
            }
          }

          _typed_events_1$Stric2.prototype.emit.apply(this, args);
        }
        /**
         * Produces an ack callback to emit with an event.
         *
         * @private
         */
        ;

        _proto9.ack = function ack(id) {
          var self = this;
          var sent = false;
          return function () {
            // prevent double callbacks
            if (sent) return;
            sent = true;

            for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
              args[_key7] = arguments[_key7];
            }

            debug("sending ack %j", args);
            self.packet({
              type: socket_io_parser_1.PacketType.ACK,
              id: id,
              data: args
            });
          };
        }
        /**
         * Called upon a server acknowlegement.
         *
         * @param packet
         * @private
         */
        ;

        _proto9.onack = function onack(packet) {
          var ack = this.acks[packet.id];

          if ("function" === typeof ack) {
            debug("calling ack %s with %j", packet.id, packet.data);
            ack.apply(this, packet.data);
            delete this.acks[packet.id];
          } else {
            debug("bad ack %s", packet.id);
          }
        }
        /**
         * Called upon server connect.
         *
         * @private
         */
        ;

        _proto9.onconnect = function onconnect(id) {
          debug("socket connected with id %s", id);
          this.id = id;
          this.connected = true;
          this.disconnected = false;
          this.emitBuffered();
          this.emitReserved("connect");
        }
        /**
         * Emit buffered events (received and emitted).
         *
         * @private
         */
        ;

        _proto9.emitBuffered = function emitBuffered() {
          var _this40 = this;

          this.receiveBuffer.forEach(function (args) {
            return _this40.emitEvent(args);
          });
          this.receiveBuffer = [];
          this.sendBuffer.forEach(function (packet) {
            return _this40.packet(packet);
          });
          this.sendBuffer = [];
        }
        /**
         * Called upon server disconnect.
         *
         * @private
         */
        ;

        _proto9.ondisconnect = function ondisconnect() {
          debug("server disconnect (%s)", this.nsp);
          this.destroy();
          this.onclose("io server disconnect");
        }
        /**
         * Called upon forced client/server side disconnections,
         * this method ensures the manager stops tracking us and
         * that reconnections don't get triggered for this.
         *
         * @private
         */
        ;

        _proto9.destroy = function destroy() {
          if (this.subs) {
            // clean subscriptions to avoid reconnections
            this.subs.forEach(function (subDestroy) {
              return subDestroy();
            });
            this.subs = undefined;
          }

          this.io["_destroy"](this);
        }
        /**
         * Disconnects the socket manually.
         *
         * @return self
         * @public
         */
        ;

        _proto9.disconnect = function disconnect() {
          if (this.connected) {
            debug("performing disconnect (%s)", this.nsp);
            this.packet({
              type: socket_io_parser_1.PacketType.DISCONNECT
            });
          } // remove socket from pool


          this.destroy();

          if (this.connected) {
            // fire events
            this.onclose("io client disconnect");
          }

          return this;
        }
        /**
         * Alias for disconnect()
         *
         * @return self
         * @public
         */
        ;

        _proto9.close = function close() {
          return this.disconnect();
        }
        /**
         * Sets the compress flag.
         *
         * @param compress - if `true`, compresses the sending data
         * @return self
         * @public
         */
        ;

        _proto9.compress = function compress(_compress) {
          this.flags.compress = _compress;
          return this;
        }
        /**
         * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not
         * ready to send messages.
         *
         * @returns self
         * @public
         */
        ;

        /**
         * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
         * callback.
         *
         * @param listener
         * @public
         */
        _proto9.onAny = function onAny(listener) {
          this._anyListeners = this._anyListeners || [];

          this._anyListeners.push(listener);

          return this;
        }
        /**
         * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
         * callback. The listener is added to the beginning of the listeners array.
         *
         * @param listener
         * @public
         */
        ;

        _proto9.prependAny = function prependAny(listener) {
          this._anyListeners = this._anyListeners || [];

          this._anyListeners.unshift(listener);

          return this;
        }
        /**
         * Removes the listener that will be fired when any event is emitted.
         *
         * @param listener
         * @public
         */
        ;

        _proto9.offAny = function offAny(listener) {
          if (!this._anyListeners) {
            return this;
          }

          if (listener) {
            var listeners = this._anyListeners;

            for (var i = 0; i < listeners.length; i++) {
              if (listener === listeners[i]) {
                listeners.splice(i, 1);
                return this;
              }
            }
          } else {
            this._anyListeners = [];
          }

          return this;
        }
        /**
         * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
         * e.g. to remove listeners.
         *
         * @public
         */
        ;

        _proto9.listenersAny = function listenersAny() {
          return this._anyListeners || [];
        };

        _createClass2(Socket, [{
          key: "active",
          get: function get() {
            return !!this.subs;
          }
        }, {
          key: "volatile",
          get: function get() {
            this.flags.volatile = true;
            return this;
          }
        }]);

        return Socket;
      }(typed_events_1.StrictEventEmitter);

      exports.Socket = Socket;
    }, {
      "./on": 602,
      "./typed-events": 604,
      "debug": 562,
      "socket.io-parser": 607
    }],
    604: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.StrictEventEmitter = void 0;

      var Emitter = require("component-emitter");
      /**
       * Strictly typed version of an `EventEmitter`. A `TypedEventEmitter` takes type
       * parameters for mappings of event names to event data types, and strictly
       * types method calls to the `EventEmitter` according to these event maps.
       *
       * @typeParam ListenEvents - `EventsMap` of user-defined events that can be
       * listened to with `on` or `once`
       * @typeParam EmitEvents - `EventsMap` of user-defined events that can be
       * emitted with `emit`
       * @typeParam ReservedEvents - `EventsMap` of reserved events, that can be
       * emitted by socket.io with `emitReserved`, and can be listened to with
       * `listen`.
       */


      var StrictEventEmitter = /*#__PURE__*/function (_Emitter5) {
        _inheritsLoose(StrictEventEmitter, _Emitter5);

        function StrictEventEmitter() {
          return _Emitter5.apply(this, arguments) || this;
        }

        var _proto10 = StrictEventEmitter.prototype;

        /**
         * Adds the `listener` function as an event listener for `ev`.
         *
         * @param ev Name of the event
         * @param listener Callback function
         */
        _proto10.on = function on(ev, listener) {
          _Emitter5.prototype.on.call(this, ev, listener);

          return this;
        }
        /**
         * Adds a one-time `listener` function as an event listener for `ev`.
         *
         * @param ev Name of the event
         * @param listener Callback function
         */
        ;

        _proto10.once = function once(ev, listener) {
          _Emitter5.prototype.once.call(this, ev, listener);

          return this;
        }
        /**
         * Emits an event.
         *
         * @param ev Name of the event
         * @param args Values to send to listeners of this event
         */
        ;

        _proto10.emit = function emit(ev) {
          var _Emitter5$prototype$e;

          for (var _len8 = arguments.length, args = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
            args[_key8 - 1] = arguments[_key8];
          }

          (_Emitter5$prototype$e = _Emitter5.prototype.emit).call.apply(_Emitter5$prototype$e, [this, ev].concat(args));

          return this;
        }
        /**
         * Emits a reserved event.
         *
         * This method is `protected`, so that only a class extending
         * `StrictEventEmitter` can emit its own reserved events.
         *
         * @param ev Reserved event name
         * @param args Arguments to emit along with the event
         */
        ;

        _proto10.emitReserved = function emitReserved(ev) {
          var _Emitter5$prototype$e2;

          for (var _len9 = arguments.length, args = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {
            args[_key9 - 1] = arguments[_key9];
          }

          (_Emitter5$prototype$e2 = _Emitter5.prototype.emit).call.apply(_Emitter5$prototype$e2, [this, ev].concat(args));

          return this;
        }
        /**
         * Returns the listeners listening to an event.
         *
         * @param event Event name
         * @returns Array of listeners subscribed to `event`
         */
        ;

        _proto10.listeners = function listeners(event) {
          return _Emitter5.prototype.listeners.call(this, event);
        };

        return StrictEventEmitter;
      }(Emitter);

      exports.StrictEventEmitter = StrictEventEmitter;
    }, {
      "component-emitter": 8
    }],
    605: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.url = void 0;

      var parseuri = require("parseuri");

      var debug = require("debug")("socket.io-client:url");
      /**
       * URL parser.
       *
       * @param uri - url
       * @param path - the request path of the connection
       * @param loc - An object meant to mimic window.location.
       *        Defaults to window.location.
       * @public
       */


      function url(uri, path, loc) {
        if (path === void 0) {
          path = "";
        }

        var obj = uri; // default to window.location

        loc = loc || typeof location !== "undefined" && location;
        if (null == uri) uri = loc.protocol + "//" + loc.host; // relative path support

        if (typeof uri === "string") {
          if ("/" === uri.charAt(0)) {
            if ("/" === uri.charAt(1)) {
              uri = loc.protocol + uri;
            } else {
              uri = loc.host + uri;
            }
          }

          if (!/^(https?|wss?):\/\//.test(uri)) {
            debug("protocol-less url %s", uri);

            if ("undefined" !== typeof loc) {
              uri = loc.protocol + "//" + uri;
            } else {
              uri = "https://" + uri;
            }
          } // parse


          debug("parse %s", uri);
          obj = parseuri(uri);
        } // make sure we treat `localhost:80` and `localhost` equally


        if (!obj.port) {
          if (/^(http|ws)$/.test(obj.protocol)) {
            obj.port = "80";
          } else if (/^(http|ws)s$/.test(obj.protocol)) {
            obj.port = "443";
          }
        }

        obj.path = obj.path || "/";
        var ipv6 = obj.host.indexOf(":") !== -1;
        var host = ipv6 ? "[" + obj.host + "]" : obj.host; // define unique id

        obj.id = obj.protocol + "://" + host + ":" + obj.port + path; // define href

        obj.href = obj.protocol + "://" + host + (loc && loc.port === obj.port ? "" : ":" + obj.port);
        return obj;
      }

      exports.url = url;
    }, {
      "debug": 562,
      "parseuri": 594
    }],
    606: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.reconstructPacket = exports.deconstructPacket = void 0;

      var is_binary_1 = require("./is-binary");
      /**
       * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.
       *
       * @param {Object} packet - socket.io event packet
       * @return {Object} with deconstructed packet and list of buffers
       * @public
       */


      function deconstructPacket(packet) {
        var buffers = [];
        var packetData = packet.data;
        var pack = packet;
        pack.data = _deconstructPacket(packetData, buffers);
        pack.attachments = buffers.length; // number of binary 'attachments'

        return {
          packet: pack,
          buffers: buffers
        };
      }

      exports.deconstructPacket = deconstructPacket;

      function _deconstructPacket(data, buffers) {
        if (!data) return data;

        if (is_binary_1.isBinary(data)) {
          var placeholder = {
            _placeholder: true,
            num: buffers.length
          };
          buffers.push(data);
          return placeholder;
        } else if (Array.isArray(data)) {
          var newData = new Array(data.length);

          for (var i = 0; i < data.length; i++) {
            newData[i] = _deconstructPacket(data[i], buffers);
          }

          return newData;
        } else if (typeof data === "object" && !(data instanceof Date)) {
          var _newData = {};

          for (var key in data) {
            if (data.hasOwnProperty(key)) {
              _newData[key] = _deconstructPacket(data[key], buffers);
            }
          }

          return _newData;
        }

        return data;
      }
      /**
       * Reconstructs a binary packet from its placeholder packet and buffers
       *
       * @param {Object} packet - event packet with placeholders
       * @param {Array} buffers - binary buffers to put in placeholder positions
       * @return {Object} reconstructed packet
       * @public
       */


      function reconstructPacket(packet, buffers) {
        packet.data = _reconstructPacket(packet.data, buffers);
        packet.attachments = undefined; // no longer useful

        return packet;
      }

      exports.reconstructPacket = reconstructPacket;

      function _reconstructPacket(data, buffers) {
        if (!data) return data;

        if (data && data._placeholder) {
          return buffers[data.num]; // appropriate buffer (should be natural order anyway)
        } else if (Array.isArray(data)) {
          for (var i = 0; i < data.length; i++) {
            data[i] = _reconstructPacket(data[i], buffers);
          }
        } else if (typeof data === "object") {
          for (var key in data) {
            if (data.hasOwnProperty(key)) {
              data[key] = _reconstructPacket(data[key], buffers);
            }
          }
        }

        return data;
      }
    }, {
      "./is-binary": 608
    }],
    607: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.Decoder = exports.Encoder = exports.PacketType = exports.protocol = void 0;

      var Emitter = require("component-emitter");

      var binary_1 = require("./binary");

      var is_binary_1 = require("./is-binary");

      var debug = require("debug")("socket.io-parser");
      /**
       * Protocol version.
       *
       * @public
       */


      exports.protocol = 5;
      var PacketType;

      (function (PacketType) {
        PacketType[PacketType["CONNECT"] = 0] = "CONNECT";
        PacketType[PacketType["DISCONNECT"] = 1] = "DISCONNECT";
        PacketType[PacketType["EVENT"] = 2] = "EVENT";
        PacketType[PacketType["ACK"] = 3] = "ACK";
        PacketType[PacketType["CONNECT_ERROR"] = 4] = "CONNECT_ERROR";
        PacketType[PacketType["BINARY_EVENT"] = 5] = "BINARY_EVENT";
        PacketType[PacketType["BINARY_ACK"] = 6] = "BINARY_ACK";
      })(PacketType = exports.PacketType || (exports.PacketType = {}));
      /**
       * A socket.io Encoder instance
       */


      var Encoder = /*#__PURE__*/function () {
        function Encoder() {}

        var _proto11 = Encoder.prototype;

        /**
         * Encode a packet as a single string if non-binary, or as a
         * buffer sequence, depending on packet type.
         *
         * @param {Object} obj - packet object
         */
        _proto11.encode = function encode(obj) {
          debug("encoding packet %j", obj);

          if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {
            if (is_binary_1.hasBinary(obj)) {
              obj.type = obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK;
              return this.encodeAsBinary(obj);
            }
          }

          return [this.encodeAsString(obj)];
        }
        /**
         * Encode packet as string.
         */
        ;

        _proto11.encodeAsString = function encodeAsString(obj) {
          // first is type
          var str = "" + obj.type; // attachments if we have them

          if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {
            str += obj.attachments + "-";
          } // if we have a namespace other than `/`
          // we append it followed by a comma `,`


          if (obj.nsp && "/" !== obj.nsp) {
            str += obj.nsp + ",";
          } // immediately followed by the id


          if (null != obj.id) {
            str += obj.id;
          } // json data


          if (null != obj.data) {
            str += JSON.stringify(obj.data);
          }

          debug("encoded %j as %s", obj, str);
          return str;
        }
        /**
         * Encode packet as 'buffer sequence' by removing blobs, and
         * deconstructing packet into object with placeholders and
         * a list of buffers.
         */
        ;

        _proto11.encodeAsBinary = function encodeAsBinary(obj) {
          var deconstruction = binary_1.deconstructPacket(obj);
          var pack = this.encodeAsString(deconstruction.packet);
          var buffers = deconstruction.buffers;
          buffers.unshift(pack); // add packet info to beginning of data list

          return buffers; // write all the buffers
        };

        return Encoder;
      }();

      exports.Encoder = Encoder;
      /**
       * A socket.io Decoder instance
       *
       * @return {Object} decoder
       */

      var Decoder = /*#__PURE__*/function (_Emitter6) {
        _inheritsLoose(Decoder, _Emitter6);

        function Decoder() {
          return _Emitter6.call(this) || this;
        }
        /**
         * Decodes an encoded packet string into packet JSON.
         *
         * @param {String} obj - encoded packet
         */


        var _proto12 = Decoder.prototype;

        _proto12.add = function add(obj) {
          var packet;

          if (typeof obj === "string") {
            packet = this.decodeString(obj);

            if (packet.type === PacketType.BINARY_EVENT || packet.type === PacketType.BINARY_ACK) {
              // binary packet's json
              this.reconstructor = new BinaryReconstructor(packet); // no attachments, labeled binary but no binary data to follow

              if (packet.attachments === 0) {
                _Emitter6.prototype.emit.call(this, "decoded", packet);
              }
            } else {
              // non-binary full packet
              _Emitter6.prototype.emit.call(this, "decoded", packet);
            }
          } else if (is_binary_1.isBinary(obj) || obj.base64) {
            // raw binary data
            if (!this.reconstructor) {
              throw new Error("got binary data when not reconstructing a packet");
            } else {
              packet = this.reconstructor.takeBinaryData(obj);

              if (packet) {
                // received final buffer
                this.reconstructor = null;

                _Emitter6.prototype.emit.call(this, "decoded", packet);
              }
            }
          } else {
            throw new Error("Unknown type: " + obj);
          }
        }
        /**
         * Decode a packet String (JSON data)
         *
         * @param {String} str
         * @return {Object} packet
         */
        ;

        _proto12.decodeString = function decodeString(str) {
          var i = 0; // look up type

          var p = {
            type: Number(str.charAt(0))
          };

          if (PacketType[p.type] === undefined) {
            throw new Error("unknown packet type " + p.type);
          } // look up attachments if type binary


          if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {
            var start = i + 1;

            while (str.charAt(++i) !== "-" && i != str.length) {}

            var buf = str.substring(start, i);

            if (buf != Number(buf) || str.charAt(i) !== "-") {
              throw new Error("Illegal attachments");
            }

            p.attachments = Number(buf);
          } // look up namespace (if any)


          if ("/" === str.charAt(i + 1)) {
            var _start = i + 1;

            while (++i) {
              var c = str.charAt(i);
              if ("," === c) break;
              if (i === str.length) break;
            }

            p.nsp = str.substring(_start, i);
          } else {
            p.nsp = "/";
          } // look up id


          var next = str.charAt(i + 1);

          if ("" !== next && Number(next) == next) {
            var _start2 = i + 1;

            while (++i) {
              var _c = str.charAt(i);

              if (null == _c || Number(_c) != _c) {
                --i;
                break;
              }

              if (i === str.length) break;
            }

            p.id = Number(str.substring(_start2, i + 1));
          } // look up json data


          if (str.charAt(++i)) {
            var payload = tryParse(str.substr(i));

            if (Decoder.isPayloadValid(p.type, payload)) {
              p.data = payload;
            } else {
              throw new Error("invalid payload");
            }
          }

          debug("decoded %s as %j", str, p);
          return p;
        };

        Decoder.isPayloadValid = function isPayloadValid(type, payload) {
          switch (type) {
            case PacketType.CONNECT:
              return typeof payload === "object";

            case PacketType.DISCONNECT:
              return payload === undefined;

            case PacketType.CONNECT_ERROR:
              return typeof payload === "string" || typeof payload === "object";

            case PacketType.EVENT:
            case PacketType.BINARY_EVENT:
              return Array.isArray(payload) && payload.length > 0;

            case PacketType.ACK:
            case PacketType.BINARY_ACK:
              return Array.isArray(payload);
          }
        }
        /**
         * Deallocates a parser's resources
         */
        ;

        _proto12.destroy = function destroy() {
          if (this.reconstructor) {
            this.reconstructor.finishedReconstruction();
          }
        };

        return Decoder;
      }(Emitter);

      exports.Decoder = Decoder;

      function tryParse(str) {
        try {
          return JSON.parse(str);
        } catch (e) {
          return false;
        }
      }
      /**
       * A manager of a binary event's 'buffer sequence'. Should
       * be constructed whenever a packet of type BINARY_EVENT is
       * decoded.
       *
       * @param {Object} packet
       * @return {BinaryReconstructor} initialized reconstructor
       */


      var BinaryReconstructor = /*#__PURE__*/function () {
        function BinaryReconstructor(packet) {
          this.packet = packet;
          this.buffers = [];
          this.reconPack = packet;
        }
        /**
         * Method to be called when binary data received from connection
         * after a BINARY_EVENT packet.
         *
         * @param {Buffer | ArrayBuffer} binData - the raw binary data received
         * @return {null | Object} returns null if more binary data is expected or
         *   a reconstructed packet object if all buffers have been received.
         */


        var _proto13 = BinaryReconstructor.prototype;

        _proto13.takeBinaryData = function takeBinaryData(binData) {
          this.buffers.push(binData);

          if (this.buffers.length === this.reconPack.attachments) {
            // done with buffer list
            var packet = binary_1.reconstructPacket(this.reconPack, this.buffers);
            this.finishedReconstruction();
            return packet;
          }

          return null;
        }
        /**
         * Cleans up binary packet reconstruction variables.
         */
        ;

        _proto13.finishedReconstruction = function finishedReconstruction() {
          this.reconPack = null;
          this.buffers = [];
        };

        return BinaryReconstructor;
      }();
    }, {
      "./binary": 606,
      "./is-binary": 608,
      "component-emitter": 8,
      "debug": 562
    }],
    608: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.hasBinary = exports.isBinary = void 0;
      var withNativeArrayBuffer = typeof ArrayBuffer === "function";

      var isView = function isView(obj) {
        return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;
      };

      var toString = Object.prototype.toString;
      var withNativeBlob = typeof Blob === "function" || typeof Blob !== "undefined" && toString.call(Blob) === "[object BlobConstructor]";
      var withNativeFile = typeof File === "function" || typeof File !== "undefined" && toString.call(File) === "[object FileConstructor]";
      /**
       * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.
       *
       * @private
       */

      function isBinary(obj) {
        return withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)) || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File;
      }

      exports.isBinary = isBinary;

      function hasBinary(obj, toJSON) {
        if (!obj || typeof obj !== "object") {
          return false;
        }

        if (Array.isArray(obj)) {
          for (var i = 0, l = obj.length; i < l; i++) {
            if (hasBinary(obj[i])) {
              return true;
            }
          }

          return false;
        }

        if (isBinary(obj)) {
          return true;
        }

        if (obj.toJSON && typeof obj.toJSON === "function" && arguments.length === 1) {
          return hasBinary(obj.toJSON(), true);
        }

        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
            return true;
          }
        }

        return false;
      }

      exports.hasBinary = hasBinary;
    }, {}],
    609: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      var _isReactNative = _interopRequireDefault(require("./isReactNative"));

      var _uriToBlob = _interopRequireDefault(require("./uriToBlob"));

      var _isCordova = _interopRequireDefault(require("./isCordova"));

      var _readAsByteArray = _interopRequireDefault(require("./readAsByteArray"));

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      var FileSource = /*#__PURE__*/function () {
        // Make this.size a method
        function FileSource(file) {
          _classCallCheck(this, FileSource);

          this._file = file;
          this.size = file.size;
        }

        _createClass(FileSource, [{
          key: "slice",
          value: function slice(start, end) {
            // In Apache Cordova applications, a File must be resolved using
            // FileReader instances, see
            // https://cordova.apache.org/docs/en/8.x/reference/cordova-plugin-file/index.html#read-a-file
            if ((0, _isCordova.default)()) {
              return (0, _readAsByteArray.default)(this._file.slice(start, end));
            }

            var value = this._file.slice(start, end);

            return Promise.resolve({
              value: value
            });
          }
        }, {
          key: "close",
          value: function close() {// Nothing to do here since we don't need to release any resources.
          }
        }]);

        return FileSource;
      }();

      var StreamSource = /*#__PURE__*/function () {
        function StreamSource(reader, chunkSize) {
          _classCallCheck(this, StreamSource);

          this._chunkSize = chunkSize;
          this._buffer = undefined;
          this._bufferOffset = 0;
          this._reader = reader;
          this._done = false;
        }

        _createClass(StreamSource, [{
          key: "slice",
          value: function slice(start, end) {
            if (start < this._bufferOffset) {
              return Promise.reject(new Error("Requested data is before the reader's current offset"));
            }

            return this._readUntilEnoughDataOrDone(start, end);
          }
        }, {
          key: "_readUntilEnoughDataOrDone",
          value: function _readUntilEnoughDataOrDone(start, end) {
            var _this = this;

            var hasEnoughData = end <= this._bufferOffset + len(this._buffer);

            if (this._done || hasEnoughData) {
              var value = this._getDataFromBuffer(start, end);

              var done = value == null ? this._done : false;
              return Promise.resolve({
                value: value,
                done: done
              });
            }

            return this._reader.read().then(function (_ref) {
              var value = _ref.value,
                  done = _ref.done;

              if (done) {
                _this._done = true;
              } else if (_this._buffer === undefined) {
                _this._buffer = value;
              } else {
                _this._buffer = concat(_this._buffer, value);
              }

              return _this._readUntilEnoughDataOrDone(start, end);
            });
          }
        }, {
          key: "_getDataFromBuffer",
          value: function _getDataFromBuffer(start, end) {
            // Remove data from buffer before `start`.
            // Data might be reread from the buffer if an upload fails, so we can only
            // safely delete data when it comes *before* what is currently being read.
            if (start > this._bufferOffset) {
              this._buffer = this._buffer.slice(start - this._bufferOffset);
              this._bufferOffset = start;
            } // If the buffer is empty after removing old data, all data has been read.


            var hasAllDataBeenRead = len(this._buffer) === 0;

            if (this._done && hasAllDataBeenRead) {
              return null;
            } // We already removed data before `start`, so we just return the first
            // chunk from the buffer.


            return this._buffer.slice(0, end - start);
          }
        }, {
          key: "close",
          value: function close() {
            if (this._reader.cancel) {
              this._reader.cancel();
            }
          }
        }]);

        return StreamSource;
      }();

      function len(blobOrArray) {
        if (blobOrArray === undefined) return 0;
        if (blobOrArray.size !== undefined) return blobOrArray.size;
        return blobOrArray.length;
      }
      /*
        Typed arrays and blobs don't have a concat method.
        This function helps StreamSource accumulate data to reach chunkSize.
      */


      function concat(a, b) {
        if (a.concat) {
          // Is `a` an Array?
          return a.concat(b);
        }

        if (a instanceof Blob) {
          return new Blob([a, b], {
            type: a.type
          });
        }

        if (a.set) {
          // Is `a` a typed array?
          var c = new a.constructor(a.length + b.length);
          c.set(a);
          c.set(b, a.length);
          return c;
        }

        throw new Error("Unknown data type");
      }

      var FileReader = /*#__PURE__*/function () {
        function FileReader() {
          _classCallCheck(this, FileReader);
        }

        _createClass(FileReader, [{
          key: "openFile",
          value: function openFile(input, chunkSize) {
            // In React Native, when user selects a file, instead of a File or Blob,
            // you usually get a file object {} with a uri property that contains
            // a local path to the file. We use XMLHttpRequest to fetch
            // the file blob, before uploading with tus.
            if ((0, _isReactNative.default)() && input && typeof input.uri !== "undefined") {
              return (0, _uriToBlob.default)(input.uri).then(function (blob) {
                return new FileSource(blob);
              })["catch"](function (err) {
                throw new Error("tus: cannot fetch `file.uri` as Blob, make sure the uri is correct and accessible. " + err);
              });
            } // Since we emulate the Blob type in our tests (not all target browsers
            // support it), we cannot use `instanceof` for testing whether the input value
            // can be handled. Instead, we simply check is the slice() function and the
            // size property are available.


            if (typeof input.slice === "function" && typeof input.size !== "undefined") {
              return Promise.resolve(new FileSource(input));
            }

            if (typeof input.read === "function") {
              chunkSize = +chunkSize;

              if (!isFinite(chunkSize)) {
                return Promise.reject(new Error("cannot create source for stream without a finite value for the `chunkSize` option"));
              }

              return Promise.resolve(new StreamSource(input, chunkSize));
            }

            return Promise.reject(new Error("source object may only be an instance of File, Blob, or Reader in this environment"));
          }
        }]);

        return FileReader;
      }();

      exports.default = FileReader;
    }, {
      "./isCordova": 613,
      "./isReactNative": 614,
      "./readAsByteArray": 615,
      "./uriToBlob": 616
    }],
    610: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = fingerprint;

      var _isReactNative = _interopRequireDefault(require("./isReactNative"));

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      } // TODO: Differenciate between input types

      /**
       * Generate a fingerprint for a file which will be used the store the endpoint
       *
       * @param {File} file
       * @param {Object} options
       * @param {Function} callback
       */


      function fingerprint(file, options) {
        if ((0, _isReactNative.default)()) {
          return Promise.resolve(reactNativeFingerprint(file, options));
        }

        return Promise.resolve(["tus-br", file.name, file.type, file.size, file.lastModified, options.endpoint].join("-"));
      }

      function reactNativeFingerprint(file, options) {
        var exifHash = file.exif ? hashCode(JSON.stringify(file.exif)) : "noexif";
        return ["tus-rn", file.name || "noname", file.size || "nosize", exifHash, options.endpoint].join("/");
      }

      function hashCode(str) {
        // from https://stackoverflow.com/a/8831937/151666
        var hash = 0;

        if (str.length === 0) {
          return hash;
        }

        for (var i = 0; i < str.length; i++) {
          var _char = str.charCodeAt(i);

          hash = (hash << 5) - hash + _char;
          hash = hash & hash; // Convert to 32bit integer
        }

        return hash;
      }
    }, {
      "./isReactNative": 614
    }],
    611: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      /* global window */


      var XHRHttpStack = /*#__PURE__*/function () {
        function XHRHttpStack() {
          _classCallCheck(this, XHRHttpStack);
        }

        _createClass(XHRHttpStack, [{
          key: "createRequest",
          value: function createRequest(method, url) {
            return new Request(method, url);
          }
        }, {
          key: "getName",
          value: function getName() {
            return "XHRHttpStack";
          }
        }]);

        return XHRHttpStack;
      }();

      exports.default = XHRHttpStack;

      var Request = /*#__PURE__*/function () {
        function Request(method, url) {
          _classCallCheck(this, Request);

          this._xhr = new XMLHttpRequest();

          this._xhr.open(method, url, true);

          this._method = method;
          this._url = url;
          this._headers = {};
        }

        _createClass(Request, [{
          key: "getMethod",
          value: function getMethod() {
            return this._method;
          }
        }, {
          key: "getURL",
          value: function getURL() {
            return this._url;
          }
        }, {
          key: "setHeader",
          value: function setHeader(header, value) {
            this._xhr.setRequestHeader(header, value);

            this._headers[header] = value;
          }
        }, {
          key: "getHeader",
          value: function getHeader(header) {
            return this._headers[header];
          }
        }, {
          key: "setProgressHandler",
          value: function setProgressHandler(progressHandler) {
            // Test support for progress events before attaching an event listener
            if (!("upload" in this._xhr)) {
              return;
            }

            this._xhr.upload.onprogress = function (e) {
              if (!e.lengthComputable) {
                return;
              }

              progressHandler(e.loaded);
            };
          }
        }, {
          key: "send",
          value: function send() {
            var _this = this;

            var body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            return new Promise(function (resolve, reject) {
              _this._xhr.onload = function () {
                resolve(new Response(_this._xhr));
              };

              _this._xhr.onerror = function (err) {
                reject(err);
              };

              _this._xhr.send(body);
            });
          }
        }, {
          key: "abort",
          value: function abort() {
            this._xhr.abort();

            return Promise.resolve();
          }
        }, {
          key: "getUnderlyingObject",
          value: function getUnderlyingObject() {
            return this._xhr;
          }
        }]);

        return Request;
      }();

      var Response = /*#__PURE__*/function () {
        function Response(xhr) {
          _classCallCheck(this, Response);

          this._xhr = xhr;
        }

        _createClass(Response, [{
          key: "getStatus",
          value: function getStatus() {
            return this._xhr.status;
          }
        }, {
          key: "getHeader",
          value: function getHeader(header) {
            return this._xhr.getResponseHeader(header);
          }
        }, {
          key: "getBody",
          value: function getBody() {
            return this._xhr.responseText;
          }
        }, {
          key: "getUnderlyingObject",
          value: function getUnderlyingObject() {
            return this._xhr;
          }
        }]);

        return Response;
      }();
    }, {}],
    612: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "enableDebugLog", {
        enumerable: true,
        get: function get() {
          return _logger.enableDebugLog;
        }
      });
      Object.defineProperty(exports, "canStoreURLs", {
        enumerable: true,
        get: function get() {
          return _urlStorage.canStoreURLs;
        }
      });
      exports.isSupported = exports.defaultOptions = exports.Upload = void 0;

      var _upload = _interopRequireDefault(require("../upload"));

      var _noopUrlStorage = _interopRequireDefault(require("../noopUrlStorage"));

      var _logger = require("../logger");

      var _urlStorage = require("./urlStorage");

      var _httpStack = _interopRequireDefault(require("./httpStack"));

      var _fileReader = _interopRequireDefault(require("./fileReader"));

      var _fingerprint = _interopRequireDefault(require("./fingerprint"));

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _createSuper(Derived) {
        return function () {
          var Super = _getPrototypeOf(Derived),
              result;

          if (_isNativeReflectConstruct()) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            ownKeys(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }
      /* global window */


      var defaultOptions = _objectSpread({}, _upload.default.defaultOptions, {
        httpStack: new _httpStack.default(),
        fileReader: new _fileReader.default(),
        urlStorage: _urlStorage.canStoreURLs ? new _urlStorage.WebStorageUrlStorage() : new _noopUrlStorage.default(),
        fingerprint: _fingerprint.default
      });

      exports.defaultOptions = defaultOptions;

      var Upload = /*#__PURE__*/function (_BaseUpload) {
        _inherits(Upload, _BaseUpload);

        var _super = _createSuper(Upload);

        function Upload() {
          var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          _classCallCheck(this, Upload);

          options = _objectSpread({}, defaultOptions, {}, options);
          return _super.call(this, file, options);
        }

        _createClass(Upload, null, [{
          key: "terminate",
          value: function terminate(url, options, cb) {
            options = _objectSpread({}, defaultOptions, {}, options);
            return _upload.default.terminate(url, options, cb);
          }
        }]);

        return Upload;
      }(_upload.default);

      exports.Upload = Upload;
      var _window = window,
          XMLHttpRequest = _window.XMLHttpRequest,
          Blob = _window.Blob;
      var isSupported = XMLHttpRequest && Blob && typeof Blob.prototype.slice === "function";
      exports.isSupported = isSupported;
    }, {
      "../logger": 619,
      "../noopUrlStorage": 620,
      "../upload": 621,
      "./fileReader": 609,
      "./fingerprint": 610,
      "./httpStack": 611,
      "./urlStorage": 617
    }],
    613: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      var isCordova = function isCordova() {
        return typeof window != "undefined" && (typeof window.PhoneGap != "undefined" || typeof window.Cordova != "undefined" || typeof window.cordova != "undefined");
      };

      var _default = isCordova;
      exports.default = _default;
    }, {}],
    614: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      var isReactNative = function isReactNative() {
        return typeof navigator !== "undefined" && typeof navigator.product === "string" && navigator.product.toLowerCase() === "reactnative";
      };

      var _default = isReactNative;
      exports.default = _default;
    }, {}],
    615: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = readAsByteArray;
      /**
       * readAsByteArray converts a File object to a Uint8Array.
       * This function is only used on the Apache Cordova platform.
       * See https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-file/index.html#read-a-file
       */

      function readAsByteArray(chunk) {
        return new Promise(function (resolve, reject) {
          var reader = new FileReader();

          reader.onload = function () {
            var value = new Uint8Array(reader.result);
            resolve({
              value: value
            });
          };

          reader.onerror = function (err) {
            reject(err);
          };

          reader.readAsArrayBuffer(chunk);
        });
      }
    }, {}],
    616: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = uriToBlob;
      /**
       * uriToBlob resolves a URI to a Blob object. This is used for
       * React Native to retrieve a file (identified by a file://
       * URI) as a blob.
       */

      function uriToBlob(uri) {
        return new Promise(function (resolve, reject) {
          var xhr = new XMLHttpRequest();
          xhr.responseType = "blob";

          xhr.onload = function () {
            var blob = xhr.response;
            resolve(blob);
          };

          xhr.onerror = function (err) {
            reject(err);
          };

          xhr.open("GET", uri);
          xhr.send();
        });
      }
    }, {}],
    617: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.WebStorageUrlStorage = exports.canStoreURLs = void 0;

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      /* global window, localStorage */


      var hasStorage = false;

      try {
        hasStorage = "localStorage" in window; // Attempt to store and read entries from the local storage to detect Private
        // Mode on Safari on iOS (see #49)

        var key = "tusSupport";
        localStorage.setItem(key, localStorage.getItem(key));
      } catch (e) {
        // If we try to access localStorage inside a sandboxed iframe, a SecurityError
        // is thrown. When in private mode on iOS Safari, a QuotaExceededError is
        // thrown (see #49)
        if (e.code === e.SECURITY_ERR || e.code === e.QUOTA_EXCEEDED_ERR) {
          hasStorage = false;
        } else {
          throw e;
        }
      }

      var canStoreURLs = hasStorage;
      exports.canStoreURLs = canStoreURLs;

      var WebStorageUrlStorage = /*#__PURE__*/function () {
        function WebStorageUrlStorage() {
          _classCallCheck(this, WebStorageUrlStorage);
        }

        _createClass(WebStorageUrlStorage, [{
          key: "findAllUploads",
          value: function findAllUploads() {
            var results = this._findEntries("tus::");

            return Promise.resolve(results);
          }
        }, {
          key: "findUploadsByFingerprint",
          value: function findUploadsByFingerprint(fingerprint) {
            var results = this._findEntries("tus::".concat(fingerprint, "::"));

            return Promise.resolve(results);
          }
        }, {
          key: "removeUpload",
          value: function removeUpload(urlStorageKey) {
            localStorage.removeItem(urlStorageKey);
            return Promise.resolve();
          }
        }, {
          key: "addUpload",
          value: function addUpload(fingerprint, upload) {
            var id = Math.round(Math.random() * 1e12);
            var key = "tus::".concat(fingerprint, "::").concat(id);
            localStorage.setItem(key, JSON.stringify(upload));
            return Promise.resolve(key);
          }
        }, {
          key: "_findEntries",
          value: function _findEntries(prefix) {
            var results = [];

            for (var i = 0; i < localStorage.length; i++) {
              var _key = localStorage.key(i);

              if (_key.indexOf(prefix) !== 0) continue;

              try {
                var upload = JSON.parse(localStorage.getItem(_key));
                upload.urlStorageKey = _key;
                results.push(upload);
              } catch (e) {// The JSON parse error is intentionally ignored here, so a malformed
                // entry in the storage cannot prevent an upload.
              }
            }

            return results;
          }
        }]);

        return WebStorageUrlStorage;
      }();

      exports.WebStorageUrlStorage = WebStorageUrlStorage;
    }, {}],
    618: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      function _typeof(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function _typeof(obj) {
            return typeof obj;
          };
        } else {
          _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
          };
        }

        return _typeof(obj);
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }

      function _createSuper(Derived) {
        return function () {
          var Super = _getPrototypeOf(Derived),
              result;

          if (_isNativeReflectConstruct()) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        }

        return _assertThisInitialized(self);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _wrapNativeSuper(Class) {
        var _cache = typeof Map === "function" ? new Map() : undefined;

        _wrapNativeSuper = function _wrapNativeSuper(Class) {
          if (Class === null || !_isNativeFunction(Class)) return Class;

          if (typeof Class !== "function") {
            throw new TypeError("Super expression must either be null or a function");
          }

          if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);

            _cache.set(Class, Wrapper);
          }

          function Wrapper() {
            return _construct(Class, arguments, _getPrototypeOf(this).constructor);
          }

          Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
              value: Wrapper,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          return _setPrototypeOf(Wrapper, Class);
        };

        return _wrapNativeSuper(Class);
      }

      function _construct(Parent, args, Class) {
        if (_isNativeReflectConstruct()) {
          _construct = Reflect.construct;
        } else {
          _construct = function _construct(Parent, args, Class) {
            var a = [null];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _setPrototypeOf(instance, Class.prototype);
            return instance;
          };
        }

        return _construct.apply(null, arguments);
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function _isNativeFunction(fn) {
        return Function.toString.call(fn).indexOf("[native code]") !== -1;
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      var DetailedError = /*#__PURE__*/function (_Error) {
        _inherits(DetailedError, _Error);

        var _super = _createSuper(DetailedError);

        function DetailedError(message) {
          var _this;

          var causingErr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
          var req = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
          var res = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

          _classCallCheck(this, DetailedError);

          _this = _super.call(this, message);
          _this.originalRequest = req;
          _this.originalResponse = res;
          _this.causingError = causingErr;

          if (causingErr != null) {
            message += ", caused by ".concat(causingErr.toString());
          }

          if (req != null) {
            var requestId = req.getHeader("X-Request-ID") || "n/a";
            var method = req.getMethod();
            var url = req.getURL();
            var status = res ? res.getStatus() : "n/a";
            var body = res ? res.getBody() || "" : "n/a";
            message += ", originated from request (method: ".concat(method, ", url: ").concat(url, ", response code: ").concat(status, ", response text: ").concat(body, ", request id: ").concat(requestId, ")");
          }

          _this.message = message;
          return _this;
        }

        return DetailedError;
      }( /*#__PURE__*/_wrapNativeSuper(Error));

      var _default = DetailedError;
      exports.default = _default;
    }, {}],
    619: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.enableDebugLog = enableDebugLog;
      exports.log = log;
      /* eslint no-console: "off" */

      var isEnabled = false;

      function enableDebugLog() {
        isEnabled = true;
      }

      function log(msg) {
        if (!isEnabled) return;
        console.log(msg);
      }
    }, {}],
    620: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      /* eslint no-unused-vars: "off" */


      var NoopUrlStorage = /*#__PURE__*/function () {
        function NoopUrlStorage() {
          _classCallCheck(this, NoopUrlStorage);
        }

        _createClass(NoopUrlStorage, [{
          key: "listAllUploads",
          value: function listAllUploads() {
            return Promise.resolve([]);
          }
        }, {
          key: "findUploadsByFingerprint",
          value: function findUploadsByFingerprint(fingerprint) {
            return Promise.resolve([]);
          }
        }, {
          key: "removeUpload",
          value: function removeUpload(urlStorageKey) {
            return Promise.resolve();
          }
        }, {
          key: "addUpload",
          value: function addUpload(fingerprint, upload) {
            return Promise.resolve(null);
          }
        }]);

        return NoopUrlStorage;
      }();

      exports.default = NoopUrlStorage;
    }, {}],
    621: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;

      var _error = _interopRequireDefault(require("./error"));

      var _uuid = _interopRequireDefault(require("./uuid"));

      var _jsBase = require("js-base64");

      var _urlParse = _interopRequireDefault(require("url-parse"));

      var _logger = require("./logger");

      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }

      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);
          if (enumerableOnly) symbols = symbols.filter(function (sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
          });
          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            ownKeys(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      /* global window */


      var defaultOptions = {
        endpoint: null,
        uploadUrl: null,
        metadata: {},
        fingerprint: null,
        uploadSize: null,
        onProgress: null,
        onChunkComplete: null,
        onSuccess: null,
        onError: null,
        _onUploadUrlAvailable: null,
        overridePatchMethod: false,
        headers: {},
        addRequestId: false,
        onBeforeRequest: null,
        onAfterResponse: null,
        chunkSize: Infinity,
        retryDelays: [0, 1000, 3000, 5000],
        parallelUploads: 1,
        storeFingerprintForResuming: true,
        removeFingerprintOnSuccess: false,
        uploadLengthDeferred: false,
        uploadDataDuringCreation: false,
        urlStorage: null,
        fileReader: null,
        httpStack: null
      };

      var BaseUpload = /*#__PURE__*/function () {
        function BaseUpload(file, options) {
          _classCallCheck(this, BaseUpload); // Warn about removed options from previous versions


          if ("resume" in options) {
            console.log("tus: The `resume` option has been removed in tus-js-client v2. Please use the URL storage API instead."); // eslint-disable-line no-console
          } // The default options will already be added from the wrapper classes.


          this.options = options; // The storage module used to store URLs

          this._urlStorage = this.options.urlStorage; // The underlying File/Blob object

          this.file = file; // The URL against which the file will be uploaded

          this.url = null; // The underlying request object for the current PATCH request

          this._req = null; // The fingerpinrt for the current file (set after start())

          this._fingerprint = null; // The key that the URL storage returned when saving an URL with a fingerprint,

          this._urlStorageKey = null; // The offset used in the current PATCH request

          this._offset = null; // True if the current PATCH request has been aborted

          this._aborted = false; // The file's size in bytes

          this._size = null; // The Source object which will wrap around the given file and provides us
          // with a unified interface for getting its size and slice chunks from its
          // content allowing us to easily handle Files, Blobs, Buffers and Streams.

          this._source = null; // The current count of attempts which have been made. Zero indicates none.

          this._retryAttempt = 0; // The timeout's ID which is used to delay the next retry

          this._retryTimeout = null; // The offset of the remote upload before the latest attempt was started.

          this._offsetBeforeRetry = 0; // An array of BaseUpload instances which are used for uploading the different
          // parts, if the parallelUploads option is used.

          this._parallelUploads = null; // An array of upload URLs which are used for uploading the different
          // parts, if the parallelUploads option is used.

          this._parallelUploadUrls = null;
        }
        /**
         * Use the Termination extension to delete an upload from the server by sending a DELETE
         * request to the specified upload URL. This is only possible if the server supports the
         * Termination extension. If the `options.retryDelays` property is set, the method will
         * also retry if an error ocurrs.
         *
         * @param {String} url The upload's URL which will be terminated.
         * @param {object} options Optional options for influencing HTTP requests.
         * @return {Promise} The Promise will be resolved/rejected when the requests finish.
         */


        _createClass(BaseUpload, [{
          key: "findPreviousUploads",
          value: function findPreviousUploads() {
            var _this = this;

            return this.options.fingerprint(this.file, this.options).then(function (fingerprint) {
              return _this._urlStorage.findUploadsByFingerprint(fingerprint);
            });
          }
        }, {
          key: "resumeFromPreviousUpload",
          value: function resumeFromPreviousUpload(previousUpload) {
            this.url = previousUpload.uploadUrl || null;
            this._parallelUploadUrls = previousUpload.parallelUploadUrls || null;
            this._urlStorageKey = previousUpload.urlStorageKey;
          }
        }, {
          key: "start",
          value: function start() {
            var _this2 = this;

            var file = this.file;

            if (!file) {
              this._emitError(new Error("tus: no file or stream to upload provided"));

              return;
            }

            if (!this.options.endpoint && !this.options.uploadUrl) {
              this._emitError(new Error("tus: neither an endpoint or an upload URL is provided"));

              return;
            }

            var retryDelays = this.options.retryDelays;

            if (retryDelays != null && Object.prototype.toString.call(retryDelays) !== "[object Array]") {
              this._emitError(new Error("tus: the `retryDelays` option must either be an array or null"));

              return;
            }

            if (this.options.parallelUploads > 1) {
              // Test which options are incompatible with parallel uploads.
              ["uploadUrl", "uploadSize", "uploadLengthDeferred"].forEach(function (optionName) {
                if (_this2.options[optionName]) {
                  _this2._emitError(new Error("tus: cannot use the ".concat(optionName, " option when parallelUploads is enabled")));
                }
              });
            }

            this.options.fingerprint(file, this.options).then(function (fingerprint) {
              if (fingerprint == null) {
                (0, _logger.log)("No fingerprint was calculated meaning that the upload cannot be stored in the URL storage.");
              } else {
                (0, _logger.log)("Calculated fingerprint: ".concat(fingerprint));
              }

              _this2._fingerprint = fingerprint;

              if (_this2._source) {
                return _this2._source;
              } else {
                return _this2.options.fileReader.openFile(file, _this2.options.chunkSize);
              }
            }).then(function (source) {
              _this2._source = source; // If the upload was configured to use multiple requests or if we resume from
              // an upload which used multiple requests, we start a parallel upload.

              if (_this2.options.parallelUploads > 1 || _this2._parallelUploadUrls != null) {
                _this2._startParallelUpload();
              } else {
                _this2._startSingleUpload();
              }
            })["catch"](function (err) {
              _this2._emitError(err);
            });
          }
          /**
           * Initiate the uploading procedure for a parallelized upload, where one file is split into
           * multiple request which are run in parallel.
           *
           * @api private
           */

        }, {
          key: "_startParallelUpload",
          value: function _startParallelUpload() {
            var _this3 = this;

            var totalSize = this._size = this._source.size;
            var totalProgress = 0;
            this._parallelUploads = [];
            var partCount = this._parallelUploadUrls != null ? this._parallelUploadUrls.length : this.options.parallelUploads; // The input file will be split into multiple slices which are uploaded in separate
            // requests. Here we generate the start and end position for the slices.

            var parts = splitSizeIntoParts(this._source.size, partCount, this._parallelUploadUrls); // Create an empty list for storing the upload URLs

            this._parallelUploadUrls = new Array(parts.length); // Generate a promise for each slice that will be resolve if the respective
            // upload is completed.

            var uploads = parts.map(function (part, index) {
              var lastPartProgress = 0;
              return _this3._source.slice(part.start, part.end).then(function (_ref) {
                var value = _ref.value;
                return new Promise(function (resolve, reject) {
                  // Merge with the user supplied options but overwrite some values.
                  var options = _objectSpread({}, _this3.options, {
                    // If available, the partial upload should be resumed from a previous URL.
                    uploadUrl: part.uploadUrl || null,
                    // We take manually care of resuming for partial uploads, so they should
                    // not be stored in the URL storage.
                    storeFingerprintForResuming: false,
                    removeFingerprintOnSuccess: false,
                    // Reset the parallelUploads option to not cause recursion.
                    parallelUploads: 1,
                    metadata: {},
                    // Add the header to indicate the this is a partial upload.
                    headers: _objectSpread({}, _this3.options.headers, {
                      "Upload-Concat": "partial"
                    }),
                    // Reject or resolve the promise if the upload errors or completes.
                    onSuccess: resolve,
                    onError: reject,
                    // Based in the progress for this partial upload, calculate the progress
                    // for the entire final upload.
                    onProgress: function onProgress(newPartProgress) {
                      totalProgress = totalProgress - lastPartProgress + newPartProgress;
                      lastPartProgress = newPartProgress;

                      _this3._emitProgress(totalProgress, totalSize);
                    },
                    // Wait until every partial upload has an upload URL, so we can add
                    // them to the URL storage.
                    _onUploadUrlAvailable: function _onUploadUrlAvailable() {
                      _this3._parallelUploadUrls[index] = upload.url; // Test if all uploads have received an URL

                      if (_this3._parallelUploadUrls.filter(function (u) {
                        return !!u;
                      }).length === parts.length) {
                        _this3._saveUploadInUrlStorage();
                      }
                    }
                  });

                  var upload = new BaseUpload(value, options);
                  upload.start(); // Store the upload in an array, so we can later abort them if necessary.

                  _this3._parallelUploads.push(upload);
                });
              });
            });
            var req; // Wait until all partial uploads are finished and we can send the POST request for
            // creating the final upload.

            Promise.all(uploads).then(function () {
              req = _this3._openRequest("POST", _this3.options.endpoint);
              req.setHeader("Upload-Concat", "final;".concat(_this3._parallelUploadUrls.join(" "))); // Add metadata if values have been added

              var metadata = encodeMetadata(_this3.options.metadata);

              if (metadata !== "") {
                req.setHeader("Upload-Metadata", metadata);
              }

              return _this3._sendRequest(req, null);
            }).then(function (res) {
              if (!inStatusCategory(res.getStatus(), 200)) {
                _this3._emitHttpError(req, res, "tus: unexpected response while creating upload");

                return;
              }

              var location = res.getHeader("Location");

              if (location == null) {
                _this3._emitHttpError(req, res, "tus: invalid or missing Location header");

                return;
              }

              _this3.url = resolveUrl(_this3.options.endpoint, location);
              (0, _logger.log)("Created upload at ".concat(_this3.url));

              _this3._emitSuccess();
            })["catch"](function (err) {
              _this3._emitError(err);
            });
          }
          /**
           * Initiate the uploading procedure for a non-parallel upload. Here the entire file is
           * uploaded in a sequential matter.
           *
           * @api private
           */

        }, {
          key: "_startSingleUpload",
          value: function _startSingleUpload() {
            // First, we look at the uploadLengthDeferred option.
            // Next, we check if the caller has supplied a manual upload size.
            // Finally, we try to use the calculated size from the source object.
            if (this.options.uploadLengthDeferred) {
              this._size = null;
            } else if (this.options.uploadSize != null) {
              this._size = +this.options.uploadSize;

              if (isNaN(this._size)) {
                this._emitError(new Error("tus: cannot convert `uploadSize` option into a number"));

                return;
              }
            } else {
              this._size = this._source.size;

              if (this._size == null) {
                this._emitError(new Error("tus: cannot automatically derive upload's size from input and must be specified manually using the `uploadSize` option"));

                return;
              }
            } // Reset the aborted flag when the upload is started or else the
            // _performUpload will stop before sending a request if the upload has been
            // aborted previously.


            this._aborted = false; // The upload had been started previously and we should reuse this URL.

            if (this.url != null) {
              (0, _logger.log)("Resuming upload from previous URL: ".concat(this.url));

              this._resumeUpload();

              return;
            } // A URL has manually been specified, so we try to resume


            if (this.options.uploadUrl != null) {
              (0, _logger.log)("Resuming upload from provided URL: ".concat(this.options.url));
              this.url = this.options.uploadUrl;

              this._resumeUpload();

              return;
            } // An upload has not started for the file yet, so we start a new one


            (0, _logger.log)("Creating a new upload");

            this._createUpload();
          }
          /**
           * Abort any running request and stop the current upload. After abort is called, no event
           * handler will be invoked anymore. You can use the `start` method to resume the upload
           * again.
           * If `shouldTerminate` is true, the `terminate` function will be called to remove the
           * current upload from the server.
           *
           * @param {boolean} shouldTerminate True if the upload should be deleted from the server.
           * @return {Promise} The Promise will be resolved/rejected when the requests finish.
           */

        }, {
          key: "abort",
          value: function abort(shouldTerminate, cb) {
            var _this4 = this;

            if (typeof cb === "function") {
              throw new Error("tus: the abort function does not accept a callback since v2 anymore; please use the returned Promise instead");
            } // Stop any parallel partial uploads, that have been started in _startParallelUploads.


            if (this._parallelUploads != null) {
              this._parallelUploads.forEach(function (upload) {
                upload.abort(shouldTerminate);
              });
            } // Stop any current running request.


            if (this._req !== null) {
              this._req.abort();

              this._source.close();
            }

            this._aborted = true; // Stop any timeout used for initiating a retry.

            if (this._retryTimeout != null) {
              clearTimeout(this._retryTimeout);
              this._retryTimeout = null;
            }

            if (!shouldTerminate || this.url == null) {
              return Promise.resolve();
            }

            return BaseUpload.terminate(this.url, this.options) // Remove entry from the URL storage since the upload URL is no longer valid.
            .then(function () {
              return _this4._removeFromUrlStorage();
            });
          }
        }, {
          key: "_emitHttpError",
          value: function _emitHttpError(req, res, message, causingErr) {
            this._emitError(new _error.default(message, causingErr, req, res));
          }
        }, {
          key: "_emitError",
          value: function _emitError(err) {
            var _this5 = this; // Do not emit errors, e.g. from aborted HTTP requests, if the upload has been stopped.


            if (this._aborted) return; // Check if we should retry, when enabled, before sending the error to the user.

            if (this.options.retryDelays != null) {
              // We will reset the attempt counter if
              // - we were already able to connect to the server (offset != null) and
              // - we were able to upload a small chunk of data to the server
              var shouldResetDelays = this._offset != null && this._offset > this._offsetBeforeRetry;

              if (shouldResetDelays) {
                this._retryAttempt = 0;
              }

              if (shouldRetry(err, this._retryAttempt, this.options)) {
                var delay = this.options.retryDelays[this._retryAttempt++];
                this._offsetBeforeRetry = this._offset;
                this._retryTimeout = setTimeout(function () {
                  _this5.start();
                }, delay);
                return;
              }
            }

            if (typeof this.options.onError === "function") {
              this.options.onError(err);
            } else {
              throw err;
            }
          }
          /**
           * Publishes notification if the upload has been successfully completed.
           *
           * @api private
           */

        }, {
          key: "_emitSuccess",
          value: function _emitSuccess() {
            if (this.options.removeFingerprintOnSuccess) {
              // Remove stored fingerprint and corresponding endpoint. This causes
              // new uploads of the same file to be treated as a different file.
              this._removeFromUrlStorage();
            }

            if (typeof this.options.onSuccess === "function") {
              this.options.onSuccess();
            }
          }
          /**
           * Publishes notification when data has been sent to the server. This
           * data may not have been accepted by the server yet.
           *
           * @param {number} bytesSent  Number of bytes sent to the server.
           * @param {number} bytesTotal Total number of bytes to be sent to the server.
           * @api private
           */

        }, {
          key: "_emitProgress",
          value: function _emitProgress(bytesSent, bytesTotal) {
            if (typeof this.options.onProgress === "function") {
              this.options.onProgress(bytesSent, bytesTotal);
            }
          }
          /**
           * Publishes notification when a chunk of data has been sent to the server
           * and accepted by the server.
           * @param {number} chunkSize  Size of the chunk that was accepted by the server.
           * @param {number} bytesAccepted Total number of bytes that have been
           *                                accepted by the server.
           * @param {number} bytesTotal Total number of bytes to be sent to the server.
           * @api private
           */

        }, {
          key: "_emitChunkComplete",
          value: function _emitChunkComplete(chunkSize, bytesAccepted, bytesTotal) {
            if (typeof this.options.onChunkComplete === "function") {
              this.options.onChunkComplete(chunkSize, bytesAccepted, bytesTotal);
            }
          }
          /**
           * Create a new upload using the creation extension by sending a POST
           * request to the endpoint. After successful creation the file will be
           * uploaded
           *
           * @api private
           */

        }, {
          key: "_createUpload",
          value: function _createUpload() {
            var _this6 = this;

            if (!this.options.endpoint) {
              this._emitError(new Error("tus: unable to create upload because no endpoint is provided"));

              return;
            }

            var req = this._openRequest("POST", this.options.endpoint);

            if (this.options.uploadLengthDeferred) {
              req.setHeader("Upload-Defer-Length", 1);
            } else {
              req.setHeader("Upload-Length", this._size);
            } // Add metadata if values have been added


            var metadata = encodeMetadata(this.options.metadata);

            if (metadata !== "") {
              req.setHeader("Upload-Metadata", metadata);
            }

            var promise;

            if (this.options.uploadDataDuringCreation && !this.options.uploadLengthDeferred) {
              this._offset = 0;
              promise = this._addChunkToRequest(req);
            } else {
              promise = this._sendRequest(req, null);
            }

            promise.then(function (res) {
              if (!inStatusCategory(res.getStatus(), 200)) {
                _this6._emitHttpError(req, res, "tus: unexpected response while creating upload");

                return;
              }

              var location = res.getHeader("Location");

              if (location == null) {
                _this6._emitHttpError(req, res, "tus: invalid or missing Location header");

                return;
              }

              _this6.url = resolveUrl(_this6.options.endpoint, location);
              (0, _logger.log)("Created upload at ".concat(_this6.url));

              if (typeof _this6.options._onUploadUrlAvailable === "function") {
                _this6.options._onUploadUrlAvailable();
              }

              if (_this6._size === 0) {
                // Nothing to upload and file was successfully created
                _this6._emitSuccess();

                _this6._source.close();

                return;
              }

              _this6._saveUploadInUrlStorage();

              if (_this6.options.uploadDataDuringCreation) {
                _this6._handleUploadResponse(req, res);
              } else {
                _this6._offset = 0;

                _this6._performUpload();
              }
            })["catch"](function (err) {
              _this6._emitHttpError(req, null, "tus: failed to create upload", err);
            });
          }
          /*
           * Try to resume an existing upload. First a HEAD request will be sent
           * to retrieve the offset. If the request fails a new upload will be
           * created. In the case of a successful response the file will be uploaded.
           *
           * @api private
           */

        }, {
          key: "_resumeUpload",
          value: function _resumeUpload() {
            var _this7 = this;

            var req = this._openRequest("HEAD", this.url);

            var promise = this._sendRequest(req, null);

            promise.then(function (res) {
              var status = res.getStatus();

              if (!inStatusCategory(status, 200)) {
                if (inStatusCategory(status, 400)) {
                  // Remove stored fingerprint and corresponding endpoint,
                  // on client errors since the file can not be found
                  _this7._removeFromUrlStorage();
                } // If the upload is locked (indicated by the 423 Locked status code), we
                // emit an error instead of directly starting a new upload. This way the
                // retry logic can catch the error and will retry the upload. An upload
                // is usually locked for a short period of time and will be available
                // afterwards.


                if (status === 423) {
                  _this7._emitHttpError(req, res, "tus: upload is currently locked; retry later");

                  return;
                }

                if (!_this7.options.endpoint) {
                  // Don't attempt to create a new upload if no endpoint is provided.
                  _this7._emitHttpError(req, res, "tus: unable to resume upload (new upload cannot be created without an endpoint)");

                  return;
                } // Try to create a new upload


                _this7.url = null;

                _this7._createUpload();

                return;
              }

              var offset = parseInt(res.getHeader("Upload-Offset"), 10);

              if (isNaN(offset)) {
                _this7._emitHttpError(req, res, "tus: invalid or missing offset value");

                return;
              }

              var length = parseInt(res.getHeader("Upload-Length"), 10);

              if (isNaN(length) && !_this7.options.uploadLengthDeferred) {
                _this7._emitHttpError(req, res, "tus: invalid or missing length value");

                return;
              }

              if (typeof _this7.options._onUploadUrlAvailable === "function") {
                _this7.options._onUploadUrlAvailable();
              } // Upload has already been completed and we do not need to send additional
              // data to the server


              if (offset === length) {
                _this7._emitProgress(length, length);

                _this7._emitSuccess();

                return;
              }

              _this7._offset = offset;

              _this7._performUpload();
            })["catch"](function (err) {
              _this7._emitHttpError(req, null, "tus: failed to resume upload", err);
            });
          }
          /**
           * Start uploading the file using PATCH requests. The file will be divided
           * into chunks as specified in the chunkSize option. During the upload
           * the onProgress event handler may be invoked multiple times.
           *
           * @api private
           */

        }, {
          key: "_performUpload",
          value: function _performUpload() {
            var _this8 = this; // If the upload has been aborted, we will not send the next PATCH request.
            // This is important if the abort method was called during a callback, such
            // as onChunkComplete or onProgress.


            if (this._aborted) {
              return;
            }

            var req; // Some browser and servers may not support the PATCH method. For those
            // cases, you can tell tus-js-client to use a POST request with the
            // X-HTTP-Method-Override header for simulating a PATCH request.

            if (this.options.overridePatchMethod) {
              req = this._openRequest("POST", this.url);
              req.setHeader("X-HTTP-Method-Override", "PATCH");
            } else {
              req = this._openRequest("PATCH", this.url);
            }

            req.setHeader("Upload-Offset", this._offset);

            var promise = this._addChunkToRequest(req);

            promise.then(function (res) {
              if (!inStatusCategory(res.getStatus(), 200)) {
                _this8._emitHttpError(req, res, "tus: unexpected response while uploading chunk");

                return;
              }

              _this8._handleUploadResponse(req, res);
            })["catch"](function (err) {
              // Don't emit an error if the upload was aborted manually
              if (_this8._aborted) {
                return;
              }

              _this8._emitHttpError(req, null, "tus: failed to upload chunk at offset " + _this8._offset, err);
            });
          }
          /**
           * _addChunktoRequest reads a chunk from the source and sends it using the
           * supplied request object. It will not handle the response.
           *
           * @api private
           */

        }, {
          key: "_addChunkToRequest",
          value: function _addChunkToRequest(req) {
            var _this9 = this;

            var start = this._offset;
            var end = this._offset + this.options.chunkSize;
            req.setProgressHandler(function (bytesSent) {
              _this9._emitProgress(start + bytesSent, _this9._size);
            });
            req.setHeader("Content-Type", "application/offset+octet-stream"); // The specified chunkSize may be Infinity or the calcluated end position
            // may exceed the file's size. In both cases, we limit the end position to
            // the input's total size for simpler calculations and correctness.

            if ((end === Infinity || end > this._size) && !this.options.uploadLengthDeferred) {
              end = this._size;
            }

            return this._source.slice(start, end).then(function (_ref2) {
              var value = _ref2.value,
                  done = _ref2.done; // If the upload length is deferred, the upload size was not specified during
              // upload creation. So, if the file reader is done reading, we know the total
              // upload size and can tell the tus server.

              if (_this9.options.uploadLengthDeferred && done) {
                _this9._size = _this9._offset + (value && value.size ? value.size : 0);
                req.setHeader("Upload-Length", _this9._size);
              }

              if (value === null) {
                return _this9._sendRequest(req);
              } else {
                _this9._emitProgress(_this9._offset, _this9._size);

                return _this9._sendRequest(req, value);
              }
            });
          }
          /**
           * _handleUploadResponse is used by requests that haven been sent using _addChunkToRequest
           * and already have received a response.
           *
           * @api private
           */

        }, {
          key: "_handleUploadResponse",
          value: function _handleUploadResponse(req, res) {
            var offset = parseInt(res.getHeader("Upload-Offset"), 10);

            if (isNaN(offset)) {
              this._emitHttpError(req, res, "tus: invalid or missing offset value");

              return;
            }

            this._emitProgress(offset, this._size);

            this._emitChunkComplete(offset - this._offset, offset, this._size);

            this._offset = offset;

            if (offset == this._size) {
              // Yay, finally done :)
              this._emitSuccess();

              this._source.close();

              return;
            }

            this._performUpload();
          }
          /**
           * Create a new HTTP request object with the given method and URL.
           *
           * @api private
           */

        }, {
          key: "_openRequest",
          value: function _openRequest(method, url) {
            var req = openRequest(method, url, this.options);
            this._req = req;
            return req;
          }
          /**
           * Remove the entry in the URL storage, if it has been saved before.
           *
           * @api private
           */

        }, {
          key: "_removeFromUrlStorage",
          value: function _removeFromUrlStorage() {
            var _this10 = this;

            if (!this._urlStorageKey) return;

            this._urlStorage.removeUpload(this._urlStorageKey)["catch"](function (err) {
              _this10._emitError(err);
            });

            this._urlStorageKey = null;
          }
          /**
           * Add the upload URL to the URL storage, if possible.
           *
           * @api private
           */

        }, {
          key: "_saveUploadInUrlStorage",
          value: function _saveUploadInUrlStorage() {
            var _this11 = this; // Only if a fingerprint was calculated for the input (i.e. not a stream), we can store the upload URL.


            if (!this.options.storeFingerprintForResuming || !this._fingerprint) {
              return;
            }

            var storedUpload = {
              size: this._size,
              metadata: this.options.metadata,
              creationTime: new Date().toString()
            };

            if (this._parallelUploads) {
              // Save multiple URLs if the parallelUploads option is used ...
              storedUpload.parallelUploadUrls = this._parallelUploadUrls;
            } else {
              // ... otherwise we just save the one available URL.
              storedUpload.uploadUrl = this.url;
            }

            this._urlStorage.addUpload(this._fingerprint, storedUpload).then(function (urlStorageKey) {
              return _this11._urlStorageKey = urlStorageKey;
            })["catch"](function (err) {
              _this11._emitError(err);
            });
          }
          /**
           * Send a request with the provided body while invoking the onBeforeRequest
           * and onAfterResponse callbacks.
           *
           * @api private
           */

        }, {
          key: "_sendRequest",
          value: function _sendRequest(req) {
            var _this12 = this;

            var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

            if (typeof this.options.onBeforeRequest === "function") {
              this.options.onBeforeRequest(req);
            }

            return req.send(body).then(function (res) {
              if (typeof _this12.options.onAfterResponse === "function") {
                _this12.options.onAfterResponse(req, res);
              }

              return res;
            });
          }
        }], [{
          key: "terminate",
          value: function terminate(url) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var cb = arguments.length > 2 ? arguments[2] : undefined;

            if (typeof options === "function" || typeof cb === "function") {
              throw new Error("tus: the terminate function does not accept a callback since v2 anymore; please use the returned Promise instead");
            }

            var req = openRequest("DELETE", url, options);
            var promise = req.send();
            return promise.then(function (res) {
              // A 204 response indicates a successfull request
              if (res.getStatus() === 204) {
                return;
              }

              throw new _error.default("tus: unexpected response while terminating upload", null, req, res);
            })["catch"](function (err) {
              if (!(err instanceof _error.default)) {
                err = new _error.default("tus: failed to terminate upload", err, req, null);
              }

              if (!shouldRetry(err, 0, options)) {
                throw err;
              } // Instead of keeping track of the retry attempts, we remove the first element from the delays
              // array. If the array is empty, all retry attempts are used up and we will bubble up the error.
              // We recursively call the terminate function will removing elements from the retryDelays array.


              var delay = options.retryDelays[0];
              var remainingDelays = options.retryDelays.slice(1);

              var newOptions = _objectSpread({}, options, {
                retryDelays: remainingDelays
              });

              return new Promise(function (resolve) {
                return setTimeout(resolve, delay);
              }).then(function () {
                return BaseUpload.terminate(url, newOptions);
              });
            });
          }
        }]);

        return BaseUpload;
      }();

      function encodeMetadata(metadata) {
        var encoded = [];

        for (var key in metadata) {
          encoded.push(key + " " + _jsBase.Base64.encode(metadata[key]));
        }

        return encoded.join(",");
      }
      /**
       * Checks whether a given status is in the range of the expected category.
       * For example, only a status between 200 and 299 will satisfy the category 200.
       *
       * @api private
       */


      function inStatusCategory(status, category) {
        return status >= category && status < category + 100;
      }
      /**
       * Create a new HTTP request with the specified method and URL.
       * The necessary headers that are included in every request
       * will be added, including the request ID.
       *
       * @api private
       */


      function openRequest(method, url, options) {
        var req = options.httpStack.createRequest(method, url);
        req.setHeader("Tus-Resumable", "1.0.0");
        var headers = options.headers || {};

        for (var name in headers) {
          req.setHeader(name, headers[name]);
        }

        if (options.addRequestId) {
          var requestId = (0, _uuid.default)();
          req.setHeader("X-Request-ID", requestId);
        }

        return req;
      }
      /**
       * Checks whether the browser running this code has internet access.
       * This function will always return true in the node.js environment
       *
       * @api private
       */


      function isOnline() {
        var online = true;

        if (typeof window !== "undefined" && "navigator" in window && window.navigator.onLine === false) {
          online = false;
        }

        return online;
      }
      /**
       * Checks whether or not it is ok to retry a request.
       * @param {Error} err the error returned from the last request
       * @param {number} retryAttempt the number of times the request has already been retried
       * @param {object} options tus Upload options
       *
       * @api private
       */


      function shouldRetry(err, retryAttempt, options) {
        // We only attempt a retry if
        // - retryDelays option is set
        // - we didn't exceed the maxium number of retries, yet, and
        // - this error was caused by a request or it's response and
        // - the error is server error (i.e. no a status 4xx or a 409 or 423) and
        // - the browser does not indicate that we are offline
        var status = err.originalResponse ? err.originalResponse.getStatus() : 0;
        var isServerError = !inStatusCategory(status, 400) || status === 409 || status === 423;
        return options.retryDelays != null && retryAttempt < options.retryDelays.length && err.originalRequest != null && isServerError && isOnline();
      }
      /**
       * Resolve a relative link given the origin as source. For example,
       * if a HTTP request to http://example.com/files/ returns a Location
       * header with the value /upload/abc, the resolved URL will be:
       * http://example.com/upload/abc
       */


      function resolveUrl(origin, link) {
        return new _urlParse.default(link, origin).toString();
      }
      /**
       * Calculate the start and end positions for the parts if an upload
       * is split into multiple parallel requests.
       *
       * @param {number} totalSize The byte size of the upload, which will be split.
       * @param {number} partCount The number in how many parts the upload will be split.
       * @param {string[]} previousUrls The upload URLs for previous parts.
       * @return {object[]}
       * @api private
       */


      function splitSizeIntoParts(totalSize, partCount, previousUrls) {
        var partSize = Math.floor(totalSize / partCount);
        var parts = [];

        for (var i = 0; i < partCount; i++) {
          parts.push({
            start: partSize * i,
            end: partSize * (i + 1)
          });
        }

        parts[partCount - 1].end = totalSize; // Attach URLs from previous uploads, if available.

        if (previousUrls) {
          parts.forEach(function (part, index) {
            part.uploadUrl = previousUrls[index] || null;
          });
        }

        return parts;
      }

      BaseUpload.defaultOptions = defaultOptions;
      var _default = BaseUpload;
      exports.default = _default;
    }, {
      "./error": 618,
      "./logger": 619,
      "./uuid": 622,
      "js-base64": 585,
      "url-parse": 623
    }],
    622: [function (require, module, exports) {
      "use strict";

      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = uuid;
      /**
       * Generate a UUID v4 based on random numbers. We intentioanlly use the less
       * secure Math.random function here since the more secure crypto.getRandomNumbers
       * is not available on all platforms.
       * This is not a problem for us since we use the UUID only for generating a
       * request ID, so we can correlate server logs to client errors.
       *
       * This function is taken from following site:
       * https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript
       *
       * @return {string} The generate UUID
       */

      function uuid() {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
          var r = Math.random() * 16 | 0,
              v = c == "x" ? r : r & 0x3 | 0x8;
          return v.toString(16);
        });
      }
    }, {}],
    623: [function (require, module, exports) {
      (function (global) {
        (function () {
          'use strict';

          var required = require('requires-port'),
              qs = require('querystringify'),
              slashes = /^[A-Za-z][A-Za-z0-9+-.]*:[\\/]+/,
              protocolre = /^([a-z][a-z0-9.+-]*:)?([\\/]{1,})?([\S\s]*)/i,
              whitespace = "[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]",
              left = new RegExp('^' + whitespace + '+');
          /**
           * Trim a given string.
           *
           * @param {String} str String to trim.
           * @public
           */


          function trimLeft(str) {
            return (str ? str : '').toString().replace(left, '');
          }
          /**
           * These are the parse rules for the URL parser, it informs the parser
           * about:
           *
           * 0. The char it Needs to parse, if it's a string it should be done using
           *    indexOf, RegExp using exec and NaN means set as current value.
           * 1. The property we should set when parsing this value.
           * 2. Indication if it's backwards or forward parsing, when set as number it's
           *    the value of extra chars that should be split off.
           * 3. Inherit from location if non existing in the parser.
           * 4. `toLowerCase` the resulting value.
           */


          var rules = [['#', 'hash'], // Extract from the back.
          ['?', 'query'], // Extract from the back.
          function sanitize(address) {
            // Sanitize what is left of the address
            return address.replace('\\', '/');
          }, ['/', 'pathname'], // Extract from the back.
          ['@', 'auth', 1], // Extract from the front.
          [NaN, 'host', undefined, 1, 1], // Set left over value.
          [/:(\d+)$/, 'port', undefined, 1], // RegExp the back.
          [NaN, 'hostname', undefined, 1, 1] // Set left over.
          ];
          /**
           * These properties should not be copied or inherited from. This is only needed
           * for all non blob URL's as a blob URL does not include a hash, only the
           * origin.
           *
           * @type {Object}
           * @private
           */

          var ignore = {
            hash: 1,
            query: 1
          };
          /**
           * The location object differs when your code is loaded through a normal page,
           * Worker or through a worker using a blob. And with the blobble begins the
           * trouble as the location object will contain the URL of the blob, not the
           * location of the page where our code is loaded in. The actual origin is
           * encoded in the `pathname` so we can thankfully generate a good "default"
           * location from it so we can generate proper relative URL's again.
           *
           * @param {Object|String} loc Optional default location object.
           * @returns {Object} lolcation object.
           * @public
           */

          function lolcation(loc) {
            var globalVar;
            if (typeof window !== 'undefined') globalVar = window;else if (typeof global !== 'undefined') globalVar = global;else if (typeof self !== 'undefined') globalVar = self;else globalVar = {};
            var location = globalVar.location || {};
            loc = loc || location;
            var finaldestination = {},
                type = typeof loc,
                key;

            if ('blob:' === loc.protocol) {
              finaldestination = new Url(unescape(loc.pathname), {});
            } else if ('string' === type) {
              finaldestination = new Url(loc, {});

              for (key in ignore) {
                delete finaldestination[key];
              }
            } else if ('object' === type) {
              for (key in loc) {
                if (key in ignore) continue;
                finaldestination[key] = loc[key];
              }

              if (finaldestination.slashes === undefined) {
                finaldestination.slashes = slashes.test(loc.href);
              }
            }

            return finaldestination;
          }
          /**
           * @typedef ProtocolExtract
           * @type Object
           * @property {String} protocol Protocol matched in the URL, in lowercase.
           * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
           * @property {String} rest Rest of the URL that is not part of the protocol.
           */

          /**
           * Extract protocol information from a URL with/without double slash ("//").
           *
           * @param {String} address URL we want to extract from.
           * @return {ProtocolExtract} Extracted information.
           * @private
           */


          function extractProtocol(address) {
            address = trimLeft(address);
            var match = protocolre.exec(address),
                protocol = match[1] ? match[1].toLowerCase() : '',
                slashes = !!(match[2] && match[2].length >= 2),
                rest = match[2] && match[2].length === 1 ? '/' + match[3] : match[3];
            return {
              protocol: protocol,
              slashes: slashes,
              rest: rest
            };
          }
          /**
           * Resolve a relative URL pathname against a base URL pathname.
           *
           * @param {String} relative Pathname of the relative URL.
           * @param {String} base Pathname of the base URL.
           * @return {String} Resolved pathname.
           * @private
           */


          function resolve(relative, base) {
            if (relative === '') return base;
            var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/')),
                i = path.length,
                last = path[i - 1],
                unshift = false,
                up = 0;

            while (i--) {
              if (path[i] === '.') {
                path.splice(i, 1);
              } else if (path[i] === '..') {
                path.splice(i, 1);
                up++;
              } else if (up) {
                if (i === 0) unshift = true;
                path.splice(i, 1);
                up--;
              }
            }

            if (unshift) path.unshift('');
            if (last === '.' || last === '..') path.push('');
            return path.join('/');
          }
          /**
           * The actual URL instance. Instead of returning an object we've opted-in to
           * create an actual constructor as it's much more memory efficient and
           * faster and it pleases my OCD.
           *
           * It is worth noting that we should not use `URL` as class name to prevent
           * clashes with the global URL instance that got introduced in browsers.
           *
           * @constructor
           * @param {String} address URL we want to parse.
           * @param {Object|String} [location] Location defaults for relative paths.
           * @param {Boolean|Function} [parser] Parser for the query string.
           * @private
           */


          function Url(address, location, parser) {
            address = trimLeft(address);

            if (!(this instanceof Url)) {
              return new Url(address, location, parser);
            }

            var relative,
                extracted,
                parse,
                instruction,
                index,
                key,
                instructions = rules.slice(),
                type = typeof location,
                url = this,
                i = 0; //
            // The following if statements allows this module two have compatibility with
            // 2 different API:
            //
            // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
            //    where the boolean indicates that the query string should also be parsed.
            //
            // 2. The `URL` interface of the browser which accepts a URL, object as
            //    arguments. The supplied object will be used as default values / fall-back
            //    for relative paths.
            //

            if ('object' !== type && 'string' !== type) {
              parser = location;
              location = null;
            }

            if (parser && 'function' !== typeof parser) parser = qs.parse;
            location = lolcation(location); //
            // Extract protocol information before running the instructions.
            //

            extracted = extractProtocol(address || '');
            relative = !extracted.protocol && !extracted.slashes;
            url.slashes = extracted.slashes || relative && location.slashes;
            url.protocol = extracted.protocol || location.protocol || '';
            address = extracted.rest; //
            // When the authority component is absent the URL starts with a path
            // component.
            //

            if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];

            for (; i < instructions.length; i++) {
              instruction = instructions[i];

              if (typeof instruction === 'function') {
                address = instruction(address);
                continue;
              }

              parse = instruction[0];
              key = instruction[1];

              if (parse !== parse) {
                url[key] = address;
              } else if ('string' === typeof parse) {
                if (~(index = address.indexOf(parse))) {
                  if ('number' === typeof instruction[2]) {
                    url[key] = address.slice(0, index);
                    address = address.slice(index + instruction[2]);
                  } else {
                    url[key] = address.slice(index);
                    address = address.slice(0, index);
                  }
                }
              } else if (index = parse.exec(address)) {
                url[key] = index[1];
                address = address.slice(0, index.index);
              }

              url[key] = url[key] || (relative && instruction[3] ? location[key] || '' : ''); //
              // Hostname, host and protocol should be lowercased so they can be used to
              // create a proper `origin`.
              //

              if (instruction[4]) url[key] = url[key].toLowerCase();
            } //
            // Also parse the supplied query string in to an object. If we're supplied
            // with a custom parser as function use that instead of the default build-in
            // parser.
            //


            if (parser) url.query = parser(url.query); //
            // If the URL is relative, resolve the pathname against the base URL.
            //

            if (relative && location.slashes && url.pathname.charAt(0) !== '/' && (url.pathname !== '' || location.pathname !== '')) {
              url.pathname = resolve(url.pathname, location.pathname);
            } //
            // Default to a / for pathname if none exists. This normalizes the URL
            // to always have a /
            //


            if (url.pathname.charAt(0) !== '/' && url.hostname) {
              url.pathname = '/' + url.pathname;
            } //
            // We should not add port numbers if they are already the default port number
            // for a given protocol. As the host also contains the port number we're going
            // override it with the hostname which contains no port number.
            //


            if (!required(url.port, url.protocol)) {
              url.host = url.hostname;
              url.port = '';
            } //
            // Parse down the `auth` for the username and password.
            //


            url.username = url.password = '';

            if (url.auth) {
              instruction = url.auth.split(':');
              url.username = instruction[0] || '';
              url.password = instruction[1] || '';
            }

            url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null'; //
            // The href is just the compiled result.
            //

            url.href = url.toString();
          }
          /**
           * This is convenience method for changing properties in the URL instance to
           * insure that they all propagate correctly.
           *
           * @param {String} part          Property we need to adjust.
           * @param {Mixed} value          The newly assigned value.
           * @param {Boolean|Function} fn  When setting the query, it will be the function
           *                               used to parse the query.
           *                               When setting the protocol, double slash will be
           *                               removed from the final url if it is true.
           * @returns {URL} URL instance for chaining.
           * @public
           */


          function set(part, value, fn) {
            var url = this;

            switch (part) {
              case 'query':
                if ('string' === typeof value && value.length) {
                  value = (fn || qs.parse)(value);
                }

                url[part] = value;
                break;

              case 'port':
                url[part] = value;

                if (!required(value, url.protocol)) {
                  url.host = url.hostname;
                  url[part] = '';
                } else if (value) {
                  url.host = url.hostname + ':' + value;
                }

                break;

              case 'hostname':
                url[part] = value;
                if (url.port) value += ':' + url.port;
                url.host = value;
                break;

              case 'host':
                url[part] = value;

                if (/:\d+$/.test(value)) {
                  value = value.split(':');
                  url.port = value.pop();
                  url.hostname = value.join(':');
                } else {
                  url.hostname = value;
                  url.port = '';
                }

                break;

              case 'protocol':
                url.protocol = value.toLowerCase();
                url.slashes = !fn;
                break;

              case 'pathname':
              case 'hash':
                if (value) {
                  var char = part === 'pathname' ? '/' : '#';
                  url[part] = value.charAt(0) !== char ? char + value : value;
                } else {
                  url[part] = value;
                }

                break;

              default:
                url[part] = value;
            }

            for (var i = 0; i < rules.length; i++) {
              var ins = rules[i];
              if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
            }

            url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null';
            url.href = url.toString();
            return url;
          }
          /**
           * Transform the properties back in to a valid and full URL string.
           *
           * @param {Function} stringify Optional query stringify function.
           * @returns {String} Compiled version of the URL.
           * @public
           */


          function toString(stringify) {
            if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;
            var query,
                url = this,
                protocol = url.protocol;
            if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';
            var result = protocol + (url.slashes ? '//' : '');

            if (url.username) {
              result += url.username;
              if (url.password) result += ':' + url.password;
              result += '@';
            }

            result += url.host + url.pathname;
            query = 'object' === typeof url.query ? stringify(url.query) : url.query;
            if (query) result += '?' !== query.charAt(0) ? '?' + query : query;
            if (url.hash) result += url.hash;
            return result;
          }

          Url.prototype = {
            set: set,
            toString: toString
          }; //
          // Expose the URL parser and some additional properties that might be useful for
          // others or testing.
          //

          Url.extractProtocol = extractProtocol;
          Url.location = lolcation;
          Url.trimLeft = trimLeft;
          Url.qs = qs;
          module.exports = Url;
        }).call(this);
      }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
    }, {
      "querystringify": 597,
      "requires-port": 598
    }],
    624: [function (require, module, exports) {
      (function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.WHATWGFetch = {});
      })(this, function (exports) {
        'use strict';

        var global = typeof globalThis !== 'undefined' && globalThis || typeof self !== 'undefined' && self || typeof global !== 'undefined' && global;
        var support = {
          searchParams: 'URLSearchParams' in global,
          iterable: 'Symbol' in global && 'iterator' in Symbol,
          blob: 'FileReader' in global && 'Blob' in global && function () {
            try {
              new Blob();
              return true;
            } catch (e) {
              return false;
            }
          }(),
          formData: 'FormData' in global,
          arrayBuffer: 'ArrayBuffer' in global
        };

        function isDataView(obj) {
          return obj && DataView.prototype.isPrototypeOf(obj);
        }

        if (support.arrayBuffer) {
          var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

          var isArrayBufferView = ArrayBuffer.isView || function (obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
          };
        }

        function normalizeName(name) {
          if (typeof name !== 'string') {
            name = String(name);
          }

          if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
            throw new TypeError('Invalid character in header field name: "' + name + '"');
          }

          return name.toLowerCase();
        }

        function normalizeValue(value) {
          if (typeof value !== 'string') {
            value = String(value);
          }

          return value;
        } // Build a destructive iterator for the value list


        function iteratorFor(items) {
          var iterator = {
            next: function next() {
              var value = items.shift();
              return {
                done: value === undefined,
                value: value
              };
            }
          };

          if (support.iterable) {
            iterator[Symbol.iterator] = function () {
              return iterator;
            };
          }

          return iterator;
        }

        function Headers(headers) {
          this.map = {};

          if (headers instanceof Headers) {
            headers.forEach(function (value, name) {
              this.append(name, value);
            }, this);
          } else if (Array.isArray(headers)) {
            headers.forEach(function (header) {
              this.append(header[0], header[1]);
            }, this);
          } else if (headers) {
            Object.getOwnPropertyNames(headers).forEach(function (name) {
              this.append(name, headers[name]);
            }, this);
          }
        }

        Headers.prototype.append = function (name, value) {
          name = normalizeName(name);
          value = normalizeValue(value);
          var oldValue = this.map[name];
          this.map[name] = oldValue ? oldValue + ', ' + value : value;
        };

        Headers.prototype['delete'] = function (name) {
          delete this.map[normalizeName(name)];
        };

        Headers.prototype.get = function (name) {
          name = normalizeName(name);
          return this.has(name) ? this.map[name] : null;
        };

        Headers.prototype.has = function (name) {
          return this.map.hasOwnProperty(normalizeName(name));
        };

        Headers.prototype.set = function (name, value) {
          this.map[normalizeName(name)] = normalizeValue(value);
        };

        Headers.prototype.forEach = function (callback, thisArg) {
          for (var name in this.map) {
            if (this.map.hasOwnProperty(name)) {
              callback.call(thisArg, this.map[name], name, this);
            }
          }
        };

        Headers.prototype.keys = function () {
          var items = [];
          this.forEach(function (value, name) {
            items.push(name);
          });
          return iteratorFor(items);
        };

        Headers.prototype.values = function () {
          var items = [];
          this.forEach(function (value) {
            items.push(value);
          });
          return iteratorFor(items);
        };

        Headers.prototype.entries = function () {
          var items = [];
          this.forEach(function (value, name) {
            items.push([name, value]);
          });
          return iteratorFor(items);
        };

        if (support.iterable) {
          Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
        }

        function consumed(body) {
          if (body.bodyUsed) {
            return Promise.reject(new TypeError('Already read'));
          }

          body.bodyUsed = true;
        }

        function fileReaderReady(reader) {
          return new Promise(function (resolve, reject) {
            reader.onload = function () {
              resolve(reader.result);
            };

            reader.onerror = function () {
              reject(reader.error);
            };
          });
        }

        function readBlobAsArrayBuffer(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsArrayBuffer(blob);
          return promise;
        }

        function readBlobAsText(blob) {
          var reader = new FileReader();
          var promise = fileReaderReady(reader);
          reader.readAsText(blob);
          return promise;
        }

        function readArrayBufferAsText(buf) {
          var view = new Uint8Array(buf);
          var chars = new Array(view.length);

          for (var i = 0; i < view.length; i++) {
            chars[i] = String.fromCharCode(view[i]);
          }

          return chars.join('');
        }

        function bufferClone(buf) {
          if (buf.slice) {
            return buf.slice(0);
          } else {
            var view = new Uint8Array(buf.byteLength);
            view.set(new Uint8Array(buf));
            return view.buffer;
          }
        }

        function Body() {
          this.bodyUsed = false;

          this._initBody = function (body) {
            /*
              fetch-mock wraps the Response object in an ES6 Proxy to
              provide useful test harness features such as flush. However, on
              ES5 browsers without fetch or Proxy support pollyfills must be used;
              the proxy-pollyfill is unable to proxy an attribute unless it exists
              on the object before the Proxy is created. This change ensures
              Response.bodyUsed exists on the instance, while maintaining the
              semantic of setting Request.bodyUsed in the constructor before
              _initBody is called.
            */
            this.bodyUsed = this.bodyUsed;
            this._bodyInit = body;

            if (!body) {
              this._bodyText = '';
            } else if (typeof body === 'string') {
              this._bodyText = body;
            } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
              this._bodyBlob = body;
            } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
              this._bodyFormData = body;
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this._bodyText = body.toString();
            } else if (support.arrayBuffer && support.blob && isDataView(body)) {
              this._bodyArrayBuffer = bufferClone(body.buffer); // IE 10-11 can't handle a DataView body.

              this._bodyInit = new Blob([this._bodyArrayBuffer]);
            } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
              this._bodyArrayBuffer = bufferClone(body);
            } else {
              this._bodyText = body = Object.prototype.toString.call(body);
            }

            if (!this.headers.get('content-type')) {
              if (typeof body === 'string') {
                this.headers.set('content-type', 'text/plain;charset=UTF-8');
              } else if (this._bodyBlob && this._bodyBlob.type) {
                this.headers.set('content-type', this._bodyBlob.type);
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
              }
            }
          };

          if (support.blob) {
            this.blob = function () {
              var rejected = consumed(this);

              if (rejected) {
                return rejected;
              }

              if (this._bodyBlob) {
                return Promise.resolve(this._bodyBlob);
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(new Blob([this._bodyArrayBuffer]));
              } else if (this._bodyFormData) {
                throw new Error('could not read FormData body as blob');
              } else {
                return Promise.resolve(new Blob([this._bodyText]));
              }
            };

            this.arrayBuffer = function () {
              if (this._bodyArrayBuffer) {
                var isConsumed = consumed(this);

                if (isConsumed) {
                  return isConsumed;
                }

                if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                  return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));
                } else {
                  return Promise.resolve(this._bodyArrayBuffer);
                }
              } else {
                return this.blob().then(readBlobAsArrayBuffer);
              }
            };
          }

          this.text = function () {
            var rejected = consumed(this);

            if (rejected) {
              return rejected;
            }

            if (this._bodyBlob) {
              return readBlobAsText(this._bodyBlob);
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
            } else if (this._bodyFormData) {
              throw new Error('could not read FormData body as text');
            } else {
              return Promise.resolve(this._bodyText);
            }
          };

          if (support.formData) {
            this.formData = function () {
              return this.text().then(decode);
            };
          }

          this.json = function () {
            return this.text().then(JSON.parse);
          };

          return this;
        } // HTTP methods whose capitalization should be normalized


        var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

        function normalizeMethod(method) {
          var upcased = method.toUpperCase();
          return methods.indexOf(upcased) > -1 ? upcased : method;
        }

        function Request(input, options) {
          if (!(this instanceof Request)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }

          options = options || {};
          var body = options.body;

          if (input instanceof Request) {
            if (input.bodyUsed) {
              throw new TypeError('Already read');
            }

            this.url = input.url;
            this.credentials = input.credentials;

            if (!options.headers) {
              this.headers = new Headers(input.headers);
            }

            this.method = input.method;
            this.mode = input.mode;
            this.signal = input.signal;

            if (!body && input._bodyInit != null) {
              body = input._bodyInit;
              input.bodyUsed = true;
            }
          } else {
            this.url = String(input);
          }

          this.credentials = options.credentials || this.credentials || 'same-origin';

          if (options.headers || !this.headers) {
            this.headers = new Headers(options.headers);
          }

          this.method = normalizeMethod(options.method || this.method || 'GET');
          this.mode = options.mode || this.mode || null;
          this.signal = options.signal || this.signal;
          this.referrer = null;

          if ((this.method === 'GET' || this.method === 'HEAD') && body) {
            throw new TypeError('Body not allowed for GET or HEAD requests');
          }

          this._initBody(body);

          if (this.method === 'GET' || this.method === 'HEAD') {
            if (options.cache === 'no-store' || options.cache === 'no-cache') {
              // Search for a '_' parameter in the query string
              var reParamSearch = /([?&])_=[^&]*/;

              if (reParamSearch.test(this.url)) {
                // If it already exists then set the value with the current time
                this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
              } else {
                // Otherwise add a new '_' parameter to the end with the current time
                var reQueryString = /\?/;
                this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
              }
            }
          }
        }

        Request.prototype.clone = function () {
          return new Request(this, {
            body: this._bodyInit
          });
        };

        function decode(body) {
          var form = new FormData();
          body.trim().split('&').forEach(function (bytes) {
            if (bytes) {
              var split = bytes.split('=');
              var name = split.shift().replace(/\+/g, ' ');
              var value = split.join('=').replace(/\+/g, ' ');
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
          return form;
        }

        function parseHeaders(rawHeaders) {
          var headers = new Headers(); // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
          // https://tools.ietf.org/html/rfc7230#section-3.2

          var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' '); // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
          // https://github.com/github/fetch/issues/748
          // https://github.com/zloirock/core-js/issues/751

          preProcessedHeaders.split('\r').map(function (header) {
            return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header;
          }).forEach(function (line) {
            var parts = line.split(':');
            var key = parts.shift().trim();

            if (key) {
              var value = parts.join(':').trim();
              headers.append(key, value);
            }
          });
          return headers;
        }

        Body.call(Request.prototype);

        function Response(bodyInit, options) {
          if (!(this instanceof Response)) {
            throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
          }

          if (!options) {
            options = {};
          }

          this.type = 'default';
          this.status = options.status === undefined ? 200 : options.status;
          this.ok = this.status >= 200 && this.status < 300;
          this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
          this.headers = new Headers(options.headers);
          this.url = options.url || '';

          this._initBody(bodyInit);
        }

        Body.call(Response.prototype);

        Response.prototype.clone = function () {
          return new Response(this._bodyInit, {
            status: this.status,
            statusText: this.statusText,
            headers: new Headers(this.headers),
            url: this.url
          });
        };

        Response.error = function () {
          var response = new Response(null, {
            status: 0,
            statusText: ''
          });
          response.type = 'error';
          return response;
        };

        var redirectStatuses = [301, 302, 303, 307, 308];

        Response.redirect = function (url, status) {
          if (redirectStatuses.indexOf(status) === -1) {
            throw new RangeError('Invalid status code');
          }

          return new Response(null, {
            status: status,
            headers: {
              location: url
            }
          });
        };

        exports.DOMException = global.DOMException;

        try {
          new exports.DOMException();
        } catch (err) {
          exports.DOMException = function (message, name) {
            this.message = message;
            this.name = name;
            var error = Error(message);
            this.stack = error.stack;
          };

          exports.DOMException.prototype = Object.create(Error.prototype);
          exports.DOMException.prototype.constructor = exports.DOMException;
        }

        function fetch(input, init) {
          return new Promise(function (resolve, reject) {
            var request = new Request(input, init);

            if (request.signal && request.signal.aborted) {
              return reject(new exports.DOMException('Aborted', 'AbortError'));
            }

            var xhr = new XMLHttpRequest();

            function abortXhr() {
              xhr.abort();
            }

            xhr.onload = function () {
              var options = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || '')
              };
              options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
              var body = 'response' in xhr ? xhr.response : xhr.responseText;
              setTimeout(function () {
                resolve(new Response(body, options));
              }, 0);
            };

            xhr.onerror = function () {
              setTimeout(function () {
                reject(new TypeError('Network request failed'));
              }, 0);
            };

            xhr.ontimeout = function () {
              setTimeout(function () {
                reject(new TypeError('Network request failed'));
              }, 0);
            };

            xhr.onabort = function () {
              setTimeout(function () {
                reject(new exports.DOMException('Aborted', 'AbortError'));
              }, 0);
            };

            function fixUrl(url) {
              try {
                return url === '' && global.location.href ? global.location.href : url;
              } catch (e) {
                return url;
              }
            }

            xhr.open(request.method, fixUrl(request.url), true);

            if (request.credentials === 'include') {
              xhr.withCredentials = true;
            } else if (request.credentials === 'omit') {
              xhr.withCredentials = false;
            }

            if ('responseType' in xhr) {
              if (support.blob) {
                xhr.responseType = 'blob';
              } else if (support.arrayBuffer && request.headers.get('Content-Type') && request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1) {
                xhr.responseType = 'arraybuffer';
              }
            }

            if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {
              Object.getOwnPropertyNames(init.headers).forEach(function (name) {
                xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
              });
            } else {
              request.headers.forEach(function (value, name) {
                xhr.setRequestHeader(name, value);
              });
            }

            if (request.signal) {
              request.signal.addEventListener('abort', abortXhr);

              xhr.onreadystatechange = function () {
                // DONE (success or failure)
                if (xhr.readyState === 4) {
                  request.signal.removeEventListener('abort', abortXhr);
                }
              };
            }

            xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
          });
        }

        fetch.polyfill = true;

        if (!global.fetch) {
          global.fetch = fetch;
          global.Headers = Headers;
          global.Request = Request;
          global.Response = Response;
        }

        exports.Headers = Headers;
        exports.Request = Request;
        exports.Response = Response;
        exports.fetch = fetch;
        Object.defineProperty(exports, '__esModule', {
          value: true
        });
      });
    }, {}],
    625: [function (require, module, exports) {
      /* jshint node: true */
      'use strict';
      /**
        # wildcard
      
        Very simple wildcard matching, which is designed to provide the same
        functionality that is found in the
        [eve](https://github.com/adobe-webplatform/eve) eventing library.
      
        ## Usage
      
        It works with strings:
      
        <<< examples/strings.js
      
        Arrays:
      
        <<< examples/arrays.js
      
        Objects (matching against keys):
      
        <<< examples/objects.js
      
        While the library works in Node, if you are are looking for file-based
        wildcard matching then you should have a look at:
      
        <https://github.com/isaacs/node-glob>
      **/

      function WildcardMatcher(text, separator) {
        this.text = text = text || '';
        this.hasWild = ~text.indexOf('*');
        this.separator = separator;
        this.parts = text.split(separator);
      }

      WildcardMatcher.prototype.match = function (input) {
        var matches = true;
        var parts = this.parts;
        var ii;
        var partsCount = parts.length;
        var testParts;

        if (typeof input == 'string' || input instanceof String) {
          if (!this.hasWild && this.text != input) {
            matches = false;
          } else {
            testParts = (input || '').split(this.separator);

            for (ii = 0; matches && ii < partsCount; ii++) {
              if (parts[ii] === '*') {
                continue;
              } else if (ii < testParts.length) {
                matches = parts[ii] === testParts[ii];
              } else {
                matches = false;
              }
            } // If matches, then return the component parts


            matches = matches && testParts;
          }
        } else if (typeof input.splice == 'function') {
          matches = [];

          for (ii = input.length; ii--;) {
            if (this.match(input[ii])) {
              matches[matches.length] = input[ii];
            }
          }
        } else if (typeof input == 'object') {
          matches = {};

          for (var key in input) {
            if (this.match(key)) {
              matches[key] = input[key];
            }
          }
        }

        return matches;
      };

      module.exports = function (text, test, separator) {
        var matcher = new WildcardMatcher(text, separator || /[\/\.]/);

        if (typeof test != 'undefined') {
          return matcher.match(test);
        }

        return matcher;
      };
    }, {}],
    626: [function (require, module, exports) {
      'use strict';

      var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''),
          length = 64,
          map = {},
          seed = 0,
          i = 0,
          prev;
      /**
       * Return a string representing the specified number.
       *
       * @param {Number} num The number to convert.
       * @returns {String} The string representation of the number.
       * @api public
       */

      function encode(num) {
        var encoded = '';

        do {
          encoded = alphabet[num % length] + encoded;
          num = Math.floor(num / length);
        } while (num > 0);

        return encoded;
      }
      /**
       * Return the integer value specified by the given string.
       *
       * @param {String} str The string to convert.
       * @returns {Number} The integer value represented by the string.
       * @api public
       */


      function decode(str) {
        var decoded = 0;

        for (i = 0; i < str.length; i++) {
          decoded = decoded * length + map[str.charAt(i)];
        }

        return decoded;
      }
      /**
       * Yeast: A tiny growing id generator.
       *
       * @returns {String} A unique id.
       * @api public
       */


      function yeast() {
        var now = encode(+new Date());
        if (now !== prev) return seed = 0, prev = now;
        return now + '.' + encode(seed++);
      } //
      // Map each character to its index.
      //


      for (; i < length; i++) {
        map[alphabet[i]] = i;
      } //
      // Expose the `yeast`, `encode` and `decode` functions.
      //


      yeast.encode = encode;
      yeast.decode = decode;
      module.exports = yeast;
    }, {}],
    627: [function (require, module, exports) {
      "use strict";

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }

      var _require6 = require('@uppy/utils/lib/AbortController'),
          AbortController = _require6.AbortController,
          createAbortError = _require6.createAbortError;

      var delay = require('@uppy/utils/lib/delay');

      var MB = 1024 * 1024;
      var defaultOptions = {
        limit: 1,
        retryDelays: [0, 1000, 3000, 5000],
        getChunkSize: function getChunkSize(file) {
          return Math.ceil(file.size / 10000);
        },
        onStart: function onStart() {},
        onProgress: function onProgress() {},
        onPartComplete: function onPartComplete() {},
        onSuccess: function onSuccess() {},
        onError: function onError(err) {
          throw err;
        }
      };

      function ensureInt(value) {
        if (typeof value === 'string') {
          return parseInt(value, 10);
        }

        if (typeof value === 'number') {
          return value;
        }

        throw new TypeError('Expected a number');
      }

      var _aborted = /*#__PURE__*/_classPrivateFieldLooseKey("aborted");

      var _initChunks = /*#__PURE__*/_classPrivateFieldLooseKey("initChunks");

      var _createUpload = /*#__PURE__*/_classPrivateFieldLooseKey("createUpload");

      var _resumeUpload = /*#__PURE__*/_classPrivateFieldLooseKey("resumeUpload");

      var _uploadParts = /*#__PURE__*/_classPrivateFieldLooseKey("uploadParts");

      var _retryable = /*#__PURE__*/_classPrivateFieldLooseKey("retryable");

      var _prepareUploadParts = /*#__PURE__*/_classPrivateFieldLooseKey("prepareUploadParts");

      var _uploadPartRetryable = /*#__PURE__*/_classPrivateFieldLooseKey("uploadPartRetryable");

      var _uploadPart = /*#__PURE__*/_classPrivateFieldLooseKey("uploadPart");

      var _onPartProgress = /*#__PURE__*/_classPrivateFieldLooseKey("onPartProgress");

      var _onPartComplete = /*#__PURE__*/_classPrivateFieldLooseKey("onPartComplete");

      var _uploadPartBytes = /*#__PURE__*/_classPrivateFieldLooseKey("uploadPartBytes");

      var _completeUpload = /*#__PURE__*/_classPrivateFieldLooseKey("completeUpload");

      var _abortUpload = /*#__PURE__*/_classPrivateFieldLooseKey("abortUpload");

      var _onError = /*#__PURE__*/_classPrivateFieldLooseKey("onError");

      var MultipartUploader = /*#__PURE__*/function () {
        function MultipartUploader(file, options) {
          Object.defineProperty(this, _onError, {
            value: _onError2
          });
          Object.defineProperty(this, _abortUpload, {
            value: _abortUpload2
          });
          Object.defineProperty(this, _completeUpload, {
            value: _completeUpload2
          });
          Object.defineProperty(this, _uploadPartBytes, {
            value: _uploadPartBytes2
          });
          Object.defineProperty(this, _onPartComplete, {
            value: _onPartComplete2
          });
          Object.defineProperty(this, _onPartProgress, {
            value: _onPartProgress2
          });
          Object.defineProperty(this, _uploadPart, {
            value: _uploadPart2
          });
          Object.defineProperty(this, _uploadPartRetryable, {
            value: _uploadPartRetryable2
          });
          Object.defineProperty(this, _prepareUploadParts, {
            value: _prepareUploadParts2
          });
          Object.defineProperty(this, _retryable, {
            value: _retryable2
          });
          Object.defineProperty(this, _uploadParts, {
            value: _uploadParts2
          });
          Object.defineProperty(this, _resumeUpload, {
            value: _resumeUpload2
          });
          Object.defineProperty(this, _createUpload, {
            value: _createUpload2
          });
          Object.defineProperty(this, _initChunks, {
            value: _initChunks2
          });
          Object.defineProperty(this, _aborted, {
            value: _aborted2
          });
          this.options = Object.assign({}, defaultOptions, options); // Use default `getChunkSize` if it was null or something

          if (!this.options.getChunkSize) {
            this.options.getChunkSize = defaultOptions.getChunkSize;
          }

          this.file = file;
          this.abortController = new AbortController();
          this.key = this.options.key || null;
          this.uploadId = this.options.uploadId || null;
          this.parts = []; // Do `this.createdPromise.then(OP)` to execute an operation `OP` _only_ if the
          // upload was created already. That also ensures that the sequencing is right
          // (so the `OP` definitely happens if the upload is created).
          //
          // This mostly exists to make `#abortUpload` work well: only sending the abort request if
          // the upload was already created, and if the createMultipartUpload request is still in flight,
          // aborting it immediately after it finishes.

          this.createdPromise = Promise.reject(); // eslint-disable-line prefer-promise-reject-errors

          this.isPaused = false;
          this.partsInProgress = 0;
          this.chunks = null;
          this.chunkState = null;
          this.lockedCandidatesForBatch = [];

          _classPrivateFieldLooseBase(this, _initChunks)[_initChunks]();

          this.createdPromise.catch(function () {}); // silence uncaught rejection warning
        }
        /**
         * Was this upload aborted?
         *
         * If yes, we may need to throw an AbortError.
         *
         * @returns {boolean}
         */


        var _proto14 = MultipartUploader.prototype;

        _proto14.start = function start() {
          this.isPaused = false;

          if (this.uploadId) {
            _classPrivateFieldLooseBase(this, _resumeUpload)[_resumeUpload]();
          } else {
            _classPrivateFieldLooseBase(this, _createUpload)[_createUpload]();
          }
        };

        _proto14.pause = function pause() {
          this.abortController.abort(); // Swap it out for a new controller, because this instance may be resumed later.

          this.abortController = new AbortController();
          this.isPaused = true;
        };

        _proto14.abort = function abort(opts) {
          if (opts === void 0) {
            opts = undefined;
          }

          if (opts != null && opts.really) _classPrivateFieldLooseBase(this, _abortUpload)[_abortUpload]();else this.pause();
        };

        return MultipartUploader;
      }();

      function _aborted2() {
        return this.abortController.signal.aborted;
      }

      function _initChunks2() {
        var chunks = [];
        var desiredChunkSize = this.options.getChunkSize(this.file); // at least 5MB per request, at most 10k requests

        var minChunkSize = Math.max(5 * MB, Math.ceil(this.file.size / 10000));
        var chunkSize = Math.max(desiredChunkSize, minChunkSize); // Upload zero-sized files in one zero-sized chunk

        if (this.file.size === 0) {
          chunks.push(this.file);
        } else {
          for (var i = 0; i < this.file.size; i += chunkSize) {
            var end = Math.min(this.file.size, i + chunkSize);
            chunks.push(this.file.slice(i, end));
          }
        }

        this.chunks = chunks;
        this.chunkState = chunks.map(function () {
          return {
            uploaded: 0,
            busy: false,
            done: false
          };
        });
      }

      function _createUpload2() {
        var _this41 = this;

        this.createdPromise = Promise.resolve().then(function () {
          return _this41.options.createMultipartUpload();
        });
        return this.createdPromise.then(function (result) {
          if (_classPrivateFieldLooseBase(_this41, _aborted)[_aborted]()) throw createAbortError();
          var valid = typeof result === 'object' && result && typeof result.uploadId === 'string' && typeof result.key === 'string';

          if (!valid) {
            throw new TypeError('AwsS3/Multipart: Got incorrect result from `createMultipartUpload()`, expected an object `{ uploadId, key }`.');
          }

          _this41.key = result.key;
          _this41.uploadId = result.uploadId;

          _this41.options.onStart(result);

          _classPrivateFieldLooseBase(_this41, _uploadParts)[_uploadParts]();
        }).catch(function (err) {
          _classPrivateFieldLooseBase(_this41, _onError)[_onError](err);
        });
      }

      function _resumeUpload2() {
        return _resumeUpload3.apply(this, arguments);
      }

      function _resumeUpload3() {
        _resumeUpload3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _this47 = this;

          var parts;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;
                  _context.next = 3;
                  return this.options.listParts({
                    uploadId: this.uploadId,
                    key: this.key
                  });

                case 3:
                  parts = _context.sent;

                  if (!_classPrivateFieldLooseBase(this, _aborted)[_aborted]()) {
                    _context.next = 6;
                    break;
                  }

                  throw createAbortError();

                case 6:
                  parts.forEach(function (part) {
                    var i = part.PartNumber - 1;
                    _this47.chunkState[i] = {
                      uploaded: ensureInt(part.Size),
                      etag: part.ETag,
                      done: true
                    }; // Only add if we did not yet know about this part.

                    if (!_this47.parts.some(function (p) {
                      return p.PartNumber === part.PartNumber;
                    })) {
                      _this47.parts.push({
                        PartNumber: part.PartNumber,
                        ETag: part.ETag
                      });
                    }
                  });

                  _classPrivateFieldLooseBase(this, _uploadParts)[_uploadParts]();

                  _context.next = 13;
                  break;

                case 10:
                  _context.prev = 10;
                  _context.t0 = _context["catch"](0);

                  _classPrivateFieldLooseBase(this, _onError)[_onError](_context.t0);

                case 13:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this, [[0, 10]]);
        }));
        return _resumeUpload3.apply(this, arguments);
      }

      function _uploadParts2() {
        var _this42 = this;

        if (this.isPaused) return; // All parts are uploaded.

        if (this.chunkState.every(function (state) {
          return state.done;
        })) {
          _classPrivateFieldLooseBase(this, _completeUpload)[_completeUpload]();

          return;
        } // For a 100MB file, with the default min chunk size of 5MB and a limit of 10:
        //
        // Total 20 parts
        // ---------
        // Need 1 is 10
        // Need 2 is 5
        // Need 3 is 5


        var need = this.options.limit - this.partsInProgress;
        var completeChunks = this.chunkState.filter(function (state) {
          return state.done;
        }).length;
        var remainingChunks = this.chunks.length - completeChunks;
        var minNeeded = Math.ceil(this.options.limit / 2);

        if (minNeeded > remainingChunks) {
          minNeeded = remainingChunks;
        }

        if (need < minNeeded) return;
        var candidates = [];

        for (var i = 0; i < this.chunkState.length; i++) {
          // eslint-disable-next-line no-continue
          if (this.lockedCandidatesForBatch.includes(i)) continue;
          var state = this.chunkState[i]; // eslint-disable-next-line no-continue

          if (state.done || state.busy) continue;
          candidates.push(i);

          if (candidates.length >= need) {
            break;
          }
        }

        if (candidates.length === 0) return;

        _classPrivateFieldLooseBase(this, _prepareUploadParts)[_prepareUploadParts](candidates).then(function (result) {
          candidates.forEach(function (index) {
            var partNumber = index + 1;
            var prePreparedPart = {
              url: result.presignedUrls[partNumber],
              headers: result.headers
            };

            _classPrivateFieldLooseBase(_this42, _uploadPartRetryable)[_uploadPartRetryable](index, prePreparedPart).then(function () {
              _classPrivateFieldLooseBase(_this42, _uploadParts)[_uploadParts]();
            }, function (err) {
              _classPrivateFieldLooseBase(_this42, _onError)[_onError](err);
            });
          });
        });
      }

      function _retryable2(_ref10) {
        var _this43 = this;

        var before = _ref10.before,
            attempt = _ref10.attempt,
            after = _ref10.after;
        var retryDelays = this.options.retryDelays;
        var signal = this.abortController.signal;
        if (before) before();

        function shouldRetry(err) {
          if (err.source && typeof err.source.status === 'number') {
            var status = err.source.status; // 0 probably indicates network failure

            return status === 0 || status === 409 || status === 423 || status >= 500 && status < 600;
          }

          return false;
        }

        var doAttempt = function doAttempt(retryAttempt) {
          return attempt().catch(function (err) {
            if (_classPrivateFieldLooseBase(_this43, _aborted)[_aborted]()) throw createAbortError();

            if (shouldRetry(err) && retryAttempt < retryDelays.length) {
              return delay(retryDelays[retryAttempt], {
                signal: signal
              }).then(function () {
                return doAttempt(retryAttempt + 1);
              });
            }

            throw err;
          });
        };

        return doAttempt(0).then(function (result) {
          if (after) after();
          return result;
        }, function (err) {
          if (after) after();
          throw err;
        });
      }

      function _prepareUploadParts2(_x) {
        return _prepareUploadParts3.apply(this, arguments);
      }

      function _prepareUploadParts3() {
        _prepareUploadParts3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(candidates) {
          var _this$lockedCandidate;

          var result, valid;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  (_this$lockedCandidate = this.lockedCandidatesForBatch).push.apply(_this$lockedCandidate, candidates);

                  _context2.next = 3;
                  return this.options.prepareUploadParts({
                    key: this.key,
                    uploadId: this.uploadId,
                    partNumbers: candidates.map(function (index) {
                      return index + 1;
                    })
                  });

                case 3:
                  result = _context2.sent;
                  valid = typeof (result == null ? void 0 : result.presignedUrls) === 'object';

                  if (valid) {
                    _context2.next = 7;
                    break;
                  }

                  throw new TypeError('AwsS3/Multipart: Got incorrect result from `prepareUploadParts()`, expected an object `{ presignedUrls }`.');

                case 7:
                  return _context2.abrupt("return", result);

                case 8:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));
        return _prepareUploadParts3.apply(this, arguments);
      }

      function _uploadPartRetryable2(index, prePreparedPart) {
        var _this44 = this;

        return _classPrivateFieldLooseBase(this, _retryable)[_retryable]({
          before: function before() {
            _this44.partsInProgress += 1;
          },
          attempt: function attempt() {
            return _classPrivateFieldLooseBase(_this44, _uploadPart)[_uploadPart](index, prePreparedPart);
          },
          after: function after() {
            _this44.partsInProgress -= 1;
          }
        });
      }

      function _uploadPart2(index, prePreparedPart) {
        this.chunkState[index].busy = true;
        var valid = typeof (prePreparedPart == null ? void 0 : prePreparedPart.url) === 'string';

        if (!valid) {
          throw new TypeError('AwsS3/Multipart: Got incorrect result for `prePreparedPart`, expected an object `{ url }`.');
        }

        var url = prePreparedPart.url,
            headers = prePreparedPart.headers;

        if (_classPrivateFieldLooseBase(this, _aborted)[_aborted]()) {
          this.chunkState[index].busy = false;
          throw createAbortError();
        }

        return _classPrivateFieldLooseBase(this, _uploadPartBytes)[_uploadPartBytes](index, url, headers);
      }

      function _onPartProgress2(index, sent) {
        this.chunkState[index].uploaded = ensureInt(sent);
        var totalUploaded = this.chunkState.reduce(function (n, c) {
          return n + c.uploaded;
        }, 0);
        this.options.onProgress(totalUploaded, this.file.size);
      }

      function _onPartComplete2(index, etag) {
        this.chunkState[index].etag = etag;
        this.chunkState[index].done = true;
        var part = {
          PartNumber: index + 1,
          ETag: etag
        };
        this.parts.push(part);
        this.options.onPartComplete(part);
      }

      function _uploadPartBytes2(index, url, headers) {
        var _this45 = this;

        var body = this.chunks[index];
        var signal = this.abortController.signal;
        var defer;
        var promise = new Promise(function (resolve, reject) {
          defer = {
            resolve: resolve,
            reject: reject
          };
        });
        var xhr = new XMLHttpRequest();
        xhr.open('PUT', url, true);

        if (headers) {
          Object.keys(headers).forEach(function (key) {
            xhr.setRequestHeader(key, headers[key]);
          });
        }

        xhr.responseType = 'text';

        function cleanup() {
          // eslint-disable-next-line no-use-before-define
          signal.removeEventListener('abort', onabort);
        }

        function onabort() {
          xhr.abort();
        }

        signal.addEventListener('abort', onabort);
        xhr.upload.addEventListener('progress', function (ev) {
          if (!ev.lengthComputable) return;

          _classPrivateFieldLooseBase(_this45, _onPartProgress)[_onPartProgress](index, ev.loaded, ev.total);
        });
        xhr.addEventListener('abort', function () {
          cleanup();
          _this45.chunkState[index].busy = false;
          defer.reject(createAbortError());
        });
        xhr.addEventListener('load', function (ev) {
          cleanup();
          _this45.chunkState[index].busy = false;

          if (ev.target.status < 200 || ev.target.status >= 300) {
            var error = new Error('Non 2xx');
            error.source = ev.target;
            defer.reject(error);
            return;
          } // This avoids the net::ERR_OUT_OF_MEMORY in Chromium Browsers.


          _this45.chunks[index] = null;

          _classPrivateFieldLooseBase(_this45, _onPartProgress)[_onPartProgress](index, body.size, body.size); // NOTE This must be allowed by CORS.


          var etag = ev.target.getResponseHeader('ETag');

          if (etag === null) {
            defer.reject(new Error('AwsS3/Multipart: Could not read the ETag header. This likely means CORS is not configured correctly on the S3 Bucket. See https://uppy.io/docs/aws-s3-multipart#S3-Bucket-Configuration for instructions.'));
            return;
          }

          _classPrivateFieldLooseBase(_this45, _onPartComplete)[_onPartComplete](index, etag);

          defer.resolve();
        });
        xhr.addEventListener('error', function (ev) {
          cleanup();
          _this45.chunkState[index].busy = false;
          var error = new Error('Unknown error');
          error.source = ev.target;
          defer.reject(error);
        });
        xhr.send(body);
        return promise;
      }

      function _completeUpload2() {
        return _completeUpload3.apply(this, arguments);
      }

      function _completeUpload3() {
        _completeUpload3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
          var result;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  // Parts may not have completed uploading in sorted order, if limit > 1.
                  this.parts.sort(function (a, b) {
                    return a.PartNumber - b.PartNumber;
                  });
                  _context3.prev = 1;
                  _context3.next = 4;
                  return this.options.completeMultipartUpload({
                    key: this.key,
                    uploadId: this.uploadId,
                    parts: this.parts
                  });

                case 4:
                  result = _context3.sent;
                  this.options.onSuccess(result);
                  _context3.next = 11;
                  break;

                case 8:
                  _context3.prev = 8;
                  _context3.t0 = _context3["catch"](1);

                  _classPrivateFieldLooseBase(this, _onError)[_onError](_context3.t0);

                case 11:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this, [[1, 8]]);
        }));
        return _completeUpload3.apply(this, arguments);
      }

      function _abortUpload2() {
        var _this46 = this;

        this.abortController.abort();
        this.createdPromise.then(function () {
          _this46.options.abortMultipartUpload({
            key: _this46.key,
            uploadId: _this46.uploadId
          });
        }, function () {// if the creation failed we do not need to abort
        });
      }

      function _onError2(err) {
        if (err && err.name === 'AbortError') {
          return;
        }

        this.options.onError(err);
      }

      module.exports = MultipartUploader;
    }, {
      "@uppy/utils/lib/AbortController": 745,
      "@uppy/utils/lib/delay": 754
    }],
    628: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var _require7 = require('@uppy/core'),
          BasePlugin = _require7.BasePlugin;

      var _require8 = require('@uppy/companion-client'),
          Socket = _require8.Socket,
          Provider = _require8.Provider,
          RequestClient = _require8.RequestClient;

      var EventTracker = require('@uppy/utils/lib/EventTracker');

      var emitSocketProgress = require('@uppy/utils/lib/emitSocketProgress');

      var getSocketHost = require('@uppy/utils/lib/getSocketHost');

      var _require9 = require('@uppy/utils/lib/RateLimitedQueue'),
          RateLimitedQueue = _require9.RateLimitedQueue;

      var Uploader = require('./MultipartUploader');

      function assertServerError(res) {
        if (res && res.error) {
          var error = new Error(res.message);
          Object.assign(error, res.error);
          throw error;
        }

        return res;
      }

      module.exports = (_temp = _class = /*#__PURE__*/function (_BasePlugin) {
        _inheritsLoose(AwsS3Multipart, _BasePlugin);

        function AwsS3Multipart(uppy, opts) {
          var _this48;

          _this48 = _BasePlugin.call(this, uppy, opts) || this;
          _this48.type = 'uploader';
          _this48.id = _this48.opts.id || 'AwsS3Multipart';
          _this48.title = 'AWS S3 Multipart';
          _this48.client = new RequestClient(uppy, opts);
          var defaultOptions = {
            timeout: 30 * 1000,
            limit: 0,
            retryDelays: [0, 1000, 3000, 5000],
            createMultipartUpload: _this48.createMultipartUpload.bind(_assertThisInitialized2(_this48)),
            listParts: _this48.listParts.bind(_assertThisInitialized2(_this48)),
            prepareUploadParts: _this48.prepareUploadParts.bind(_assertThisInitialized2(_this48)),
            abortMultipartUpload: _this48.abortMultipartUpload.bind(_assertThisInitialized2(_this48)),
            completeMultipartUpload: _this48.completeMultipartUpload.bind(_assertThisInitialized2(_this48))
          };
          _this48.opts = Object.assign({}, defaultOptions, opts);
          _this48.upload = _this48.upload.bind(_assertThisInitialized2(_this48));
          _this48.requests = new RateLimitedQueue(_this48.opts.limit);
          _this48.uploaders = Object.create(null);
          _this48.uploaderEvents = Object.create(null);
          _this48.uploaderSockets = Object.create(null);
          return _this48;
        }
        /**
         * Clean up all references for a file's upload: the MultipartUploader instance,
         * any events related to the file, and the Companion WebSocket connection.
         *
         * Set `opts.abort` to tell S3 that the multipart upload is cancelled and must be removed.
         * This should be done when the user cancels the upload, not when the upload is completed or errored.
         */


        var _proto15 = AwsS3Multipart.prototype;

        _proto15.resetUploaderReferences = function resetUploaderReferences(fileID, opts) {
          if (opts === void 0) {
            opts = {};
          }

          if (this.uploaders[fileID]) {
            this.uploaders[fileID].abort({
              really: opts.abort || false
            });
            this.uploaders[fileID] = null;
          }

          if (this.uploaderEvents[fileID]) {
            this.uploaderEvents[fileID].remove();
            this.uploaderEvents[fileID] = null;
          }

          if (this.uploaderSockets[fileID]) {
            this.uploaderSockets[fileID].close();
            this.uploaderSockets[fileID] = null;
          }
        };

        _proto15.assertHost = function assertHost(method) {
          if (!this.opts.companionUrl) {
            throw new Error("Expected a `companionUrl` option containing a Companion address, or if you are not using Companion, a custom `" + method + "` implementation.");
          }
        };

        _proto15.createMultipartUpload = function createMultipartUpload(file) {
          this.assertHost('createMultipartUpload');
          var metadata = {};
          Object.keys(file.meta).forEach(function (key) {
            if (file.meta[key] != null) {
              metadata[key] = file.meta[key].toString();
            }
          });
          return this.client.post('s3/multipart', {
            filename: file.name,
            type: file.type,
            metadata: metadata
          }).then(assertServerError);
        };

        _proto15.listParts = function listParts(file, _ref11) {
          var key = _ref11.key,
              uploadId = _ref11.uploadId;
          this.assertHost('listParts');
          var filename = encodeURIComponent(key);
          return this.client.get("s3/multipart/" + uploadId + "?key=" + filename).then(assertServerError);
        };

        _proto15.prepareUploadParts = function prepareUploadParts(file, _ref12) {
          var key = _ref12.key,
              uploadId = _ref12.uploadId,
              partNumbers = _ref12.partNumbers;
          this.assertHost('prepareUploadParts');
          var filename = encodeURIComponent(key);
          return this.client.get("s3/multipart/" + uploadId + "/batch?key=" + filename + "&partNumbers=" + partNumbers.join(',')).then(assertServerError);
        };

        _proto15.completeMultipartUpload = function completeMultipartUpload(file, _ref13) {
          var key = _ref13.key,
              uploadId = _ref13.uploadId,
              parts = _ref13.parts;
          this.assertHost('completeMultipartUpload');
          var filename = encodeURIComponent(key);
          var uploadIdEnc = encodeURIComponent(uploadId);
          return this.client.post("s3/multipart/" + uploadIdEnc + "/complete?key=" + filename, {
            parts: parts
          }).then(assertServerError);
        };

        _proto15.abortMultipartUpload = function abortMultipartUpload(file, _ref14) {
          var key = _ref14.key,
              uploadId = _ref14.uploadId;
          this.assertHost('abortMultipartUpload');
          var filename = encodeURIComponent(key);
          var uploadIdEnc = encodeURIComponent(uploadId);
          return this.client.delete("s3/multipart/" + uploadIdEnc + "?key=" + filename).then(assertServerError);
        };

        _proto15.uploadFile = function uploadFile(file) {
          var _this49 = this;

          return new Promise(function (resolve, reject) {
            var onStart = function onStart(data) {
              var cFile = _this49.uppy.getFile(file.id);

              _this49.uppy.setFileState(file.id, {
                s3Multipart: Object.assign({}, cFile.s3Multipart, {
                  key: data.key,
                  uploadId: data.uploadId
                })
              });
            };

            var onProgress = function onProgress(bytesUploaded, bytesTotal) {
              _this49.uppy.emit('upload-progress', file, {
                uploader: _this49,
                bytesUploaded: bytesUploaded,
                bytesTotal: bytesTotal
              });
            };

            var onError = function onError(err) {
              _this49.uppy.log(err);

              _this49.uppy.emit('upload-error', file, err);

              queuedRequest.done();

              _this49.resetUploaderReferences(file.id);

              reject(err);
            };

            var onSuccess = function onSuccess(result) {
              var uploadResp = {
                body: Object.assign({}, result),
                uploadURL: result.location
              };
              queuedRequest.done();

              _this49.resetUploaderReferences(file.id);

              var cFile = _this49.uppy.getFile(file.id);

              _this49.uppy.emit('upload-success', cFile || file, uploadResp);

              if (result.location) {
                _this49.uppy.log("Download " + upload.file.name + " from " + result.location);
              }

              resolve(upload);
            };

            var onPartComplete = function onPartComplete(part) {
              var cFile = _this49.uppy.getFile(file.id);

              if (!cFile) {
                return;
              }

              _this49.uppy.emit('s3-multipart:part-uploaded', cFile, part);
            };

            var upload = new Uploader(file.data, Object.assign({
              // .bind to pass the file object to each handler.
              createMultipartUpload: _this49.opts.createMultipartUpload.bind(_this49, file),
              listParts: _this49.opts.listParts.bind(_this49, file),
              prepareUploadParts: _this49.opts.prepareUploadParts.bind(_this49, file),
              completeMultipartUpload: _this49.opts.completeMultipartUpload.bind(_this49, file),
              abortMultipartUpload: _this49.opts.abortMultipartUpload.bind(_this49, file),
              getChunkSize: _this49.opts.getChunkSize ? _this49.opts.getChunkSize.bind(_this49) : null,
              onStart: onStart,
              onProgress: onProgress,
              onError: onError,
              onSuccess: onSuccess,
              onPartComplete: onPartComplete,
              limit: _this49.opts.limit || 5,
              retryDelays: _this49.opts.retryDelays || []
            }, file.s3Multipart));
            _this49.uploaders[file.id] = upload;
            _this49.uploaderEvents[file.id] = new EventTracker(_this49.uppy);

            var queuedRequest = _this49.requests.run(function () {
              if (!file.isPaused) {
                upload.start();
              } // Don't do anything here, the caller will take care of cancelling the upload itself
              // using resetUploaderReferences(). This is because resetUploaderReferences() has to be
              // called when this request is still in the queue, and has not been started yet, too. At
              // that point this cancellation function is not going to be called.


              return function () {};
            });

            _this49.onFileRemove(file.id, function (removed) {
              queuedRequest.abort();

              _this49.resetUploaderReferences(file.id, {
                abort: true
              });

              resolve("upload " + removed.id + " was removed");
            });

            _this49.onCancelAll(file.id, function () {
              queuedRequest.abort();

              _this49.resetUploaderReferences(file.id, {
                abort: true
              });

              resolve("upload " + file.id + " was canceled");
            });

            _this49.onFilePause(file.id, function (isPaused) {
              if (isPaused) {
                // Remove this file from the queue so another file can start in its place.
                queuedRequest.abort();
                upload.pause();
              } else {
                // Resuming an upload should be queued, else you could pause and then
                // resume a queued upload to make it skip the queue.
                queuedRequest.abort();
                queuedRequest = _this49.requests.run(function () {
                  upload.start();
                  return function () {};
                });
              }
            });

            _this49.onPauseAll(file.id, function () {
              queuedRequest.abort();
              upload.pause();
            });

            _this49.onResumeAll(file.id, function () {
              queuedRequest.abort();

              if (file.error) {
                upload.abort();
              }

              queuedRequest = _this49.requests.run(function () {
                upload.start();
                return function () {};
              });
            }); // Don't double-emit upload-started for Golden Retriever-restored files that were already started


            if (!file.progress.uploadStarted || !file.isRestored) {
              _this49.uppy.emit('upload-started', file);
            }
          });
        };

        _proto15.uploadRemote = function uploadRemote(file) {
          var _this50 = this;

          this.resetUploaderReferences(file.id); // Don't double-emit upload-started for Golden Retriever-restored files that were already started

          if (!file.progress.uploadStarted || !file.isRestored) {
            this.uppy.emit('upload-started', file);
          }

          if (file.serverToken) {
            return this.connectToServerSocket(file);
          }

          return new Promise(function (resolve, reject) {
            var Client = file.remote.providerOptions.provider ? Provider : RequestClient;
            var client = new Client(_this50.uppy, file.remote.providerOptions);
            client.post(file.remote.url, Object.assign({}, file.remote.body, {
              protocol: 's3-multipart',
              size: file.data.size,
              metadata: file.meta
            })).then(function (res) {
              _this50.uppy.setFileState(file.id, {
                serverToken: res.token
              });

              file = _this50.uppy.getFile(file.id);
              return file;
            }).then(function (file) {
              return _this50.connectToServerSocket(file);
            }).then(function () {
              resolve();
            }).catch(function (err) {
              _this50.uppy.emit('upload-error', file, err);

              reject(err);
            });
          });
        };

        _proto15.connectToServerSocket = function connectToServerSocket(file) {
          var _this51 = this;

          return new Promise(function (resolve, reject) {
            var token = file.serverToken;
            var host = getSocketHost(file.remote.companionUrl);
            var socket = new Socket({
              target: host + "/api/" + token,
              autoOpen: false
            });
            _this51.uploaderSockets[file.id] = socket;
            _this51.uploaderEvents[file.id] = new EventTracker(_this51.uppy);

            _this51.onFileRemove(file.id, function () {
              queuedRequest.abort();
              socket.send('pause', {});

              _this51.resetUploaderReferences(file.id, {
                abort: true
              });

              resolve("upload " + file.id + " was removed");
            });

            _this51.onFilePause(file.id, function (isPaused) {
              if (isPaused) {
                // Remove this file from the queue so another file can start in its place.
                queuedRequest.abort();
                socket.send('pause', {});
              } else {
                // Resuming an upload should be queued, else you could pause and then
                // resume a queued upload to make it skip the queue.
                queuedRequest.abort();
                queuedRequest = _this51.requests.run(function () {
                  socket.send('resume', {});
                  return function () {};
                });
              }
            });

            _this51.onPauseAll(file.id, function () {
              queuedRequest.abort();
              socket.send('pause', {});
            });

            _this51.onCancelAll(file.id, function () {
              queuedRequest.abort();
              socket.send('pause', {});

              _this51.resetUploaderReferences(file.id);

              resolve("upload " + file.id + " was canceled");
            });

            _this51.onResumeAll(file.id, function () {
              queuedRequest.abort();

              if (file.error) {
                socket.send('pause', {});
              }

              queuedRequest = _this51.requests.run(function () {
                socket.send('resume', {});
              });
            });

            _this51.onRetry(file.id, function () {
              // Only do the retry if the upload is actually in progress;
              // else we could try to send these messages when the upload is still queued.
              // We may need a better check for this since the socket may also be closed
              // for other reasons, like network failures.
              if (socket.isOpen) {
                socket.send('pause', {});
                socket.send('resume', {});
              }
            });

            _this51.onRetryAll(file.id, function () {
              if (socket.isOpen) {
                socket.send('pause', {});
                socket.send('resume', {});
              }
            });

            socket.on('progress', function (progressData) {
              return emitSocketProgress(_this51, progressData, file);
            });
            socket.on('error', function (errData) {
              _this51.uppy.emit('upload-error', file, new Error(errData.error));

              _this51.resetUploaderReferences(file.id);

              queuedRequest.done();
              reject(new Error(errData.error));
            });
            socket.on('success', function (data) {
              var uploadResp = {
                uploadURL: data.url
              };

              _this51.uppy.emit('upload-success', file, uploadResp);

              _this51.resetUploaderReferences(file.id);

              queuedRequest.done();
              resolve();
            });

            var queuedRequest = _this51.requests.run(function () {
              socket.open();

              if (file.isPaused) {
                socket.send('pause', {});
              }

              return function () {};
            });
          });
        };

        _proto15.upload = function upload(fileIDs) {
          var _this52 = this;

          if (fileIDs.length === 0) return Promise.resolve();
          var promises = fileIDs.map(function (id) {
            var file = _this52.uppy.getFile(id);

            if (file.isRemote) {
              return _this52.uploadRemote(file);
            }

            return _this52.uploadFile(file);
          });
          return Promise.all(promises);
        };

        _proto15.onFileRemove = function onFileRemove(fileID, cb) {
          this.uploaderEvents[fileID].on('file-removed', function (file) {
            if (fileID === file.id) cb(file.id);
          });
        };

        _proto15.onFilePause = function onFilePause(fileID, cb) {
          this.uploaderEvents[fileID].on('upload-pause', function (targetFileID, isPaused) {
            if (fileID === targetFileID) {
              // const isPaused = this.uppy.pauseResume(fileID)
              cb(isPaused);
            }
          });
        };

        _proto15.onRetry = function onRetry(fileID, cb) {
          this.uploaderEvents[fileID].on('upload-retry', function (targetFileID) {
            if (fileID === targetFileID) {
              cb();
            }
          });
        };

        _proto15.onRetryAll = function onRetryAll(fileID, cb) {
          var _this53 = this;

          this.uploaderEvents[fileID].on('retry-all', function () {
            if (!_this53.uppy.getFile(fileID)) return;
            cb();
          });
        };

        _proto15.onPauseAll = function onPauseAll(fileID, cb) {
          var _this54 = this;

          this.uploaderEvents[fileID].on('pause-all', function () {
            if (!_this54.uppy.getFile(fileID)) return;
            cb();
          });
        };

        _proto15.onCancelAll = function onCancelAll(fileID, cb) {
          var _this55 = this;

          this.uploaderEvents[fileID].on('cancel-all', function () {
            if (!_this55.uppy.getFile(fileID)) return;
            cb();
          });
        };

        _proto15.onResumeAll = function onResumeAll(fileID, cb) {
          var _this56 = this;

          this.uploaderEvents[fileID].on('resume-all', function () {
            if (!_this56.uppy.getFile(fileID)) return;
            cb();
          });
        };

        _proto15.install = function install() {
          var _this$uppy$getState = this.uppy.getState(),
              capabilities = _this$uppy$getState.capabilities;

          this.uppy.setState({
            capabilities: Object.assign({}, capabilities, {
              resumableUploads: true
            })
          });
          this.uppy.addUploader(this.upload);
        };

        _proto15.uninstall = function uninstall() {
          var _this$uppy$getState2 = this.uppy.getState(),
              capabilities = _this$uppy$getState2.capabilities;

          this.uppy.setState({
            capabilities: Object.assign({}, capabilities, {
              resumableUploads: false
            })
          });
          this.uppy.removeUploader(this.upload);
        };

        return AwsS3Multipart;
      }(BasePlugin), _class.VERSION = "2.0.2", _temp);
    }, {
      "./MultipartUploader": 627,
      "@uppy/companion-client": 640,
      "@uppy/core": 645,
      "@uppy/utils/lib/EventTracker": 746,
      "@uppy/utils/lib/RateLimitedQueue": 750,
      "@uppy/utils/lib/emitSocketProgress": 755,
      "@uppy/utils/lib/getSocketHost": 769
    }],
    629: [function (require, module, exports) {
      "use strict";

      var _getOptions, _addEventHandlerForFile, _addEventHandlerIfFileStillExists, _uploadLocalFile, _uploadRemoteFile;

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }

      var _require10 = require('nanoid'),
          nanoid = _require10.nanoid;

      var _require11 = require('@uppy/companion-client'),
          Provider = _require11.Provider,
          RequestClient = _require11.RequestClient,
          Socket = _require11.Socket;

      var emitSocketProgress = require('@uppy/utils/lib/emitSocketProgress');

      var getSocketHost = require('@uppy/utils/lib/getSocketHost');

      var EventTracker = require('@uppy/utils/lib/EventTracker');

      var ProgressTimeout = require('@uppy/utils/lib/ProgressTimeout');

      var NetworkError = require('@uppy/utils/lib/NetworkError');

      var isNetworkError = require('@uppy/utils/lib/isNetworkError');

      var _require12 = require('@uppy/utils/lib/RateLimitedQueue'),
          internalRateLimitedQueue = _require12.internalRateLimitedQueue; // See XHRUpload


      function buildResponseError(xhr, error) {
        if (isNetworkError(xhr)) return new NetworkError(error, xhr); // TODO: when we drop support for browsers that do not support this syntax, use:
        // return new Error('Upload error', { cause: error, request: xhr })

        var err = new Error('Upload error');
        err.cause = error;
        err.request = xhr;
        return err;
      } // See XHRUpload


      function setTypeInBlob(file) {
        var dataWithUpdatedType = file.data.slice(0, file.data.size, file.meta.type);
        return dataWithUpdatedType;
      }

      function addMetadata(formData, meta, opts) {
        var metaFields = Array.isArray(opts.metaFields) ? opts.metaFields // Send along all fields by default.
        : Object.keys(meta);
        metaFields.forEach(function (item) {
          formData.append(item, meta[item]);
        });
      }

      function createFormDataUpload(file, opts) {
        var formPost = new FormData();
        addMetadata(formPost, file.meta, opts);
        var dataWithUpdatedType = setTypeInBlob(file);

        if (file.name) {
          formPost.append(opts.fieldName, dataWithUpdatedType, file.meta.name);
        } else {
          formPost.append(opts.fieldName, dataWithUpdatedType);
        }

        return formPost;
      }

      var createBareUpload = function createBareUpload(file) {
        return file.data;
      };

      module.exports = (_getOptions = /*#__PURE__*/_classPrivateFieldLooseKey("getOptions"), _addEventHandlerForFile = /*#__PURE__*/_classPrivateFieldLooseKey("addEventHandlerForFile"), _addEventHandlerIfFileStillExists = /*#__PURE__*/_classPrivateFieldLooseKey("addEventHandlerIfFileStillExists"), _uploadLocalFile = /*#__PURE__*/_classPrivateFieldLooseKey("uploadLocalFile"), _uploadRemoteFile = /*#__PURE__*/_classPrivateFieldLooseKey("uploadRemoteFile"), /*#__PURE__*/function () {
        function MiniXHRUpload(_uppy, _opts) {
          Object.defineProperty(this, _uploadRemoteFile, {
            value: _uploadRemoteFile2
          });
          Object.defineProperty(this, _uploadLocalFile, {
            value: _uploadLocalFile2
          });
          Object.defineProperty(this, _addEventHandlerIfFileStillExists, {
            value: _addEventHandlerIfFileStillExists2
          });
          Object.defineProperty(this, _addEventHandlerForFile, {
            value: _addEventHandlerForFile2
          });
          Object.defineProperty(this, _getOptions, {
            value: _getOptions2
          });
          this.uppy = _uppy;
          this.opts = Object.assign({
            validateStatus: function validateStatus(status) {
              return status >= 200 && status < 300;
            }
          }, _opts);
          this.requests = _opts[internalRateLimitedQueue];
          this.uploaderEvents = Object.create(null);
          this.i18n = _opts.i18n;
        }

        var _proto16 = MiniXHRUpload.prototype;

        _proto16.uploadFile = function uploadFile(id, current, total) {
          var file = this.uppy.getFile(id);

          if (file.error) {
            throw new Error(file.error);
          } else if (file.isRemote) {
            return _classPrivateFieldLooseBase(this, _uploadRemoteFile)[_uploadRemoteFile](file, current, total);
          }

          return _classPrivateFieldLooseBase(this, _uploadLocalFile)[_uploadLocalFile](file, current, total);
        };

        return MiniXHRUpload;
      }());

      function _getOptions2(file) {
        var _file$xhrUpload;

        var uppy = this.uppy;
        var overrides = uppy.getState().xhrUpload;
        var opts = Object.assign({}, this.opts, overrides || {}, file.xhrUpload || {}, {
          headers: Object.assign({}, this.opts.headers, overrides == null ? void 0 : overrides.headers, (_file$xhrUpload = file.xhrUpload) == null ? void 0 : _file$xhrUpload.headers)
        });
        return opts;
      }

      function _addEventHandlerForFile2(eventName, fileID, eventHandler) {
        this.uploaderEvents[fileID].on(eventName, function (targetFileID) {
          if (fileID === targetFileID) eventHandler();
        });
      }

      function _addEventHandlerIfFileStillExists2(eventName, fileID, eventHandler) {
        var _this57 = this;

        this.uploaderEvents[fileID].on(eventName, function () {
          if (_this57.uppy.getFile(fileID)) eventHandler();
        });
      }

      function _uploadLocalFile2(file, current, total) {
        var _this58 = this;

        var opts = _classPrivateFieldLooseBase(this, _getOptions)[_getOptions](file);

        this.uppy.log("uploading " + current + " of " + total);
        return new Promise(function (resolve, reject) {
          // This is done in index.js in the S3 plugin.
          // this.uppy.emit('upload-started', file)
          var data = opts.formData ? createFormDataUpload(file, opts) : createBareUpload(file, opts);
          var xhr = new XMLHttpRequest();
          _this58.uploaderEvents[file.id] = new EventTracker(_this58.uppy);
          var timer = new ProgressTimeout(opts.timeout, function () {
            xhr.abort(); // eslint-disable-next-line no-use-before-define

            queuedRequest.done();
            var error = new Error(_this58.i18n('timedOut', {
              seconds: Math.ceil(opts.timeout / 1000)
            }));

            _this58.uppy.emit('upload-error', file, error);

            reject(error);
          });
          var id = nanoid();
          xhr.upload.addEventListener('loadstart', function () {
            _this58.uppy.log("[AwsS3/XHRUpload] " + id + " started");
          });
          xhr.upload.addEventListener('progress', function (ev) {
            _this58.uppy.log("[AwsS3/XHRUpload] " + id + " progress: " + ev.loaded + " / " + ev.total); // Begin checking for timeouts when progress starts, instead of loading,
            // to avoid timing out requests on browser concurrency queue


            timer.progress();

            if (ev.lengthComputable) {
              _this58.uppy.emit('upload-progress', file, {
                uploader: _this58,
                bytesUploaded: ev.loaded,
                bytesTotal: ev.total
              });
            }
          });
          xhr.addEventListener('load', function (ev) {
            _this58.uppy.log("[AwsS3/XHRUpload] " + id + " finished");

            timer.done(); // eslint-disable-next-line no-use-before-define

            queuedRequest.done();

            if (_this58.uploaderEvents[file.id]) {
              _this58.uploaderEvents[file.id].remove();

              _this58.uploaderEvents[file.id] = null;
            }

            if (opts.validateStatus(ev.target.status, xhr.responseText, xhr)) {
              var _body = opts.getResponseData(xhr.responseText, xhr);

              var uploadURL = _body[opts.responseUrlFieldName];
              var uploadResp = {
                status: ev.target.status,
                body: _body,
                uploadURL: uploadURL
              };

              _this58.uppy.emit('upload-success', file, uploadResp);

              if (uploadURL) {
                _this58.uppy.log("Download " + file.name + " from " + uploadURL);
              }

              return resolve(file);
            }

            var body = opts.getResponseData(xhr.responseText, xhr);
            var error = buildResponseError(xhr, opts.getResponseError(xhr.responseText, xhr));
            var response = {
              status: ev.target.status,
              body: body
            };

            _this58.uppy.emit('upload-error', file, error, response);

            return reject(error);
          });
          xhr.addEventListener('error', function () {
            _this58.uppy.log("[AwsS3/XHRUpload] " + id + " errored");

            timer.done(); // eslint-disable-next-line no-use-before-define

            queuedRequest.done();

            if (_this58.uploaderEvents[file.id]) {
              _this58.uploaderEvents[file.id].remove();

              _this58.uploaderEvents[file.id] = null;
            }

            var error = buildResponseError(xhr, opts.getResponseError(xhr.responseText, xhr));

            _this58.uppy.emit('upload-error', file, error);

            return reject(error);
          });
          xhr.open(opts.method.toUpperCase(), opts.endpoint, true); // IE10 does not allow setting `withCredentials` and `responseType`
          // before `open()` is called.

          xhr.withCredentials = opts.withCredentials;

          if (opts.responseType !== '') {
            xhr.responseType = opts.responseType;
          }

          Object.keys(opts.headers).forEach(function (header) {
            xhr.setRequestHeader(header, opts.headers[header]);
          });

          var queuedRequest = _this58.requests.run(function () {
            xhr.send(data);
            return function () {
              // eslint-disable-next-line no-use-before-define
              timer.done();
              xhr.abort();
            };
          }, {
            priority: 1
          });

          _classPrivateFieldLooseBase(_this58, _addEventHandlerForFile)[_addEventHandlerForFile]('file-removed', file.id, function () {
            queuedRequest.abort();
            reject(new Error('File removed'));
          });

          _classPrivateFieldLooseBase(_this58, _addEventHandlerIfFileStillExists)[_addEventHandlerIfFileStillExists]('cancel-all', file.id, function () {
            queuedRequest.abort();
            reject(new Error('Upload cancelled'));
          });
        });
      }

      function _uploadRemoteFile2(file) {
        var _this59 = this;

        var opts = _classPrivateFieldLooseBase(this, _getOptions)[_getOptions](file); // This is done in index.js in the S3 plugin.
        // this.uppy.emit('upload-started', file)


        var metaFields = Array.isArray(opts.metaFields) ? opts.metaFields // Send along all fields by default.
        : Object.keys(file.meta);
        var Client = file.remote.providerOptions.provider ? Provider : RequestClient;
        var client = new Client(this.uppy, file.remote.providerOptions);
        return client.post(file.remote.url, Object.assign({}, file.remote.body, {
          endpoint: opts.endpoint,
          size: file.data.size,
          fieldname: opts.fieldName,
          metadata: Object.fromEntries(metaFields.map(function (name) {
            return [name, file.meta[name]];
          })),
          httpMethod: opts.method,
          useFormData: opts.formData,
          headers: opts.headers
        })).then(function (res) {
          return new Promise(function (resolve, reject) {
            var token = res.token;
            var host = getSocketHost(file.remote.companionUrl);
            var socket = new Socket({
              target: host + "/api/" + token,
              autoOpen: false
            });
            _this59.uploaderEvents[file.id] = new EventTracker(_this59.uppy);

            var queuedRequest = _this59.requests.run(function () {
              socket.open();

              if (file.isPaused) {
                socket.send('pause', {});
              }

              return function () {
                return socket.close();
              };
            });

            _classPrivateFieldLooseBase(_this59, _addEventHandlerForFile)[_addEventHandlerForFile]('file-removed', file.id, function () {
              socket.send('pause', {});
              queuedRequest.abort();
              resolve("upload " + file.id + " was removed");
            });

            _classPrivateFieldLooseBase(_this59, _addEventHandlerIfFileStillExists)[_addEventHandlerIfFileStillExists]('cancel-all', file.id, function () {
              socket.send('pause', {});
              queuedRequest.abort();
              resolve("upload " + file.id + " was canceled");
            });

            _classPrivateFieldLooseBase(_this59, _addEventHandlerForFile)[_addEventHandlerForFile]('upload-retry', file.id, function () {
              socket.send('pause', {});
              socket.send('resume', {});
            });

            _classPrivateFieldLooseBase(_this59, _addEventHandlerIfFileStillExists)[_addEventHandlerIfFileStillExists]('retry-all', file.id, function () {
              socket.send('pause', {});
              socket.send('resume', {});
            });

            socket.on('progress', function (progressData) {
              return emitSocketProgress(_this59, progressData, file);
            });
            socket.on('success', function (data) {
              var body = opts.getResponseData(data.response.responseText, data.response);
              var uploadURL = body[opts.responseUrlFieldName];
              var uploadResp = {
                status: data.response.status,
                body: body,
                uploadURL: uploadURL,
                bytesUploaded: data.bytesUploaded
              };

              _this59.uppy.emit('upload-success', file, uploadResp);

              queuedRequest.done();

              if (_this59.uploaderEvents[file.id]) {
                _this59.uploaderEvents[file.id].remove();

                _this59.uploaderEvents[file.id] = null;
              }

              return resolve();
            });
            socket.on('error', function (errData) {
              var resp = errData.response;
              var error = resp ? opts.getResponseError(resp.responseText, resp) : Object.assign(new Error(errData.error.message), {
                cause: errData.error
              });

              _this59.uppy.emit('upload-error', file, error);

              queuedRequest.done();

              if (_this59.uploaderEvents[file.id]) {
                _this59.uploaderEvents[file.id].remove();

                _this59.uploaderEvents[file.id] = null;
              }

              reject(error);
            });
          }).catch(function (err) {
            _this59.uppy.emit('upload-error', file, err);

            return Promise.reject(err);
          });
        });
      }
    }, {
      "@uppy/companion-client": 640,
      "@uppy/utils/lib/EventTracker": 746,
      "@uppy/utils/lib/NetworkError": 748,
      "@uppy/utils/lib/ProgressTimeout": 749,
      "@uppy/utils/lib/RateLimitedQueue": 750,
      "@uppy/utils/lib/emitSocketProgress": 755,
      "@uppy/utils/lib/getSocketHost": 769,
      "@uppy/utils/lib/isNetworkError": 776,
      "nanoid": 632
    }],
    630: [function (require, module, exports) {
      "use strict";

      var _class, _client, _requests, _uploader, _handleUpload, _temp;

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }
      /**
       * This plugin is currently a A Big Hack™! The core reason for that is how this plugin
       * interacts with Uppy's current pipeline design. The pipeline can handle files in steps,
       * including preprocessing, uploading, and postprocessing steps. This plugin initially
       * was designed to do its work in a preprocessing step, and let XHRUpload deal with the
       * actual file upload as an uploading step. However, Uppy runs steps on all files at once,
       * sequentially: first, all files go through a preprocessing step, then, once they are all
       * done, they go through the uploading step.
       *
       * For S3, this causes severely broken behaviour when users upload many files. The
       * preprocessing step will request S3 upload URLs that are valid for a short time only,
       * but it has to do this for _all_ files, which can take a long time if there are hundreds
       * or even thousands of files. By the time the uploader step starts, the first URLs may
       * already have expired. If not, the uploading might take such a long time that later URLs
       * will expire before some files can be uploaded.
       *
       * The long-term solution to this problem is to change the upload pipeline so that files
       * can be sent to the next step individually. That requires a breaking change, so it is
       * planned for some future Uppy version.
       *
       * In the mean time, this plugin is stuck with a hackier approach: the necessary parts
       * of the XHRUpload implementation were copied into this plugin, as the MiniXHRUpload
       * class, and this plugin calls into it immediately once it receives an upload URL.
       * This isn't as nicely modular as we'd like and requires us to maintain two copies of
       * the XHRUpload code, but at least it's not horrifically broken :)
       */


      var _require13 = require('@uppy/core'),
          BasePlugin = _require13.BasePlugin;

      var _require14 = require('@uppy/utils/lib/RateLimitedQueue'),
          RateLimitedQueue = _require14.RateLimitedQueue,
          internalRateLimitedQueue = _require14.internalRateLimitedQueue;

      var settle = require('@uppy/utils/lib/settle');

      var _require15 = require('@uppy/companion-client'),
          RequestClient = _require15.RequestClient;

      var MiniXHRUpload = require('./MiniXHRUpload');

      var isXml = require('./isXml');

      function resolveUrl(origin, link) {
        return new URL(link, origin || undefined).toString();
      }
      /**
       * Get the contents of a named tag in an XML source string.
       *
       * @param {string} source - The XML source string.
       * @param {string} tagName - The name of the tag.
       * @returns {string} The contents of the tag, or the empty string if the tag does not exist.
       */


      function getXmlValue(source, tagName) {
        var start = source.indexOf("<" + tagName + ">");
        var end = source.indexOf("</" + tagName + ">", start);
        return start !== -1 && end !== -1 ? source.slice(start + tagName.length + 2, end) : '';
      }

      function assertServerError(res) {
        if (res && res.error) {
          var error = new Error(res.message);
          Object.assign(error, res.error);
          throw error;
        }

        return res;
      }

      function validateParameters(file, params) {
        var valid = params != null && typeof params.url === 'string' && (typeof params.fields === 'object' || params.fields == null);

        if (!valid) {
          var err = new TypeError("AwsS3: got incorrect result from 'getUploadParameters()' for file '" + file.name + "', expected an object '{ url, method, fields, headers }' but got '" + JSON.stringify(params) + "' instead.\nSee https://uppy.io/docs/aws-s3/#getUploadParameters-file for more on the expected format.");
          throw err;
        }

        var methodIsValid = params.method == null || /^p(u|os)t$/i.test(params.method);

        if (!methodIsValid) {
          var _err2 = new TypeError("AwsS3: got incorrect method from 'getUploadParameters()' for file '" + file.name + "', expected  'put' or 'post' but got '" + params.method + "' instead.\nSee https://uppy.io/docs/aws-s3/#getUploadParameters-file for more on the expected format.");

          throw _err2;
        }
      } // Get the error data from a failed XMLHttpRequest instance.
      // `content` is the S3 response as a string.
      // `xhr` is the XMLHttpRequest instance.


      function defaultGetResponseError(content, xhr) {
        // If no response, we don't have a specific error message, use the default.
        if (!isXml(content, xhr)) {
          return undefined;
        }

        var error = getXmlValue(content, 'Message');
        return new Error(error);
      } // warning deduplication flag: see `getResponseData()` XHRUpload option definition


      var warnedSuccessActionStatus = false;
      module.exports = (_temp = (_client = /*#__PURE__*/_classPrivateFieldLooseKey("client"), _requests = /*#__PURE__*/_classPrivateFieldLooseKey("requests"), _uploader = /*#__PURE__*/_classPrivateFieldLooseKey("uploader"), _handleUpload = /*#__PURE__*/_classPrivateFieldLooseKey("handleUpload"), _class = /*#__PURE__*/function (_BasePlugin2) {
        _inheritsLoose(AwsS3, _BasePlugin2);

        // eslint-disable-next-line global-require
        function AwsS3(uppy, opts) {
          var _this60;

          _this60 = _BasePlugin2.call(this, uppy, opts) || this;
          Object.defineProperty(_assertThisInitialized2(_this60), _client, {
            writable: true,
            value: void 0
          });
          Object.defineProperty(_assertThisInitialized2(_this60), _requests, {
            writable: true,
            value: void 0
          });
          Object.defineProperty(_assertThisInitialized2(_this60), _uploader, {
            writable: true,
            value: void 0
          });
          Object.defineProperty(_assertThisInitialized2(_this60), _handleUpload, {
            writable: true,
            value: function value(fileIDs) {
              /**
               * keep track of `getUploadParameters()` responses
               * so we can cancel the calls individually using just a file ID
               *
               * @type {object.<string, Promise>}
               */
              var paramsPromises = Object.create(null);

              function onremove(file) {
                var _paramsPromises$id;

                var id = file.id;
                (_paramsPromises$id = paramsPromises[id]) == null ? void 0 : _paramsPromises$id.abort();
              }

              _this60.uppy.on('file-removed', onremove);

              fileIDs.forEach(function (id) {
                var file = _this60.uppy.getFile(id);

                _this60.uppy.emit('upload-started', file);
              });

              var getUploadParameters = _classPrivateFieldLooseBase(_assertThisInitialized2(_this60), _requests)[_requests].wrapPromiseFunction(function (file) {
                return _this60.opts.getUploadParameters(file);
              });

              var numberOfFiles = fileIDs.length;
              return settle(fileIDs.map(function (id, index) {
                paramsPromises[id] = getUploadParameters(_this60.uppy.getFile(id));
                return paramsPromises[id].then(function (params) {
                  delete paramsPromises[id];

                  var file = _this60.uppy.getFile(id);

                  validateParameters(file, params);
                  var _params$method = params.method,
                      method = _params$method === void 0 ? 'post' : _params$method,
                      url = params.url,
                      fields = params.fields,
                      headers = params.headers;
                  var xhrOpts = {
                    method: method,
                    formData: method.toLowerCase() === 'post',
                    endpoint: url,
                    metaFields: fields ? Object.keys(fields) : []
                  };

                  if (headers) {
                    xhrOpts.headers = headers;
                  }

                  _this60.uppy.setFileState(file.id, {
                    meta: Object.assign({}, file.meta, fields),
                    xhrUpload: xhrOpts
                  });

                  return _classPrivateFieldLooseBase(_assertThisInitialized2(_this60), _uploader)[_uploader].uploadFile(file.id, index, numberOfFiles);
                }).catch(function (error) {
                  delete paramsPromises[id];

                  var file = _this60.uppy.getFile(id);

                  _this60.uppy.emit('upload-error', file, error);
                });
              })).finally(function () {
                // cleanup.
                _this60.uppy.off('file-removed', onremove);
              });
            }
          });
          _this60.type = 'uploader';
          _this60.id = _this60.opts.id || 'AwsS3';
          _this60.title = 'AWS S3';
          _this60.defaultLocale = {
            strings: {
              timedOut: 'Upload stalled for %{seconds} seconds, aborting.'
            }
          };
          var defaultOptions = {
            timeout: 30 * 1000,
            limit: 0,
            metaFields: [],
            // have to opt in
            getUploadParameters: _this60.getUploadParameters.bind(_assertThisInitialized2(_this60))
          };
          _this60.opts = Object.assign({}, defaultOptions, opts); // TODO: remove i18n once we can depend on XHRUpload instead of MiniXHRUpload

          _this60.i18nInit();

          _classPrivateFieldLooseBase(_assertThisInitialized2(_this60), _client)[_client] = new RequestClient(uppy, opts);
          _classPrivateFieldLooseBase(_assertThisInitialized2(_this60), _requests)[_requests] = new RateLimitedQueue(_this60.opts.limit);
          return _this60;
        }

        var _proto17 = AwsS3.prototype;

        _proto17.getUploadParameters = function getUploadParameters(file) {
          if (!this.opts.companionUrl) {
            throw new Error('Expected a `companionUrl` option containing a Companion address.');
          }

          var filename = file.meta.name;
          var type = file.meta.type;
          var metadata = Object.fromEntries(this.opts.metaFields.filter(function (key) {
            return file.meta[key] != null;
          }).map(function (key) {
            return ["metadata[" + key + "]", file.meta[key].toString()];
          }));
          var query = new URLSearchParams(Object.assign({
            filename: filename,
            type: type
          }, metadata));
          return _classPrivateFieldLooseBase(this, _client)[_client].get("s3/params?" + query).then(assertServerError);
        };

        _proto17.install = function install() {
          var _xhrOptions;

          var uppy = this.uppy;
          uppy.addUploader(_classPrivateFieldLooseBase(this, _handleUpload)[_handleUpload]); // Get the response data from a successful XMLHttpRequest instance.
          // `content` is the S3 response as a string.
          // `xhr` is the XMLHttpRequest instance.

          function defaultGetResponseData(content, xhr) {
            var opts = this; // If no response, we've hopefully done a PUT request to the file
            // in the bucket on its full URL.

            if (!isXml(content, xhr)) {
              if (opts.method.toUpperCase() === 'POST') {
                if (!warnedSuccessActionStatus) {
                  uppy.log('[AwsS3] No response data found, make sure to set the success_action_status AWS SDK option to 201. See https://uppy.io/docs/aws-s3/#POST-Uploads', 'warning');
                  warnedSuccessActionStatus = true;
                } // The responseURL won't contain the object key. Give up.


                return {
                  location: null
                };
              } // responseURL is not available in older browsers.


              if (!xhr.responseURL) {
                return {
                  location: null
                };
              } // Trim the query string because it's going to be a bunch of presign
              // parameters for a PUT request—doing a GET request with those will
              // always result in an error


              return {
                location: xhr.responseURL.replace(/\?.*$/, '')
              };
            }

            return {
              // Some S3 alternatives do not reply with an absolute URL.
              // Eg DigitalOcean Spaces uses /$bucketName/xyz
              location: resolveUrl(xhr.responseURL, getXmlValue(content, 'Location')),
              bucket: getXmlValue(content, 'Bucket'),
              key: getXmlValue(content, 'Key'),
              etag: getXmlValue(content, 'ETag')
            };
          }

          var xhrOptions = (_xhrOptions = {
            fieldName: 'file',
            responseUrlFieldName: 'location',
            timeout: this.opts.timeout
          }, _xhrOptions[internalRateLimitedQueue] = _classPrivateFieldLooseBase(this, _requests)[_requests], _xhrOptions.responseType = 'text', _xhrOptions.getResponseData = this.opts.getResponseData || defaultGetResponseData, _xhrOptions.getResponseError = defaultGetResponseError, _xhrOptions); // TODO: remove i18n once we can depend on XHRUpload instead of MiniXHRUpload

          xhrOptions.i18n = this.i18n; // Revert to `uppy.use(XHRUpload)` once the big comment block at the top of
          // this file is solved

          _classPrivateFieldLooseBase(this, _uploader)[_uploader] = new MiniXHRUpload(uppy, xhrOptions);
        };

        _proto17.uninstall = function uninstall() {
          this.uppy.removeUploader(_classPrivateFieldLooseBase(this, _handleUpload)[_handleUpload]);
        };

        return AwsS3;
      }(BasePlugin)), _class.VERSION = "2.0.2", _temp);
    }, {
      "./MiniXHRUpload": 629,
      "./isXml": 631,
      "@uppy/companion-client": 640,
      "@uppy/core": 645,
      "@uppy/utils/lib/RateLimitedQueue": 750,
      "@uppy/utils/lib/settle": 783
    }],
    631: [function (require, module, exports) {
      "use strict";
      /**
       * Remove parameters like `charset=utf-8` from the end of a mime type string.
       *
       * @param {string} mimeType - The mime type string that may have optional parameters.
       * @returns {string} The "base" mime type, i.e. only 'category/type'.
       */

      function removeMimeParameters(mimeType) {
        return mimeType.replace(/;.*$/, '');
      }
      /**
       * Check if a response contains XML based on the response object and its text content.
       *
       * @param {string} content - The text body of the response.
       * @param {object|XMLHttpRequest} xhr - The XHR object or response object from Companion.
       * @returns {bool} Whether the content is (probably) XML.
       */


      function isXml(content, xhr) {
        var rawContentType = xhr.headers ? xhr.headers['content-type'] : xhr.getResponseHeader('Content-Type');

        if (typeof rawContentType === 'string') {
          var contentType = removeMimeParameters(rawContentType).toLowerCase();

          if (contentType === 'application/xml' || contentType === 'text/xml') {
            return true;
          } // GCS uses text/html for some reason
          // https://github.com/transloadit/uppy/issues/896


          if (contentType === 'text/html' && /^<\?xml /.test(content)) {
            return true;
          }
        }

        return false;
      }

      module.exports = isXml;
    }, {}],
    632: [function (require, module, exports) {
      (function (process) {
        (function () {
          // This file replaces `index.js` in bundlers like webpack or Rollup,
          // according to `browser` config in `package.json`.
          var _require16 = require('./url-alphabet/index.cjs'),
              urlAlphabet = _require16.urlAlphabet;

          if (process.env.NODE_ENV !== 'production') {
            // All bundlers will remove this block in the production bundle.
            if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative' && typeof crypto === 'undefined') {
              throw new Error('React Native does not have a built-in secure random generator. ' + 'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' + 'For secure IDs, import `react-native-get-random-values` ' + 'before Nano ID.');
            }

            if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {
              throw new Error('Import file with `if (!window.crypto) window.crypto = window.msCrypto`' + ' before importing Nano ID to fix IE 11 support');
            }

            if (typeof crypto === 'undefined') {
              throw new Error('Your browser does not have secure random generator. ' + 'If you don’t need unpredictable IDs, you can use nanoid/non-secure.');
            }
          }

          var random = function random(bytes) {
            return crypto.getRandomValues(new Uint8Array(bytes));
          };

          var customRandom = function customRandom(alphabet, size, getRandom) {
            // First, a bitmask is necessary to generate the ID. The bitmask makes bytes
            // values closer to the alphabet size. The bitmask calculates the closest
            // `2^31 - 1` number, which exceeds the alphabet size.
            // For example, the bitmask for the alphabet size 30 is 31 (00011111).
            // `Math.clz32` is not used, because it is not available in browsers.
            var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1; // Though, the bitmask solution is not perfect since the bytes exceeding
            // the alphabet size are refused. Therefore, to reliably generate the ID,
            // the random bytes redundancy has to be satisfied.
            // Note: every hardware random generator call is performance expensive,
            // because the system call for entropy collection takes a lot of time.
            // So, to avoid additional system calls, extra bytes are requested in advance.
            // Next, a step determines how many random bytes to generate.
            // The number of random bytes gets decided upon the ID size, mask,
            // alphabet size, and magic number 1.6 (using 1.6 peaks at performance
            // according to benchmarks).
            // `-~f => Math.ceil(f)` if f is a float
            // `-~i => i + 1` if i is an integer

            var step = -~(1.6 * mask * size / alphabet.length);
            return function () {
              var id = '';

              while (true) {
                var bytes = getRandom(step); // A compact alternative for `for (var i = 0; i < step; i++)`.

                var j = step;

                while (j--) {
                  // Adding `|| ''` refuses a random byte that exceeds the alphabet size.
                  id += alphabet[bytes[j] & mask] || '';
                  if (id.length === size) return id;
                }
              }
            };
          };

          var customAlphabet = function customAlphabet(alphabet, size) {
            return customRandom(alphabet, size, random);
          };

          var nanoid = function nanoid(size) {
            if (size === void 0) {
              size = 21;
            }

            var id = '';
            var bytes = crypto.getRandomValues(new Uint8Array(size)); // A compact alternative for `for (var i = 0; i < step; i++)`.

            while (size--) {
              // It is incorrect to use bytes exceeding the alphabet size.
              // The following mask reduces the random byte in the 0-255 value
              // range to the 0-63 value range. Therefore, adding hacks, such
              // as empty string fallback or magic numbers, is unneccessary because
              // the bitmask trims bytes down to the alphabet size.
              var byte = bytes[size] & 63;

              if (byte < 36) {
                // `0-9a-z`
                id += byte.toString(36);
              } else if (byte < 62) {
                // `A-Z`
                id += (byte - 26).toString(36).toUpperCase();
              } else if (byte < 63) {
                id += '_';
              } else {
                id += '-';
              }
            }

            return id;
          };

          module.exports = {
            nanoid: nanoid,
            customAlphabet: customAlphabet,
            customRandom: customRandom,
            urlAlphabet: urlAlphabet,
            random: random
          };
        }).call(this);
      }).call(this, require('_process'));
    }, {
      "./url-alphabet/index.cjs": 633,
      "_process": 596
    }],
    633: [function (require, module, exports) {
      // This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped
      // optimize the gzip compression for this alphabet.
      var urlAlphabet = 'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';
      module.exports = {
        urlAlphabet: urlAlphabet
      };
    }, {}],
    634: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var _require17 = require('@uppy/core'),
          UIPlugin = _require17.UIPlugin;

      var _require18 = require('@uppy/companion-client'),
          Provider = _require18.Provider;

      var _require19 = require('@uppy/provider-views'),
          ProviderViews = _require19.ProviderViews;

      var _require20 = require('preact'),
          h = _require20.h;

      module.exports = (_temp = _class = /*#__PURE__*/function (_UIPlugin) {
        _inheritsLoose(Box, _UIPlugin);

        function Box(uppy, opts) {
          var _this61;

          _this61 = _UIPlugin.call(this, uppy, opts) || this;
          _this61.id = _this61.opts.id || 'Box';
          Provider.initPlugin(_assertThisInitialized2(_this61), opts);
          _this61.title = _this61.opts.title || 'Box';

          _this61.icon = function () {
            return h("svg", {
              "aria-hidden": "true",
              focusable: "false",
              width: "32",
              height: "32",
              viewBox: "0 0 32 32"
            }, h("g", {
              fill: "none",
              fillRule: "evenodd"
            }, h("rect", {
              className: "uppy-ProviderIconBg",
              fill: "#0061D5",
              width: "32",
              height: "32",
              rx: "16"
            }), h("g", {
              fill: "#fff",
              fillRule: "nonzero"
            }, h("path", {
              d: "m16.4 13.5c-1.6 0-3 0.9-3.7 2.2-0.7-1.3-2.1-2.2-3.7-2.2-1 0-1.8 0.3-2.5 0.8v-3.6c-0.1-0.3-0.5-0.7-1-0.7s-0.8 0.4-0.8 0.8v7c0 2.3 1.9 4.2 4.2 4.2 1.6 0 3-0.9 3.7-2.2 0.7 1.3 2.1 2.2 3.7 2.2 2.3 0 4.2-1.9 4.2-4.2 0.1-2.4-1.8-4.3-4.1-4.3m-7.5 6.8c-1.4 0-2.5-1.1-2.5-2.5s1.1-2.5 2.5-2.5 2.5 1.1 2.5 2.5-1.1 2.5-2.5 2.5m7.5 0c-1.4 0-2.5-1.1-2.5-2.5s1.1-2.5 2.5-2.5 2.5 1.1 2.5 2.5-1.1 2.5-2.5 2.5"
            }), h("path", {
              d: "m27.2 20.6l-2.3-2.8 2.3-2.8c0.3-0.4 0.2-0.9-0.2-1.2s-1-0.2-1.3 0.2l-2 2.4-2-2.4c-0.3-0.4-0.9-0.4-1.3-0.2-0.4 0.3-0.5 0.8-0.2 1.2l2.3 2.8-2.3 2.8c-0.3 0.4-0.2 0.9 0.2 1.2s1 0.2 1.3-0.2l2-2.4 2 2.4c0.3 0.4 0.9 0.4 1.3 0.2 0.4-0.3 0.4-0.8 0.2-1.2"
            }))));
          };

          _this61.provider = new Provider(uppy, {
            companionUrl: _this61.opts.companionUrl,
            companionHeaders: _this61.opts.companionHeaders,
            companionKeysParams: _this61.opts.companionKeysParams,
            companionCookiesRule: _this61.opts.companionCookiesRule,
            provider: 'box',
            pluginId: _this61.id
          });
          _this61.defaultLocale = {
            strings: {
              pluginNameBox: 'Box'
            }
          };

          _this61.i18nInit();

          _this61.title = _this61.i18n('pluginNameBox');
          _this61.onFirstRender = _this61.onFirstRender.bind(_assertThisInitialized2(_this61));
          _this61.render = _this61.render.bind(_assertThisInitialized2(_this61));
          return _this61;
        }

        var _proto18 = Box.prototype;

        _proto18.install = function install() {
          this.view = new ProviderViews(this, {
            provider: this.provider
          });
          var target = this.opts.target;

          if (target) {
            this.mount(target, this);
          }
        };

        _proto18.uninstall = function uninstall() {
          this.view.tearDown();
          this.unmount();
        };

        _proto18.onFirstRender = function onFirstRender() {
          return this.view.getFolder();
        };

        _proto18.render = function render(state) {
          return this.view.render(state);
        };

        return Box;
      }(UIPlugin), _class.VERSION = "1.0.1", _temp);
    }, {
      "@uppy/companion-client": 640,
      "@uppy/core": 645,
      "@uppy/provider-views": 716,
      "preact": 595
    }],
    635: [function (require, module, exports) {
      'use strict';

      var AuthError = /*#__PURE__*/function (_Error2) {
        _inheritsLoose(AuthError, _Error2);

        function AuthError() {
          var _this62;

          _this62 = _Error2.call(this, 'Authorization required') || this;
          _this62.name = 'AuthError';
          _this62.isAuthError = true;
          return _this62;
        }

        return AuthError;
      }( /*#__PURE__*/_wrapNativeSuper2(Error));

      module.exports = AuthError;
    }, {}],
    636: [function (require, module, exports) {
      'use strict';

      var RequestClient = require('./RequestClient');

      var tokenStorage = require('./tokenStorage');

      var getName = function getName(id) {
        return id.split('-').map(function (s) {
          return s.charAt(0).toUpperCase() + s.slice(1);
        }).join(' ');
      };

      module.exports = /*#__PURE__*/function (_RequestClient) {
        _inheritsLoose(Provider, _RequestClient);

        function Provider(uppy, opts) {
          var _this63;

          _this63 = _RequestClient.call(this, uppy, opts) || this;
          _this63.provider = opts.provider;
          _this63.id = _this63.provider;
          _this63.name = _this63.opts.name || getName(_this63.id);
          _this63.pluginId = _this63.opts.pluginId;
          _this63.tokenKey = "companion-" + _this63.pluginId + "-auth-token";
          _this63.companionKeysParams = _this63.opts.companionKeysParams;
          _this63.preAuthToken = null;
          return _this63;
        }

        var _proto19 = Provider.prototype;

        _proto19.headers = function headers() {
          var _this64 = this;

          return Promise.all([_RequestClient.prototype.headers.call(this), this.getAuthToken()]).then(function (_ref15) {
            var headers = _ref15[0],
                token = _ref15[1];
            var authHeaders = {};

            if (token) {
              authHeaders['uppy-auth-token'] = token;
            }

            if (_this64.companionKeysParams) {
              authHeaders['uppy-credentials-params'] = btoa(JSON.stringify({
                params: _this64.companionKeysParams
              }));
            }

            return Object.assign({}, headers, authHeaders);
          });
        };

        _proto19.onReceiveResponse = function onReceiveResponse(response) {
          response = _RequestClient.prototype.onReceiveResponse.call(this, response);
          var plugin = this.uppy.getPlugin(this.pluginId);
          var oldAuthenticated = plugin.getPluginState().authenticated;
          var authenticated = oldAuthenticated ? response.status !== 401 : response.status < 400;
          plugin.setPluginState({
            authenticated: authenticated
          });
          return response;
        };

        _proto19.setAuthToken = function setAuthToken(token) {
          return this.uppy.getPlugin(this.pluginId).storage.setItem(this.tokenKey, token);
        };

        _proto19.getAuthToken = function getAuthToken() {
          return this.uppy.getPlugin(this.pluginId).storage.getItem(this.tokenKey);
        };

        _proto19.authUrl = function authUrl(queries) {
          if (queries === void 0) {
            queries = {};
          }

          if (this.preAuthToken) {
            queries.uppyPreAuthToken = this.preAuthToken;
          }

          return this.hostname + "/" + this.id + "/connect?" + new URLSearchParams(queries);
        };

        _proto19.fileUrl = function fileUrl(id) {
          return this.hostname + "/" + this.id + "/get/" + id;
        };

        _proto19.fetchPreAuthToken = function fetchPreAuthToken() {
          var _this65 = this;

          if (!this.companionKeysParams) {
            return Promise.resolve();
          }

          return this.post(this.id + "/preauth/", {
            params: this.companionKeysParams
          }).then(function (res) {
            _this65.preAuthToken = res.token;
          }).catch(function (err) {
            _this65.uppy.log("[CompanionClient] unable to fetch preAuthToken " + err, 'warning');
          });
        };

        _proto19.list = function list(directory) {
          return this.get(this.id + "/list/" + (directory || ''));
        };

        _proto19.logout = function logout() {
          var _this66 = this;

          return this.get(this.id + "/logout").then(function (response) {
            return Promise.all([response, _this66.uppy.getPlugin(_this66.pluginId).storage.removeItem(_this66.tokenKey)]);
          }).then(function (_ref16) {
            var response = _ref16[0];
            return response;
          });
        };

        Provider.initPlugin = function initPlugin(plugin, opts, defaultOpts) {
          plugin.type = 'acquirer';
          plugin.files = [];

          if (defaultOpts) {
            plugin.opts = Object.assign({}, defaultOpts, opts);
          }

          if (opts.serverUrl || opts.serverPattern) {
            throw new Error('`serverUrl` and `serverPattern` have been renamed to `companionUrl` and `companionAllowedHosts` respectively in the 0.30.5 release. Please consult the docs (for example, https://uppy.io/docs/instagram/ for the Instagram plugin) and use the updated options.`');
          }

          if (opts.companionAllowedHosts) {
            var pattern = opts.companionAllowedHosts; // validate companionAllowedHosts param

            if (typeof pattern !== 'string' && !Array.isArray(pattern) && !(pattern instanceof RegExp)) {
              throw new TypeError(plugin.id + ": the option \"companionAllowedHosts\" must be one of string, Array, RegExp");
            }

            plugin.opts.companionAllowedHosts = pattern;
          } else if (/^(?!https?:\/\/).*$/i.test(opts.companionUrl)) {
            // does not start with https://
            plugin.opts.companionAllowedHosts = "https://" + opts.companionUrl.replace(/^\/\//, '');
          } else {
            plugin.opts.companionAllowedHosts = new URL(opts.companionUrl).origin;
          }

          plugin.storage = plugin.opts.storage || tokenStorage;
        };

        return Provider;
      }(RequestClient);
    }, {
      "./RequestClient": 637,
      "./tokenStorage": 641
    }],
    637: [function (require, module, exports) {
      'use strict';

      var _class, _getPostResponseFunc, _getUrl, _errorHandler, _temp;

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }

      var fetchWithNetworkError = require('@uppy/utils/lib/fetchWithNetworkError');

      var AuthError = require('./AuthError'); // Remove the trailing slash so we can always safely append /xyz.


      function stripSlash(url) {
        return url.replace(/\/$/, '');
      }

      function handleJSONResponse(_x2) {
        return _handleJSONResponse.apply(this, arguments);
      }

      function _handleJSONResponse() {
        _handleJSONResponse = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(res) {
          var jsonPromise, errMsg, errData;
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  if (!(res.status === 401)) {
                    _context4.next = 2;
                    break;
                  }

                  throw new AuthError();

                case 2:
                  jsonPromise = res.json();

                  if (!(res.status < 200 || res.status > 300)) {
                    _context4.next = 14;
                    break;
                  }

                  errMsg = "Failed request with status: " + res.status + ". " + res.statusText;
                  _context4.prev = 5;
                  _context4.next = 8;
                  return jsonPromise;

                case 8:
                  errData = _context4.sent;
                  errMsg = errData.message ? errMsg + " message: " + errData.message : errMsg;
                  errMsg = errData.requestId ? errMsg + " request-Id: " + errData.requestId : errMsg;

                case 11:
                  _context4.prev = 11;
                  throw new Error(errMsg);

                case 14:
                  return _context4.abrupt("return", jsonPromise);

                case 15:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, null, [[5,, 11, 14]]);
        }));
        return _handleJSONResponse.apply(this, arguments);
      }

      module.exports = (_temp = (_getPostResponseFunc = /*#__PURE__*/_classPrivateFieldLooseKey("getPostResponseFunc"), _getUrl = /*#__PURE__*/_classPrivateFieldLooseKey("getUrl"), _errorHandler = /*#__PURE__*/_classPrivateFieldLooseKey("errorHandler"), _class = /*#__PURE__*/function () {
        // eslint-disable-next-line global-require
        function RequestClient(uppy, opts) {
          var _this67 = this;

          Object.defineProperty(this, _errorHandler, {
            value: _errorHandler2
          });
          Object.defineProperty(this, _getUrl, {
            value: _getUrl2
          });
          Object.defineProperty(this, _getPostResponseFunc, {
            writable: true,
            value: function value(skip) {
              return function (response) {
                return skip ? response : _this67.onReceiveResponse(response);
              };
            }
          });
          this.uppy = uppy;
          this.opts = opts;
          this.onReceiveResponse = this.onReceiveResponse.bind(this);
          this.allowedHeaders = ['accept', 'content-type', 'uppy-auth-token'];
          this.preflightDone = false;
        }

        var _proto20 = RequestClient.prototype;

        _proto20.headers = function headers() {
          var userHeaders = this.opts.companionHeaders || {};
          return Promise.resolve(Object.assign({}, RequestClient.defaultHeaders, userHeaders));
        };

        _proto20.onReceiveResponse = function onReceiveResponse(response) {
          var state = this.uppy.getState();
          var companion = state.companion || {};
          var host = this.opts.companionUrl;
          var headers = response.headers; // Store the self-identified domain name for the Companion instance we just hit.

          if (headers.has('i-am') && headers.get('i-am') !== companion[host]) {
            var _Object$assign;

            this.uppy.setState({
              companion: Object.assign({}, companion, (_Object$assign = {}, _Object$assign[host] = headers.get('i-am'), _Object$assign))
            });
          }

          return response;
        };

        _proto20.preflight = function preflight(path) {
          var _this68 = this;

          if (this.preflightDone) {
            return Promise.resolve(this.allowedHeaders.slice());
          }

          return fetch(_classPrivateFieldLooseBase(this, _getUrl)[_getUrl](path), {
            method: 'OPTIONS'
          }).then(function (response) {
            if (response.headers.has('access-control-allow-headers')) {
              _this68.allowedHeaders = response.headers.get('access-control-allow-headers').split(',').map(function (headerName) {
                return headerName.trim().toLowerCase();
              });
            }

            _this68.preflightDone = true;
            return _this68.allowedHeaders.slice();
          }).catch(function (err) {
            _this68.uppy.log("[CompanionClient] unable to make preflight request " + err, 'warning');

            _this68.preflightDone = true;
            return _this68.allowedHeaders.slice();
          });
        };

        _proto20.preflightAndHeaders = function preflightAndHeaders(path) {
          var _this69 = this;

          return Promise.all([this.preflight(path), this.headers()]).then(function (_ref17) {
            var allowedHeaders = _ref17[0],
                headers = _ref17[1];
            // filter to keep only allowed Headers
            Object.keys(headers).forEach(function (header) {
              if (!allowedHeaders.includes(header.toLowerCase())) {
                _this69.uppy.log("[CompanionClient] excluding disallowed header " + header);

                delete headers[header]; // eslint-disable-line no-param-reassign
              }
            });
            return headers;
          });
        };

        _proto20.get = function get(path, skipPostResponse) {
          var _this70 = this;

          var method = 'get';
          return this.preflightAndHeaders(path).then(function (headers) {
            return fetchWithNetworkError(_classPrivateFieldLooseBase(_this70, _getUrl)[_getUrl](path), {
              method: method,
              headers: headers,
              credentials: _this70.opts.companionCookiesRule || 'same-origin'
            });
          }).then(_classPrivateFieldLooseBase(this, _getPostResponseFunc)[_getPostResponseFunc](skipPostResponse)).then(handleJSONResponse).catch(_classPrivateFieldLooseBase(this, _errorHandler)[_errorHandler](method, path));
        };

        _proto20.post = function post(path, data, skipPostResponse) {
          var _this71 = this;

          var method = 'post';
          return this.preflightAndHeaders(path).then(function (headers) {
            return fetchWithNetworkError(_classPrivateFieldLooseBase(_this71, _getUrl)[_getUrl](path), {
              method: method,
              headers: headers,
              credentials: _this71.opts.companionCookiesRule || 'same-origin',
              body: JSON.stringify(data)
            });
          }).then(_classPrivateFieldLooseBase(this, _getPostResponseFunc)[_getPostResponseFunc](skipPostResponse)).then(handleJSONResponse).catch(_classPrivateFieldLooseBase(this, _errorHandler)[_errorHandler](method, path));
        };

        _proto20.delete = function _delete(path, data, skipPostResponse) {
          var _this72 = this;

          var method = 'delete';
          return this.preflightAndHeaders(path).then(function (headers) {
            return fetchWithNetworkError(_this72.hostname + "/" + path, {
              method: method,
              headers: headers,
              credentials: _this72.opts.companionCookiesRule || 'same-origin',
              body: data ? JSON.stringify(data) : null
            });
          }).then(_classPrivateFieldLooseBase(this, _getPostResponseFunc)[_getPostResponseFunc](skipPostResponse)).then(handleJSONResponse).catch(_classPrivateFieldLooseBase(this, _errorHandler)[_errorHandler](method, path));
        };

        _createClass2(RequestClient, [{
          key: "hostname",
          get: function get() {
            var _this$uppy$getState3 = this.uppy.getState(),
                companion = _this$uppy$getState3.companion;

            var host = this.opts.companionUrl;
            return stripSlash(companion && companion[host] ? companion[host] : host);
          }
        }]);

        return RequestClient;
      }()), _class.VERSION = "2.0.0", _class.defaultHeaders = {
        Accept: 'application/json',
        'Content-Type': 'application/json',
        'Uppy-Versions': "@uppy/companion-client=" + _class.VERSION
      }, _temp);

      function _getUrl2(url) {
        if (/^(https?:|)\/\//.test(url)) {
          return url;
        }

        return this.hostname + "/" + url;
      }

      function _errorHandler2(method, path) {
        var _this73 = this;

        return function (err) {
          var _err;

          if (!((_err = err) != null && _err.isAuthError)) {
            var error = new Error("Could not " + method + " " + _classPrivateFieldLooseBase(_this73, _getUrl)[_getUrl](path));
            error.cause = err;
            err = error; // eslint-disable-line no-param-reassign
          }

          return Promise.reject(err);
        };
      }
    }, {
      "./AuthError": 635,
      "@uppy/utils/lib/fetchWithNetworkError": 756
    }],
    638: [function (require, module, exports) {
      'use strict';

      var RequestClient = require('./RequestClient');

      var getName = function getName(id) {
        return id.split('-').map(function (s) {
          return s.charAt(0).toUpperCase() + s.slice(1);
        }).join(' ');
      };

      module.exports = /*#__PURE__*/function (_RequestClient2) {
        _inheritsLoose(SearchProvider, _RequestClient2);

        function SearchProvider(uppy, opts) {
          var _this74;

          _this74 = _RequestClient2.call(this, uppy, opts) || this;
          _this74.provider = opts.provider;
          _this74.id = _this74.provider;
          _this74.name = _this74.opts.name || getName(_this74.id);
          _this74.pluginId = _this74.opts.pluginId;
          return _this74;
        }

        var _proto21 = SearchProvider.prototype;

        _proto21.fileUrl = function fileUrl(id) {
          return this.hostname + "/search/" + this.id + "/get/" + id;
        };

        _proto21.search = function search(text, queries) {
          queries = queries ? "&" + queries : '';
          return this.get("search/" + this.id + "/list?q=" + encodeURIComponent(text) + queries);
        };

        return SearchProvider;
      }(RequestClient);
    }, {
      "./RequestClient": 637
    }],
    639: [function (require, module, exports) {
      "use strict";

      var _queued, _emitter, _isOpen, _socket, _handleMessage;

      var _Symbol$for, _Symbol$for2;

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }

      var ee = require('namespace-emitter');

      module.exports = (_queued = /*#__PURE__*/_classPrivateFieldLooseKey("queued"), _emitter = /*#__PURE__*/_classPrivateFieldLooseKey("emitter"), _isOpen = /*#__PURE__*/_classPrivateFieldLooseKey("isOpen"), _socket = /*#__PURE__*/_classPrivateFieldLooseKey("socket"), _handleMessage = /*#__PURE__*/_classPrivateFieldLooseKey("handleMessage"), _Symbol$for = Symbol.for('uppy test: getSocket'), _Symbol$for2 = Symbol.for('uppy test: getQueued'), /*#__PURE__*/function () {
        function UppySocket(opts) {
          var _this75 = this;

          Object.defineProperty(this, _queued, {
            writable: true,
            value: []
          });
          Object.defineProperty(this, _emitter, {
            writable: true,
            value: ee()
          });
          Object.defineProperty(this, _isOpen, {
            writable: true,
            value: false
          });
          Object.defineProperty(this, _socket, {
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, _handleMessage, {
            writable: true,
            value: function value(e) {
              try {
                var message = JSON.parse(e.data);

                _this75.emit(message.action, message.payload);
              } catch (err) {
                // TODO: use a more robust error handler.
                console.log(err); // eslint-disable-line no-console
              }
            }
          });
          this.opts = opts;

          if (!opts || opts.autoOpen !== false) {
            this.open();
          }
        }

        var _proto22 = UppySocket.prototype;

        _proto22[_Symbol$for] = function () {
          return _classPrivateFieldLooseBase(this, _socket)[_socket];
        };

        _proto22[_Symbol$for2] = function () {
          return _classPrivateFieldLooseBase(this, _queued)[_queued];
        };

        _proto22.open = function open() {
          var _this76 = this;

          _classPrivateFieldLooseBase(this, _socket)[_socket] = new WebSocket(this.opts.target);

          _classPrivateFieldLooseBase(this, _socket)[_socket].onopen = function () {
            _classPrivateFieldLooseBase(_this76, _isOpen)[_isOpen] = true;

            while (_classPrivateFieldLooseBase(_this76, _queued)[_queued].length > 0 && _classPrivateFieldLooseBase(_this76, _isOpen)[_isOpen]) {
              var first = _classPrivateFieldLooseBase(_this76, _queued)[_queued].shift();

              _this76.send(first.action, first.payload);
            }
          };

          _classPrivateFieldLooseBase(this, _socket)[_socket].onclose = function () {
            _classPrivateFieldLooseBase(_this76, _isOpen)[_isOpen] = false;
          };

          _classPrivateFieldLooseBase(this, _socket)[_socket].onmessage = _classPrivateFieldLooseBase(this, _handleMessage)[_handleMessage];
        };

        _proto22.close = function close() {
          var _classPrivateFieldLoo;

          (_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _socket)[_socket]) == null ? void 0 : _classPrivateFieldLoo.close();
        };

        _proto22.send = function send(action, payload) {
          // attach uuid
          if (!_classPrivateFieldLooseBase(this, _isOpen)[_isOpen]) {
            _classPrivateFieldLooseBase(this, _queued)[_queued].push({
              action: action,
              payload: payload
            });

            return;
          }

          _classPrivateFieldLooseBase(this, _socket)[_socket].send(JSON.stringify({
            action: action,
            payload: payload
          }));
        };

        _proto22.on = function on(action, handler) {
          _classPrivateFieldLooseBase(this, _emitter)[_emitter].on(action, handler);
        };

        _proto22.emit = function emit(action, payload) {
          _classPrivateFieldLooseBase(this, _emitter)[_emitter].emit(action, payload);
        };

        _proto22.once = function once(action, handler) {
          _classPrivateFieldLooseBase(this, _emitter)[_emitter].once(action, handler);
        };

        _createClass2(UppySocket, [{
          key: "isOpen",
          get: function get() {
            return _classPrivateFieldLooseBase(this, _isOpen)[_isOpen];
          }
        }]);

        return UppySocket;
      }());
    }, {
      "namespace-emitter": 592
    }],
    640: [function (require, module, exports) {
      'use strict';
      /**
       * Manages communications with Companion
       */

      var RequestClient = require('./RequestClient');

      var Provider = require('./Provider');

      var SearchProvider = require('./SearchProvider');

      var Socket = require('./Socket');

      module.exports = {
        RequestClient: RequestClient,
        Provider: Provider,
        SearchProvider: SearchProvider,
        Socket: Socket
      };
    }, {
      "./Provider": 636,
      "./RequestClient": 637,
      "./SearchProvider": 638,
      "./Socket": 639
    }],
    641: [function (require, module, exports) {
      'use strict';
      /**
       * This module serves as an Async wrapper for LocalStorage
       */

      module.exports.setItem = function (key, value) {
        return new Promise(function (resolve) {
          localStorage.setItem(key, value);
          resolve();
        });
      };

      module.exports.getItem = function (key) {
        return Promise.resolve(localStorage.getItem(key));
      };

      module.exports.removeItem = function (key) {
        return new Promise(function (resolve) {
          localStorage.removeItem(key);
          resolve();
        });
      };
    }, {}],
    642: [function (require, module, exports) {
      "use strict";
      /**
       * Core plugin logic that all plugins share.
       *
       * BasePlugin does not contain DOM rendering so it can be used for plugins
       * without a user interface.
       *
       * See `Plugin` for the extended version with Preact rendering for interfaces.
       */

      var Translator = require('@uppy/utils/lib/Translator');

      module.exports = /*#__PURE__*/function () {
        function BasePlugin(uppy, opts) {
          if (opts === void 0) {
            opts = {};
          }

          this.uppy = uppy;
          this.opts = opts;
        }

        var _proto23 = BasePlugin.prototype;

        _proto23.getPluginState = function getPluginState() {
          var _this$uppy$getState4 = this.uppy.getState(),
              plugins = _this$uppy$getState4.plugins;

          return plugins[this.id] || {};
        };

        _proto23.setPluginState = function setPluginState(update) {
          var _Object$assign2;

          var _this$uppy$getState5 = this.uppy.getState(),
              plugins = _this$uppy$getState5.plugins;

          this.uppy.setState({
            plugins: Object.assign({}, plugins, (_Object$assign2 = {}, _Object$assign2[this.id] = Object.assign({}, plugins[this.id], update), _Object$assign2))
          });
        };

        _proto23.setOptions = function setOptions(newOpts) {
          this.opts = Object.assign({}, this.opts, newOpts);
          this.setPluginState(); // so that UI re-renders with new options

          this.i18nInit();
        };

        _proto23.i18nInit = function i18nInit() {
          var translator = new Translator([this.defaultLocale, this.uppy.locale, this.opts.locale]);
          this.i18n = translator.translate.bind(translator);
          this.i18nArray = translator.translateArray.bind(translator);
          this.setPluginState(); // so that UI re-renders and we see the updated locale
        }
        /**
         * Extendable methods
         * ==================
         * These methods are here to serve as an overview of the extendable methods as well as
         * making them not conditional in use, such as `if (this.afterUpdate)`.
         */
        // eslint-disable-next-line class-methods-use-this
        ;

        _proto23.addTarget = function addTarget() {
          throw new Error('Extend the addTarget method to add your plugin to another plugin\'s target');
        } // eslint-disable-next-line class-methods-use-this
        ;

        _proto23.install = function install() {} // eslint-disable-next-line class-methods-use-this
        ;

        _proto23.uninstall = function uninstall() {}
        /**
         * Called when plugin is mounted, whether in DOM or into another plugin.
         * Needed because sometimes plugins are mounted separately/after `install`,
         * so this.el and this.parent might not be available in `install`.
         * This is the case with @uppy/react plugins, for example.
         */
        ;

        _proto23.render = function render() {
          throw new Error('Extend the render method to add your plugin to a DOM element');
        } // eslint-disable-next-line class-methods-use-this
        ;

        _proto23.update = function update() {} // Called after every state update, after everything's mounted. Debounced.
        // eslint-disable-next-line class-methods-use-this
        ;

        _proto23.afterUpdate = function afterUpdate() {};

        return BasePlugin;
      }();
    }, {
      "@uppy/utils/lib/Translator": 751
    }],
    643: [function (require, module, exports) {
      "use strict";

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }

      var _require21 = require('preact'),
          render = _require21.render;

      var findDOMElement = require('@uppy/utils/lib/findDOMElement');

      var BasePlugin = require('./BasePlugin');
      /**
       * Defer a frequent call to the microtask queue.
       *
       * @param {() => T} fn
       * @returns {Promise<T>}
       */


      function debounce(fn) {
        var calling = null;
        var latestArgs = null;
        return function () {
          for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
            args[_key10] = arguments[_key10];
          }

          latestArgs = args;

          if (!calling) {
            calling = Promise.resolve().then(function () {
              calling = null; // At this point `args` may be different from the most
              // recent state, if multiple calls happened since this task
              // was queued. So we use the `latestArgs`, which definitely
              // is the most recent call.

              return fn.apply(void 0, latestArgs);
            });
          }

          return calling;
        };
      }
      /**
       * UIPlugin is the extended version of BasePlugin to incorporate rendering with Preact.
       * Use this for plugins that need a user interface.
       *
       * For plugins without an user interface, see BasePlugin.
       */


      var _updateUI = /*#__PURE__*/_classPrivateFieldLooseKey("updateUI");

      var UIPlugin = /*#__PURE__*/function (_BasePlugin3) {
        _inheritsLoose(UIPlugin, _BasePlugin3);

        function UIPlugin() {
          var _this77;

          for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
            args[_key11] = arguments[_key11];
          }

          _this77 = _BasePlugin3.call.apply(_BasePlugin3, [this].concat(args)) || this;
          Object.defineProperty(_assertThisInitialized2(_this77), _updateUI, {
            writable: true,
            value: void 0
          });
          return _this77;
        }
        /**
         * Check if supplied `target` is a DOM element or an `object`.
         * If it’s an object — target is a plugin, and we search `plugins`
         * for a plugin with same name and return its target.
         */


        var _proto24 = UIPlugin.prototype;

        _proto24.mount = function mount(target, plugin) {
          var _this78 = this;

          var callerPluginName = plugin.id;
          var targetElement = findDOMElement(target);

          if (targetElement) {
            this.isTargetDOMEl = true; // When target is <body> with a single <div> element,
            // Preact thinks it’s the Uppy root element in there when doing a diff,
            // and destroys it. So we are creating a fragment (could be empty div)

            var uppyRootElement = document.createDocumentFragment(); // API for plugins that require a synchronous rerender.

            _classPrivateFieldLooseBase(this, _updateUI)[_updateUI] = debounce(function (state) {
              // plugin could be removed, but this.rerender is debounced below,
              // so it could still be called even after uppy.removePlugin or uppy.close
              // hence the check
              if (!_this78.uppy.getPlugin(_this78.id)) return;
              render(_this78.render(state), uppyRootElement);

              _this78.afterUpdate();
            });
            this.uppy.log("Installing " + callerPluginName + " to a DOM element '" + target + "'");

            if (this.opts.replaceTargetContent) {
              // Doing render(h(null), targetElement), which should have been
              // a better way, since because the component might need to do additional cleanup when it is removed,
              // stopped working — Preact just adds null into target, not replacing
              targetElement.innerHTML = '';
            }

            render(this.render(this.uppy.getState()), uppyRootElement);
            this.el = uppyRootElement.firstElementChild;
            targetElement.appendChild(uppyRootElement);
            this.onMount();
            return this.el;
          }

          var targetPlugin;

          if (typeof target === 'object' && target instanceof UIPlugin) {
            // Targeting a plugin *instance*
            targetPlugin = target;
          } else if (typeof target === 'function') {
            // Targeting a plugin type
            var Target = target; // Find the target plugin instance.

            this.uppy.iteratePlugins(function (p) {
              if (p instanceof Target) {
                targetPlugin = p;
                return false;
              }
            });
          }

          if (targetPlugin) {
            this.uppy.log("Installing " + callerPluginName + " to " + targetPlugin.id);
            this.parent = targetPlugin;
            this.el = targetPlugin.addTarget(plugin);
            this.onMount();
            return this.el;
          }

          this.uppy.log("Not installing " + callerPluginName);
          var message = "Invalid target option given to " + callerPluginName + ".";

          if (typeof target === 'function') {
            message += ' The given target is not a Plugin class. ' + 'Please check that you\'re not specifying a React Component instead of a plugin. ' + 'If you are using @uppy/* packages directly, make sure you have only 1 version of @uppy/core installed: ' + 'run `npm ls @uppy/core` on the command line and verify that all the versions match and are deduped correctly.';
          } else {
            message += 'If you meant to target an HTML element, please make sure that the element exists. ' + 'Check that the <script> tag initializing Uppy is right before the closing </body> tag at the end of the page. ' + '(see https://github.com/transloadit/uppy/issues/1042)\n\n' + 'If you meant to target a plugin, please confirm that your `import` statements or `require` calls are correct.';
          }

          throw new Error(message);
        };

        _proto24.update = function update(state) {
          if (this.el != null) {
            var _classPrivateFieldLoo, _classPrivateFieldLoo2;

            (_classPrivateFieldLoo = (_classPrivateFieldLoo2 = _classPrivateFieldLooseBase(this, _updateUI))[_updateUI]) == null ? void 0 : _classPrivateFieldLoo.call(_classPrivateFieldLoo2, state);
          }
        };

        _proto24.unmount = function unmount() {
          if (this.isTargetDOMEl) {
            var _this$el;

            (_this$el = this.el) == null ? void 0 : _this$el.remove();
          }

          this.onUnmount();
        } // eslint-disable-next-line class-methods-use-this
        ;

        _proto24.onMount = function onMount() {} // eslint-disable-next-line class-methods-use-this
        ;

        _proto24.onUnmount = function onUnmount() {};

        return UIPlugin;
      }(BasePlugin);

      module.exports = UIPlugin;
    }, {
      "./BasePlugin": 642,
      "@uppy/utils/lib/findDOMElement": 758,
      "preact": 595
    }],
    644: [function (require, module, exports) {
      "use strict";

      module.exports = function getFileName(fileType, fileDescriptor) {
        if (fileDescriptor.name) {
          return fileDescriptor.name;
        }

        if (fileType.split('/')[0] === 'image') {
          return fileType.split('/')[0] + "." + fileType.split('/')[1];
        }

        return 'noname';
      };
    }, {}],
    645: [function (require, module, exports) {
      "use strict";

      var _Symbol$for, _Symbol$for2;

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }
      /* global AggregateError */


      var Translator = require('@uppy/utils/lib/Translator');

      var ee = require('namespace-emitter');

      var _require22 = require('nanoid'),
          nanoid = _require22.nanoid;

      var throttle = require('lodash.throttle');

      var prettierBytes = require('@transloadit/prettier-bytes');

      var match = require('mime-match');

      var DefaultStore = require('@uppy/store-default');

      var getFileType = require('@uppy/utils/lib/getFileType');

      var getFileNameAndExtension = require('@uppy/utils/lib/getFileNameAndExtension');

      var generateFileID = require('@uppy/utils/lib/generateFileID');

      var supportsUploadProgress = require('./supportsUploadProgress');

      var getFileName = require('./getFileName');

      var _require23 = require('./loggers'),
          justErrorsLogger = _require23.justErrorsLogger,
          debugLogger = _require23.debugLogger;

      var UIPlugin = require('./UIPlugin');

      var BasePlugin = require('./BasePlugin'); // Exported from here.


      var RestrictionError = /*#__PURE__*/function (_Error3) {
        _inheritsLoose(RestrictionError, _Error3);

        function RestrictionError() {
          var _this79;

          for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
            args[_key12] = arguments[_key12];
          }

          _this79 = _Error3.call.apply(_Error3, [this].concat(args)) || this;
          _this79.isRestriction = true;
          return _this79;
        }

        return RestrictionError;
      }( /*#__PURE__*/_wrapNativeSuper2(Error));

      if (typeof AggregateError === 'undefined') {
        // eslint-disable-next-line no-global-assign
        globalThis.AggregateError = /*#__PURE__*/function (_Error4) {
          _inheritsLoose(AggregateError, _Error4);

          function AggregateError(message, errors) {
            var _this80;

            _this80 = _Error4.call(this, message) || this;
            _this80.errors = errors;
            return _this80;
          }

          return AggregateError;
        }( /*#__PURE__*/_wrapNativeSuper2(Error));
      }

      var AggregateRestrictionError = /*#__PURE__*/function (_AggregateError) {
        _inheritsLoose(AggregateRestrictionError, _AggregateError);

        function AggregateRestrictionError() {
          var _this81;

          for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {
            args[_key13] = arguments[_key13];
          }

          _this81 = _AggregateError.call.apply(_AggregateError, [this].concat(args)) || this;
          _this81.isRestriction = true;
          return _this81;
        }

        return AggregateRestrictionError;
      }(AggregateError);
      /**
       * Uppy Core module.
       * Manages plugins, state updates, acts as an event bus,
       * adds/removes files and metadata.
       */


      var _plugins = /*#__PURE__*/_classPrivateFieldLooseKey("plugins");

      var _storeUnsubscribe = /*#__PURE__*/_classPrivateFieldLooseKey("storeUnsubscribe");

      var _emitter = /*#__PURE__*/_classPrivateFieldLooseKey("emitter");

      var _preProcessors = /*#__PURE__*/_classPrivateFieldLooseKey("preProcessors");

      var _uploaders = /*#__PURE__*/_classPrivateFieldLooseKey("uploaders");

      var _postProcessors = /*#__PURE__*/_classPrivateFieldLooseKey("postProcessors");

      var _checkRestrictions = /*#__PURE__*/_classPrivateFieldLooseKey("checkRestrictions");

      var _checkMinNumberOfFiles = /*#__PURE__*/_classPrivateFieldLooseKey("checkMinNumberOfFiles");

      var _checkRequiredMetaFields = /*#__PURE__*/_classPrivateFieldLooseKey("checkRequiredMetaFields");

      var _showOrLogErrorAndThrow = /*#__PURE__*/_classPrivateFieldLooseKey("showOrLogErrorAndThrow");

      var _assertNewUploadAllowed = /*#__PURE__*/_classPrivateFieldLooseKey("assertNewUploadAllowed");

      var _checkAndCreateFileStateObject = /*#__PURE__*/_classPrivateFieldLooseKey("checkAndCreateFileStateObject");

      var _startIfAutoProceed = /*#__PURE__*/_classPrivateFieldLooseKey("startIfAutoProceed");

      var _addListeners = /*#__PURE__*/_classPrivateFieldLooseKey("addListeners");

      var _updateOnlineStatus = /*#__PURE__*/_classPrivateFieldLooseKey("updateOnlineStatus");

      var _createUpload = /*#__PURE__*/_classPrivateFieldLooseKey("createUpload");

      var _getUpload = /*#__PURE__*/_classPrivateFieldLooseKey("getUpload");

      var _removeUpload = /*#__PURE__*/_classPrivateFieldLooseKey("removeUpload");

      var _runUpload = /*#__PURE__*/_classPrivateFieldLooseKey("runUpload");

      _Symbol$for = Symbol.for('uppy test: getPlugins');
      _Symbol$for2 = Symbol.for('uppy test: createUpload');

      var Uppy = /*#__PURE__*/function () {
        // eslint-disable-next-line global-require

        /** @type {Record<string, BasePlugin[]>} */

        /**
         * Instantiate Uppy
         *
         * @param {object} opts — Uppy options
         */
        function Uppy(_opts) {
          var _this82 = this;

          Object.defineProperty(this, _runUpload, {
            value: _runUpload2
          });
          Object.defineProperty(this, _removeUpload, {
            value: _removeUpload2
          });
          Object.defineProperty(this, _getUpload, {
            value: _getUpload2
          });
          Object.defineProperty(this, _createUpload, {
            value: _createUpload2
          });
          Object.defineProperty(this, _addListeners, {
            value: _addListeners2
          });
          Object.defineProperty(this, _startIfAutoProceed, {
            value: _startIfAutoProceed2
          });
          Object.defineProperty(this, _checkAndCreateFileStateObject, {
            value: _checkAndCreateFileStateObject2
          });
          Object.defineProperty(this, _assertNewUploadAllowed, {
            value: _assertNewUploadAllowed2
          });
          Object.defineProperty(this, _showOrLogErrorAndThrow, {
            value: _showOrLogErrorAndThrow2
          });
          Object.defineProperty(this, _checkRequiredMetaFields, {
            value: _checkRequiredMetaFields2
          });
          Object.defineProperty(this, _checkMinNumberOfFiles, {
            value: _checkMinNumberOfFiles2
          });
          Object.defineProperty(this, _checkRestrictions, {
            value: _checkRestrictions2
          });
          Object.defineProperty(this, _plugins, {
            writable: true,
            value: Object.create(null)
          });
          Object.defineProperty(this, _storeUnsubscribe, {
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, _emitter, {
            writable: true,
            value: ee()
          });
          Object.defineProperty(this, _preProcessors, {
            writable: true,
            value: new Set()
          });
          Object.defineProperty(this, _uploaders, {
            writable: true,
            value: new Set()
          });
          Object.defineProperty(this, _postProcessors, {
            writable: true,
            value: new Set()
          });
          Object.defineProperty(this, _updateOnlineStatus, {
            writable: true,
            value: this.updateOnlineStatus.bind(this)
          });
          this.defaultLocale = {
            strings: {
              addBulkFilesFailed: {
                0: 'Failed to add %{smart_count} file due to an internal error',
                1: 'Failed to add %{smart_count} files due to internal errors'
              },
              youCanOnlyUploadX: {
                0: 'You can only upload %{smart_count} file',
                1: 'You can only upload %{smart_count} files'
              },
              youHaveToAtLeastSelectX: {
                0: 'You have to select at least %{smart_count} file',
                1: 'You have to select at least %{smart_count} files'
              },
              exceedsSize: '%{file} exceeds maximum allowed size of %{size}',
              missingRequiredMetaField: 'Missing required meta fields',
              missingRequiredMetaFieldOnFile: 'Missing required meta fields in %{fileName}',
              inferiorSize: 'This file is smaller than the allowed size of %{size}',
              youCanOnlyUploadFileTypes: 'You can only upload: %{types}',
              noMoreFilesAllowed: 'Cannot add more files',
              noDuplicates: 'Cannot add the duplicate file \'%{fileName}\', it already exists',
              companionError: 'Connection with Companion failed',
              companionUnauthorizeHint: 'To unauthorize to your %{provider} account, please go to %{url}',
              failedToUpload: 'Failed to upload %{file}',
              noInternetConnection: 'No Internet connection',
              connectedToInternet: 'Connected to the Internet',
              // Strings for remote providers
              noFilesFound: 'You have no files or folders here',
              selectX: {
                0: 'Select %{smart_count}',
                1: 'Select %{smart_count}'
              },
              allFilesFromFolderNamed: 'All files from folder %{name}',
              openFolderNamed: 'Open folder %{name}',
              cancel: 'Cancel',
              logOut: 'Log out',
              filter: 'Filter',
              resetFilter: 'Reset filter',
              loading: 'Loading...',
              authenticateWithTitle: 'Please authenticate with %{pluginName} to select files',
              authenticateWith: 'Connect to %{pluginName}',
              signInWithGoogle: 'Sign in with Google',
              searchImages: 'Search for images',
              enterTextToSearch: 'Enter text to search for images',
              backToSearch: 'Back to Search',
              emptyFolderAdded: 'No files were added from empty folder',
              folderAlreadyAdded: 'The folder "%{folder}" was already added',
              folderAdded: {
                0: 'Added %{smart_count} file from %{folder}',
                1: 'Added %{smart_count} files from %{folder}'
              }
            }
          };
          var defaultOptions = {
            id: 'uppy',
            autoProceed: false,

            /**
             * @deprecated The method should not be used
             */
            allowMultipleUploads: true,
            allowMultipleUploadBatches: true,
            debug: false,
            restrictions: {
              maxFileSize: null,
              minFileSize: null,
              maxTotalFileSize: null,
              maxNumberOfFiles: null,
              minNumberOfFiles: null,
              allowedFileTypes: null,
              requiredMetaFields: []
            },
            meta: {},
            onBeforeFileAdded: function onBeforeFileAdded(currentFile) {
              return currentFile;
            },
            onBeforeUpload: function onBeforeUpload(files) {
              return files;
            },
            store: DefaultStore(),
            logger: justErrorsLogger,
            infoTimeout: 5000
          }; // Merge default options with the ones set by user,
          // making sure to merge restrictions too

          this.opts = Object.assign({}, defaultOptions, _opts, {
            restrictions: Object.assign({}, defaultOptions.restrictions, _opts && _opts.restrictions)
          }); // Support debug: true for backwards-compatability, unless logger is set in opts
          // opts instead of this.opts to avoid comparing objects — we set logger: justErrorsLogger in defaultOptions

          if (_opts && _opts.logger && _opts.debug) {
            this.log('You are using a custom `logger`, but also set `debug: true`, which uses built-in logger to output logs to console. Ignoring `debug: true` and using your custom `logger`.', 'warning');
          } else if (_opts && _opts.debug) {
            this.opts.logger = debugLogger;
          }

          this.log("Using Core v" + this.constructor.VERSION);

          if (this.opts.restrictions.allowedFileTypes && this.opts.restrictions.allowedFileTypes !== null && !Array.isArray(this.opts.restrictions.allowedFileTypes)) {
            throw new TypeError('`restrictions.allowedFileTypes` must be an array');
          }

          this.i18nInit(); // ___Why throttle at 500ms?
          //    - We must throttle at >250ms for superfocus in Dashboard to work well
          //    (because animation takes 0.25s, and we want to wait for all animations to be over before refocusing).
          //    [Practical Check]: if thottle is at 100ms, then if you are uploading a file,
          //    and click 'ADD MORE FILES', - focus won't activate in Firefox.
          //    - We must throttle at around >500ms to avoid performance lags.
          //    [Practical Check] Firefox, try to upload a big file for a prolonged period of time. Laptop will start to heat up.

          this.calculateProgress = throttle(this.calculateProgress.bind(this), 500, {
            leading: true,
            trailing: true
          });
          this.store = this.opts.store;
          this.setState({
            plugins: {},
            files: {},
            currentUploads: {},
            allowNewUpload: true,
            capabilities: {
              uploadProgress: supportsUploadProgress(),
              individualCancellation: true,
              resumableUploads: false
            },
            totalProgress: 0,
            meta: Object.assign({}, this.opts.meta),
            info: [],
            recoveredState: null
          });
          _classPrivateFieldLooseBase(this, _storeUnsubscribe)[_storeUnsubscribe] = this.store.subscribe(function (prevState, nextState, patch) {
            _this82.emit('state-update', prevState, nextState, patch);

            _this82.updateAll(nextState);
          }); // Exposing uppy object on window for debugging and testing

          if (this.opts.debug && typeof window !== 'undefined') {
            window[this.opts.id] = this;
          }

          _classPrivateFieldLooseBase(this, _addListeners)[_addListeners]();
        }

        var _proto25 = Uppy.prototype;

        _proto25.emit = function emit(event) {
          var _classPrivateFieldLoo3;

          for (var _len14 = arguments.length, args = new Array(_len14 > 1 ? _len14 - 1 : 0), _key14 = 1; _key14 < _len14; _key14++) {
            args[_key14 - 1] = arguments[_key14];
          }

          (_classPrivateFieldLoo3 = _classPrivateFieldLooseBase(this, _emitter)[_emitter]).emit.apply(_classPrivateFieldLoo3, [event].concat(args));
        };

        _proto25.on = function on(event, callback) {
          _classPrivateFieldLooseBase(this, _emitter)[_emitter].on(event, callback);

          return this;
        };

        _proto25.once = function once(event, callback) {
          _classPrivateFieldLooseBase(this, _emitter)[_emitter].once(event, callback);

          return this;
        };

        _proto25.off = function off(event, callback) {
          _classPrivateFieldLooseBase(this, _emitter)[_emitter].off(event, callback);

          return this;
        }
        /**
         * Iterate on all plugins and run `update` on them.
         * Called each time state changes.
         *
         */
        ;

        _proto25.updateAll = function updateAll(state) {
          this.iteratePlugins(function (plugin) {
            plugin.update(state);
          });
        }
        /**
         * Updates state with a patch
         *
         * @param {object} patch {foo: 'bar'}
         */
        ;

        _proto25.setState = function setState(patch) {
          this.store.setState(patch);
        }
        /**
         * Returns current state.
         *
         * @returns {object}
         */
        ;

        _proto25.getState = function getState() {
          return this.store.getState();
        }
        /**
         * Back compat for when uppy.state is used instead of uppy.getState().
         *
         * @deprecated
         */
        ;

        /**
         * Shorthand to set state for a specific file.
         */
        _proto25.setFileState = function setFileState(fileID, state) {
          var _Object$assign3;

          if (!this.getState().files[fileID]) {
            throw new Error("Can\u2019t set state for " + fileID + " (the file could have been removed)");
          }

          this.setState({
            files: Object.assign({}, this.getState().files, (_Object$assign3 = {}, _Object$assign3[fileID] = Object.assign({}, this.getState().files[fileID], state), _Object$assign3))
          });
        };

        _proto25.i18nInit = function i18nInit() {
          var translator = new Translator([this.defaultLocale, this.opts.locale]);
          this.i18n = translator.translate.bind(translator);
          this.i18nArray = translator.translateArray.bind(translator);
          this.locale = translator.locale;
        };

        _proto25.setOptions = function setOptions(newOpts) {
          this.opts = Object.assign({}, this.opts, newOpts, {
            restrictions: Object.assign({}, this.opts.restrictions, newOpts && newOpts.restrictions)
          });

          if (newOpts.meta) {
            this.setMeta(newOpts.meta);
          }

          this.i18nInit();

          if (newOpts.locale) {
            this.iteratePlugins(function (plugin) {
              plugin.setOptions();
            });
          } // Note: this is not the preact `setState`, it's an internal function that has the same name.


          this.setState(); // so that UI re-renders with new options
        };

        _proto25.resetProgress = function resetProgress() {
          var defaultProgress = {
            percentage: 0,
            bytesUploaded: 0,
            uploadComplete: false,
            uploadStarted: null
          };
          var files = Object.assign({}, this.getState().files);
          var updatedFiles = {};
          Object.keys(files).forEach(function (fileID) {
            var updatedFile = Object.assign({}, files[fileID]);
            updatedFile.progress = Object.assign({}, updatedFile.progress, defaultProgress);
            updatedFiles[fileID] = updatedFile;
          });
          this.setState({
            files: updatedFiles,
            totalProgress: 0
          });
          this.emit('reset-progress');
        };

        _proto25.addPreProcessor = function addPreProcessor(fn) {
          _classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors].add(fn);
        };

        _proto25.removePreProcessor = function removePreProcessor(fn) {
          return _classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors].delete(fn);
        };

        _proto25.addPostProcessor = function addPostProcessor(fn) {
          _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].add(fn);
        };

        _proto25.removePostProcessor = function removePostProcessor(fn) {
          return _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors].delete(fn);
        };

        _proto25.addUploader = function addUploader(fn) {
          _classPrivateFieldLooseBase(this, _uploaders)[_uploaders].add(fn);
        };

        _proto25.removeUploader = function removeUploader(fn) {
          return _classPrivateFieldLooseBase(this, _uploaders)[_uploaders].delete(fn);
        };

        _proto25.setMeta = function setMeta(data) {
          var updatedMeta = Object.assign({}, this.getState().meta, data);
          var updatedFiles = Object.assign({}, this.getState().files);
          Object.keys(updatedFiles).forEach(function (fileID) {
            updatedFiles[fileID] = Object.assign({}, updatedFiles[fileID], {
              meta: Object.assign({}, updatedFiles[fileID].meta, data)
            });
          });
          this.log('Adding metadata:');
          this.log(data);
          this.setState({
            meta: updatedMeta,
            files: updatedFiles
          });
        };

        _proto25.setFileMeta = function setFileMeta(fileID, data) {
          var updatedFiles = Object.assign({}, this.getState().files);

          if (!updatedFiles[fileID]) {
            this.log('Was trying to set metadata for a file that has been removed: ', fileID);
            return;
          }

          var newMeta = Object.assign({}, updatedFiles[fileID].meta, data);
          updatedFiles[fileID] = Object.assign({}, updatedFiles[fileID], {
            meta: newMeta
          });
          this.setState({
            files: updatedFiles
          });
        }
        /**
         * Get a file object.
         *
         * @param {string} fileID The ID of the file object to return.
         */
        ;

        _proto25.getFile = function getFile(fileID) {
          return this.getState().files[fileID];
        }
        /**
         * Get all files in an array.
         */
        ;

        _proto25.getFiles = function getFiles() {
          var _this$getState = this.getState(),
              files = _this$getState.files;

          return Object.values(files);
        };

        _proto25.getObjectOfFilesPerState = function getObjectOfFilesPerState() {
          var _this$getState2 = this.getState(),
              filesObject = _this$getState2.files,
              totalProgress = _this$getState2.totalProgress,
              error = _this$getState2.error;

          var files = Object.values(filesObject);
          var inProgressFiles = files.filter(function (_ref18) {
            var progress = _ref18.progress;
            return !progress.uploadComplete && progress.uploadStarted;
          });
          var newFiles = files.filter(function (file) {
            return !file.progress.uploadStarted;
          });
          var startedFiles = files.filter(function (file) {
            return file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess;
          });
          var uploadStartedFiles = files.filter(function (file) {
            return file.progress.uploadStarted;
          });
          var pausedFiles = files.filter(function (file) {
            return file.isPaused;
          });
          var completeFiles = files.filter(function (file) {
            return file.progress.uploadComplete;
          });
          var erroredFiles = files.filter(function (file) {
            return file.error;
          });
          var inProgressNotPausedFiles = inProgressFiles.filter(function (file) {
            return !file.isPaused;
          });
          var processingFiles = files.filter(function (file) {
            return file.progress.preprocess || file.progress.postprocess;
          });
          return {
            newFiles: newFiles,
            startedFiles: startedFiles,
            uploadStartedFiles: uploadStartedFiles,
            pausedFiles: pausedFiles,
            completeFiles: completeFiles,
            erroredFiles: erroredFiles,
            inProgressFiles: inProgressFiles,
            inProgressNotPausedFiles: inProgressNotPausedFiles,
            processingFiles: processingFiles,
            isUploadStarted: uploadStartedFiles.length > 0,
            isAllComplete: totalProgress === 100 && completeFiles.length === files.length && processingFiles.length === 0,
            isAllErrored: !!error && erroredFiles.length === files.length,
            isAllPaused: inProgressFiles.length !== 0 && pausedFiles.length === inProgressFiles.length,
            isUploadInProgress: inProgressFiles.length > 0,
            isSomeGhost: files.some(function (file) {
              return file.isGhost;
            })
          };
        }
        /**
         * A public wrapper for _checkRestrictions — checks if a file passes a set of restrictions.
         * For use in UI pluigins (like Providers), to disallow selecting files that won’t pass restrictions.
         *
         * @param {object} file object to check
         * @param {Array} [files] array to check maxNumberOfFiles and maxTotalFileSize
         * @returns {object} { result: true/false, reason: why file didn’t pass restrictions }
         */
        ;

        _proto25.validateRestrictions = function validateRestrictions(file, files) {
          try {
            _classPrivateFieldLooseBase(this, _checkRestrictions)[_checkRestrictions](file, files);

            return {
              result: true
            };
          } catch (err) {
            return {
              result: false,
              reason: err.message
            };
          }
        }
        /**
         * Check if file passes a set of restrictions set in options: maxFileSize, minFileSize,
         * maxNumberOfFiles and allowedFileTypes.
         *
         * @param {object} file object to check
         * @param {Array} [files] array to check maxNumberOfFiles and maxTotalFileSize
         * @private
         */
        ;

        _proto25.checkIfFileAlreadyExists = function checkIfFileAlreadyExists(fileID) {
          var _this$getState3 = this.getState(),
              files = _this$getState3.files;

          if (files[fileID] && !files[fileID].isGhost) {
            return true;
          }

          return false;
        }
        /**
         * Create a file state object based on user-provided `addFile()` options.
         *
         * Note this is extremely side-effectful and should only be done when a file state object
         * will be added to state immediately afterward!
         *
         * The `files` value is passed in because it may be updated by the caller without updating the store.
         */

        /**
         * Add a new file to `state.files`. This will run `onBeforeFileAdded`,
         * try to guess file type in a clever way, check file against restrictions,
         * and start an upload if `autoProceed === true`.
         *
         * @param {object} file object to add
         * @returns {string} id for the added file
         */
        ;

        _proto25.addFile = function addFile(file) {
          var _Object$assign4;

          _classPrivateFieldLooseBase(this, _assertNewUploadAllowed)[_assertNewUploadAllowed](file);

          var _this$getState4 = this.getState(),
              files = _this$getState4.files;

          var newFile = _classPrivateFieldLooseBase(this, _checkAndCreateFileStateObject)[_checkAndCreateFileStateObject](files, file); // Users are asked to re-select recovered files without data,
          // and to keep the progress, meta and everthing else, we only replace said data


          if (files[newFile.id] && files[newFile.id].isGhost) {
            newFile = Object.assign({}, files[newFile.id], {
              data: file.data,
              isGhost: false
            });
            this.log("Replaced the blob in the restored ghost file: " + newFile.name + ", " + newFile.id);
          }

          this.setState({
            files: Object.assign({}, files, (_Object$assign4 = {}, _Object$assign4[newFile.id] = newFile, _Object$assign4))
          });
          this.emit('file-added', newFile);
          this.emit('files-added', [newFile]);
          this.log("Added file: " + newFile.name + ", " + newFile.id + ", mime type: " + newFile.type);

          _classPrivateFieldLooseBase(this, _startIfAutoProceed)[_startIfAutoProceed]();

          return newFile.id;
        }
        /**
         * Add multiple files to `state.files`. See the `addFile()` documentation.
         *
         * If an error occurs while adding a file, it is logged and the user is notified.
         * This is good for UI plugins, but not for programmatic use.
         * Programmatic users should usually still use `addFile()` on individual files.
         */
        ;

        _proto25.addFiles = function addFiles(fileDescriptors) {
          var _this83 = this;

          _classPrivateFieldLooseBase(this, _assertNewUploadAllowed)[_assertNewUploadAllowed](); // create a copy of the files object only once


          var files = Object.assign({}, this.getState().files);
          var newFiles = [];
          var errors = [];

          for (var i = 0; i < fileDescriptors.length; i++) {
            try {
              var newFile = _classPrivateFieldLooseBase(this, _checkAndCreateFileStateObject)[_checkAndCreateFileStateObject](files, fileDescriptors[i]); // Users are asked to re-select recovered files without data,
              // and to keep the progress, meta and everthing else, we only replace said data


              if (files[newFile.id] && files[newFile.id].isGhost) {
                newFile = Object.assign({}, files[newFile.id], {
                  data: fileDescriptors[i].data,
                  isGhost: false
                });
                this.log("Replaced blob in a ghost file: " + newFile.name + ", " + newFile.id);
              }

              files[newFile.id] = newFile;
              newFiles.push(newFile);
            } catch (err) {
              if (!err.isRestriction) {
                errors.push(err);
              }
            }
          }

          this.setState({
            files: files
          });
          newFiles.forEach(function (newFile) {
            _this83.emit('file-added', newFile);
          });
          this.emit('files-added', newFiles);

          if (newFiles.length > 5) {
            this.log("Added batch of " + newFiles.length + " files");
          } else {
            Object.keys(newFiles).forEach(function (fileID) {
              _this83.log("Added file: " + newFiles[fileID].name + "\n id: " + newFiles[fileID].id + "\n type: " + newFiles[fileID].type);
            });
          }

          if (newFiles.length > 0) {
            _classPrivateFieldLooseBase(this, _startIfAutoProceed)[_startIfAutoProceed]();
          }

          if (errors.length > 0) {
            var message = 'Multiple errors occurred while adding files:\n';
            errors.forEach(function (subError) {
              message += "\n * " + subError.message;
            });
            this.info({
              message: this.i18n('addBulkFilesFailed', {
                smart_count: errors.length
              }),
              details: message
            }, 'error', this.opts.infoTimeout);

            if (typeof AggregateError === 'function') {
              throw new AggregateError(errors, message);
            } else {
              var err = new Error(message);
              err.errors = errors;
              throw err;
            }
          }
        };

        _proto25.removeFiles = function removeFiles(fileIDs, reason) {
          var _this84 = this;

          var _this$getState5 = this.getState(),
              files = _this$getState5.files,
              currentUploads = _this$getState5.currentUploads;

          var updatedFiles = Object.assign({}, files);
          var updatedUploads = Object.assign({}, currentUploads);
          var removedFiles = Object.create(null);
          fileIDs.forEach(function (fileID) {
            if (files[fileID]) {
              removedFiles[fileID] = files[fileID];
              delete updatedFiles[fileID];
            }
          }); // Remove files from the `fileIDs` list in each upload.

          function fileIsNotRemoved(uploadFileID) {
            return removedFiles[uploadFileID] === undefined;
          }

          Object.keys(updatedUploads).forEach(function (uploadID) {
            var newFileIDs = currentUploads[uploadID].fileIDs.filter(fileIsNotRemoved); // Remove the upload if no files are associated with it anymore.

            if (newFileIDs.length === 0) {
              delete updatedUploads[uploadID];
              return;
            }

            updatedUploads[uploadID] = Object.assign({}, currentUploads[uploadID], {
              fileIDs: newFileIDs
            });
          });
          var stateUpdate = {
            currentUploads: updatedUploads,
            files: updatedFiles
          }; // If all files were removed - allow new uploads,
          // and clear recoveredState

          if (Object.keys(updatedFiles).length === 0) {
            stateUpdate.allowNewUpload = true;
            stateUpdate.error = null;
            stateUpdate.recoveredState = null;
          }

          this.setState(stateUpdate);
          this.calculateTotalProgress();
          var removedFileIDs = Object.keys(removedFiles);
          removedFileIDs.forEach(function (fileID) {
            _this84.emit('file-removed', removedFiles[fileID], reason);
          });

          if (removedFileIDs.length > 5) {
            this.log("Removed " + removedFileIDs.length + " files");
          } else {
            this.log("Removed files: " + removedFileIDs.join(', '));
          }
        };

        _proto25.removeFile = function removeFile(fileID, reason) {
          if (reason === void 0) {
            reason = null;
          }

          this.removeFiles([fileID], reason);
        };

        _proto25.pauseResume = function pauseResume(fileID) {
          if (!this.getState().capabilities.resumableUploads || this.getFile(fileID).uploadComplete) {
            return undefined;
          }

          var wasPaused = this.getFile(fileID).isPaused || false;
          var isPaused = !wasPaused;
          this.setFileState(fileID, {
            isPaused: isPaused
          });
          this.emit('upload-pause', fileID, isPaused);
          return isPaused;
        };

        _proto25.pauseAll = function pauseAll() {
          var updatedFiles = Object.assign({}, this.getState().files);
          var inProgressUpdatedFiles = Object.keys(updatedFiles).filter(function (file) {
            return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;
          });
          inProgressUpdatedFiles.forEach(function (file) {
            var updatedFile = Object.assign({}, updatedFiles[file], {
              isPaused: true
            });
            updatedFiles[file] = updatedFile;
          });
          this.setState({
            files: updatedFiles
          });
          this.emit('pause-all');
        };

        _proto25.resumeAll = function resumeAll() {
          var updatedFiles = Object.assign({}, this.getState().files);
          var inProgressUpdatedFiles = Object.keys(updatedFiles).filter(function (file) {
            return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;
          });
          inProgressUpdatedFiles.forEach(function (file) {
            var updatedFile = Object.assign({}, updatedFiles[file], {
              isPaused: false,
              error: null
            });
            updatedFiles[file] = updatedFile;
          });
          this.setState({
            files: updatedFiles
          });
          this.emit('resume-all');
        };

        _proto25.retryAll = function retryAll() {
          var updatedFiles = Object.assign({}, this.getState().files);
          var filesToRetry = Object.keys(updatedFiles).filter(function (file) {
            return updatedFiles[file].error;
          });
          filesToRetry.forEach(function (file) {
            var updatedFile = Object.assign({}, updatedFiles[file], {
              isPaused: false,
              error: null
            });
            updatedFiles[file] = updatedFile;
          });
          this.setState({
            files: updatedFiles,
            error: null
          });
          this.emit('retry-all', filesToRetry);

          if (filesToRetry.length === 0) {
            return Promise.resolve({
              successful: [],
              failed: []
            });
          }

          var uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload](filesToRetry, {
            forceAllowNewUpload: true // create new upload even if allowNewUpload: false

          });

          return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);
        };

        _proto25.cancelAll = function cancelAll() {
          this.emit('cancel-all');

          var _this$getState6 = this.getState(),
              files = _this$getState6.files;

          var fileIDs = Object.keys(files);

          if (fileIDs.length) {
            this.removeFiles(fileIDs, 'cancel-all');
          }

          this.setState({
            totalProgress: 0,
            error: null,
            recoveredState: null
          });
        };

        _proto25.retryUpload = function retryUpload(fileID) {
          this.setFileState(fileID, {
            error: null,
            isPaused: false
          });
          this.emit('upload-retry', fileID);

          var uploadID = _classPrivateFieldLooseBase(this, _createUpload)[_createUpload]([fileID], {
            forceAllowNewUpload: true // create new upload even if allowNewUpload: false

          });

          return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);
        };

        _proto25.reset = function reset() {
          this.cancelAll();
        };

        _proto25.logout = function logout() {
          this.iteratePlugins(function (plugin) {
            if (plugin.provider && plugin.provider.logout) {
              plugin.provider.logout();
            }
          });
        };

        _proto25.calculateProgress = function calculateProgress(file, data) {
          if (!this.getFile(file.id)) {
            this.log("Not setting progress for a file that has been removed: " + file.id);
            return;
          } // bytesTotal may be null or zero; in that case we can't divide by it


          var canHavePercentage = Number.isFinite(data.bytesTotal) && data.bytesTotal > 0;
          this.setFileState(file.id, {
            progress: Object.assign({}, this.getFile(file.id).progress, {
              bytesUploaded: data.bytesUploaded,
              bytesTotal: data.bytesTotal,
              percentage: canHavePercentage ? Math.round(data.bytesUploaded / data.bytesTotal * 100) : 0
            })
          });
          this.calculateTotalProgress();
        };

        _proto25.calculateTotalProgress = function calculateTotalProgress() {
          // calculate total progress, using the number of files currently uploading,
          // multiplied by 100 and the summ of individual progress of each file
          var files = this.getFiles();
          var inProgress = files.filter(function (file) {
            return file.progress.uploadStarted || file.progress.preprocess || file.progress.postprocess;
          });

          if (inProgress.length === 0) {
            this.emit('progress', 0);
            this.setState({
              totalProgress: 0
            });
            return;
          }

          var sizedFiles = inProgress.filter(function (file) {
            return file.progress.bytesTotal != null;
          });
          var unsizedFiles = inProgress.filter(function (file) {
            return file.progress.bytesTotal == null;
          });

          if (sizedFiles.length === 0) {
            var progressMax = inProgress.length * 100;
            var currentProgress = unsizedFiles.reduce(function (acc, file) {
              return acc + file.progress.percentage;
            }, 0);

            var _totalProgress = Math.round(currentProgress / progressMax * 100);

            this.setState({
              totalProgress: _totalProgress
            });
            return;
          }

          var totalSize = sizedFiles.reduce(function (acc, file) {
            return acc + file.progress.bytesTotal;
          }, 0);
          var averageSize = totalSize / sizedFiles.length;
          totalSize += averageSize * unsizedFiles.length;
          var uploadedSize = 0;
          sizedFiles.forEach(function (file) {
            uploadedSize += file.progress.bytesUploaded;
          });
          unsizedFiles.forEach(function (file) {
            uploadedSize += averageSize * (file.progress.percentage || 0) / 100;
          });
          var totalProgress = totalSize === 0 ? 0 : Math.round(uploadedSize / totalSize * 100); // hot fix, because:
          // uploadedSize ended up larger than totalSize, resulting in 1325% total

          if (totalProgress > 100) {
            totalProgress = 100;
          }

          this.setState({
            totalProgress: totalProgress
          });
          this.emit('progress', totalProgress);
        }
        /**
         * Registers listeners for all global actions, like:
         * `error`, `file-removed`, `upload-progress`
         */
        ;

        _proto25.updateOnlineStatus = function updateOnlineStatus() {
          var online = typeof window.navigator.onLine !== 'undefined' ? window.navigator.onLine : true;

          if (!online) {
            this.emit('is-offline');
            this.info(this.i18n('noInternetConnection'), 'error', 0);
            this.wasOffline = true;
          } else {
            this.emit('is-online');

            if (this.wasOffline) {
              this.emit('back-online');
              this.info(this.i18n('connectedToInternet'), 'success', 3000);
              this.wasOffline = false;
            }
          }
        };

        _proto25.getID = function getID() {
          return this.opts.id;
        }
        /**
         * Registers a plugin with Core.
         *
         * @param {object} Plugin object
         * @param {object} [opts] object with options to be passed to Plugin
         * @returns {object} self for chaining
         */
        // eslint-disable-next-line no-shadow
        ;

        _proto25.use = function use(Plugin, opts) {
          if (typeof Plugin !== 'function') {
            var msg = "Expected a plugin class, but got " + (Plugin === null ? 'null' : typeof Plugin) + "." + ' Please verify that the plugin was imported and spelled correctly.';
            throw new TypeError(msg);
          } // Instantiate


          var plugin = new Plugin(this, opts);
          var pluginId = plugin.id;

          if (!pluginId) {
            throw new Error('Your plugin must have an id');
          }

          if (!plugin.type) {
            throw new Error('Your plugin must have a type');
          }

          var existsPluginAlready = this.getPlugin(pluginId);

          if (existsPluginAlready) {
            var _msg = "Already found a plugin named '" + existsPluginAlready.id + "'. " + ("Tried to use: '" + pluginId + "'.\n") + 'Uppy plugins must have unique `id` options. See https://uppy.io/docs/plugins/#id.';

            throw new Error(_msg);
          }

          if (Plugin.VERSION) {
            this.log("Using " + pluginId + " v" + Plugin.VERSION);
          }

          if (plugin.type in _classPrivateFieldLooseBase(this, _plugins)[_plugins]) {
            _classPrivateFieldLooseBase(this, _plugins)[_plugins][plugin.type].push(plugin);
          } else {
            _classPrivateFieldLooseBase(this, _plugins)[_plugins][plugin.type] = [plugin];
          }

          plugin.install();
          return this;
        }
        /**
         * Find one Plugin by name.
         *
         * @param {string} id plugin id
         * @returns {BasePlugin|undefined}
         */
        ;

        _proto25.getPlugin = function getPlugin(id) {
          for (var _i3 = 0, _Object$values = Object.values(_classPrivateFieldLooseBase(this, _plugins)[_plugins]); _i3 < _Object$values.length; _i3++) {
            var plugins = _Object$values[_i3];
            var foundPlugin = plugins.find(function (plugin) {
              return plugin.id === id;
            });
            if (foundPlugin != null) return foundPlugin;
          }

          return undefined;
        };

        _proto25[_Symbol$for] = function (type) {
          return _classPrivateFieldLooseBase(this, _plugins)[_plugins][type];
        }
        /**
         * Iterate through all `use`d plugins.
         *
         * @param {Function} method that will be run on each plugin
         */
        ;

        _proto25.iteratePlugins = function iteratePlugins(method) {
          Object.values(_classPrivateFieldLooseBase(this, _plugins)[_plugins]).flat(1).forEach(method);
        }
        /**
         * Uninstall and remove a plugin.
         *
         * @param {object} instance The plugin instance to remove.
         */
        ;

        _proto25.removePlugin = function removePlugin(instance) {
          var _Object$assign5;

          this.log("Removing plugin " + instance.id);
          this.emit('plugin-remove', instance);

          if (instance.uninstall) {
            instance.uninstall();
          }

          var list = _classPrivateFieldLooseBase(this, _plugins)[_plugins][instance.type]; // list.indexOf failed here, because Vue3 converted the plugin instance
          // to a Proxy object, which failed the strict comparison test:
          // obj !== objProxy


          var index = list.findIndex(function (item) {
            return item.id === instance.id;
          });

          if (index !== -1) {
            list.splice(index, 1);
          }

          var state = this.getState();
          var updatedState = {
            plugins: Object.assign({}, state.plugins, (_Object$assign5 = {}, _Object$assign5[instance.id] = undefined, _Object$assign5))
          };
          this.setState(updatedState);
        }
        /**
         * Uninstall all plugins and close down this Uppy instance.
         */
        ;

        _proto25.close = function close() {
          var _this85 = this;

          this.log("Closing Uppy instance " + this.opts.id + ": removing all files and uninstalling plugins");
          this.reset();

          _classPrivateFieldLooseBase(this, _storeUnsubscribe)[_storeUnsubscribe]();

          this.iteratePlugins(function (plugin) {
            _this85.removePlugin(plugin);
          });

          if (typeof window !== 'undefined' && window.removeEventListener) {
            window.removeEventListener('online', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);
            window.removeEventListener('offline', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);
          }
        };

        _proto25.hideInfo = function hideInfo() {
          var _this$getState7 = this.getState(),
              info = _this$getState7.info;

          this.setState({
            info: info.slice(1)
          });
          this.emit('info-hidden');
        }
        /**
         * Set info message in `state.info`, so that UI plugins like `Informer`
         * can display the message.
         *
         * @param {string | object} message Message to be displayed by the informer
         * @param {string} [type]
         * @param {number} [duration]
         */
        ;

        _proto25.info = function info(message, type, duration) {
          var _this86 = this;

          if (type === void 0) {
            type = 'info';
          }

          if (duration === void 0) {
            duration = 3000;
          }

          var isComplexMessage = typeof message === 'object';
          this.setState({
            info: [].concat(this.getState().info, [{
              type: type,
              message: isComplexMessage ? message.message : message,
              details: isComplexMessage ? message.details : null
            }])
          });
          setTimeout(function () {
            return _this86.hideInfo();
          }, duration);
          this.emit('info-visible');
        }
        /**
         * Passes messages to a function, provided in `opts.logger`.
         * If `opts.logger: Uppy.debugLogger` or `opts.debug: true`, logs to the browser console.
         *
         * @param {string|object} message to log
         * @param {string} [type] optional `error` or `warning`
         */
        ;

        _proto25.log = function log(message, type) {
          var logger = this.opts.logger;

          switch (type) {
            case 'error':
              logger.error(message);
              break;

            case 'warning':
              logger.warn(message);
              break;

            default:
              logger.debug(message);
              break;
          }
        }
        /**
         * Restore an upload by its ID.
         */
        ;

        _proto25.restore = function restore(uploadID) {
          this.log("Core: attempting to restore upload \"" + uploadID + "\"");

          if (!this.getState().currentUploads[uploadID]) {
            _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);

            return Promise.reject(new Error('Nonexistent upload'));
          }

          return _classPrivateFieldLooseBase(this, _runUpload)[_runUpload](uploadID);
        }
        /**
         * Create an upload for a bunch of files.
         *
         * @param {Array<string>} fileIDs File IDs to include in this upload.
         * @returns {string} ID of this upload.
         */
        ;

        _proto25[_Symbol$for2] = function () {
          var _classPrivateFieldLoo4;

          return (_classPrivateFieldLoo4 = _classPrivateFieldLooseBase(this, _createUpload))[_createUpload].apply(_classPrivateFieldLoo4, arguments);
        }
        /**
         * Add data to an upload's result object.
         *
         * @param {string} uploadID The ID of the upload.
         * @param {object} data Data properties to add to the result object.
         */
        ;

        _proto25.addResultData = function addResultData(uploadID, data) {
          var _Object$assign6;

          if (!_classPrivateFieldLooseBase(this, _getUpload)[_getUpload](uploadID)) {
            this.log("Not setting result for an upload that has been removed: " + uploadID);
            return;
          }

          var _this$getState8 = this.getState(),
              currentUploads = _this$getState8.currentUploads;

          var currentUpload = Object.assign({}, currentUploads[uploadID], {
            result: Object.assign({}, currentUploads[uploadID].result, data)
          });
          this.setState({
            currentUploads: Object.assign({}, currentUploads, (_Object$assign6 = {}, _Object$assign6[uploadID] = currentUpload, _Object$assign6))
          });
        }
        /**
         * Remove an upload, eg. if it has been canceled or completed.
         *
         * @param {string} uploadID The ID of the upload.
         */

        /**
         * Start an upload for all the files that are not currently being uploaded.
         *
         * @returns {Promise}
         */
        ;

        _proto25.upload = function upload() {
          var _this87 = this;

          var _classPrivateFieldLoo;

          if (!((_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _plugins)[_plugins].uploader) != null && _classPrivateFieldLoo.length)) {
            this.log('No uploader type plugins are used', 'warning');
          }

          var _this$getState9 = this.getState(),
              files = _this$getState9.files;

          var onBeforeUploadResult = this.opts.onBeforeUpload(files);

          if (onBeforeUploadResult === false) {
            return Promise.reject(new Error('Not starting the upload because onBeforeUpload returned false'));
          }

          if (onBeforeUploadResult && typeof onBeforeUploadResult === 'object') {
            files = onBeforeUploadResult; // Updating files in state, because uploader plugins receive file IDs,
            // and then fetch the actual file object from state

            this.setState({
              files: files
            });
          }

          return Promise.resolve().then(function () {
            _classPrivateFieldLooseBase(_this87, _checkMinNumberOfFiles)[_checkMinNumberOfFiles](files);

            _classPrivateFieldLooseBase(_this87, _checkRequiredMetaFields)[_checkRequiredMetaFields](files);
          }).catch(function (err) {
            _classPrivateFieldLooseBase(_this87, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err);
          }).then(function () {
            var _this87$getState = _this87.getState(),
                currentUploads = _this87$getState.currentUploads; // get a list of files that are currently assigned to uploads


            var currentlyUploadingFiles = Object.values(currentUploads).flatMap(function (curr) {
              return curr.fileIDs;
            });
            var waitingFileIDs = [];
            Object.keys(files).forEach(function (fileID) {
              var file = _this87.getFile(fileID); // if the file hasn't started uploading and hasn't already been assigned to an upload..


              if (!file.progress.uploadStarted && currentlyUploadingFiles.indexOf(fileID) === -1) {
                waitingFileIDs.push(file.id);
              }
            });

            var uploadID = _classPrivateFieldLooseBase(_this87, _createUpload)[_createUpload](waitingFileIDs);

            return _classPrivateFieldLooseBase(_this87, _runUpload)[_runUpload](uploadID);
          }).catch(function (err) {
            _classPrivateFieldLooseBase(_this87, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {
              showInformer: false
            });
          });
        };

        _createClass2(Uppy, [{
          key: "state",
          get: function get() {
            // Here, state is a non-enumerable property.
            return this.getState();
          }
        }]);

        return Uppy;
      }(); // Expose class constructor.


      function _checkRestrictions2(file, files) {
        if (files === void 0) {
          files = this.getFiles();
        }

        var _this$opts$restrictio = this.opts.restrictions,
            maxFileSize = _this$opts$restrictio.maxFileSize,
            minFileSize = _this$opts$restrictio.minFileSize,
            maxTotalFileSize = _this$opts$restrictio.maxTotalFileSize,
            maxNumberOfFiles = _this$opts$restrictio.maxNumberOfFiles,
            allowedFileTypes = _this$opts$restrictio.allowedFileTypes;

        if (maxNumberOfFiles) {
          if (files.length + 1 > maxNumberOfFiles) {
            throw new RestrictionError("" + this.i18n('youCanOnlyUploadX', {
              smart_count: maxNumberOfFiles
            }));
          }
        }

        if (allowedFileTypes) {
          var isCorrectFileType = allowedFileTypes.some(function (type) {
            // check if this is a mime-type
            if (type.indexOf('/') > -1) {
              if (!file.type) return false;
              return match(file.type.replace(/;.*?$/, ''), type);
            } // otherwise this is likely an extension


            if (type[0] === '.' && file.extension) {
              return file.extension.toLowerCase() === type.substr(1).toLowerCase();
            }

            return false;
          });

          if (!isCorrectFileType) {
            var allowedFileTypesString = allowedFileTypes.join(', ');
            throw new RestrictionError(this.i18n('youCanOnlyUploadFileTypes', {
              types: allowedFileTypesString
            }));
          }
        } // We can't check maxTotalFileSize if the size is unknown.


        if (maxTotalFileSize && file.size != null) {
          var totalFilesSize = 0;
          totalFilesSize += file.size;
          files.forEach(function (f) {
            totalFilesSize += f.size;
          });

          if (totalFilesSize > maxTotalFileSize) {
            throw new RestrictionError(this.i18n('exceedsSize', {
              size: prettierBytes(maxTotalFileSize),
              file: file.name
            }));
          }
        } // We can't check maxFileSize if the size is unknown.


        if (maxFileSize && file.size != null) {
          if (file.size > maxFileSize) {
            throw new RestrictionError(this.i18n('exceedsSize', {
              size: prettierBytes(maxFileSize),
              file: file.name
            }));
          }
        } // We can't check minFileSize if the size is unknown.


        if (minFileSize && file.size != null) {
          if (file.size < minFileSize) {
            throw new RestrictionError(this.i18n('inferiorSize', {
              size: prettierBytes(minFileSize)
            }));
          }
        }
      }

      function _checkMinNumberOfFiles2(files) {
        var minNumberOfFiles = this.opts.restrictions.minNumberOfFiles;

        if (Object.keys(files).length < minNumberOfFiles) {
          throw new RestrictionError("" + this.i18n('youHaveToAtLeastSelectX', {
            smart_count: minNumberOfFiles
          }));
        }
      }

      function _checkRequiredMetaFields2(files) {
        var requiredMetaFields = this.opts.restrictions.requiredMetaFields;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var errors = [];

        for (var _i4 = 0, _Object$keys = Object.keys(files); _i4 < _Object$keys.length; _i4++) {
          var fileID = _Object$keys[_i4];
          var file = this.getFile(fileID);

          for (var i = 0; i < requiredMetaFields.length; i++) {
            if (!hasOwnProperty.call(file.meta, requiredMetaFields[i]) || file.meta[requiredMetaFields[i]] === '') {
              var err = new RestrictionError("" + this.i18n('missingRequiredMetaFieldOnFile', {
                fileName: file.name
              }));
              errors.push(err);

              _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {
                file: file,
                showInformer: false,
                throwErr: false
              });
            }
          }
        }

        if (errors.length) {
          throw new AggregateRestrictionError("" + this.i18n('missingRequiredMetaField'), errors);
        }
      }

      function _showOrLogErrorAndThrow2(err, _temp2) {
        var _ref19 = _temp2 === void 0 ? {} : _temp2,
            _ref19$showInformer = _ref19.showInformer,
            showInformer = _ref19$showInformer === void 0 ? true : _ref19$showInformer,
            _ref19$file = _ref19.file,
            file = _ref19$file === void 0 ? null : _ref19$file,
            _ref19$throwErr = _ref19.throwErr,
            throwErr = _ref19$throwErr === void 0 ? true : _ref19$throwErr;

        var message = typeof err === 'object' ? err.message : err;
        var details = typeof err === 'object' && err.details ? err.details : ''; // Restriction errors should be logged, but not as errors,
        // as they are expected and shown in the UI.

        var logMessageWithDetails = message;

        if (details) {
          logMessageWithDetails += " " + details;
        }

        if (err.isRestriction) {
          this.log(logMessageWithDetails);
          this.emit('restriction-failed', file, err);
        } else {
          this.log(logMessageWithDetails, 'error');
        } // Sometimes informer has to be shown manually by the developer,
        // for example, in `onBeforeFileAdded`.


        if (showInformer) {
          this.info({
            message: message,
            details: details
          }, 'error', this.opts.infoTimeout);
        }

        if (throwErr) {
          throw typeof err === 'object' ? err : new Error(err);
        }
      }

      function _assertNewUploadAllowed2(file) {
        var _this$getState10 = this.getState(),
            allowNewUpload = _this$getState10.allowNewUpload;

        if (allowNewUpload === false) {
          _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](new RestrictionError(this.i18n('noMoreFilesAllowed')), {
            file: file
          });
        }
      }

      function _checkAndCreateFileStateObject2(files, fileDescriptor) {
        var fileType = getFileType(fileDescriptor);
        var fileName = getFileName(fileType, fileDescriptor);
        var fileExtension = getFileNameAndExtension(fileName).extension;
        var isRemote = Boolean(fileDescriptor.isRemote);
        var fileID = generateFileID(Object.assign({}, fileDescriptor, {
          type: fileType
        }));

        if (this.checkIfFileAlreadyExists(fileID)) {
          var error = new RestrictionError(this.i18n('noDuplicates', {
            fileName: fileName
          }));

          _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](error, {
            file: fileDescriptor
          });
        }

        var meta = fileDescriptor.meta || {};
        meta.name = fileName;
        meta.type = fileType; // `null` means the size is unknown.

        var size = Number.isFinite(fileDescriptor.data.size) ? fileDescriptor.data.size : null;
        var newFile = {
          source: fileDescriptor.source || '',
          id: fileID,
          name: fileName,
          extension: fileExtension || '',
          meta: Object.assign({}, this.getState().meta, meta),
          type: fileType,
          data: fileDescriptor.data,
          progress: {
            percentage: 0,
            bytesUploaded: 0,
            bytesTotal: size,
            uploadComplete: false,
            uploadStarted: null
          },
          size: size,
          isRemote: isRemote,
          remote: fileDescriptor.remote || '',
          preview: fileDescriptor.preview
        };
        var onBeforeFileAddedResult = this.opts.onBeforeFileAdded(newFile, files);

        if (onBeforeFileAddedResult === false) {
          // Don’t show UI info for this error, as it should be done by the developer
          _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](new RestrictionError('Cannot add the file because onBeforeFileAdded returned false.'), {
            showInformer: false,
            fileDescriptor: fileDescriptor
          });
        } else if (typeof onBeforeFileAddedResult === 'object' && onBeforeFileAddedResult !== null) {
          newFile = onBeforeFileAddedResult;
        }

        try {
          var filesArray = Object.keys(files).map(function (i) {
            return files[i];
          });

          _classPrivateFieldLooseBase(this, _checkRestrictions)[_checkRestrictions](newFile, filesArray);
        } catch (err) {
          _classPrivateFieldLooseBase(this, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](err, {
            file: newFile
          });
        }

        return newFile;
      }

      function _startIfAutoProceed2() {
        var _this88 = this;

        if (this.opts.autoProceed && !this.scheduledAutoProceed) {
          this.scheduledAutoProceed = setTimeout(function () {
            _this88.scheduledAutoProceed = null;

            _this88.upload().catch(function (err) {
              if (!err.isRestriction) {
                _this88.log(err.stack || err.message || err);
              }
            });
          }, 4);
        }
      }

      function _addListeners2() {
        var _this89 = this;

        /**
         * @param {Error} error
         * @param {object} [file]
         * @param {object} [response]
         */
        var errorHandler = function errorHandler(error, file, response) {
          var errorMsg = error.message || 'Unknown error';

          if (error.details) {
            errorMsg += " " + error.details;
          }

          _this89.setState({
            error: errorMsg
          });

          if (file != null && file.id in _this89.getState().files) {
            _this89.setFileState(file.id, {
              error: errorMsg,
              response: response
            });
          }
        };

        this.on('error', errorHandler);
        this.on('upload-error', function (file, error, response) {
          errorHandler(error, file, response);

          if (typeof error === 'object' && error.message) {
            var newError = new Error(error.message);
            newError.details = error.message;

            if (error.details) {
              newError.details += " " + error.details;
            }

            newError.message = _this89.i18n('failedToUpload', {
              file: file.name
            });

            _classPrivateFieldLooseBase(_this89, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](newError, {
              throwErr: false
            });
          } else {
            _classPrivateFieldLooseBase(_this89, _showOrLogErrorAndThrow)[_showOrLogErrorAndThrow](error, {
              throwErr: false
            });
          }
        });
        this.on('upload', function () {
          _this89.setState({
            error: null
          });
        });
        this.on('upload-started', function (file) {
          if (!_this89.getFile(file.id)) {
            _this89.log("Not setting progress for a file that has been removed: " + file.id);

            return;
          }

          _this89.setFileState(file.id, {
            progress: {
              uploadStarted: Date.now(),
              uploadComplete: false,
              percentage: 0,
              bytesUploaded: 0,
              bytesTotal: file.size
            }
          });
        });
        this.on('upload-progress', this.calculateProgress);
        this.on('upload-success', function (file, uploadResp) {
          if (!_this89.getFile(file.id)) {
            _this89.log("Not setting progress for a file that has been removed: " + file.id);

            return;
          }

          var currentProgress = _this89.getFile(file.id).progress;

          _this89.setFileState(file.id, {
            progress: Object.assign({}, currentProgress, {
              postprocess: _classPrivateFieldLooseBase(_this89, _postProcessors)[_postProcessors].size > 0 ? {
                mode: 'indeterminate'
              } : null,
              uploadComplete: true,
              percentage: 100,
              bytesUploaded: currentProgress.bytesTotal
            }),
            response: uploadResp,
            uploadURL: uploadResp.uploadURL,
            isPaused: false
          }); // Remote providers sometimes don't tell us the file size,
          // but we can know how many bytes we uploaded once the upload is complete.


          if (file.size == null) {
            _this89.setFileState(file.id, {
              size: uploadResp.bytesUploaded || currentProgress.bytesTotal
            });
          }

          _this89.calculateTotalProgress();
        });
        this.on('preprocess-progress', function (file, progress) {
          if (!_this89.getFile(file.id)) {
            _this89.log("Not setting progress for a file that has been removed: " + file.id);

            return;
          }

          _this89.setFileState(file.id, {
            progress: Object.assign({}, _this89.getFile(file.id).progress, {
              preprocess: progress
            })
          });
        });
        this.on('preprocess-complete', function (file) {
          if (!_this89.getFile(file.id)) {
            _this89.log("Not setting progress for a file that has been removed: " + file.id);

            return;
          }

          var files = Object.assign({}, _this89.getState().files);
          files[file.id] = Object.assign({}, files[file.id], {
            progress: Object.assign({}, files[file.id].progress)
          });
          delete files[file.id].progress.preprocess;

          _this89.setState({
            files: files
          });
        });
        this.on('postprocess-progress', function (file, progress) {
          if (!_this89.getFile(file.id)) {
            _this89.log("Not setting progress for a file that has been removed: " + file.id);

            return;
          }

          _this89.setFileState(file.id, {
            progress: Object.assign({}, _this89.getState().files[file.id].progress, {
              postprocess: progress
            })
          });
        });
        this.on('postprocess-complete', function (file) {
          if (!_this89.getFile(file.id)) {
            _this89.log("Not setting progress for a file that has been removed: " + file.id);

            return;
          }

          var files = Object.assign({}, _this89.getState().files);
          files[file.id] = Object.assign({}, files[file.id], {
            progress: Object.assign({}, files[file.id].progress)
          });
          delete files[file.id].progress.postprocess;

          _this89.setState({
            files: files
          });
        });
        this.on('restored', function () {
          // Files may have changed--ensure progress is still accurate.
          _this89.calculateTotalProgress();
        }); // show informer if offline

        if (typeof window !== 'undefined' && window.addEventListener) {
          window.addEventListener('online', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);
          window.addEventListener('offline', _classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus]);
          setTimeout(_classPrivateFieldLooseBase(this, _updateOnlineStatus)[_updateOnlineStatus], 3000);
        }
      }

      function _createUpload2(fileIDs, opts) {
        var _Object$assign7;

        if (opts === void 0) {
          opts = {};
        }

        // uppy.retryAll sets this to true — when retrying we want to ignore `allowNewUpload: false`
        var _opts2 = opts,
            _opts2$forceAllowNewU = _opts2.forceAllowNewUpload,
            forceAllowNewUpload = _opts2$forceAllowNewU === void 0 ? false : _opts2$forceAllowNewU;

        var _this$getState11 = this.getState(),
            allowNewUpload = _this$getState11.allowNewUpload,
            currentUploads = _this$getState11.currentUploads;

        if (!allowNewUpload && !forceAllowNewUpload) {
          throw new Error('Cannot create a new upload: already uploading.');
        }

        var uploadID = nanoid();
        this.emit('upload', {
          id: uploadID,
          fileIDs: fileIDs
        });
        this.setState({
          allowNewUpload: this.opts.allowMultipleUploadBatches !== false && this.opts.allowMultipleUploads !== false,
          currentUploads: Object.assign({}, currentUploads, (_Object$assign7 = {}, _Object$assign7[uploadID] = {
            fileIDs: fileIDs,
            step: 0,
            result: {}
          }, _Object$assign7))
        });
        return uploadID;
      }

      function _getUpload2(uploadID) {
        var _this$getState12 = this.getState(),
            currentUploads = _this$getState12.currentUploads;

        return currentUploads[uploadID];
      }

      function _removeUpload2(uploadID) {
        var currentUploads = Object.assign({}, this.getState().currentUploads);
        delete currentUploads[uploadID];
        this.setState({
          currentUploads: currentUploads
        });
      }

      function _runUpload2(_x3) {
        return _runUpload3.apply(this, arguments);
      }

      function _runUpload3() {
        _runUpload3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(uploadID) {
          var _this90 = this;

          var _this$getState13, currentUploads, currentUpload, restoreStep, steps, step, _Object$assign8, fn, updatedUpload, files, successful, failed, result;

          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  _this$getState13 = this.getState(), currentUploads = _this$getState13.currentUploads;
                  currentUpload = currentUploads[uploadID];
                  restoreStep = currentUpload.step || 0;
                  steps = [].concat(_classPrivateFieldLooseBase(this, _preProcessors)[_preProcessors], _classPrivateFieldLooseBase(this, _uploaders)[_uploaders], _classPrivateFieldLooseBase(this, _postProcessors)[_postProcessors]);
                  _context5.prev = 4;
                  step = restoreStep;

                case 6:
                  if (!(step < steps.length)) {
                    _context5.next = 19;
                    break;
                  }

                  if (currentUpload) {
                    _context5.next = 9;
                    break;
                  }

                  return _context5.abrupt("break", 19);

                case 9:
                  fn = steps[step];
                  updatedUpload = Object.assign({}, currentUpload, {
                    step: step
                  });
                  this.setState({
                    currentUploads: Object.assign({}, currentUploads, (_Object$assign8 = {}, _Object$assign8[uploadID] = updatedUpload, _Object$assign8))
                  }); // TODO give this the `updatedUpload` object as its only parameter maybe?
                  // Otherwise when more metadata may be added to the upload this would keep getting more parameters

                  _context5.next = 14;
                  return fn(updatedUpload.fileIDs, uploadID);

                case 14:
                  // Update currentUpload value in case it was modified asynchronously.
                  currentUploads = this.getState().currentUploads;
                  currentUpload = currentUploads[uploadID];

                case 16:
                  step++;
                  _context5.next = 6;
                  break;

                case 19:
                  _context5.next = 26;
                  break;

                case 21:
                  _context5.prev = 21;
                  _context5.t0 = _context5["catch"](4);
                  this.emit('error', _context5.t0);

                  _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);

                  throw _context5.t0;

                case 26:
                  if (!currentUpload) {
                    _context5.next = 35;
                    break;
                  }

                  // Mark postprocessing step as complete if necessary; this addresses a case where we might get
                  // stuck in the postprocessing UI while the upload is fully complete.
                  // If the postprocessing steps do not do any work, they may not emit postprocessing events at
                  // all, and never mark the postprocessing as complete. This is fine on its own but we
                  // introduced code in the @uppy/core upload-success handler to prepare postprocessing progress
                  // state if any postprocessors are registered. That is to avoid a "flash of completed state"
                  // before the postprocessing plugins can emit events.
                  //
                  // So, just in case an upload with postprocessing plugins *has* completed *without* emitting
                  // postprocessing completion, we do it instead.
                  currentUpload.fileIDs.forEach(function (fileID) {
                    var file = _this90.getFile(fileID);

                    if (file && file.progress.postprocess) {
                      _this90.emit('postprocess-complete', file);
                    }
                  });
                  files = currentUpload.fileIDs.map(function (fileID) {
                    return _this90.getFile(fileID);
                  });
                  successful = files.filter(function (file) {
                    return !file.error;
                  });
                  failed = files.filter(function (file) {
                    return file.error;
                  });
                  _context5.next = 33;
                  return this.addResultData(uploadID, {
                    successful: successful,
                    failed: failed,
                    uploadID: uploadID
                  });

                case 33:
                  // Update currentUpload value in case it was modified asynchronously.
                  currentUploads = this.getState().currentUploads;
                  currentUpload = currentUploads[uploadID];

                case 35:
                  if (currentUpload) {
                    result = currentUpload.result;
                    this.emit('complete', result);

                    _classPrivateFieldLooseBase(this, _removeUpload)[_removeUpload](uploadID);
                  }

                  if (result == null) {
                    this.log("Not setting result for an upload that has been removed: " + uploadID);
                  }

                  return _context5.abrupt("return", result);

                case 38:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this, [[4, 21]]);
        }));
        return _runUpload3.apply(this, arguments);
      }

      Uppy.VERSION = "2.0.2";
      module.exports = Uppy;
      module.exports.Uppy = Uppy;
      module.exports.UIPlugin = UIPlugin;
      module.exports.BasePlugin = BasePlugin;
      module.exports.debugLogger = debugLogger;
    }, {
      "./BasePlugin": 642,
      "./UIPlugin": 643,
      "./getFileName": 644,
      "./loggers": 646,
      "./supportsUploadProgress": 647,
      "@transloadit/prettier-bytes": 1,
      "@uppy/store-default": 728,
      "@uppy/utils/lib/Translator": 751,
      "@uppy/utils/lib/generateFileID": 759,
      "@uppy/utils/lib/getFileNameAndExtension": 766,
      "@uppy/utils/lib/getFileType": 767,
      "lodash.throttle": 587,
      "mime-match": 590,
      "namespace-emitter": 592,
      "nanoid": 648
    }],
    646: [function (require, module, exports) {
      "use strict";
      /* eslint-disable no-console */

      var getTimeStamp = require('@uppy/utils/lib/getTimeStamp'); // Swallow all logs, except errors.
      // default if logger is not set or debug: false


      var justErrorsLogger = {
        debug: function debug() {},
        warn: function warn() {},
        error: function error() {
          var _console;

          for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {
            args[_key15] = arguments[_key15];
          }

          return (_console = console).error.apply(_console, ["[Uppy] [" + getTimeStamp() + "]"].concat(args));
        }
      }; // Print logs to console with namespace + timestamp,
      // set by logger: Uppy.debugLogger or debug: true

      var debugLogger = {
        debug: function debug() {
          var _console2;

          for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {
            args[_key16] = arguments[_key16];
          }

          return (_console2 = console).debug.apply(_console2, ["[Uppy] [" + getTimeStamp() + "]"].concat(args));
        },
        warn: function warn() {
          var _console3;

          for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {
            args[_key17] = arguments[_key17];
          }

          return (_console3 = console).warn.apply(_console3, ["[Uppy] [" + getTimeStamp() + "]"].concat(args));
        },
        error: function error() {
          var _console4;

          for (var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {
            args[_key18] = arguments[_key18];
          }

          return (_console4 = console).error.apply(_console4, ["[Uppy] [" + getTimeStamp() + "]"].concat(args));
        }
      };
      module.exports = {
        justErrorsLogger: justErrorsLogger,
        debugLogger: debugLogger
      };
    }, {
      "@uppy/utils/lib/getTimeStamp": 772
    }],
    647: [function (require, module, exports) {
      "use strict"; // Edge 15.x does not fire 'progress' events on uploads.
      // See https://github.com/transloadit/uppy/issues/945
      // And https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12224510/

      module.exports = function supportsUploadProgress(userAgent) {
        // Allow passing in userAgent for tests
        if (userAgent == null) {
          userAgent = typeof navigator !== 'undefined' ? navigator.userAgent : null;
        } // Assume it works because basically everything supports progress events.


        if (!userAgent) return true;
        var m = /Edge\/(\d+\.\d+)/.exec(userAgent);
        if (!m) return true;
        var edgeVersion = m[1];

        var _edgeVersion$split = edgeVersion.split('.'),
            major = _edgeVersion$split[0],
            minor = _edgeVersion$split[1];

        major = parseInt(major, 10);
        minor = parseInt(minor, 10); // Worked before:
        // Edge 40.15063.0.0
        // Microsoft EdgeHTML 15.15063

        if (major < 15 || major === 15 && minor < 15063) {
          return true;
        } // Fixed in:
        // Microsoft EdgeHTML 18.18218


        if (major > 18 || major === 18 && minor >= 18218) {
          return true;
        } // other versions don't work.


        return false;
      };
    }, {}],
    648: [function (require, module, exports) {
      (function (process) {
        (function () {
          // This file replaces `index.js` in bundlers like webpack or Rollup,
          // according to `browser` config in `package.json`.
          var _require24 = require('./url-alphabet/index.cjs'),
              urlAlphabet = _require24.urlAlphabet;

          if (process.env.NODE_ENV !== 'production') {
            // All bundlers will remove this block in the production bundle.
            if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative' && typeof crypto === 'undefined') {
              throw new Error('React Native does not have a built-in secure random generator. ' + 'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' + 'For secure IDs, import `react-native-get-random-values` ' + 'before Nano ID.');
            }

            if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {
              throw new Error('Import file with `if (!window.crypto) window.crypto = window.msCrypto`' + ' before importing Nano ID to fix IE 11 support');
            }

            if (typeof crypto === 'undefined') {
              throw new Error('Your browser does not have secure random generator. ' + 'If you don’t need unpredictable IDs, you can use nanoid/non-secure.');
            }
          }

          var random = function random(bytes) {
            return crypto.getRandomValues(new Uint8Array(bytes));
          };

          var customRandom = function customRandom(alphabet, size, getRandom) {
            // First, a bitmask is necessary to generate the ID. The bitmask makes bytes
            // values closer to the alphabet size. The bitmask calculates the closest
            // `2^31 - 1` number, which exceeds the alphabet size.
            // For example, the bitmask for the alphabet size 30 is 31 (00011111).
            // `Math.clz32` is not used, because it is not available in browsers.
            var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1; // Though, the bitmask solution is not perfect since the bytes exceeding
            // the alphabet size are refused. Therefore, to reliably generate the ID,
            // the random bytes redundancy has to be satisfied.
            // Note: every hardware random generator call is performance expensive,
            // because the system call for entropy collection takes a lot of time.
            // So, to avoid additional system calls, extra bytes are requested in advance.
            // Next, a step determines how many random bytes to generate.
            // The number of random bytes gets decided upon the ID size, mask,
            // alphabet size, and magic number 1.6 (using 1.6 peaks at performance
            // according to benchmarks).
            // `-~f => Math.ceil(f)` if f is a float
            // `-~i => i + 1` if i is an integer

            var step = -~(1.6 * mask * size / alphabet.length);
            return function () {
              var id = '';

              while (true) {
                var bytes = getRandom(step); // A compact alternative for `for (var i = 0; i < step; i++)`.

                var j = step;

                while (j--) {
                  // Adding `|| ''` refuses a random byte that exceeds the alphabet size.
                  id += alphabet[bytes[j] & mask] || '';
                  if (id.length === size) return id;
                }
              }
            };
          };

          var customAlphabet = function customAlphabet(alphabet, size) {
            return customRandom(alphabet, size, random);
          };

          var nanoid = function nanoid(size) {
            if (size === void 0) {
              size = 21;
            }

            var id = '';
            var bytes = crypto.getRandomValues(new Uint8Array(size)); // A compact alternative for `for (var i = 0; i < step; i++)`.

            while (size--) {
              // It is incorrect to use bytes exceeding the alphabet size.
              // The following mask reduces the random byte in the 0-255 value
              // range to the 0-63 value range. Therefore, adding hacks, such
              // as empty string fallback or magic numbers, is unneccessary because
              // the bitmask trims bytes down to the alphabet size.
              var byte = bytes[size] & 63;

              if (byte < 36) {
                // `0-9a-z`
                id += byte.toString(36);
              } else if (byte < 62) {
                // `A-Z`
                id += (byte - 26).toString(36).toUpperCase();
              } else if (byte < 63) {
                id += '_';
              } else {
                id += '-';
              }
            }

            return id;
          };

          module.exports = {
            nanoid: nanoid,
            customAlphabet: customAlphabet,
            customRandom: customRandom,
            urlAlphabet: urlAlphabet,
            random: random
          };
        }).call(this);
      }).call(this, require('_process'));
    }, {
      "./url-alphabet/index.cjs": 649,
      "_process": 596
    }],
    649: [function (require, module, exports) {
      arguments[4][633][0].apply(exports, arguments);
    }, {
      "dup": 633
    }],
    650: [function (require, module, exports) {
      "use strict";

      var _Symbol$for;

      var _require25 = require('preact'),
          h = _require25.h,
          Component = _require25.Component;

      _Symbol$for = Symbol.for('uppy test: disable unused locale key warning');

      var AddFiles = /*#__PURE__*/function (_Component) {
        _inheritsLoose(AddFiles, _Component);

        function AddFiles() {
          var _this91;

          for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {
            args[_key19] = arguments[_key19];
          }

          _this91 = _Component.call.apply(_Component, [this].concat(args)) || this;

          _this91.triggerFileInputClick = function () {
            _this91.fileInput.click();
          };

          _this91.triggerFolderInputClick = function () {
            _this91.folderInput.click();
          };

          _this91.onFileInputChange = function (event) {
            _this91.props.handleInputChange(event); // We clear the input after a file is selected, because otherwise
            // change event is not fired in Chrome and Safari when a file
            // with the same name is selected.
            // ___Why not use value="" on <input/> instead?
            //    Because if we use that method of clearing the input,
            //    Chrome will not trigger change if we drop the same file twice (Issue #768).


            event.target.value = null;
          };

          _this91.renderHiddenInput = function (isFolder, refCallback) {
            return h("input", {
              className: "uppy-Dashboard-input",
              hidden: true,
              "aria-hidden": "true",
              tabIndex: -1,
              webkitdirectory: isFolder,
              type: "file",
              name: "files[]",
              multiple: _this91.props.maxNumberOfFiles !== 1,
              onChange: _this91.onFileInputChange,
              accept: _this91.props.allowedFileTypes,
              ref: refCallback
            });
          };

          _this91.renderMyDeviceAcquirer = function () {
            return h("div", {
              className: "uppy-DashboardTab",
              role: "presentation",
              "data-uppy-acquirer-id": "MyDevice"
            }, h("button", {
              type: "button",
              className: "uppy-u-reset uppy-c-btn uppy-DashboardTab-btn",
              role: "tab",
              tabIndex: 0,
              "data-uppy-super-focusable": true,
              onClick: _this91.triggerFileInputClick
            }, h("svg", {
              "aria-hidden": "true",
              focusable: "false",
              width: "32",
              height: "32",
              viewBox: "0 0 32 32"
            }, h("g", {
              fill: "none",
              fillRule: "evenodd"
            }, h("rect", {
              className: "uppy-ProviderIconBg",
              width: "32",
              height: "32",
              rx: "16",
              fill: "#2275D7"
            }), h("path", {
              d: "M21.973 21.152H9.863l-1.108-5.087h14.464l-1.246 5.087zM9.935 11.37h3.958l.886 1.444a.673.673 0 0 0 .585.316h6.506v1.37H9.935v-3.13zm14.898 3.44a.793.793 0 0 0-.616-.31h-.978v-2.126c0-.379-.275-.613-.653-.613H15.75l-.886-1.445a.673.673 0 0 0-.585-.316H9.232c-.378 0-.667.209-.667.587V14.5h-.782a.793.793 0 0 0-.61.303.795.795 0 0 0-.155.663l1.45 6.633c.078.36.396.618.764.618h13.354c.36 0 .674-.246.76-.595l1.631-6.636a.795.795 0 0 0-.144-.675z",
              fill: "#FFF"
            }))), h("div", {
              className: "uppy-DashboardTab-name"
            }, _this91.props.i18n('myDevice'))));
          };

          _this91.renderBrowseButton = function (text, onClickFn) {
            var numberOfAcquirers = _this91.props.acquirers.length;
            return h("button", {
              type: "button",
              className: "uppy-u-reset uppy-Dashboard-browse",
              onClick: onClickFn,
              "data-uppy-super-focusable": numberOfAcquirers === 0
            }, text);
          };

          _this91.renderDropPasteBrowseTagline = function () {
            var numberOfAcquirers = _this91.props.acquirers.length;

            var browseFiles = _this91.renderBrowseButton(_this91.props.i18n('browseFiles'), _this91.triggerFileInputClick);

            var browseFolders = _this91.renderBrowseButton(_this91.props.i18n('browseFolders'), _this91.triggerFolderInputClick); // in order to keep the i18n CamelCase and options lower (as are defaults) we will want to transform a lower
            // to Camel


            var lowerFMSelectionType = _this91.props.fileManagerSelectionType;
            var camelFMSelectionType = lowerFMSelectionType.charAt(0).toUpperCase() + lowerFMSelectionType.slice(1);
            return h("div", {
              class: "uppy-Dashboard-AddFiles-title"
            }, // eslint-disable-next-line no-nested-ternary
            _this91.props.disableLocalFiles ? _this91.props.i18n('importFiles') : numberOfAcquirers > 0 ? _this91.props.i18nArray("dropPasteImport" + camelFMSelectionType, {
              browseFiles: browseFiles,
              browseFolders: browseFolders,
              browse: browseFiles
            }) : _this91.props.i18nArray("dropPaste" + camelFMSelectionType, {
              browseFiles: browseFiles,
              browseFolders: browseFolders,
              browse: browseFiles
            }));
          };

          _this91.renderAcquirer = function (acquirer) {
            return h("div", {
              className: "uppy-DashboardTab",
              role: "presentation",
              "data-uppy-acquirer-id": acquirer.id
            }, h("button", {
              type: "button",
              className: "uppy-u-reset uppy-c-btn uppy-DashboardTab-btn",
              role: "tab",
              tabIndex: 0,
              "aria-controls": "uppy-DashboardContent-panel--" + acquirer.id,
              "aria-selected": _this91.props.activePickerPanel.id === acquirer.id,
              "data-uppy-super-focusable": true,
              onClick: function onClick() {
                return _this91.props.showPanel(acquirer.id);
              }
            }, acquirer.icon(), h("div", {
              className: "uppy-DashboardTab-name"
            }, acquirer.name)));
          };

          _this91.renderAcquirers = function (acquirers, disableLocalFiles) {
            // Group last two buttons, so we don’t end up with
            // just one button on a new line
            var acquirersWithoutLastTwo = [].concat(acquirers);
            var lastTwoAcquirers = acquirersWithoutLastTwo.splice(acquirers.length - 2, acquirers.length);
            return h("div", {
              className: "uppy-Dashboard-AddFiles-list",
              role: "tablist"
            }, !disableLocalFiles && _this91.renderMyDeviceAcquirer(), acquirersWithoutLastTwo.map(function (acquirer) {
              return _this91.renderAcquirer(acquirer);
            }), h("span", {
              role: "presentation",
              style: {
                'white-space': 'nowrap'
              }
            }, lastTwoAcquirers.map(function (acquirer) {
              return _this91.renderAcquirer(acquirer);
            })));
          };

          return _this91;
        }

        var _proto26 = AddFiles.prototype;

        _proto26[_Symbol$for] = function () {
          // Those are actually used in `renderDropPasteBrowseTagline` method.
          this.props.i18nArray('dropPasteBoth');
          this.props.i18nArray('dropPasteFiles');
          this.props.i18nArray('dropPasteFolders');
          this.props.i18nArray('dropPasteImportBoth');
          this.props.i18nArray('dropPasteImportFiles');
          this.props.i18nArray('dropPasteImportFolders');
        };

        _proto26.renderPoweredByUppy = function renderPoweredByUppy() {
          var i18nArray = this.props.i18nArray;
          var uppyBranding = h("span", null, h("svg", {
            "aria-hidden": "true",
            focusable: "false",
            className: "uppy-c-icon uppy-Dashboard-poweredByIcon",
            width: "11",
            height: "11",
            viewBox: "0 0 11 11"
          }, h("path", {
            d: "M7.365 10.5l-.01-4.045h2.612L5.5.806l-4.467 5.65h2.604l.01 4.044h3.718z",
            fillRule: "evenodd"
          })), h("span", {
            className: "uppy-Dashboard-poweredByUppy"
          }, "Uppy"));
          var linkText = i18nArray('poweredBy', {
            uppy: uppyBranding
          });
          return h("a", {
            tabIndex: "-1",
            href: "https://uppy.io",
            rel: "noreferrer noopener",
            target: "_blank",
            className: "uppy-Dashboard-poweredBy"
          }, linkText);
        };

        _proto26.render = function render() {
          var _this92 = this;

          return h("div", {
            className: "uppy-Dashboard-AddFiles"
          }, this.renderHiddenInput(false, function (ref) {
            _this92.fileInput = ref;
          }), this.renderHiddenInput(true, function (ref) {
            _this92.folderInput = ref;
          }), this.renderDropPasteBrowseTagline(), this.props.acquirers.length > 0 && this.renderAcquirers(this.props.acquirers, this.props.disableLocalFiles), h("div", {
            className: "uppy-Dashboard-AddFiles-info"
          }, this.props.note && h("div", {
            className: "uppy-Dashboard-note"
          }, this.props.note), this.props.proudlyDisplayPoweredByUppy && this.renderPoweredByUppy(this.props)));
        };

        return AddFiles;
      }(Component);

      module.exports = AddFiles;
    }, {
      "preact": 595
    }],
    651: [function (require, module, exports) {
      "use strict";

      var _require26 = require('preact'),
          h = _require26.h;

      var classNames = require('classnames');

      var AddFiles = require('./AddFiles');

      var AddFilesPanel = function AddFilesPanel(props) {
        return h("div", {
          className: classNames('uppy-Dashboard-AddFilesPanel', props.className),
          "data-uppy-panelType": "AddFiles",
          "aria-hidden": props.showAddFilesPanel
        }, h("div", {
          className: "uppy-DashboardContent-bar"
        }, h("div", {
          className: "uppy-DashboardContent-title",
          role: "heading",
          "aria-level": "1"
        }, props.i18n('addingMoreFiles')), h("button", {
          className: "uppy-DashboardContent-back",
          type: "button",
          onClick: function onClick() {
            return props.toggleAddFilesPanel(false);
          }
        }, props.i18n('back'))), h(AddFiles, props));
      };

      module.exports = AddFilesPanel;
    }, {
      "./AddFiles": 650,
      "classnames": 7,
      "preact": 595
    }],
    652: [function (require, module, exports) {
      "use strict";

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      var _require27 = require('preact'),
          h = _require27.h;

      var classNames = require('classnames');

      var isDragDropSupported = require('@uppy/utils/lib/isDragDropSupported');

      var FileList = require('./FileList');

      var AddFiles = require('./AddFiles');

      var AddFilesPanel = require('./AddFilesPanel');

      var PickerPanelContent = require('./PickerPanelContent');

      var EditorPanel = require('./EditorPanel');

      var PanelTopBar = require('./PickerPanelTopBar');

      var FileCard = require('./FileCard');

      var Slide = require('./Slide'); // http://dev.edenspiekermann.com/2016/02/11/introducing-accessible-modal-dialog
      // https://github.com/ghosh/micromodal


      var WIDTH_XL = 900;
      var WIDTH_LG = 700;
      var WIDTH_MD = 576;
      var HEIGHT_MD = 400;

      module.exports = function Dashboard(props) {
        var noFiles = props.totalFileCount === 0;
        var isSizeMD = props.containerWidth > WIDTH_MD;
        var wrapperClassName = classNames({
          'uppy-Root': props.isTargetDOMEl
        });
        var dashboardClassName = classNames({
          'uppy-Dashboard': true,
          'uppy-Dashboard--isDisabled': props.disabled,
          'uppy-Dashboard--animateOpenClose': props.animateOpenClose,
          'uppy-Dashboard--isClosing': props.isClosing,
          'uppy-Dashboard--isDraggingOver': props.isDraggingOver,
          'uppy-Dashboard--modal': !props.inline,
          'uppy-size--md': props.containerWidth > WIDTH_MD,
          'uppy-size--lg': props.containerWidth > WIDTH_LG,
          'uppy-size--xl': props.containerWidth > WIDTH_XL,
          'uppy-size--height-md': props.containerHeight > HEIGHT_MD,
          'uppy-Dashboard--isAddFilesPanelVisible': props.showAddFilesPanel,
          'uppy-Dashboard--isInnerWrapVisible': props.areInsidesReadyToBeVisible
        }); // Important: keep these in sync with the percent width values in `src/components/FileItem/index.scss`.

        var itemsPerRow = 1; // mobile

        if (props.containerWidth > WIDTH_XL) {
          itemsPerRow = 5;
        } else if (props.containerWidth > WIDTH_LG) {
          itemsPerRow = 4;
        } else if (props.containerWidth > WIDTH_MD) {
          itemsPerRow = 3;
        }

        var showFileList = props.showSelectedFiles && !noFiles;
        var numberOfFilesForRecovery = props.recoveredState ? Object.keys(props.recoveredState.files).length : null;
        var numberOfGhosts = props.files ? Object.keys(props.files).filter(function (fileID) {
          return props.files[fileID].isGhost;
        }).length : null;

        var renderRestoredText = function renderRestoredText() {
          if (numberOfGhosts > 0) {
            return props.i18n('recoveredXFiles', {
              smart_count: numberOfGhosts
            });
          }

          return props.i18n('recoveredAllFiles');
        };

        var dashboard = h("div", {
          className: dashboardClassName,
          "data-uppy-theme": props.theme,
          "data-uppy-num-acquirers": props.acquirers.length,
          "data-uppy-drag-drop-supported": !props.disableLocalFiles && isDragDropSupported(),
          "aria-hidden": props.inline ? 'false' : props.isHidden,
          "aria-disabled": props.disabled,
          "aria-label": !props.inline ? props.i18n('dashboardWindowTitle') : props.i18n('dashboardTitle'),
          onPaste: props.handlePaste,
          onDragOver: props.handleDragOver,
          onDragLeave: props.handleDragLeave,
          onDrop: props.handleDrop
        }, h("div", {
          "aria-hidden": "true",
          className: "uppy-Dashboard-overlay",
          tabIndex: -1,
          onClick: props.handleClickOutside
        }), h("div", {
          className: "uppy-Dashboard-inner",
          "aria-modal": !props.inline && 'true',
          role: !props.inline && 'dialog',
          style: {
            width: props.inline && props.width ? props.width : '',
            height: props.inline && props.height ? props.height : ''
          }
        }, !props.inline ? h("button", {
          className: "uppy-u-reset uppy-Dashboard-close",
          type: "button",
          "aria-label": props.i18n('closeModal'),
          title: props.i18n('closeModal'),
          onClick: props.closeModal
        }, h("span", {
          "aria-hidden": "true"
        }, "\xD7")) : null, h("div", {
          className: "uppy-Dashboard-innerWrap"
        }, h("div", {
          className: "uppy-Dashboard-dropFilesHereHint"
        }, props.i18n('dropHint')), showFileList && h(PanelTopBar, props), numberOfFilesForRecovery && h("div", {
          className: "uppy-Dashboard-serviceMsg"
        }, h("svg", {
          className: "uppy-Dashboard-serviceMsg-icon",
          "aria-hidden": "true",
          focusable: "false",
          width: "21",
          height: "16",
          viewBox: "0 0 24 19"
        }, h("g", {
          transform: "translate(0 -1)",
          fill: "none",
          fillRule: "evenodd"
        }, h("path", {
          d: "M12.857 1.43l10.234 17.056A1 1 0 0122.234 20H1.766a1 1 0 01-.857-1.514L11.143 1.429a1 1 0 011.714 0z",
          fill: "#FFD300"
        }), h("path", {
          fill: "#000",
          d: "M11 6h2l-.3 8h-1.4z"
        }), h("circle", {
          fill: "#000",
          cx: "12",
          cy: "17",
          r: "1"
        }))), h("strong", {
          className: "uppy-Dashboard-serviceMsg-title"
        }, props.i18n('sessionRestored')), h("div", {
          className: "uppy-Dashboard-serviceMsg-text"
        }, renderRestoredText())), showFileList ? h(FileList, _extends({}, props, {
          itemsPerRow: itemsPerRow
        })) : h(AddFiles, _extends({}, props, {
          isSizeMD: isSizeMD
        })), h(Slide, null, props.showAddFilesPanel ? h(AddFilesPanel, _extends({
          key: "AddFiles"
        }, props, {
          isSizeMD: isSizeMD
        })) : null), h(Slide, null, props.fileCardFor ? h(FileCard, _extends({
          key: "FileCard"
        }, props)) : null), h(Slide, null, props.activePickerPanel ? h(PickerPanelContent, _extends({
          key: "Picker"
        }, props)) : null), h(Slide, null, props.showFileEditor ? h(EditorPanel, _extends({
          key: "Editor"
        }, props)) : null), h("div", {
          className: "uppy-Dashboard-progressindicators"
        }, props.progressindicators.map(function (target) {
          return props.uppy.getPlugin(target.id).render(props.state);
        })))));
        return (// Wrap it for RTL language support
          h("div", {
            className: wrapperClassName,
            dir: props.direction
          }, dashboard)
        );
      };
    }, {
      "./AddFiles": 650,
      "./AddFilesPanel": 651,
      "./EditorPanel": 653,
      "./FileCard": 654,
      "./FileList": 660,
      "./PickerPanelContent": 662,
      "./PickerPanelTopBar": 663,
      "./Slide": 664,
      "@uppy/utils/lib/isDragDropSupported": 775,
      "classnames": 7,
      "preact": 595
    }],
    653: [function (require, module, exports) {
      "use strict";

      var _require28 = require('preact'),
          h = _require28.h;

      var classNames = require('classnames');

      function EditorPanel(props) {
        var file = props.files[props.fileCardFor];
        return h("div", {
          className: classNames('uppy-DashboardContent-panel', props.className),
          role: "tabpanel",
          "data-uppy-panelType": "FileEditor",
          id: "uppy-DashboardContent-panel--editor"
        }, h("div", {
          className: "uppy-DashboardContent-bar"
        }, h("div", {
          className: "uppy-DashboardContent-title",
          role: "heading",
          "aria-level": "1"
        }, props.i18nArray('editing', {
          file: h("span", {
            className: "uppy-DashboardContent-titleFile"
          }, file.meta ? file.meta.name : file.name)
        })), h("button", {
          className: "uppy-DashboardContent-back",
          type: "button",
          onClick: props.hideAllPanels
        }, props.i18n('cancel')), h("button", {
          className: "uppy-DashboardContent-save",
          type: "button",
          onClick: props.saveFileEditor
        }, props.i18n('save'))), h("div", {
          className: "uppy-DashboardContent-panelBody"
        }, props.editors.map(function (target) {
          return props.uppy.getPlugin(target.id).render(props.state);
        })));
      }

      module.exports = EditorPanel;
    }, {
      "classnames": 7,
      "preact": 595
    }],
    654: [function (require, module, exports) {
      "use strict";

      var _require29 = require('preact'),
          h = _require29.h,
          Component = _require29.Component;

      var classNames = require('classnames');

      var _require30 = require('nanoid'),
          nanoid = _require30.nanoid;

      var getFileTypeIcon = require('../../utils/getFileTypeIcon');

      var ignoreEvent = require('../../utils/ignoreEvent.js');

      var FilePreview = require('../FilePreview');

      var FileCard = /*#__PURE__*/function (_Component2) {
        _inheritsLoose(FileCard, _Component2);

        function FileCard(props) {
          var _this93;

          _this93 = _Component2.call(this, props) || this;
          _this93.form = document.createElement('form');

          _this93.updateMeta = function (newVal, name) {
            _this93.setState(function (_ref20) {
              var _Object$assign9;

              var formState = _ref20.formState;
              return {
                formState: Object.assign({}, formState, (_Object$assign9 = {}, _Object$assign9[name] = newVal, _Object$assign9))
              };
            });
          };

          _this93.handleSave = function (e) {
            e.preventDefault();
            var fileID = _this93.props.fileCardFor;

            _this93.props.saveFileCard(_this93.state.formState, fileID);
          };

          _this93.handleCancel = function () {
            _this93.props.toggleFileCard(false);
          };

          _this93.saveOnEnter = function (ev) {
            if (ev.keyCode === 13) {
              ev.stopPropagation();
              ev.preventDefault();
              var file = _this93.props.files[_this93.props.fileCardFor];

              _this93.props.saveFileCard(_this93.state.formState, file.id);
            }
          };

          _this93.renderMetaFields = function () {
            var metaFields = _this93.getMetaFields() || [];
            var fieldCSSClasses = {
              text: 'uppy-u-reset uppy-c-textInput uppy-Dashboard-FileCard-input'
            };
            return metaFields.map(function (field) {
              var id = "uppy-Dashboard-FileCard-input-" + field.id;

              var required = _this93.props.requiredMetaFields.includes(field.id);

              return h("fieldset", {
                key: field.id,
                className: "uppy-Dashboard-FileCard-fieldset"
              }, h("label", {
                className: "uppy-Dashboard-FileCard-label",
                htmlFor: id
              }, field.name), field.render !== undefined ? field.render({
                value: _this93.state.formState[field.id],
                onChange: function onChange(newVal) {
                  return _this93.updateMeta(newVal, field.id);
                },
                fieldCSSClasses: fieldCSSClasses,
                required: required,
                form: _this93.form.id
              }, h) : h("input", {
                className: fieldCSSClasses.text,
                id: id,
                form: _this93.form.id,
                type: field.type || 'text',
                required: required,
                value: _this93.state.formState[field.id],
                placeholder: field.placeholder // If `form` attribute is not supported, we need to capture pressing Enter to avoid bubbling in case Uppy is
                // embedded inside a <form>.
                ,
                onKeyUp: 'form' in HTMLInputElement.prototype ? undefined : _this93.saveOnEnter,
                onKeyDown: 'form' in HTMLInputElement.prototype ? undefined : _this93.saveOnEnter,
                onKeyPress: 'form' in HTMLInputElement.prototype ? undefined : _this93.saveOnEnter,
                onInput: function onInput(ev) {
                  return _this93.updateMeta(ev.target.value, field.id);
                },
                "data-uppy-super-focusable": true
              }));
            });
          };

          var _file = _this93.props.files[_this93.props.fileCardFor];

          var _metaFields = _this93.getMetaFields() || [];

          var storedMetaData = {};

          _metaFields.forEach(function (field) {
            storedMetaData[field.id] = _file.meta[field.id] || '';
          });

          _this93.state = {
            formState: storedMetaData
          };
          _this93.form.id = nanoid();
          return _this93;
        } // TODO(aduh95): move this to `UNSAFE_componentWillMount` when updating to Preact X+.


        var _proto27 = FileCard.prototype;

        _proto27.componentWillMount = function componentWillMount() {
          // eslint-disable-line react/no-deprecated
          this.form.addEventListener('submit', this.handleSave);
          document.body.appendChild(this.form);
        };

        _proto27.componentWillUnmount = function componentWillUnmount() {
          this.form.removeEventListener('submit', this.handleSave);
          document.body.removeChild(this.form);
        };

        _proto27.getMetaFields = function getMetaFields() {
          return typeof this.props.metaFields === 'function' ? this.props.metaFields(this.props.files[this.props.fileCardFor]) : this.props.metaFields;
        };

        _proto27.render = function render() {
          var _this94 = this;

          var file = this.props.files[this.props.fileCardFor];
          var showEditButton = this.props.canEditFile(file);
          return h("div", {
            className: classNames('uppy-Dashboard-FileCard', this.props.className),
            "data-uppy-panelType": "FileCard",
            onDragOver: ignoreEvent,
            onDragLeave: ignoreEvent,
            onDrop: ignoreEvent,
            onPaste: ignoreEvent
          }, h("div", {
            className: "uppy-DashboardContent-bar"
          }, h("div", {
            className: "uppy-DashboardContent-title",
            role: "heading",
            "aria-level": "1"
          }, this.props.i18nArray('editing', {
            file: h("span", {
              className: "uppy-DashboardContent-titleFile"
            }, file.meta ? file.meta.name : file.name)
          })), h("button", {
            className: "uppy-DashboardContent-back",
            type: "button",
            form: this.form.id,
            title: this.props.i18n('finishEditingFile'),
            onClick: this.handleCancel
          }, this.props.i18n('cancel'))), h("div", {
            className: "uppy-Dashboard-FileCard-inner"
          }, h("div", {
            className: "uppy-Dashboard-FileCard-preview",
            style: {
              backgroundColor: getFileTypeIcon(file.type).color
            }
          }, h(FilePreview, {
            file: file
          }), showEditButton && h("button", {
            type: "button",
            className: "uppy-u-reset uppy-c-btn uppy-Dashboard-FileCard-edit",
            onClick: function onClick() {
              return _this94.props.openFileEditor(file);
            },
            form: this.form.id
          }, this.props.i18n('editFile'))), h("div", {
            className: "uppy-Dashboard-FileCard-info"
          }, this.renderMetaFields()), h("div", {
            className: "uppy-Dashboard-FileCard-actions"
          }, h("button", {
            className: "uppy-u-reset uppy-c-btn uppy-c-btn-primary uppy-Dashboard-FileCard-actionsBtn" // If `form` attribute is supported, we want a submit button to trigger the form validation.
            // Otherwise, fallback to a classic button with a onClick event handler.
            ,
            type: 'form' in HTMLButtonElement.prototype ? 'submit' : 'button',
            onClick: 'form' in HTMLButtonElement.prototype ? undefined : this.handleSave,
            form: this.form.id
          }, this.props.i18n('saveChanges')), h("button", {
            className: "uppy-u-reset uppy-c-btn uppy-c-btn-link uppy-Dashboard-FileCard-actionsBtn",
            type: "button",
            onClick: this.handleCancel,
            form: this.form.id
          }, this.props.i18n('cancel')))));
        };

        return FileCard;
      }(Component);

      module.exports = FileCard;
    }, {
      "../../utils/getFileTypeIcon": 670,
      "../../utils/ignoreEvent.js": 671,
      "../FilePreview": 661,
      "classnames": 7,
      "nanoid": 673,
      "preact": 595
    }],
    655: [function (require, module, exports) {
      "use strict";

      var _require31 = require('preact'),
          h = _require31.h;

      var copyToClipboard = require('../../../utils/copyToClipboard');

      function EditButton(_ref21) {
        var file = _ref21.file,
            uploadInProgressOrComplete = _ref21.uploadInProgressOrComplete,
            metaFields = _ref21.metaFields,
            canEditFile = _ref21.canEditFile,
            i18n = _ref21.i18n,
            _onClick = _ref21.onClick;

        if (!uploadInProgressOrComplete && metaFields && metaFields.length > 0 || !uploadInProgressOrComplete && canEditFile(file)) {
          return h("button", {
            className: "uppy-u-reset uppy-Dashboard-Item-action uppy-Dashboard-Item-action--edit",
            type: "button",
            "aria-label": i18n('editFileWithFilename', {
              file: file.meta.name
            }),
            title: i18n('editFileWithFilename', {
              file: file.meta.name
            }),
            onClick: function onClick() {
              return _onClick();
            }
          }, h("svg", {
            "aria-hidden": "true",
            focusable: "false",
            className: "uppy-c-icon",
            width: "14",
            height: "14",
            viewBox: "0 0 14 14"
          }, h("g", {
            fillRule: "evenodd"
          }, h("path", {
            d: "M1.5 10.793h2.793A1 1 0 0 0 5 10.5L11.5 4a1 1 0 0 0 0-1.414L9.707.793a1 1 0 0 0-1.414 0l-6.5 6.5A1 1 0 0 0 1.5 8v2.793zm1-1V8L9 1.5l1.793 1.793-6.5 6.5H2.5z",
            fillRule: "nonzero"
          }), h("rect", {
            x: "1",
            y: "12.293",
            width: "11",
            height: "1",
            rx: ".5"
          }), h("path", {
            fillRule: "nonzero",
            d: "M6.793 2.5L9.5 5.207l.707-.707L7.5 1.793z"
          }))));
        }

        return null;
      }

      function RemoveButton(_ref22) {
        var i18n = _ref22.i18n,
            _onClick2 = _ref22.onClick,
            file = _ref22.file;
        return h("button", {
          className: "uppy-u-reset uppy-Dashboard-Item-action uppy-Dashboard-Item-action--remove",
          type: "button",
          "aria-label": i18n('removeFile', {
            file: file.meta.name
          }),
          title: i18n('removeFile', {
            file: file.meta.name
          }),
          onClick: function onClick() {
            return _onClick2();
          }
        }, h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-c-icon",
          width: "18",
          height: "18",
          viewBox: "0 0 18 18"
        }, h("path", {
          d: "M9 0C4.034 0 0 4.034 0 9s4.034 9 9 9 9-4.034 9-9-4.034-9-9-9z"
        }), h("path", {
          fill: "#FFF",
          d: "M13 12.222l-.778.778L9 9.778 5.778 13 5 12.222 8.222 9 5 5.778 5.778 5 9 8.222 12.222 5l.778.778L9.778 9z"
        })));
      }

      var copyLinkToClipboard = function copyLinkToClipboard(event, props) {
        copyToClipboard(props.file.uploadURL, props.i18n('copyLinkToClipboardFallback')).then(function () {
          props.uppy.log('Link copied to clipboard.');
          props.uppy.info(props.i18n('copyLinkToClipboardSuccess'), 'info', 3000);
        }).catch(props.uppy.log) // avoid losing focus
        .then(function () {
          return event.target.focus({
            preventScroll: true
          });
        });
      };

      function CopyLinkButton(props) {
        return h("button", {
          className: "uppy-u-reset uppy-Dashboard-Item-action uppy-Dashboard-Item-action--copyLink",
          type: "button",
          "aria-label": props.i18n('copyLink'),
          title: props.i18n('copyLink'),
          onClick: function onClick(event) {
            return copyLinkToClipboard(event, props);
          }
        }, h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-c-icon",
          width: "14",
          height: "14",
          viewBox: "0 0 14 12"
        }, h("path", {
          d: "M7.94 7.703a2.613 2.613 0 0 1-.626 2.681l-.852.851a2.597 2.597 0 0 1-1.849.766A2.616 2.616 0 0 1 2.764 7.54l.852-.852a2.596 2.596 0 0 1 2.69-.625L5.267 7.099a1.44 1.44 0 0 0-.833.407l-.852.851a1.458 1.458 0 0 0 1.03 2.486c.39 0 .755-.152 1.03-.426l.852-.852c.231-.231.363-.522.406-.824l1.04-1.038zm4.295-5.937A2.596 2.596 0 0 0 10.387 1c-.698 0-1.355.272-1.849.766l-.852.851a2.614 2.614 0 0 0-.624 2.688l1.036-1.036c.041-.304.173-.6.407-.833l.852-.852c.275-.275.64-.426 1.03-.426a1.458 1.458 0 0 1 1.03 2.486l-.852.851a1.442 1.442 0 0 1-.824.406l-1.04 1.04a2.596 2.596 0 0 0 2.683-.628l.851-.85a2.616 2.616 0 0 0 0-3.697zm-6.88 6.883a.577.577 0 0 0 .82 0l3.474-3.474a.579.579 0 1 0-.819-.82L5.355 7.83a.579.579 0 0 0 0 .819z"
        })));
      }

      module.exports = function Buttons(props) {
        var uppy = props.uppy,
            file = props.file,
            uploadInProgressOrComplete = props.uploadInProgressOrComplete,
            canEditFile = props.canEditFile,
            metaFields = props.metaFields,
            showLinkToFileUploadResult = props.showLinkToFileUploadResult,
            showRemoveButton = props.showRemoveButton,
            i18n = props.i18n,
            toggleFileCard = props.toggleFileCard,
            openFileEditor = props.openFileEditor;

        var editAction = function editAction() {
          if (metaFields && metaFields.length > 0) {
            toggleFileCard(true, file.id);
          } else {
            openFileEditor(file);
          }
        };

        return h("div", {
          className: "uppy-Dashboard-Item-actionWrapper"
        }, h(EditButton, {
          i18n: i18n,
          file: file,
          uploadInProgressOrComplete: uploadInProgressOrComplete,
          canEditFile: canEditFile,
          metaFields: metaFields,
          onClick: editAction
        }), showLinkToFileUploadResult && file.uploadURL ? h(CopyLinkButton, {
          file: file,
          uppy: uppy
        }) : null, showRemoveButton ? h(RemoveButton, {
          i18n: i18n,
          file: file,
          uppy: uppy,
          onClick: function onClick() {
            return props.uppy.removeFile(file.id, 'removed-by-user');
          }
        }) : null);
      };
    }, {
      "../../../utils/copyToClipboard": 667,
      "preact": 595
    }],
    656: [function (require, module, exports) {
      "use strict";

      var _require32 = require('preact'),
          h = _require32.h;

      var prettierBytes = require('@transloadit/prettier-bytes');

      var truncateString = require('@uppy/utils/lib/truncateString');

      var renderFileName = function renderFileName(props) {
        // Take up at most 2 lines on any screen
        var maxNameLength; // For very small mobile screens

        if (props.containerWidth <= 352) {
          maxNameLength = 35; // For regular mobile screens
        } else if (props.containerWidth <= 576) {
          maxNameLength = 60; // For desktops
        } else {
          maxNameLength = 30;
        }

        return h("div", {
          className: "uppy-Dashboard-Item-name",
          title: props.file.meta.name
        }, truncateString(props.file.meta.name, maxNameLength));
      };

      var renderFileSize = function renderFileSize(props) {
        return props.file.size && h("div", {
          className: "uppy-Dashboard-Item-statusSize"
        }, prettierBytes(props.file.size));
      };

      var ReSelectButton = function ReSelectButton(props) {
        return props.file.isGhost && h("span", null, " \u2022 ", h("button", {
          className: "uppy-u-reset uppy-c-btn uppy-Dashboard-Item-reSelect",
          type: "button",
          onClick: props.toggleAddFilesPanel
        }, props.i18n('reSelect')));
      };

      var ErrorButton = function ErrorButton(_ref23) {
        var file = _ref23.file,
            onClick = _ref23.onClick;

        if (file.error) {
          return h("button", {
            className: "uppy-Dashboard-Item-errorDetails",
            "aria-label": file.error,
            "data-microtip-position": "bottom",
            "data-microtip-size": "medium",
            onClick: onClick,
            type: "button"
          }, "?");
        }

        return null;
      };

      module.exports = function FileInfo(props) {
        return h("div", {
          className: "uppy-Dashboard-Item-fileInfo",
          "data-uppy-file-source": props.file.source
        }, renderFileName(props), h("div", {
          className: "uppy-Dashboard-Item-status"
        }, renderFileSize(props), ReSelectButton(props), h(ErrorButton, {
          file: props.file // eslint-disable-next-line no-alert
          ,
          onClick: function onClick() {
            return alert(props.file.error);
          } // TODO: move to a custom alert implementation

        })));
      };
    }, {
      "@transloadit/prettier-bytes": 1,
      "@uppy/utils/lib/truncateString": 785,
      "preact": 595
    }],
    657: [function (require, module, exports) {
      "use strict";

      var _require33 = require('preact'),
          h = _require33.h;

      var FilePreview = require('../../FilePreview');

      var getFileTypeIcon = require('../../../utils/getFileTypeIcon');

      module.exports = function FilePreviewAndLink(props) {
        return h("div", {
          className: "uppy-Dashboard-Item-previewInnerWrap",
          style: {
            backgroundColor: getFileTypeIcon(props.file.type).color
          }
        }, props.showLinkToFileUploadResult && props.file.uploadURL && h("a", {
          className: "uppy-Dashboard-Item-previewLink",
          href: props.file.uploadURL,
          rel: "noreferrer noopener",
          target: "_blank",
          "aria-label": props.file.meta.name
        }, h("span", {
          hidden: true
        }, "props.file.meta.name")), h(FilePreview, {
          file: props.file
        }));
      };
    }, {
      "../../../utils/getFileTypeIcon": 670,
      "../../FilePreview": 661,
      "preact": 595
    }],
    658: [function (require, module, exports) {
      "use strict";

      var _require34 = require('preact'),
          h = _require34.h;

      function onPauseResumeCancelRetry(props) {
        if (props.isUploaded) return;

        if (props.error && !props.hideRetryButton) {
          props.uppy.retryUpload(props.file.id);
          return;
        }

        if (props.resumableUploads && !props.hidePauseResumeButton) {
          props.uppy.pauseResume(props.file.id);
        } else if (props.individualCancellation && !props.hideCancelButton) {
          props.uppy.removeFile(props.file.id);
        }
      }

      function progressIndicatorTitle(props) {
        if (props.isUploaded) {
          return props.i18n('uploadComplete');
        }

        if (props.error) {
          return props.i18n('retryUpload');
        }

        if (props.resumableUploads) {
          if (props.file.isPaused) {
            return props.i18n('resumeUpload');
          }

          return props.i18n('pauseUpload');
        }

        if (props.individualCancellation) {
          return props.i18n('cancelUpload');
        }

        return '';
      }

      function ProgressIndicatorButton(props) {
        return h("div", {
          className: "uppy-Dashboard-Item-progress"
        }, h("button", {
          className: "uppy-u-reset uppy-Dashboard-Item-progressIndicator",
          type: "button",
          "aria-label": progressIndicatorTitle(props),
          title: progressIndicatorTitle(props),
          onClick: function onClick() {
            return onPauseResumeCancelRetry(props);
          }
        }, props.children));
      }

      function ProgressCircleContainer(_ref24) {
        var children = _ref24.children;
        return h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          width: "70",
          height: "70",
          viewBox: "0 0 36 36",
          className: "uppy-c-icon uppy-Dashboard-Item-progressIcon--circle"
        }, children);
      }

      function ProgressCircle(_ref25) {
        var progress = _ref25.progress;
        // circle length equals 2 * PI * R
        var circleLength = 2 * Math.PI * 15;
        return h("g", null, h("circle", {
          className: "uppy-Dashboard-Item-progressIcon--bg",
          r: "15",
          cx: "18",
          cy: "18",
          "stroke-width": "2",
          fill: "none"
        }), h("circle", {
          className: "uppy-Dashboard-Item-progressIcon--progress",
          r: "15",
          cx: "18",
          cy: "18",
          transform: "rotate(-90, 18, 18)",
          fill: "none",
          "stroke-width": "2",
          "stroke-dasharray": circleLength,
          "stroke-dashoffset": circleLength - circleLength / 100 * progress
        }));
      }

      module.exports = function FileProgress(props) {
        // Nothing if upload has not started
        if (!props.file.progress.uploadStarted) {
          return null;
        } // Green checkmark when complete


        if (props.isUploaded) {
          return h("div", {
            className: "uppy-Dashboard-Item-progress"
          }, h("div", {
            className: "uppy-Dashboard-Item-progressIndicator"
          }, h(ProgressCircleContainer, null, h("circle", {
            r: "15",
            cx: "18",
            cy: "18",
            fill: "#1bb240"
          }), h("polygon", {
            className: "uppy-Dashboard-Item-progressIcon--check",
            transform: "translate(2, 3)",
            points: "14 22.5 7 15.2457065 8.99985857 13.1732815 14 18.3547104 22.9729883 9 25 11.1005634"
          }))));
        }

        if (props.recoveredState) {
          return;
        } // Retry button for error


        if (props.error && !props.hideRetryButton) {
          return h(ProgressIndicatorButton, props, h("svg", {
            "aria-hidden": "true",
            focusable: "false",
            className: "uppy-c-icon uppy-Dashboard-Item-progressIcon--retry",
            width: "28",
            height: "31",
            viewBox: "0 0 16 19"
          }, h("path", {
            d: "M16 11a8 8 0 1 1-8-8v2a6 6 0 1 0 6 6h2z"
          }), h("path", {
            d: "M7.9 3H10v2H7.9z"
          }), h("path", {
            d: "M8.536.5l3.535 3.536-1.414 1.414L7.12 1.914z"
          }), h("path", {
            d: "M10.657 2.621l1.414 1.415L8.536 7.57 7.12 6.157z"
          })));
        } // Pause/resume button for resumable uploads


        if (props.resumableUploads && !props.hidePauseResumeButton) {
          return h(ProgressIndicatorButton, props, h(ProgressCircleContainer, null, h(ProgressCircle, {
            progress: props.file.progress.percentage
          }), props.file.isPaused ? h("polygon", {
            className: "uppy-Dashboard-Item-progressIcon--play",
            transform: "translate(3, 3)",
            points: "12 20 12 10 20 15"
          }) : h("g", {
            className: "uppy-Dashboard-Item-progressIcon--pause",
            transform: "translate(14.5, 13)"
          }, h("rect", {
            x: "0",
            y: "0",
            width: "2",
            height: "10",
            rx: "0"
          }), h("rect", {
            x: "5",
            y: "0",
            width: "2",
            height: "10",
            rx: "0"
          }))));
        } // Cancel button for non-resumable uploads if individualCancellation is supported (not bundled)


        if (!props.resumableUploads && props.individualCancellation && !props.hideCancelButton) {
          return h(ProgressIndicatorButton, props, h(ProgressCircleContainer, null, h(ProgressCircle, {
            progress: props.file.progress.percentage
          }), h("polygon", {
            className: "cancel",
            transform: "translate(2, 2)",
            points: "19.8856516 11.0625 16 14.9481516 12.1019737 11.0625 11.0625 12.1143484 14.9481516 16 11.0625 19.8980263 12.1019737 20.9375 16 17.0518484 19.8856516 20.9375 20.9375 19.8980263 17.0518484 16 20.9375 12"
          })));
        } // Just progress when buttons are disabled


        return h("div", {
          className: "uppy-Dashboard-Item-progress"
        }, h("div", {
          className: "uppy-Dashboard-Item-progressIndicator"
        }, h(ProgressCircleContainer, null, h(ProgressCircle, {
          progress: props.file.progress.percentage
        }))));
      };
    }, {
      "preact": 595
    }],
    659: [function (require, module, exports) {
      "use strict";

      var _require35 = require('preact'),
          h = _require35.h,
          Component = _require35.Component;

      var classNames = require('classnames');

      var shallowEqual = require('is-shallow-equal');

      var FilePreviewAndLink = require('./FilePreviewAndLink');

      var FileProgress = require('./FileProgress');

      var FileInfo = require('./FileInfo');

      var Buttons = require('./Buttons');

      module.exports = /*#__PURE__*/function (_Component3) {
        _inheritsLoose(FileItem, _Component3);

        function FileItem() {
          return _Component3.apply(this, arguments) || this;
        }

        var _proto28 = FileItem.prototype;

        _proto28.componentDidMount = function componentDidMount() {
          var file = this.props.file;

          if (!file.preview) {
            this.props.handleRequestThumbnail(file);
          }
        };

        _proto28.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
          return !shallowEqual(this.props, nextProps);
        } // VirtualList mounts FileItems again and they emit `thumbnail:request`
        // Otherwise thumbnails are broken or missing after Golden Retriever restores files
        ;

        _proto28.componentDidUpdate = function componentDidUpdate() {
          var file = this.props.file;

          if (!file.preview) {
            this.props.handleRequestThumbnail(file);
          }
        };

        _proto28.componentWillUnmount = function componentWillUnmount() {
          var file = this.props.file;

          if (!file.preview) {
            this.props.handleCancelThumbnail(file);
          }
        };

        _proto28.render = function render() {
          var file = this.props.file;
          var isProcessing = file.progress.preprocess || file.progress.postprocess;
          var isUploaded = file.progress.uploadComplete && !isProcessing && !file.error;
          var uploadInProgressOrComplete = file.progress.uploadStarted || isProcessing;
          var uploadInProgress = file.progress.uploadStarted && !file.progress.uploadComplete || isProcessing;
          var error = file.error || false; // File that Golden Retriever was able to partly restore (only meta, not blob),
          // users still need to re-add it, so it’s a ghost

          var isGhost = file.isGhost;
          var showRemoveButton = this.props.individualCancellation ? !isUploaded : !uploadInProgress && !isUploaded;

          if (isUploaded && this.props.showRemoveButtonAfterComplete) {
            showRemoveButton = true;
          }

          var dashboardItemClass = classNames({
            'uppy-Dashboard-Item': true,
            'is-inprogress': uploadInProgress && !this.props.recoveredState,
            'is-processing': isProcessing,
            'is-complete': isUploaded,
            'is-error': !!error,
            'is-resumable': this.props.resumableUploads,
            'is-noIndividualCancellation': !this.props.individualCancellation,
            'is-ghost': isGhost
          });
          return h("div", {
            className: dashboardItemClass,
            id: "uppy_" + file.id,
            role: this.props.role
          }, h("div", {
            className: "uppy-Dashboard-Item-preview"
          }, h(FilePreviewAndLink, {
            file: file,
            showLinkToFileUploadResult: this.props.showLinkToFileUploadResult
          }), h(FileProgress, {
            uppy: this.props.uppy,
            file: file,
            error: error,
            isUploaded: isUploaded,
            hideRetryButton: this.props.hideRetryButton,
            hideCancelButton: this.props.hideCancelButton,
            hidePauseResumeButton: this.props.hidePauseResumeButton,
            recoveredState: this.props.recoveredState,
            showRemoveButtonAfterComplete: this.props.showRemoveButtonAfterComplete,
            resumableUploads: this.props.resumableUploads,
            individualCancellation: this.props.individualCancellation,
            i18n: this.props.i18n
          })), h("div", {
            className: "uppy-Dashboard-Item-fileInfoAndButtons"
          }, h(FileInfo, {
            file: file,
            id: this.props.id,
            acquirers: this.props.acquirers,
            containerWidth: this.props.containerWidth,
            i18n: this.props.i18n,
            toggleAddFilesPanel: this.props.toggleAddFilesPanel
          }), h(Buttons, {
            file: file,
            metaFields: this.props.metaFields,
            showLinkToFileUploadResult: this.props.showLinkToFileUploadResult,
            showRemoveButton: showRemoveButton,
            canEditFile: this.props.canEditFile,
            uploadInProgressOrComplete: uploadInProgressOrComplete,
            toggleFileCard: this.props.toggleFileCard,
            openFileEditor: this.props.openFileEditor,
            uppy: this.props.uppy,
            i18n: this.props.i18n
          })));
        };

        return FileItem;
      }(Component);
    }, {
      "./Buttons": 655,
      "./FileInfo": 656,
      "./FilePreviewAndLink": 657,
      "./FileProgress": 658,
      "classnames": 7,
      "is-shallow-equal": 584,
      "preact": 595
    }],
    660: [function (require, module, exports) {
      "use strict";

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      var classNames = require('classnames');

      var _require36 = require('preact'),
          h = _require36.h;

      var FileItem = require('./FileItem/index.js');

      var VirtualList = require('./VirtualList');

      function chunks(list, size) {
        var chunked = [];
        var currentChunk = [];
        list.forEach(function (item) {
          if (currentChunk.length < size) {
            currentChunk.push(item);
          } else {
            chunked.push(currentChunk);
            currentChunk = [item];
          }
        });
        if (currentChunk.length) chunked.push(currentChunk);
        return chunked;
      }

      module.exports = function (props) {
        var noFiles = props.totalFileCount === 0;
        var dashboardFilesClass = classNames('uppy-Dashboard-files', {
          'uppy-Dashboard-files--noFiles': noFiles
        }); // It's not great that this is hardcoded!
        // It's ESPECIALLY not great that this is checking against `itemsPerRow`!

        var rowHeight = props.itemsPerRow === 1 // Mobile
        ? 71 // 190px height + 2 * 5px margin
        : 200;
        var fileProps = {
          // FIXME This is confusing, it's actually the Dashboard's plugin ID
          id: props.id,
          error: props.error,
          // TODO move this to context
          i18n: props.i18n,
          uppy: props.uppy,
          // features
          acquirers: props.acquirers,
          resumableUploads: props.resumableUploads,
          individualCancellation: props.individualCancellation,
          // visual options
          hideRetryButton: props.hideRetryButton,
          hidePauseResumeButton: props.hidePauseResumeButton,
          hideCancelButton: props.hideCancelButton,
          showLinkToFileUploadResult: props.showLinkToFileUploadResult,
          showRemoveButtonAfterComplete: props.showRemoveButtonAfterComplete,
          isWide: props.isWide,
          metaFields: props.metaFields,
          recoveredState: props.recoveredState,
          // callbacks
          toggleFileCard: props.toggleFileCard,
          handleRequestThumbnail: props.handleRequestThumbnail,
          handleCancelThumbnail: props.handleCancelThumbnail
        };

        var sortByGhostComesFirst = function sortByGhostComesFirst(file1, file2) {
          return props.files[file2].isGhost - props.files[file1].isGhost;
        }; // Sort files by file.isGhost, ghost files first, only if recoveredState is present


        var files = Object.keys(props.files);
        if (props.recoveredState) files.sort(sortByGhostComesFirst);
        var rows = chunks(files, props.itemsPerRow);

        function renderRow(row) {
          return (// The `role="presentation` attribute ensures that the list items are properly
            // associated with the `VirtualList` element.
            // We use the first file ID as the key—this should not change across scroll rerenders
            h("div", {
              role: "presentation",
              key: row[0]
            }, row.map(function (fileID) {
              return h(FileItem, _extends({
                key: fileID,
                uppy: props.uppy
              }, fileProps, {
                role: "listitem",
                openFileEditor: props.openFileEditor,
                canEditFile: props.canEditFile,
                toggleAddFilesPanel: props.toggleAddFilesPanel,
                file: props.files[fileID]
              }));
            }))
          );
        }

        return h(VirtualList, {
          class: dashboardFilesClass,
          role: "list",
          data: rows,
          renderRow: renderRow,
          rowHeight: rowHeight
        });
      };
    }, {
      "./FileItem/index.js": 659,
      "./VirtualList": 665,
      "classnames": 7,
      "preact": 595
    }],
    661: [function (require, module, exports) {
      "use strict";

      var _require37 = require('preact'),
          h = _require37.h;

      var getFileTypeIcon = require('../utils/getFileTypeIcon');

      module.exports = function FilePreview(props) {
        var file = props.file;

        if (file.preview) {
          return h("img", {
            className: "uppy-Dashboard-Item-previewImg",
            alt: file.name,
            src: file.preview
          });
        }

        var _getFileTypeIcon = getFileTypeIcon(file.type),
            color = _getFileTypeIcon.color,
            icon = _getFileTypeIcon.icon;

        return h("div", {
          className: "uppy-Dashboard-Item-previewIconWrap"
        }, h("span", {
          className: "uppy-Dashboard-Item-previewIcon",
          style: {
            color: color
          }
        }, icon), h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-Dashboard-Item-previewIconBg",
          width: "58",
          height: "76",
          viewBox: "0 0 58 76"
        }, h("rect", {
          fill: "#FFF",
          width: "58",
          height: "76",
          rx: "3",
          fillRule: "evenodd"
        })));
      };
    }, {
      "../utils/getFileTypeIcon": 670,
      "preact": 595
    }],
    662: [function (require, module, exports) {
      "use strict";

      var _require38 = require('preact'),
          h = _require38.h;

      var classNames = require('classnames');

      var ignoreEvent = require('../utils/ignoreEvent.js');

      function PickerPanelContent(props) {
        return h("div", {
          className: classNames('uppy-DashboardContent-panel', props.className),
          role: "tabpanel",
          "data-uppy-panelType": "PickerPanel",
          id: "uppy-DashboardContent-panel--" + props.activePickerPanel.id,
          onDragOver: ignoreEvent,
          onDragLeave: ignoreEvent,
          onDrop: ignoreEvent,
          onPaste: ignoreEvent
        }, h("div", {
          className: "uppy-DashboardContent-bar"
        }, h("div", {
          className: "uppy-DashboardContent-title",
          role: "heading",
          "aria-level": "1"
        }, props.i18n('importFrom', {
          name: props.activePickerPanel.name
        })), h("button", {
          className: "uppy-DashboardContent-back",
          type: "button",
          onClick: props.hideAllPanels
        }, props.i18n('cancel'))), h("div", {
          className: "uppy-DashboardContent-panelBody"
        }, props.uppy.getPlugin(props.activePickerPanel.id).render(props.state)));
      }

      module.exports = PickerPanelContent;
    }, {
      "../utils/ignoreEvent.js": 671,
      "classnames": 7,
      "preact": 595
    }],
    663: [function (require, module, exports) {
      "use strict";

      var _require39 = require('preact'),
          h = _require39.h;

      var uploadStates = {
        STATE_ERROR: 'error',
        STATE_WAITING: 'waiting',
        STATE_PREPROCESSING: 'preprocessing',
        STATE_UPLOADING: 'uploading',
        STATE_POSTPROCESSING: 'postprocessing',
        STATE_COMPLETE: 'complete',
        STATE_PAUSED: 'paused'
      };

      function getUploadingState(isAllErrored, isAllComplete, isAllPaused, files) {
        if (files === void 0) {
          files = {};
        }

        if (isAllErrored) {
          return uploadStates.STATE_ERROR;
        }

        if (isAllComplete) {
          return uploadStates.STATE_COMPLETE;
        }

        if (isAllPaused) {
          return uploadStates.STATE_PAUSED;
        }

        var state = uploadStates.STATE_WAITING;
        var fileIDs = Object.keys(files);

        for (var i = 0; i < fileIDs.length; i++) {
          var progress = files[fileIDs[i]].progress; // If ANY files are being uploaded right now, show the uploading state.

          if (progress.uploadStarted && !progress.uploadComplete) {
            return uploadStates.STATE_UPLOADING;
          } // If files are being preprocessed AND postprocessed at this time, we show the
          // preprocess state. If any files are being uploaded we show uploading.


          if (progress.preprocess && state !== uploadStates.STATE_UPLOADING) {
            state = uploadStates.STATE_PREPROCESSING;
          } // If NO files are being preprocessed or uploaded right now, but some files are
          // being postprocessed, show the postprocess state.


          if (progress.postprocess && state !== uploadStates.STATE_UPLOADING && state !== uploadStates.STATE_PREPROCESSING) {
            state = uploadStates.STATE_POSTPROCESSING;
          }
        }

        return state;
      }

      function UploadStatus(props) {
        var uploadingState = getUploadingState(props.isAllErrored, props.isAllComplete, props.isAllPaused, props.files);

        switch (uploadingState) {
          case 'uploading':
            return props.i18n('uploadingXFiles', {
              smart_count: props.inProgressNotPausedFiles.length
            });

          case 'preprocessing':
          case 'postprocessing':
            return props.i18n('processingXFiles', {
              smart_count: props.processingFiles.length
            });

          case 'paused':
            return props.i18n('uploadPaused');

          case 'waiting':
            return props.i18n('xFilesSelected', {
              smart_count: props.newFiles.length
            });

          case 'complete':
            return props.i18n('uploadComplete');
        }
      }

      function PanelTopBar(props) {
        var allowNewUpload = props.allowNewUpload; // TODO maybe this should be done in ../index.js, then just pass that down as `allowNewUpload`

        if (allowNewUpload && props.maxNumberOfFiles) {
          allowNewUpload = props.totalFileCount < props.maxNumberOfFiles;
        }

        return h("div", {
          className: "uppy-DashboardContent-bar"
        }, !props.isAllComplete && !props.hideCancelButton ? h("button", {
          className: "uppy-DashboardContent-back",
          type: "button",
          onClick: function onClick() {
            return props.uppy.cancelAll();
          }
        }, props.i18n('cancel')) : h("div", null), h("div", {
          className: "uppy-DashboardContent-title",
          role: "heading",
          "aria-level": "1"
        }, h(UploadStatus, props)), allowNewUpload ? h("button", {
          className: "uppy-DashboardContent-addMore",
          type: "button",
          "aria-label": props.i18n('addMoreFiles'),
          title: props.i18n('addMoreFiles'),
          onClick: function onClick() {
            return props.toggleAddFilesPanel(true);
          }
        }, h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-c-icon",
          width: "15",
          height: "15",
          viewBox: "0 0 15 15"
        }, h("path", {
          d: "M8 6.5h6a.5.5 0 0 1 .5.5v.5a.5.5 0 0 1-.5.5H8v6a.5.5 0 0 1-.5.5H7a.5.5 0 0 1-.5-.5V8h-6a.5.5 0 0 1-.5-.5V7a.5.5 0 0 1 .5-.5h6v-6A.5.5 0 0 1 7 0h.5a.5.5 0 0 1 .5.5v6z"
        })), h("span", {
          className: "uppy-DashboardContent-addMoreCaption"
        }, props.i18n('addMore'))) : h("div", null));
      }

      module.exports = PanelTopBar;
    }, {
      "preact": 595
    }],
    664: [function (require, module, exports) {
      "use strict";

      var _require40 = require('preact'),
          cloneElement = _require40.cloneElement,
          Component = _require40.Component,
          toChildArray = _require40.toChildArray;

      var classNames = require('classnames');

      var transitionName = 'uppy-transition-slideDownUp';
      var duration = 250;
      /**
       * Vertical slide transition.
       *
       * This can take a _single_ child component, which _must_ accept a `className` prop.
       *
       * Currently this is specific to the `uppy-transition-slideDownUp` transition,
       * but it should be simple to extend this for any type of single-element
       * transition by setting the CSS name and duration as props.
       */

      var Slide = /*#__PURE__*/function (_Component4) {
        _inheritsLoose(Slide, _Component4);

        function Slide(props) {
          var _this95;

          _this95 = _Component4.call(this, props) || this;
          _this95.state = {
            cachedChildren: null,
            className: ''
          };
          return _this95;
        } // TODO: refactor to stable lifecycle method
        // eslint-disable-next-line


        var _proto29 = Slide.prototype;

        _proto29.componentWillUpdate = function componentWillUpdate(nextProps) {
          var _this96 = this;

          var cachedChildren = this.state.cachedChildren;
          var child = toChildArray(nextProps.children)[0];
          if (cachedChildren === child) return null;
          var patch = {
            cachedChildren: child
          }; // Enter transition

          if (child && !cachedChildren) {
            patch.className = transitionName + "-enter";
            cancelAnimationFrame(this.animationFrame);
            clearTimeout(this.leaveTimeout);
            this.leaveTimeout = undefined;
            this.animationFrame = requestAnimationFrame(function () {
              // Force it to render before we add the active class
              // this.base.getBoundingClientRect()
              _this96.setState({
                className: transitionName + "-enter " + transitionName + "-enter-active"
              });

              _this96.enterTimeout = setTimeout(function () {
                _this96.setState({
                  className: ''
                });
              }, duration);
            });
          } // Leave transition


          if (cachedChildren && !child && this.leaveTimeout === undefined) {
            patch.cachedChildren = cachedChildren;
            patch.className = transitionName + "-leave";
            cancelAnimationFrame(this.animationFrame);
            clearTimeout(this.enterTimeout);
            this.enterTimeout = undefined;
            this.animationFrame = requestAnimationFrame(function () {
              _this96.setState({
                className: transitionName + "-leave " + transitionName + "-leave-active"
              });

              _this96.leaveTimeout = setTimeout(function () {
                _this96.setState({
                  cachedChildren: null,
                  className: ''
                });
              }, duration);
            });
          } // eslint-disable-next-line


          this.setState(patch);
        };

        _proto29.render = function render() {
          var _this$state = this.state,
              cachedChildren = _this$state.cachedChildren,
              className = _this$state.className;

          if (!cachedChildren) {
            return null;
          }

          return cloneElement(cachedChildren, {
            className: classNames(className, cachedChildren.props.className)
          });
        };

        return Slide;
      }(Component);

      module.exports = Slide;
    }, {
      "classnames": 7,
      "preact": 595
    }],
    665: [function (require, module, exports) {
      "use strict";

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }
      /**
       * Adapted from preact-virtual-list: https://github.com/developit/preact-virtual-list
       *
       * © 2016 Jason Miller
       *
       * Permission is hereby granted, free of charge, to any person obtaining a copy
       * of this software and associated documentation files (the "Software"), to deal
       * in the Software without restriction, including without limitation the rights
       * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
       * copies of the Software, and to permit persons to whom the Software is
       * furnished to do so, subject to the following conditions:
       *
       * The above copyright notice and this permission notice shall be included in all
       * copies or substantial portions of the Software.
       *
       * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
       * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
       * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
       * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
       * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
       * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
       * SOFTWARE.
       *
       * Adaptations:
       * - Added role=presentation to helper elements
       * - Tweaked styles for Uppy's Dashboard use case
       */


      var _require41 = require('preact'),
          h = _require41.h,
          Component = _require41.Component;

      var STYLE_INNER = {
        position: 'relative',
        // Disabled for our use case: the wrapper elements around FileList already deal with overflow,
        // and this additional property would hide things that we want to show.
        //
        // overflow: 'hidden',
        width: '100%',
        minHeight: '100%'
      };
      var STYLE_CONTENT = {
        position: 'absolute',
        top: 0,
        left: 0,
        // Because the `top` value gets set to some offset, this `height` being 100% would make the scrollbar
        // stretch far beyond the content. For our use case, the content div actually can get its height from
        // the elements inside it, so we don't need to specify a `height` property at all.
        //
        // height: '100%',
        width: '100%',
        overflow: 'visible'
      };

      var VirtualList = /*#__PURE__*/function (_Component5) {
        _inheritsLoose(VirtualList, _Component5);

        function VirtualList(props) {
          var _this97;

          _this97 = _Component5.call(this, props) || this; // The currently focused node, used to retain focus when the visible rows change.
          // To avoid update loops, this should not cause state updates, so it's kept as a plain property.

          _this97.handleScroll = function () {
            _this97.setState({
              offset: _this97.base.scrollTop
            });
          };

          _this97.handleResize = function () {
            _this97.resize();
          };

          _this97.focusElement = null;
          _this97.state = {
            offset: 0,
            height: 0
          };
          return _this97;
        }

        var _proto30 = VirtualList.prototype;

        _proto30.componentDidMount = function componentDidMount() {
          this.resize();
          window.addEventListener('resize', this.handleResize);
        } // TODO: refactor to stable lifecycle method
        // eslint-disable-next-line
        ;

        _proto30.componentWillUpdate = function componentWillUpdate() {
          if (this.base.contains(document.activeElement)) {
            this.focusElement = document.activeElement;
          }
        };

        _proto30.componentDidUpdate = function componentDidUpdate() {
          // Maintain focus when rows are added and removed.
          if (this.focusElement && this.focusElement.parentNode && document.activeElement !== this.focusElement) {
            this.focusElement.focus();
          }

          this.focusElement = null;
          this.resize();
        };

        _proto30.componentWillUnmount = function componentWillUnmount() {
          window.removeEventListener('resize', this.handleResize);
        };

        _proto30.resize = function resize() {
          var height = this.state.height;

          if (height !== this.base.offsetHeight) {
            this.setState({
              height: this.base.offsetHeight
            });
          }
        };

        _proto30.render = function render(_ref26) {
          var data = _ref26.data,
              rowHeight = _ref26.rowHeight,
              renderRow = _ref26.renderRow,
              _ref26$overscanCount = _ref26.overscanCount,
              overscanCount = _ref26$overscanCount === void 0 ? 10 : _ref26$overscanCount,
              props = _objectWithoutPropertiesLoose(_ref26, _excluded);

          var _this$state2 = this.state,
              offset = _this$state2.offset,
              height = _this$state2.height; // first visible row index

          var start = Math.floor(offset / rowHeight); // actual number of visible rows (without overscan)

          var visibleRowCount = Math.floor(height / rowHeight); // Overscan: render blocks of rows modulo an overscan row count
          // This dramatically reduces DOM writes during scrolling

          if (overscanCount) {
            start = Math.max(0, start - start % overscanCount);
            visibleRowCount += overscanCount;
          } // last visible + overscan row index + padding to allow keyboard focus to travel past the visible area


          var end = start + visibleRowCount + 4; // data slice currently in viewport plus overscan items

          var selection = data.slice(start, end);
          var styleInner = Object.assign({}, STYLE_INNER, {
            height: data.length * rowHeight
          });
          var styleContent = Object.assign({}, STYLE_CONTENT, {
            top: start * rowHeight
          }); // The `role="presentation"` attributes ensure that these wrapper elements are not treated as list
          // items by accessibility and outline tools.

          return h("div", _extends({
            onScroll: this.handleScroll
          }, props), h("div", {
            role: "presentation",
            style: styleInner
          }, h("div", {
            role: "presentation",
            style: styleContent
          }, selection.map(renderRow))));
        };

        return VirtualList;
      }(Component);

      module.exports = VirtualList;
    }, {
      "preact": 595
    }],
    666: [function (require, module, exports) {
      "use strict";

      var _class, _openFileEditorWhenFilesAdded, _attachRenderFunctionToTarget, _isTargetSupported, _getAcquirers, _getProgressIndicators, _getEditors, _temp;

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }

      var _require42 = require('preact'),
          h = _require42.h;

      var _require43 = require('@uppy/core'),
          UIPlugin = _require43.UIPlugin;

      var StatusBar = require('@uppy/status-bar');

      var Informer = require('@uppy/informer');

      var ThumbnailGenerator = require('@uppy/thumbnail-generator');

      var findAllDOMElements = require('@uppy/utils/lib/findAllDOMElements');

      var toArray = require('@uppy/utils/lib/toArray');

      var getDroppedFiles = require('@uppy/utils/lib/getDroppedFiles');

      var getTextDirection = require('@uppy/utils/lib/getTextDirection');

      var _require44 = require('nanoid'),
          nanoid = _require44.nanoid;

      var trapFocus = require('./utils/trapFocus');

      var createSuperFocus = require('./utils/createSuperFocus');

      var memoize = require('memoize-one').default || require('memoize-one');

      var FOCUSABLE_ELEMENTS = require('@uppy/utils/lib/FOCUSABLE_ELEMENTS');

      var DashboardUI = require('./components/Dashboard');

      var TAB_KEY = 9;
      var ESC_KEY = 27;

      function createPromise() {
        var o = {};
        o.promise = new Promise(function (resolve, reject) {
          o.resolve = resolve;
          o.reject = reject;
        });
        return o;
      }

      function defaultPickerIcon() {
        return h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          width: "30",
          height: "30",
          viewBox: "0 0 30 30"
        }, h("path", {
          d: "M15 30c8.284 0 15-6.716 15-15 0-8.284-6.716-15-15-15C6.716 0 0 6.716 0 15c0 8.284 6.716 15 15 15zm4.258-12.676v6.846h-8.426v-6.846H5.204l9.82-12.364 9.82 12.364H19.26z"
        }));
      }
      /**
       * Dashboard UI with previews, metadata editing, tabs for various services and more
       */


      module.exports = (_temp = (_openFileEditorWhenFilesAdded = /*#__PURE__*/_classPrivateFieldLooseKey("openFileEditorWhenFilesAdded"), _attachRenderFunctionToTarget = /*#__PURE__*/_classPrivateFieldLooseKey("attachRenderFunctionToTarget"), _isTargetSupported = /*#__PURE__*/_classPrivateFieldLooseKey("isTargetSupported"), _getAcquirers = /*#__PURE__*/_classPrivateFieldLooseKey("getAcquirers"), _getProgressIndicators = /*#__PURE__*/_classPrivateFieldLooseKey("getProgressIndicators"), _getEditors = /*#__PURE__*/_classPrivateFieldLooseKey("getEditors"), _class = /*#__PURE__*/function (_UIPlugin2) {
        _inheritsLoose(Dashboard, _UIPlugin2);

        function Dashboard(uppy, _opts) {
          var _this98;

          _this98 = _UIPlugin2.call(this, uppy, _opts) || this;

          _this98.removeTarget = function (plugin) {
            var pluginState = _this98.getPluginState(); // filter out the one we want to remove


            var newTargets = pluginState.targets.filter(function (target) {
              return target.id !== plugin.id;
            });

            _this98.setPluginState({
              targets: newTargets
            });
          };

          _this98.addTarget = function (plugin) {
            var callerPluginId = plugin.id || plugin.constructor.name;
            var callerPluginName = plugin.title || callerPluginId;
            var callerPluginType = plugin.type;

            if (callerPluginType !== 'acquirer' && callerPluginType !== 'progressindicator' && callerPluginType !== 'editor') {
              var msg = 'Dashboard: can only be targeted by plugins of types: acquirer, progressindicator, editor';

              _this98.uppy.log(msg, 'error');

              return;
            }

            var target = {
              id: callerPluginId,
              name: callerPluginName,
              type: callerPluginType
            };

            var state = _this98.getPluginState();

            var newTargets = state.targets.slice();
            newTargets.push(target);

            _this98.setPluginState({
              targets: newTargets
            });

            return _this98.el;
          };

          _this98.hideAllPanels = function () {
            var state = _this98.getPluginState();

            var update = {
              activePickerPanel: false,
              showAddFilesPanel: false,
              activeOverlayType: null,
              fileCardFor: null,
              showFileEditor: false
            };

            if (state.activePickerPanel === update.activePickerPanel && state.showAddFilesPanel === update.showAddFilesPanel && state.showFileEditor === update.showFileEditor && state.activeOverlayType === update.activeOverlayType) {
              // avoid doing a state update if nothing changed
              return;
            }

            _this98.setPluginState(update);
          };

          _this98.showPanel = function (id) {
            var _this98$getPluginStat = _this98.getPluginState(),
                targets = _this98$getPluginStat.targets;

            var activePickerPanel = targets.filter(function (target) {
              return target.type === 'acquirer' && target.id === id;
            })[0];

            _this98.setPluginState({
              activePickerPanel: activePickerPanel,
              activeOverlayType: 'PickerPanel'
            });
          };

          _this98.canEditFile = function (file) {
            var _this98$getPluginStat2 = _this98.getPluginState(),
                targets = _this98$getPluginStat2.targets;

            var editors = _classPrivateFieldLooseBase(_assertThisInitialized2(_this98), _getEditors)[_getEditors](targets);

            return editors.some(function (target) {
              return _this98.uppy.getPlugin(target.id).canEditFile(file);
            });
          };

          _this98.openFileEditor = function (file) {
            var _this98$getPluginStat3 = _this98.getPluginState(),
                targets = _this98$getPluginStat3.targets;

            var editors = _classPrivateFieldLooseBase(_assertThisInitialized2(_this98), _getEditors)[_getEditors](targets);

            _this98.setPluginState({
              showFileEditor: true,
              fileCardFor: file.id || null,
              activeOverlayType: 'FileEditor'
            });

            editors.forEach(function (editor) {
              _this98.uppy.getPlugin(editor.id).selectFile(file);
            });
          };

          _this98.saveFileEditor = function () {
            var _this98$getPluginStat4 = _this98.getPluginState(),
                targets = _this98$getPluginStat4.targets;

            var editors = _classPrivateFieldLooseBase(_assertThisInitialized2(_this98), _getEditors)[_getEditors](targets);

            editors.forEach(function (editor) {
              _this98.uppy.getPlugin(editor.id).save();
            });

            _this98.hideAllPanels();
          };

          _this98.openModal = function () {
            var _createPromise = createPromise(),
                promise = _createPromise.promise,
                resolve = _createPromise.resolve; // save scroll position


            _this98.savedScrollPosition = window.pageYOffset; // save active element, so we can restore focus when modal is closed

            _this98.savedActiveElement = document.activeElement;

            if (_this98.opts.disablePageScrollWhenModalOpen) {
              document.body.classList.add('uppy-Dashboard-isFixed');
            }

            if (_this98.opts.animateOpenClose && _this98.getPluginState().isClosing) {
              var handler = function handler() {
                _this98.setPluginState({
                  isHidden: false
                });

                _this98.el.removeEventListener('animationend', handler, false);

                resolve();
              };

              _this98.el.addEventListener('animationend', handler, false);
            } else {
              _this98.setPluginState({
                isHidden: false
              });

              resolve();
            }

            if (_this98.opts.browserBackButtonClose) {
              _this98.updateBrowserHistory();
            } // handle ESC and TAB keys in modal dialog


            document.addEventListener('keydown', _this98.handleKeyDownInModal);

            _this98.uppy.emit('dashboard:modal-open');

            return promise;
          };

          _this98.closeModal = function (opts) {
            if (opts === void 0) {
              opts = {};
            }

            var _opts3 = opts,
                _opts3$manualClose = _opts3.manualClose,
                manualClose = _opts3$manualClose === void 0 ? true : _opts3$manualClose;

            var _this98$getPluginStat5 = _this98.getPluginState(),
                isHidden = _this98$getPluginStat5.isHidden,
                isClosing = _this98$getPluginStat5.isClosing;

            if (isHidden || isClosing) {
              // short-circuit if animation is ongoing
              return;
            }

            var _createPromise2 = createPromise(),
                promise = _createPromise2.promise,
                resolve = _createPromise2.resolve;

            if (_this98.opts.disablePageScrollWhenModalOpen) {
              document.body.classList.remove('uppy-Dashboard-isFixed');
            }

            if (_this98.opts.animateOpenClose) {
              _this98.setPluginState({
                isClosing: true
              });

              var handler = function handler() {
                _this98.setPluginState({
                  isHidden: true,
                  isClosing: false
                });

                _this98.superFocus.cancel();

                _this98.savedActiveElement.focus();

                _this98.el.removeEventListener('animationend', handler, false);

                resolve();
              };

              _this98.el.addEventListener('animationend', handler, false);
            } else {
              _this98.setPluginState({
                isHidden: true
              });

              _this98.superFocus.cancel();

              _this98.savedActiveElement.focus();

              resolve();
            } // handle ESC and TAB keys in modal dialog


            document.removeEventListener('keydown', _this98.handleKeyDownInModal);

            if (manualClose) {
              if (_this98.opts.browserBackButtonClose) {
                var _history$state; // Make sure that the latest entry in the history state is our modal name
                // eslint-disable-next-line no-restricted-globals


                if ((_history$state = history.state) != null && _history$state[_this98.modalName]) {
                  // Go back in history to clear out the entry we created (ultimately closing the modal)
                  // eslint-disable-next-line no-restricted-globals
                  history.back();
                }
              }
            }

            _this98.uppy.emit('dashboard:modal-closed');

            return promise;
          };

          _this98.isModalOpen = function () {
            return !_this98.getPluginState().isHidden || false;
          };

          _this98.requestCloseModal = function () {
            if (_this98.opts.onRequestCloseModal) {
              return _this98.opts.onRequestCloseModal();
            }

            return _this98.closeModal();
          };

          _this98.setDarkModeCapability = function (isDarkModeOn) {
            var _this98$uppy$getState = _this98.uppy.getState(),
                capabilities = _this98$uppy$getState.capabilities;

            _this98.uppy.setState({
              capabilities: Object.assign({}, capabilities, {
                darkMode: isDarkModeOn
              })
            });
          };

          _this98.handleSystemDarkModeChange = function (event) {
            var isDarkModeOnNow = event.matches;

            _this98.uppy.log("[Dashboard] Dark mode is " + (isDarkModeOnNow ? 'on' : 'off'));

            _this98.setDarkModeCapability(isDarkModeOnNow);
          };

          _this98.toggleFileCard = function (show, fileID) {
            var file = _this98.uppy.getFile(fileID);

            if (show) {
              _this98.uppy.emit('dashboard:file-edit-start', file);
            } else {
              _this98.uppy.emit('dashboard:file-edit-complete', file);
            }

            _this98.setPluginState({
              fileCardFor: show ? fileID : null,
              activeOverlayType: show ? 'FileCard' : null
            });
          };

          _this98.toggleAddFilesPanel = function (show) {
            _this98.setPluginState({
              showAddFilesPanel: show,
              activeOverlayType: show ? 'AddFiles' : null
            });
          };

          _this98.addFiles = function (files) {
            var descriptors = files.map(function (file) {
              return {
                source: _this98.id,
                name: file.name,
                type: file.type,
                data: file,
                meta: {
                  // path of the file relative to the ancestor directory the user selected.
                  // e.g. 'docs/Old Prague/airbnb.pdf'
                  relativePath: file.relativePath || null
                }
              };
            });

            try {
              _this98.uppy.addFiles(descriptors);
            } catch (err) {
              _this98.uppy.log(err);
            }
          };

          _this98.startListeningToResize = function () {
            // Watch for Dashboard container (`.uppy-Dashboard-inner`) resize
            // and update containerWidth/containerHeight in plugin state accordingly.
            // Emits first event on initialization.
            _this98.resizeObserver = new ResizeObserver(function (entries) {
              var uppyDashboardInnerEl = entries[0];
              var _uppyDashboardInnerEl = uppyDashboardInnerEl.contentRect,
                  width = _uppyDashboardInnerEl.width,
                  height = _uppyDashboardInnerEl.height;

              _this98.uppy.log("[Dashboard] resized: " + width + " / " + height, 'debug');

              _this98.setPluginState({
                containerWidth: width,
                containerHeight: height,
                areInsidesReadyToBeVisible: true
              });
            });

            _this98.resizeObserver.observe(_this98.el.querySelector('.uppy-Dashboard-inner')); // If ResizeObserver fails to emit an event telling us what size to use - default to the mobile view


            _this98.makeDashboardInsidesVisibleAnywayTimeout = setTimeout(function () {
              var pluginState = _this98.getPluginState();

              var isModalAndClosed = !_this98.opts.inline && pluginState.isHidden;

              if ( // if ResizeObserver hasn't yet fired,
              !pluginState.areInsidesReadyToBeVisible // and it's not due to the modal being closed
              && !isModalAndClosed) {
                _this98.uppy.log("[Dashboard] resize event didn't fire on time: defaulted to mobile layout", 'debug');

                _this98.setPluginState({
                  areInsidesReadyToBeVisible: true
                });
              }
            }, 1000);
          };

          _this98.stopListeningToResize = function () {
            _this98.resizeObserver.disconnect();

            clearTimeout(_this98.makeDashboardInsidesVisibleAnywayTimeout);
          };

          _this98.recordIfFocusedOnUppyRecently = function (event) {
            if (_this98.el.contains(event.target)) {
              _this98.ifFocusedOnUppyRecently = true;
            } else {
              _this98.ifFocusedOnUppyRecently = false; // ___Why run this.superFocus.cancel here when it already runs in superFocusOnEachUpdate?
              //    Because superFocus is debounced, when we move from Uppy to some other element on the page,
              //    previously run superFocus sometimes hits and moves focus back to Uppy.

              _this98.superFocus.cancel();
            }
          };

          _this98.disableAllFocusableElements = function (disable) {
            var focusableNodes = toArray(_this98.el.querySelectorAll(FOCUSABLE_ELEMENTS));

            if (disable) {
              focusableNodes.forEach(function (node) {
                // save previous tabindex in a data-attribute, to restore when enabling
                var currentTabIndex = node.getAttribute('tabindex');

                if (currentTabIndex) {
                  node.dataset.inertTabindex = currentTabIndex;
                }

                node.setAttribute('tabindex', '-1');
              });
            } else {
              focusableNodes.forEach(function (node) {
                if ('inertTabindex' in node.dataset) {
                  node.setAttribute('tabindex', node.dataset.inertTabindex);
                } else {
                  node.removeAttribute('tabindex');
                }
              });
            }

            _this98.dashboardIsDisabled = disable;
          };

          _this98.updateBrowserHistory = function () {
            var _history$state2; // Ensure history state does not already contain our modal name to avoid double-pushing
            // eslint-disable-next-line no-restricted-globals


            if (!((_history$state2 = history.state) != null && _history$state2[_this98.modalName])) {
              var _Object$assign10;

              // Push to history so that the page is not lost on browser back button press
              // eslint-disable-next-line no-restricted-globals
              history.pushState(Object.assign({}, history.state, (_Object$assign10 = {}, _Object$assign10[_this98.modalName] = true, _Object$assign10)), '');
            } // Listen for back button presses


            window.addEventListener('popstate', _this98.handlePopState, false);
          };

          _this98.handlePopState = function (event) {
            var _event$state; // Close the modal if the history state no longer contains our modal name


            if (_this98.isModalOpen() && (!event.state || !event.state[_this98.modalName])) {
              _this98.closeModal({
                manualClose: false
              });
            } // When the browser back button is pressed and uppy is now the latest entry
            // in the history but the modal is closed, fix the history by removing the
            // uppy history entry.
            // This occurs when another entry is added into the history state while the
            // modal is open, and then the modal gets manually closed.
            // Solves PR #575 (https://github.com/transloadit/uppy/pull/575)


            if (!_this98.isModalOpen() && (_event$state = event.state) != null && _event$state[_this98.modalName]) {
              // eslint-disable-next-line no-restricted-globals
              history.back();
            }
          };

          _this98.handleKeyDownInModal = function (event) {
            // close modal on esc key press
            if (event.keyCode === ESC_KEY) _this98.requestCloseModal(event); // trap focus on tab key press

            if (event.keyCode === TAB_KEY) trapFocus.forModal(event, _this98.getPluginState().activeOverlayType, _this98.el);
          };

          _this98.handleClickOutside = function () {
            if (_this98.opts.closeModalOnClickOutside) _this98.requestCloseModal();
          };

          _this98.handlePaste = function (event) {
            // 1. Let any acquirer plugin (Url/Webcam/etc.) handle pastes to the root
            _this98.uppy.iteratePlugins(function (plugin) {
              if (plugin.type === 'acquirer') {
                // Every Plugin with .type acquirer can define handleRootPaste(event)
                plugin.handleRootPaste == null ? void 0 : plugin.handleRootPaste(event);
              }
            }); // 2. Add all dropped files


            var files = toArray(event.clipboardData.files);

            _this98.addFiles(files);
          };

          _this98.handleInputChange = function (event) {
            event.preventDefault();
            var files = toArray(event.target.files);

            _this98.addFiles(files);
          };

          _this98.handleDragOver = function (event) {
            event.preventDefault();
            event.stopPropagation();

            if (_this98.opts.disabled || _this98.opts.disableLocalFiles || !_this98.uppy.getState().allowNewUpload) {
              return;
            } // 1. Add a small (+) icon on drop
            // (and prevent browsers from interpreting this as files being _moved_ into the
            // browser, https://github.com/transloadit/uppy/issues/1978).


            event.dataTransfer.dropEffect = 'copy';
            clearTimeout(_this98.removeDragOverClassTimeout);

            _this98.setPluginState({
              isDraggingOver: true
            });
          };

          _this98.handleDragLeave = function (event) {
            event.preventDefault();
            event.stopPropagation();

            if (_this98.opts.disabled || _this98.opts.disableLocalFiles || !_this98.uppy.getState().allowNewUpload) {
              return;
            }

            clearTimeout(_this98.removeDragOverClassTimeout); // Timeout against flickering, this solution is taken from drag-drop library.
            // Solution with 'pointer-events: none' didn't work across browsers.

            _this98.removeDragOverClassTimeout = setTimeout(function () {
              _this98.setPluginState({
                isDraggingOver: false
              });
            }, 50);
          };

          _this98.handleDrop = function (event) {
            event.preventDefault();
            event.stopPropagation();

            if (_this98.opts.disabled || _this98.opts.disableLocalFiles || !_this98.uppy.getState().allowNewUpload) {
              return;
            }

            clearTimeout(_this98.removeDragOverClassTimeout); // 2. Remove dragover class

            _this98.setPluginState({
              isDraggingOver: false
            }); // 3. Let any acquirer plugin (Url/Webcam/etc.) handle drops to the root


            _this98.uppy.iteratePlugins(function (plugin) {
              if (plugin.type === 'acquirer') {
                // Every Plugin with .type acquirer can define handleRootDrop(event)
                plugin.handleRootDrop == null ? void 0 : plugin.handleRootDrop(event);
              }
            }); // 4. Add all dropped files


            var executedDropErrorOnce = false;

            var logDropError = function logDropError(error) {
              _this98.uppy.log(error, 'error'); // In practice all drop errors are most likely the same, so let's just show one to avoid overwhelming the user


              if (!executedDropErrorOnce) {
                _this98.uppy.info(error.message, 'error');

                executedDropErrorOnce = true;
              }
            };

            getDroppedFiles(event.dataTransfer, {
              logDropError: logDropError
            }).then(function (files) {
              if (files.length > 0) {
                _this98.uppy.log('[Dashboard] Files were dropped');

                _this98.addFiles(files);
              }
            });
          };

          _this98.handleRequestThumbnail = function (file) {
            if (!_this98.opts.waitForThumbnailsBeforeUpload) {
              _this98.uppy.emit('thumbnail:request', file);
            }
          };

          _this98.handleCancelThumbnail = function (file) {
            if (!_this98.opts.waitForThumbnailsBeforeUpload) {
              _this98.uppy.emit('thumbnail:cancel', file);
            }
          };

          _this98.handleKeyDownInInline = function (event) {
            // Trap focus on tab key press.
            if (event.keyCode === TAB_KEY) trapFocus.forInline(event, _this98.getPluginState().activeOverlayType, _this98.el);
          };

          _this98.handlePasteOnBody = function (event) {
            var isFocusInOverlay = _this98.el.contains(document.activeElement);

            if (isFocusInOverlay) {
              _this98.handlePaste(event);
            }
          };

          _this98.handleComplete = function (_ref27) {
            var failed = _ref27.failed;

            if (_this98.opts.closeAfterFinish && failed.length === 0) {
              // All uploads are done
              _this98.requestCloseModal();
            }
          };

          _this98.handleCancelRestore = function () {
            _this98.uppy.emit('restore-canceled');
          };

          Object.defineProperty(_assertThisInitialized2(_this98), _openFileEditorWhenFilesAdded, {
            writable: true,
            value: function value(files) {
              var firstFile = files[0];

              if (_this98.canEditFile(firstFile)) {
                _this98.openFileEditor(firstFile);
              }
            }
          });

          _this98.initEvents = function () {
            // Modal open button
            if (_this98.opts.trigger && !_this98.opts.inline) {
              var showModalTrigger = findAllDOMElements(_this98.opts.trigger);

              if (showModalTrigger) {
                showModalTrigger.forEach(function (trigger) {
                  return trigger.addEventListener('click', _this98.openModal);
                });
              } else {
                _this98.uppy.log('Dashboard modal trigger not found. Make sure `trigger` is set in Dashboard options, unless you are planning to call `dashboard.openModal()` method yourself', 'warning');
              }
            }

            _this98.startListeningToResize();

            document.addEventListener('paste', _this98.handlePasteOnBody);

            _this98.uppy.on('plugin-remove', _this98.removeTarget);

            _this98.uppy.on('file-added', _this98.hideAllPanels);

            _this98.uppy.on('dashboard:modal-closed', _this98.hideAllPanels);

            _this98.uppy.on('file-editor:complete', _this98.hideAllPanels);

            _this98.uppy.on('complete', _this98.handleComplete); // ___Why fire on capture?
            //    Because this.ifFocusedOnUppyRecently needs to change before onUpdate() fires.


            document.addEventListener('focus', _this98.recordIfFocusedOnUppyRecently, true);
            document.addEventListener('click', _this98.recordIfFocusedOnUppyRecently, true);

            if (_this98.opts.inline) {
              _this98.el.addEventListener('keydown', _this98.handleKeyDownInInline);
            }

            if (_this98.opts.autoOpenFileEditor) {
              _this98.uppy.on('files-added', _classPrivateFieldLooseBase(_assertThisInitialized2(_this98), _openFileEditorWhenFilesAdded)[_openFileEditorWhenFilesAdded]);
            }
          };

          _this98.removeEvents = function () {
            var showModalTrigger = findAllDOMElements(_this98.opts.trigger);

            if (!_this98.opts.inline && showModalTrigger) {
              showModalTrigger.forEach(function (trigger) {
                return trigger.removeEventListener('click', _this98.openModal);
              });
            }

            _this98.stopListeningToResize();

            document.removeEventListener('paste', _this98.handlePasteOnBody);
            window.removeEventListener('popstate', _this98.handlePopState, false);

            _this98.uppy.off('plugin-remove', _this98.removeTarget);

            _this98.uppy.off('file-added', _this98.hideAllPanels);

            _this98.uppy.off('dashboard:modal-closed', _this98.hideAllPanels);

            _this98.uppy.off('file-editor:complete', _this98.hideAllPanels);

            _this98.uppy.off('complete', _this98.handleComplete);

            document.removeEventListener('focus', _this98.recordIfFocusedOnUppyRecently);
            document.removeEventListener('click', _this98.recordIfFocusedOnUppyRecently);

            if (_this98.opts.inline) {
              _this98.el.removeEventListener('keydown', _this98.handleKeyDownInInline);
            }

            if (_this98.opts.autoOpenFileEditor) {
              _this98.uppy.off('files-added', _classPrivateFieldLooseBase(_assertThisInitialized2(_this98), _openFileEditorWhenFilesAdded)[_openFileEditorWhenFilesAdded]);
            }
          };

          _this98.superFocusOnEachUpdate = function () {
            var isFocusInUppy = _this98.el.contains(document.activeElement); // When focus is lost on the page (== focus is on body for most browsers, or focus is null for IE11)


            var isFocusNowhere = document.activeElement === document.body || document.activeElement === null;

            var isInformerHidden = _this98.uppy.getState().info.isHidden;

            var isModal = !_this98.opts.inline;

            if ( // If update is connected to showing the Informer - let the screen reader calmly read it.
            isInformerHidden && ( // If we are in a modal - always superfocus without concern for other elements
            // on the page (user is unlikely to want to interact with the rest of the page)
            isModal // If we are already inside of Uppy, or
            || isFocusInUppy // If we are not focused on anything BUT we have already, at least once, focused on uppy
            //   1. We focus when isFocusNowhere, because when the element we were focused
            //      on disappears (e.g. an overlay), - focus gets lost. If user is typing
            //      something somewhere else on the page, - focus won't be 'nowhere'.
            //   2. We only focus when focus is nowhere AND this.ifFocusedOnUppyRecently,
            //      to avoid focus jumps if we do something else on the page.
            //   [Practical check] Without '&& this.ifFocusedOnUppyRecently', in Safari, in inline mode,
            //                     when file is uploading, - navigate via tab to the checkbox,
            //                     try to press space multiple times. Focus will jump to Uppy.
            || isFocusNowhere && _this98.ifFocusedOnUppyRecently)) {
              _this98.superFocus(_this98.el, _this98.getPluginState().activeOverlayType);
            } else {
              _this98.superFocus.cancel();
            }
          };

          _this98.afterUpdate = function () {
            if (_this98.opts.disabled && !_this98.dashboardIsDisabled) {
              _this98.disableAllFocusableElements(true);

              return;
            }

            if (!_this98.opts.disabled && _this98.dashboardIsDisabled) {
              _this98.disableAllFocusableElements(false);
            }

            _this98.superFocusOnEachUpdate();
          };

          _this98.saveFileCard = function (meta, fileID) {
            _this98.uppy.setFileMeta(fileID, meta);

            _this98.toggleFileCard(false, fileID);
          };

          Object.defineProperty(_assertThisInitialized2(_this98), _attachRenderFunctionToTarget, {
            writable: true,
            value: function value(target) {
              var plugin = _this98.uppy.getPlugin(target.id);

              return Object.assign({}, target, {
                icon: plugin.icon || _this98.opts.defaultPickerIcon,
                render: plugin.render
              });
            }
          });
          Object.defineProperty(_assertThisInitialized2(_this98), _isTargetSupported, {
            writable: true,
            value: function value(target) {
              var plugin = _this98.uppy.getPlugin(target.id); // If the plugin does not provide a `supported` check, assume the plugin works everywhere.


              if (typeof plugin.isSupported !== 'function') {
                return true;
              }

              return plugin.isSupported();
            }
          });
          Object.defineProperty(_assertThisInitialized2(_this98), _getAcquirers, {
            writable: true,
            value: memoize(function (targets) {
              return targets.filter(function (target) {
                return target.type === 'acquirer' && _classPrivateFieldLooseBase(_assertThisInitialized2(_this98), _isTargetSupported)[_isTargetSupported](target);
              }).map(_classPrivateFieldLooseBase(_assertThisInitialized2(_this98), _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);
            })
          });
          Object.defineProperty(_assertThisInitialized2(_this98), _getProgressIndicators, {
            writable: true,
            value: memoize(function (targets) {
              return targets.filter(function (target) {
                return target.type === 'progressindicator';
              }).map(_classPrivateFieldLooseBase(_assertThisInitialized2(_this98), _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);
            })
          });
          Object.defineProperty(_assertThisInitialized2(_this98), _getEditors, {
            writable: true,
            value: memoize(function (targets) {
              return targets.filter(function (target) {
                return target.type === 'editor';
              }).map(_classPrivateFieldLooseBase(_assertThisInitialized2(_this98), _attachRenderFunctionToTarget)[_attachRenderFunctionToTarget]);
            })
          });

          _this98.render = function (state) {
            var pluginState = _this98.getPluginState();

            var files = state.files,
                capabilities = state.capabilities,
                allowNewUpload = state.allowNewUpload;

            var _this98$uppy$getObjec = _this98.uppy.getObjectOfFilesPerState(),
                newFiles = _this98$uppy$getObjec.newFiles,
                uploadStartedFiles = _this98$uppy$getObjec.uploadStartedFiles,
                completeFiles = _this98$uppy$getObjec.completeFiles,
                erroredFiles = _this98$uppy$getObjec.erroredFiles,
                inProgressFiles = _this98$uppy$getObjec.inProgressFiles,
                inProgressNotPausedFiles = _this98$uppy$getObjec.inProgressNotPausedFiles,
                processingFiles = _this98$uppy$getObjec.processingFiles,
                isUploadStarted = _this98$uppy$getObjec.isUploadStarted,
                isAllComplete = _this98$uppy$getObjec.isAllComplete,
                isAllErrored = _this98$uppy$getObjec.isAllErrored,
                isAllPaused = _this98$uppy$getObjec.isAllPaused;

            var acquirers = _classPrivateFieldLooseBase(_assertThisInitialized2(_this98), _getAcquirers)[_getAcquirers](pluginState.targets);

            var progressindicators = _classPrivateFieldLooseBase(_assertThisInitialized2(_this98), _getProgressIndicators)[_getProgressIndicators](pluginState.targets);

            var editors = _classPrivateFieldLooseBase(_assertThisInitialized2(_this98), _getEditors)[_getEditors](pluginState.targets);

            var theme;

            if (_this98.opts.theme === 'auto') {
              theme = capabilities.darkMode ? 'dark' : 'light';
            } else {
              theme = _this98.opts.theme;
            }

            if (['files', 'folders', 'both'].indexOf(_this98.opts.fileManagerSelectionType) < 0) {
              _this98.opts.fileManagerSelectionType = 'files'; // eslint-disable-next-line no-console

              console.warn("Unsupported option for \"fileManagerSelectionType\". Using default of \"" + _this98.opts.fileManagerSelectionType + "\".");
            }

            return DashboardUI({
              state: state,
              isHidden: pluginState.isHidden,
              files: files,
              newFiles: newFiles,
              uploadStartedFiles: uploadStartedFiles,
              completeFiles: completeFiles,
              erroredFiles: erroredFiles,
              inProgressFiles: inProgressFiles,
              inProgressNotPausedFiles: inProgressNotPausedFiles,
              processingFiles: processingFiles,
              isUploadStarted: isUploadStarted,
              isAllComplete: isAllComplete,
              isAllErrored: isAllErrored,
              isAllPaused: isAllPaused,
              totalFileCount: Object.keys(files).length,
              totalProgress: state.totalProgress,
              allowNewUpload: allowNewUpload,
              acquirers: acquirers,
              theme: theme,
              disabled: _this98.opts.disabled,
              disableLocalFiles: _this98.opts.disableLocalFiles,
              direction: _this98.opts.direction,
              activePickerPanel: pluginState.activePickerPanel,
              showFileEditor: pluginState.showFileEditor,
              saveFileEditor: _this98.saveFileEditor,
              disableAllFocusableElements: _this98.disableAllFocusableElements,
              animateOpenClose: _this98.opts.animateOpenClose,
              isClosing: pluginState.isClosing,
              progressindicators: progressindicators,
              editors: editors,
              autoProceed: _this98.uppy.opts.autoProceed,
              id: _this98.id,
              closeModal: _this98.requestCloseModal,
              handleClickOutside: _this98.handleClickOutside,
              handleInputChange: _this98.handleInputChange,
              handlePaste: _this98.handlePaste,
              inline: _this98.opts.inline,
              showPanel: _this98.showPanel,
              hideAllPanels: _this98.hideAllPanels,
              i18n: _this98.i18n,
              i18nArray: _this98.i18nArray,
              uppy: _this98.uppy,
              note: _this98.opts.note,
              recoveredState: state.recoveredState,
              metaFields: pluginState.metaFields,
              resumableUploads: capabilities.resumableUploads || false,
              individualCancellation: capabilities.individualCancellation,
              isMobileDevice: capabilities.isMobileDevice,
              fileCardFor: pluginState.fileCardFor,
              toggleFileCard: _this98.toggleFileCard,
              toggleAddFilesPanel: _this98.toggleAddFilesPanel,
              showAddFilesPanel: pluginState.showAddFilesPanel,
              saveFileCard: _this98.saveFileCard,
              openFileEditor: _this98.openFileEditor,
              canEditFile: _this98.canEditFile,
              width: _this98.opts.width,
              height: _this98.opts.height,
              showLinkToFileUploadResult: _this98.opts.showLinkToFileUploadResult,
              fileManagerSelectionType: _this98.opts.fileManagerSelectionType,
              proudlyDisplayPoweredByUppy: _this98.opts.proudlyDisplayPoweredByUppy,
              hideCancelButton: _this98.opts.hideCancelButton,
              hideRetryButton: _this98.opts.hideRetryButton,
              hidePauseResumeButton: _this98.opts.hidePauseResumeButton,
              showRemoveButtonAfterComplete: _this98.opts.showRemoveButtonAfterComplete,
              containerWidth: pluginState.containerWidth,
              containerHeight: pluginState.containerHeight,
              areInsidesReadyToBeVisible: pluginState.areInsidesReadyToBeVisible,
              isTargetDOMEl: _this98.isTargetDOMEl,
              parentElement: _this98.el,
              allowedFileTypes: _this98.uppy.opts.restrictions.allowedFileTypes,
              maxNumberOfFiles: _this98.uppy.opts.restrictions.maxNumberOfFiles,
              requiredMetaFields: _this98.uppy.opts.restrictions.requiredMetaFields,
              showSelectedFiles: _this98.opts.showSelectedFiles,
              handleCancelRestore: _this98.handleCancelRestore,
              handleRequestThumbnail: _this98.handleRequestThumbnail,
              handleCancelThumbnail: _this98.handleCancelThumbnail,
              // drag props
              isDraggingOver: pluginState.isDraggingOver,
              handleDragOver: _this98.handleDragOver,
              handleDragLeave: _this98.handleDragLeave,
              handleDrop: _this98.handleDrop
            });
          };

          _this98.discoverProviderPlugins = function () {
            _this98.uppy.iteratePlugins(function (plugin) {
              if (plugin && !plugin.target && plugin.opts && plugin.opts.target === _this98.constructor) {
                _this98.addTarget(plugin);
              }
            });
          };

          _this98.install = function () {
            // Set default state for Dashboard
            _this98.setPluginState({
              isHidden: true,
              fileCardFor: null,
              activeOverlayType: null,
              showAddFilesPanel: false,
              activePickerPanel: false,
              showFileEditor: false,
              metaFields: _this98.opts.metaFields,
              targets: [],
              // We'll make them visible once .containerWidth is determined
              areInsidesReadyToBeVisible: false,
              isDraggingOver: false
            });

            var _this98$opts = _this98.opts,
                inline = _this98$opts.inline,
                closeAfterFinish = _this98$opts.closeAfterFinish;

            if (inline && closeAfterFinish) {
              throw new Error('[Dashboard] `closeAfterFinish: true` cannot be used on an inline Dashboard, because an inline Dashboard cannot be closed at all. Either set `inline: false`, or disable the `closeAfterFinish` option.');
            }

            var _this98$uppy$opts = _this98.uppy.opts,
                allowMultipleUploads = _this98$uppy$opts.allowMultipleUploads,
                allowMultipleUploadBatches = _this98$uppy$opts.allowMultipleUploadBatches;

            if ((allowMultipleUploads || allowMultipleUploadBatches) && closeAfterFinish) {
              _this98.uppy.log('[Dashboard] When using `closeAfterFinish`, we recommended setting the `allowMultipleUploadBatches` option to `false` in the Uppy constructor. See https://uppy.io/docs/uppy/#allowMultipleUploads-true', 'warning');
            }

            var target = _this98.opts.target;

            if (target) {
              _this98.mount(target, _assertThisInitialized2(_this98));
            }

            var plugins = _this98.opts.plugins || [];
            plugins.forEach(function (pluginID) {
              var plugin = _this98.uppy.getPlugin(pluginID);

              if (plugin) {
                plugin.mount(_assertThisInitialized2(_this98), plugin);
              }
            });

            if (!_this98.opts.disableStatusBar) {
              _this98.uppy.use(StatusBar, {
                id: _this98.id + ":StatusBar",
                target: _assertThisInitialized2(_this98),
                hideUploadButton: _this98.opts.hideUploadButton,
                hideRetryButton: _this98.opts.hideRetryButton,
                hidePauseResumeButton: _this98.opts.hidePauseResumeButton,
                hideCancelButton: _this98.opts.hideCancelButton,
                showProgressDetails: _this98.opts.showProgressDetails,
                hideAfterFinish: _this98.opts.hideProgressAfterFinish,
                locale: _this98.opts.locale,
                doneButtonHandler: _this98.opts.doneButtonHandler
              });
            }

            if (!_this98.opts.disableInformer) {
              _this98.uppy.use(Informer, {
                id: _this98.id + ":Informer",
                target: _assertThisInitialized2(_this98)
              });
            }

            if (!_this98.opts.disableThumbnailGenerator) {
              _this98.uppy.use(ThumbnailGenerator, {
                id: _this98.id + ":ThumbnailGenerator",
                thumbnailWidth: _this98.opts.thumbnailWidth,
                thumbnailType: _this98.opts.thumbnailType,
                waitForThumbnailsBeforeUpload: _this98.opts.waitForThumbnailsBeforeUpload,
                // If we don't block on thumbnails, we can lazily generate them
                lazy: !_this98.opts.waitForThumbnailsBeforeUpload
              });
            } // Dark Mode / theme


            _this98.darkModeMediaQuery = typeof window !== 'undefined' && window.matchMedia ? window.matchMedia('(prefers-color-scheme: dark)') : null;
            var isDarkModeOnFromTheStart = _this98.darkModeMediaQuery ? _this98.darkModeMediaQuery.matches : false;

            _this98.uppy.log("[Dashboard] Dark mode is " + (isDarkModeOnFromTheStart ? 'on' : 'off'));

            _this98.setDarkModeCapability(isDarkModeOnFromTheStart);

            if (_this98.opts.theme === 'auto') {
              _this98.darkModeMediaQuery.addListener(_this98.handleSystemDarkModeChange);
            }

            _this98.discoverProviderPlugins();

            _this98.initEvents();
          };

          _this98.uninstall = function () {
            if (!_this98.opts.disableInformer) {
              var informer = _this98.uppy.getPlugin(_this98.id + ":Informer"); // Checking if this plugin exists, in case it was removed by uppy-core
              // before the Dashboard was.


              if (informer) _this98.uppy.removePlugin(informer);
            }

            if (!_this98.opts.disableStatusBar) {
              var statusBar = _this98.uppy.getPlugin(_this98.id + ":StatusBar");

              if (statusBar) _this98.uppy.removePlugin(statusBar);
            }

            if (!_this98.opts.disableThumbnailGenerator) {
              var thumbnail = _this98.uppy.getPlugin(_this98.id + ":ThumbnailGenerator");

              if (thumbnail) _this98.uppy.removePlugin(thumbnail);
            }

            var plugins = _this98.opts.plugins || [];
            plugins.forEach(function (pluginID) {
              var plugin = _this98.uppy.getPlugin(pluginID);

              if (plugin) plugin.unmount();
            });

            if (_this98.opts.theme === 'auto') {
              _this98.darkModeMediaQuery.removeListener(_this98.handleSystemDarkModeChange);
            }

            _this98.unmount();

            _this98.removeEvents();
          };

          _this98.id = _this98.opts.id || 'Dashboard';
          _this98.title = 'Dashboard';
          _this98.type = 'orchestrator';
          _this98.modalName = "uppy-Dashboard-" + nanoid();
          _this98.defaultLocale = {
            strings: {
              closeModal: 'Close Modal',
              importFrom: 'Import from %{name}',
              addingMoreFiles: 'Adding more files',
              addMoreFiles: 'Add more files',
              dashboardWindowTitle: 'File Uploader Window (Press escape to close)',
              dashboardTitle: 'File Uploader',
              copyLinkToClipboardSuccess: 'Link copied to clipboard',
              copyLinkToClipboardFallback: 'Copy the URL below',
              copyLink: 'Copy link',
              back: 'Back',
              addMore: 'Add more',
              removeFile: 'Remove file %{file}',
              editFile: 'Edit file',
              editFileWithFilename: 'Edit file %{file}',
              editing: 'Editing %{file}',
              finishEditingFile: 'Finish editing file',
              save: 'Save',
              saveChanges: 'Save changes',
              cancel: 'Cancel',
              myDevice: 'My Device',
              dropPasteFiles: 'Drop files here or %{browseFiles}',
              dropPasteFolders: 'Drop files here or %{browseFolders}',
              dropPasteBoth: 'Drop files here, %{browseFiles} or %{browseFolders}',
              dropPasteImportFiles: 'Drop files here, %{browseFiles} or import from:',
              dropPasteImportFolders: 'Drop files here, %{browseFolders} or import from:',
              dropPasteImportBoth: 'Drop files here, %{browseFiles}, %{browseFolders} or import from:',
              importFiles: 'Import files from:',
              dropHint: 'Drop your files here',
              browseFiles: 'browse files',
              browseFolders: 'browse folders',
              uploadComplete: 'Upload complete',
              uploadPaused: 'Upload paused',
              resumeUpload: 'Resume upload',
              pauseUpload: 'Pause upload',
              retryUpload: 'Retry upload',
              cancelUpload: 'Cancel upload',
              xFilesSelected: {
                0: '%{smart_count} file selected',
                1: '%{smart_count} files selected'
              },
              uploadingXFiles: {
                0: 'Uploading %{smart_count} file',
                1: 'Uploading %{smart_count} files'
              },
              processingXFiles: {
                0: 'Processing %{smart_count} file',
                1: 'Processing %{smart_count} files'
              },
              recoveredXFiles: {
                0: 'We could not fully recover 1 file. Please re-select it and resume the upload.',
                1: 'We could not fully recover %{smart_count} files. Please re-select them and resume the upload.'
              },
              recoveredAllFiles: 'We restored all files. You can now resume the upload.',
              sessionRestored: 'Session restored',
              reSelect: 'Re-select',
              poweredBy: 'Powered by %{uppy}'
            }
          }; // set default options

          var defaultOptions = {
            target: 'body',
            metaFields: [],
            trigger: null,
            inline: false,
            width: 750,
            height: 550,
            thumbnailWidth: 280,
            thumbnailType: 'image/jpeg',
            waitForThumbnailsBeforeUpload: false,
            defaultPickerIcon: defaultPickerIcon,
            showLinkToFileUploadResult: false,
            showProgressDetails: false,
            hideUploadButton: false,
            hideCancelButton: false,
            hideRetryButton: false,
            hidePauseResumeButton: false,
            hideProgressAfterFinish: false,
            doneButtonHandler: function doneButtonHandler() {
              _this98.uppy.reset();

              _this98.requestCloseModal();
            },
            note: null,
            closeModalOnClickOutside: false,
            closeAfterFinish: false,
            disableStatusBar: false,
            disableInformer: false,
            disableThumbnailGenerator: false,
            disablePageScrollWhenModalOpen: true,
            animateOpenClose: true,
            fileManagerSelectionType: 'files',
            proudlyDisplayPoweredByUppy: true,
            onRequestCloseModal: function onRequestCloseModal() {
              return _this98.closeModal();
            },
            showSelectedFiles: true,
            showRemoveButtonAfterComplete: false,
            browserBackButtonClose: false,
            theme: 'light',
            autoOpenFileEditor: false,
            disabled: false,
            disableLocalFiles: false
          }; // merge default options with the ones set by user

          _this98.opts = Object.assign({}, defaultOptions, _opts);

          _this98.i18nInit();

          _this98.superFocus = createSuperFocus();
          _this98.ifFocusedOnUppyRecently = false; // Timeouts

          _this98.makeDashboardInsidesVisibleAnywayTimeout = null;
          _this98.removeDragOverClassTimeout = null;
          return _this98;
        }

        var _proto31 = Dashboard.prototype;

        _proto31.onMount = function onMount() {
          // Set the text direction if the page has not defined one.
          var element = this.el;
          var direction = getTextDirection(element);

          if (!direction) {
            element.dir = 'ltr';
          }
        };

        return Dashboard;
      }(UIPlugin)), _class.VERSION = "2.0.2", _temp);
    }, {
      "./components/Dashboard": 652,
      "./utils/createSuperFocus": 668,
      "./utils/trapFocus": 672,
      "@uppy/core": 645,
      "@uppy/informer": 691,
      "@uppy/status-bar": 727,
      "@uppy/thumbnail-generator": 732,
      "@uppy/utils/lib/FOCUSABLE_ELEMENTS": 747,
      "@uppy/utils/lib/findAllDOMElements": 757,
      "@uppy/utils/lib/getDroppedFiles": 761,
      "@uppy/utils/lib/getTextDirection": 771,
      "@uppy/utils/lib/toArray": 784,
      "memoize-one": 589,
      "nanoid": 673,
      "preact": 595
    }],
    667: [function (require, module, exports) {
      "use strict";
      /**
       * Copies text to clipboard by creating an almost invisible textarea,
       * adding text there, then running execCommand('copy').
       * Falls back to prompt() when the easy way fails (hello, Safari!)
       * From http://stackoverflow.com/a/30810322
       *
       * @param {string} textToCopy
       * @param {string} fallbackString
       * @returns {Promise}
       */

      module.exports = function copyToClipboard(textToCopy, fallbackString) {
        fallbackString = fallbackString || 'Copy the URL below';
        return new Promise(function (resolve) {
          var textArea = document.createElement('textarea');
          textArea.setAttribute('style', {
            position: 'fixed',
            top: 0,
            left: 0,
            width: '2em',
            height: '2em',
            padding: 0,
            border: 'none',
            outline: 'none',
            boxShadow: 'none',
            background: 'transparent'
          });
          textArea.value = textToCopy;
          document.body.appendChild(textArea);
          textArea.select();

          var magicCopyFailed = function magicCopyFailed() {
            document.body.removeChild(textArea); // eslint-disable-next-line no-alert

            window.prompt(fallbackString, textToCopy);
            resolve();
          };

          try {
            var successful = document.execCommand('copy');

            if (!successful) {
              return magicCopyFailed('copy command unavailable');
            }

            document.body.removeChild(textArea);
            return resolve();
          } catch (err) {
            document.body.removeChild(textArea);
            return magicCopyFailed(err);
          }
        });
      };
    }, {}],
    668: [function (require, module, exports) {
      "use strict";

      var debounce = require('lodash.debounce');

      var FOCUSABLE_ELEMENTS = require('@uppy/utils/lib/FOCUSABLE_ELEMENTS');

      var getActiveOverlayEl = require('./getActiveOverlayEl');
      /*
        Focuses on some element in the currently topmost overlay.
      
        1. If there are some [data-uppy-super-focusable] elements rendered already - focuses
           on the first superfocusable element, and leaves focus up to the control of
           a user (until currently focused element disappears from the screen [which
           can happen when overlay changes, or, e.g., when we click on a folder in googledrive]).
        2. If there are no [data-uppy-super-focusable] elements yet (or ever) - focuses
           on the first focusable element, but switches focus if superfocusable elements appear on next render.
      */


      module.exports = function createSuperFocus() {
        var lastFocusWasOnSuperFocusableEl = false;

        var superFocus = function superFocus(dashboardEl, activeOverlayType) {
          var overlayEl = getActiveOverlayEl(dashboardEl, activeOverlayType);
          var isFocusInOverlay = overlayEl.contains(document.activeElement); // If focus is already in the topmost overlay, AND on last update we focused on the superfocusable
          // element - then leave focus up to the user.
          // [Practical check] without this line, typing in the search input in googledrive overlay won't work.

          if (isFocusInOverlay && lastFocusWasOnSuperFocusableEl) return;
          var superFocusableEl = overlayEl.querySelector('[data-uppy-super-focusable]'); // If we are already in the topmost overlay, AND there are no super focusable elements yet, - leave focus up to the user.
          // [Practical check] without this line, if you are in an empty folder in google drive, and something's uploading in the
          // bg, - focus will be jumping to Done all the time.

          if (isFocusInOverlay && !superFocusableEl) return;

          if (superFocusableEl) {
            superFocusableEl.focus({
              preventScroll: true
            });
            lastFocusWasOnSuperFocusableEl = true;
          } else {
            var firstEl = overlayEl.querySelector(FOCUSABLE_ELEMENTS);
            firstEl == null ? void 0 : firstEl.focus({
              preventScroll: true
            });
            lastFocusWasOnSuperFocusableEl = false;
          }
        }; // ___Why do we need to debounce?
        //    1. To deal with animations: overlay changes via animations, which results in the DOM updating AFTER plugin.update()
        //       already executed.
        //    [Practical check] without debounce, if we open the Url overlay, and click 'Done', Dashboard won't get focused again.
        //    [Practical check] if we delay 250ms instead of 260ms - IE11 won't get focused in same situation.
        //    2. Performance: there can be many state update()s in a second, and this function is called every time.


        return debounce(superFocus, 260);
      };
    }, {
      "./getActiveOverlayEl": 669,
      "@uppy/utils/lib/FOCUSABLE_ELEMENTS": 747,
      "lodash.debounce": 586
    }],
    669: [function (require, module, exports) {
      "use strict";
      /**
       * @returns {HTMLElement} - either dashboard element, or the overlay that's most on top
       */

      module.exports = function getActiveOverlayEl(dashboardEl, activeOverlayType) {
        if (activeOverlayType) {
          var overlayEl = dashboardEl.querySelector("[data-uppy-paneltype=\"" + activeOverlayType + "\"]"); // if an overlay is already mounted

          if (overlayEl) return overlayEl;
        }

        return dashboardEl;
      };
    }, {}],
    670: [function (require, module, exports) {
      "use strict";

      var _require45 = require('preact'),
          h = _require45.h;

      function iconImage() {
        return h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          width: "25",
          height: "25",
          viewBox: "0 0 25 25"
        }, h("g", {
          fill: "#686DE0",
          fillRule: "evenodd"
        }, h("path", {
          d: "M5 7v10h15V7H5zm0-1h15a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1z",
          fillRule: "nonzero"
        }), h("path", {
          d: "M6.35 17.172l4.994-5.026a.5.5 0 0 1 .707 0l2.16 2.16 3.505-3.505a.5.5 0 0 1 .707 0l2.336 2.31-.707.72-1.983-1.97-3.505 3.505a.5.5 0 0 1-.707 0l-2.16-2.159-3.938 3.939-1.409.026z",
          fillRule: "nonzero"
        }), h("circle", {
          cx: "7.5",
          cy: "9.5",
          r: "1.5"
        })));
      }

      function iconAudio() {
        return h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-c-icon",
          width: "25",
          height: "25",
          viewBox: "0 0 25 25"
        }, h("path", {
          d: "M9.5 18.64c0 1.14-1.145 2-2.5 2s-2.5-.86-2.5-2c0-1.14 1.145-2 2.5-2 .557 0 1.079.145 1.5.396V7.25a.5.5 0 0 1 .379-.485l9-2.25A.5.5 0 0 1 18.5 5v11.64c0 1.14-1.145 2-2.5 2s-2.5-.86-2.5-2c0-1.14 1.145-2 2.5-2 .557 0 1.079.145 1.5.396V8.67l-8 2v7.97zm8-11v-2l-8 2v2l8-2zM7 19.64c.855 0 1.5-.484 1.5-1s-.645-1-1.5-1-1.5.484-1.5 1 .645 1 1.5 1zm9-2c.855 0 1.5-.484 1.5-1s-.645-1-1.5-1-1.5.484-1.5 1 .645 1 1.5 1z",
          fill: "#049BCF",
          fillRule: "nonzero"
        }));
      }

      function iconVideo() {
        return h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-c-icon",
          width: "25",
          height: "25",
          viewBox: "0 0 25 25"
        }, h("path", {
          d: "M16 11.834l4.486-2.691A1 1 0 0 1 22 10v6a1 1 0 0 1-1.514.857L16 14.167V17a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v2.834zM15 9H5v8h10V9zm1 4l5 3v-6l-5 3z",
          fill: "#19AF67",
          fillRule: "nonzero"
        }));
      }

      function iconPDF() {
        return h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-c-icon",
          width: "25",
          height: "25",
          viewBox: "0 0 25 25"
        }, h("path", {
          d: "M9.766 8.295c-.691-1.843-.539-3.401.747-3.726 1.643-.414 2.505.938 2.39 3.299-.039.79-.194 1.662-.537 3.148.324.49.66.967 1.055 1.51.17.231.382.488.629.757 1.866-.128 3.653.114 4.918.655 1.487.635 2.192 1.685 1.614 2.84-.566 1.133-1.839 1.084-3.416.249-1.141-.604-2.457-1.634-3.51-2.707a13.467 13.467 0 0 0-2.238.426c-1.392 4.051-4.534 6.453-5.707 4.572-.986-1.58 1.38-4.206 4.914-5.375.097-.322.185-.656.264-1.001.08-.353.306-1.31.407-1.737-.678-1.059-1.2-2.031-1.53-2.91zm2.098 4.87c-.033.144-.068.287-.104.427l.033-.01-.012.038a14.065 14.065 0 0 1 1.02-.197l-.032-.033.052-.004a7.902 7.902 0 0 1-.208-.271c-.197-.27-.38-.526-.555-.775l-.006.028-.002-.003c-.076.323-.148.632-.186.8zm5.77 2.978c1.143.605 1.832.632 2.054.187.26-.519-.087-1.034-1.113-1.473-.911-.39-2.175-.608-3.55-.608.845.766 1.787 1.459 2.609 1.894zM6.559 18.789c.14.223.693.16 1.425-.413.827-.648 1.61-1.747 2.208-3.206-2.563 1.064-4.102 2.867-3.633 3.62zm5.345-10.97c.088-1.793-.351-2.48-1.146-2.28-.473.119-.564 1.05-.056 2.405.213.566.52 1.188.908 1.859.18-.858.268-1.453.294-1.984z",
          fill: "#E2514A",
          fillRule: "nonzero"
        }));
      }

      function iconArchive() {
        return h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          width: "25",
          height: "25",
          viewBox: "0 0 25 25"
        }, h("path", {
          d: "M10.45 2.05h1.05a.5.5 0 0 1 .5.5v.024a.5.5 0 0 1-.5.5h-1.05a.5.5 0 0 1-.5-.5V2.55a.5.5 0 0 1 .5-.5zm2.05 1.024h1.05a.5.5 0 0 1 .5.5V3.6a.5.5 0 0 1-.5.5H12.5a.5.5 0 0 1-.5-.5v-.025a.5.5 0 0 1 .5-.5v-.001zM10.45 0h1.05a.5.5 0 0 1 .5.5v.025a.5.5 0 0 1-.5.5h-1.05a.5.5 0 0 1-.5-.5V.5a.5.5 0 0 1 .5-.5zm2.05 1.025h1.05a.5.5 0 0 1 .5.5v.024a.5.5 0 0 1-.5.5H12.5a.5.5 0 0 1-.5-.5v-.024a.5.5 0 0 1 .5-.5zm-2.05 3.074h1.05a.5.5 0 0 1 .5.5v.025a.5.5 0 0 1-.5.5h-1.05a.5.5 0 0 1-.5-.5v-.025a.5.5 0 0 1 .5-.5zm2.05 1.025h1.05a.5.5 0 0 1 .5.5v.024a.5.5 0 0 1-.5.5H12.5a.5.5 0 0 1-.5-.5v-.024a.5.5 0 0 1 .5-.5zm-2.05 1.024h1.05a.5.5 0 0 1 .5.5v.025a.5.5 0 0 1-.5.5h-1.05a.5.5 0 0 1-.5-.5v-.025a.5.5 0 0 1 .5-.5zm2.05 1.025h1.05a.5.5 0 0 1 .5.5v.025a.5.5 0 0 1-.5.5H12.5a.5.5 0 0 1-.5-.5v-.025a.5.5 0 0 1 .5-.5zm-2.05 1.025h1.05a.5.5 0 0 1 .5.5v.025a.5.5 0 0 1-.5.5h-1.05a.5.5 0 0 1-.5-.5v-.025a.5.5 0 0 1 .5-.5zm2.05 1.025h1.05a.5.5 0 0 1 .5.5v.024a.5.5 0 0 1-.5.5H12.5a.5.5 0 0 1-.5-.5v-.024a.5.5 0 0 1 .5-.5zm-1.656 3.074l-.82 5.946c.52.302 1.174.458 1.976.458.803 0 1.455-.156 1.975-.458l-.82-5.946h-2.311zm0-1.025h2.312c.512 0 .946.378 1.015.885l.82 5.946c.056.412-.142.817-.501 1.026-.686.398-1.515.597-2.49.597-.974 0-1.804-.199-2.49-.597a1.025 1.025 0 0 1-.5-1.026l.819-5.946c.07-.507.503-.885 1.015-.885zm.545 6.6a.5.5 0 0 1-.397-.561l.143-.999a.5.5 0 0 1 .495-.429h.74a.5.5 0 0 1 .495.43l.143.998a.5.5 0 0 1-.397.561c-.404.08-.819.08-1.222 0z",
          fill: "#00C469",
          fillRule: "nonzero"
        }));
      }

      function iconFile() {
        return h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-c-icon",
          width: "25",
          height: "25",
          viewBox: "0 0 25 25"
        }, h("g", {
          fill: "#A7AFB7",
          fillRule: "nonzero"
        }, h("path", {
          d: "M5.5 22a.5.5 0 0 1-.5-.5v-18a.5.5 0 0 1 .5-.5h10.719a.5.5 0 0 1 .367.16l3.281 3.556a.5.5 0 0 1 .133.339V21.5a.5.5 0 0 1-.5.5h-14zm.5-1h13V7.25L16 4H6v17z"
        }), h("path", {
          d: "M15 4v3a1 1 0 0 0 1 1h3V7h-3V4h-1z"
        })));
      }

      function iconText() {
        return h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-c-icon",
          width: "25",
          height: "25",
          viewBox: "0 0 25 25"
        }, h("path", {
          d: "M4.5 7h13a.5.5 0 1 1 0 1h-13a.5.5 0 0 1 0-1zm0 3h15a.5.5 0 1 1 0 1h-15a.5.5 0 1 1 0-1zm0 3h15a.5.5 0 1 1 0 1h-15a.5.5 0 1 1 0-1zm0 3h10a.5.5 0 1 1 0 1h-10a.5.5 0 1 1 0-1z",
          fill: "#5A5E69",
          fillRule: "nonzero"
        }));
      }

      module.exports = function getIconByMime(fileType) {
        var defaultChoice = {
          color: '#838999',
          icon: iconFile()
        };
        if (!fileType) return defaultChoice;
        var fileTypeGeneral = fileType.split('/')[0];
        var fileTypeSpecific = fileType.split('/')[1]; // Text

        if (fileTypeGeneral === 'text') {
          return {
            color: '#5a5e69',
            icon: iconText()
          };
        } // Image


        if (fileTypeGeneral === 'image') {
          return {
            color: '#686de0',
            icon: iconImage()
          };
        } // Audio


        if (fileTypeGeneral === 'audio') {
          return {
            color: '#068dbb',
            icon: iconAudio()
          };
        } // Video


        if (fileTypeGeneral === 'video') {
          return {
            color: '#19af67',
            icon: iconVideo()
          };
        } // PDF


        if (fileTypeGeneral === 'application' && fileTypeSpecific === 'pdf') {
          return {
            color: '#e25149',
            icon: iconPDF()
          };
        } // Archive


        var archiveTypes = ['zip', 'x-7z-compressed', 'x-rar-compressed', 'x-tar', 'x-gzip', 'x-apple-diskimage'];

        if (fileTypeGeneral === 'application' && archiveTypes.indexOf(fileTypeSpecific) !== -1) {
          return {
            color: '#00C469',
            icon: iconArchive()
          };
        }

        return defaultChoice;
      };
    }, {
      "preact": 595
    }],
    671: [function (require, module, exports) {
      "use strict"; // ignore drop/paste events if they are not in input or textarea —
      // otherwise when Url plugin adds drop/paste listeners to this.el,
      // draging UI elements or pasting anything into any field triggers those events —
      // Url treats them as URLs that need to be imported

      function ignoreEvent(ev) {
        var tagName = ev.target.tagName;

        if (tagName === 'INPUT' || tagName === 'TEXTAREA') {
          ev.stopPropagation();
          return;
        }

        ev.preventDefault();
        ev.stopPropagation();
      }

      module.exports = ignoreEvent;
    }, {}],
    672: [function (require, module, exports) {
      "use strict";

      var toArray = require('@uppy/utils/lib/toArray');

      var FOCUSABLE_ELEMENTS = require('@uppy/utils/lib/FOCUSABLE_ELEMENTS');

      var getActiveOverlayEl = require('./getActiveOverlayEl');

      function focusOnFirstNode(event, nodes) {
        var node = nodes[0];

        if (node) {
          node.focus();
          event.preventDefault();
        }
      }

      function focusOnLastNode(event, nodes) {
        var node = nodes[nodes.length - 1];

        if (node) {
          node.focus();
          event.preventDefault();
        }
      } // ___Why not just use (focusedItemIndex === -1)?
      //    Firefox thinks <ul> is focusable, but we don't have <ul>s in our FOCUSABLE_ELEMENTS. Which means that if we tab into
      //    the <ul>, code will think that we are not in the active overlay, and we should focusOnFirstNode() of the currently
      //    active overlay!
      //    [Practical check] if we use (focusedItemIndex === -1), instagram provider in firefox will never get focus on its pics
      //    in the <ul>.


      function isFocusInOverlay(activeOverlayEl) {
        return activeOverlayEl.contains(document.activeElement);
      }

      function trapFocus(event, activeOverlayType, dashboardEl) {
        var activeOverlayEl = getActiveOverlayEl(dashboardEl, activeOverlayType);
        var focusableNodes = toArray(activeOverlayEl.querySelectorAll(FOCUSABLE_ELEMENTS));
        var focusedItemIndex = focusableNodes.indexOf(document.activeElement); // If we pressed tab, and focus is not yet within the current overlay - focus on
        // the first element within the current overlay.
        // This is a safety measure (for when user returns from another tab e.g.), most
        // plugins will try to focus on some important element as it loads.

        if (!isFocusInOverlay(activeOverlayEl)) {
          focusOnFirstNode(event, focusableNodes); // If we pressed shift + tab, and we're on the first element of a modal
        } else if (event.shiftKey && focusedItemIndex === 0) {
          focusOnLastNode(event, focusableNodes); // If we pressed tab, and we're on the last element of the modal
        } else if (!event.shiftKey && focusedItemIndex === focusableNodes.length - 1) {
          focusOnFirstNode(event, focusableNodes);
        }
      }

      module.exports = {
        // Traps focus inside of the currently open overlay (e.g. Dashboard, or e.g. Instagram),
        // never lets focus disappear from the modal.
        forModal: function forModal(event, activeOverlayType, dashboardEl) {
          trapFocus(event, activeOverlayType, dashboardEl);
        },
        // Traps focus inside of the currently open overlay, unless overlay is null - then let the user tab away.
        forInline: function forInline(event, activeOverlayType, dashboardEl) {
          // ___When we're in the bare 'Drop files here, paste, browse or import from' screen
          if (activeOverlayType === null) {// Do nothing and let the browser handle it, user can tab away from Uppy to other elements on the page
            // ___When there is some overlay with 'Done' button
          } else {
            // Trap the focus inside this overlay!
            // User can close the overlay (click 'Done') if they want to travel away from Uppy.
            trapFocus(event, activeOverlayType, dashboardEl);
          }
        }
      };
    }, {
      "./getActiveOverlayEl": 669,
      "@uppy/utils/lib/FOCUSABLE_ELEMENTS": 747,
      "@uppy/utils/lib/toArray": 784
    }],
    673: [function (require, module, exports) {
      (function (process) {
        (function () {
          // This file replaces `index.js` in bundlers like webpack or Rollup,
          // according to `browser` config in `package.json`.
          var _require46 = require('./url-alphabet/index.cjs'),
              urlAlphabet = _require46.urlAlphabet;

          if (process.env.NODE_ENV !== 'production') {
            // All bundlers will remove this block in the production bundle.
            if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative' && typeof crypto === 'undefined') {
              throw new Error('React Native does not have a built-in secure random generator. ' + 'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' + 'For secure IDs, import `react-native-get-random-values` ' + 'before Nano ID.');
            }

            if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {
              throw new Error('Import file with `if (!window.crypto) window.crypto = window.msCrypto`' + ' before importing Nano ID to fix IE 11 support');
            }

            if (typeof crypto === 'undefined') {
              throw new Error('Your browser does not have secure random generator. ' + 'If you don’t need unpredictable IDs, you can use nanoid/non-secure.');
            }
          }

          var random = function random(bytes) {
            return crypto.getRandomValues(new Uint8Array(bytes));
          };

          var customRandom = function customRandom(alphabet, size, getRandom) {
            // First, a bitmask is necessary to generate the ID. The bitmask makes bytes
            // values closer to the alphabet size. The bitmask calculates the closest
            // `2^31 - 1` number, which exceeds the alphabet size.
            // For example, the bitmask for the alphabet size 30 is 31 (00011111).
            // `Math.clz32` is not used, because it is not available in browsers.
            var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1; // Though, the bitmask solution is not perfect since the bytes exceeding
            // the alphabet size are refused. Therefore, to reliably generate the ID,
            // the random bytes redundancy has to be satisfied.
            // Note: every hardware random generator call is performance expensive,
            // because the system call for entropy collection takes a lot of time.
            // So, to avoid additional system calls, extra bytes are requested in advance.
            // Next, a step determines how many random bytes to generate.
            // The number of random bytes gets decided upon the ID size, mask,
            // alphabet size, and magic number 1.6 (using 1.6 peaks at performance
            // according to benchmarks).
            // `-~f => Math.ceil(f)` if f is a float
            // `-~i => i + 1` if i is an integer

            var step = -~(1.6 * mask * size / alphabet.length);
            return function () {
              var id = '';

              while (true) {
                var bytes = getRandom(step); // A compact alternative for `for (var i = 0; i < step; i++)`.

                var j = step;

                while (j--) {
                  // Adding `|| ''` refuses a random byte that exceeds the alphabet size.
                  id += alphabet[bytes[j] & mask] || '';
                  if (id.length === size) return id;
                }
              }
            };
          };

          var customAlphabet = function customAlphabet(alphabet, size) {
            return customRandom(alphabet, size, random);
          };

          var nanoid = function nanoid(size) {
            if (size === void 0) {
              size = 21;
            }

            var id = '';
            var bytes = crypto.getRandomValues(new Uint8Array(size)); // A compact alternative for `for (var i = 0; i < step; i++)`.

            while (size--) {
              // It is incorrect to use bytes exceeding the alphabet size.
              // The following mask reduces the random byte in the 0-255 value
              // range to the 0-63 value range. Therefore, adding hacks, such
              // as empty string fallback or magic numbers, is unneccessary because
              // the bitmask trims bytes down to the alphabet size.
              var byte = bytes[size] & 63;

              if (byte < 36) {
                // `0-9a-z`
                id += byte.toString(36);
              } else if (byte < 62) {
                // `A-Z`
                id += (byte - 26).toString(36).toUpperCase();
              } else if (byte < 63) {
                id += '_';
              } else {
                id += '-';
              }
            }

            return id;
          };

          module.exports = {
            nanoid: nanoid,
            customAlphabet: customAlphabet,
            customRandom: customRandom,
            urlAlphabet: urlAlphabet,
            random: random
          };
        }).call(this);
      }).call(this, require('_process'));
    }, {
      "./url-alphabet/index.cjs": 674,
      "_process": 596
    }],
    674: [function (require, module, exports) {
      arguments[4][633][0].apply(exports, arguments);
    }, {
      "dup": 633
    }],
    675: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var _require47 = require('@uppy/core'),
          UIPlugin = _require47.UIPlugin;

      var toArray = require('@uppy/utils/lib/toArray');

      var isDragDropSupported = require('@uppy/utils/lib/isDragDropSupported');

      var getDroppedFiles = require('@uppy/utils/lib/getDroppedFiles');

      var _require48 = require('preact'),
          h = _require48.h;
      /**
       * Drag & Drop plugin
       *
       */


      module.exports = (_temp = _class = /*#__PURE__*/function (_UIPlugin3) {
        _inheritsLoose(DragDrop, _UIPlugin3);

        // eslint-disable-next-line global-require
        function DragDrop(uppy, opts) {
          var _this99;

          _this99 = _UIPlugin3.call(this, uppy, opts) || this;
          _this99.type = 'acquirer';
          _this99.id = _this99.opts.id || 'DragDrop';
          _this99.title = 'Drag & Drop';
          _this99.defaultLocale = {
            strings: {
              dropHereOr: 'Drop files here or %{browse}',
              browse: 'browse'
            }
          }; // Default options

          var defaultOpts = {
            target: null,
            inputName: 'files[]',
            width: '100%',
            height: '100%',
            note: null
          }; // Merge default options with the ones set by user

          _this99.opts = Object.assign({}, defaultOpts, opts);

          _this99.i18nInit(); // Check for browser dragDrop support


          _this99.isDragDropSupported = isDragDropSupported();
          _this99.removeDragOverClassTimeout = null; // Bind `this` to class methods

          _this99.onInputChange = _this99.onInputChange.bind(_assertThisInitialized2(_this99));
          _this99.handleDragOver = _this99.handleDragOver.bind(_assertThisInitialized2(_this99));
          _this99.handleDragLeave = _this99.handleDragLeave.bind(_assertThisInitialized2(_this99));
          _this99.handleDrop = _this99.handleDrop.bind(_assertThisInitialized2(_this99));
          _this99.addFiles = _this99.addFiles.bind(_assertThisInitialized2(_this99));
          _this99.render = _this99.render.bind(_assertThisInitialized2(_this99));
          return _this99;
        }

        var _proto32 = DragDrop.prototype;

        _proto32.addFiles = function addFiles(files) {
          var _this100 = this;

          var descriptors = files.map(function (file) {
            return {
              source: _this100.id,
              name: file.name,
              type: file.type,
              data: file,
              meta: {
                // path of the file relative to the ancestor directory the user selected.
                // e.g. 'docs/Old Prague/airbnb.pdf'
                relativePath: file.relativePath || null
              }
            };
          });

          try {
            this.uppy.addFiles(descriptors);
          } catch (err) {
            this.uppy.log(err);
          }
        };

        _proto32.onInputChange = function onInputChange(event) {
          this.uppy.log('[DragDrop] Files selected through input');
          var files = toArray(event.target.files);
          this.addFiles(files); // We clear the input after a file is selected, because otherwise
          // change event is not fired in Chrome and Safari when a file
          // with the same name is selected.
          // ___Why not use value="" on <input/> instead?
          //    Because if we use that method of clearing the input,
          //    Chrome will not trigger change if we drop the same file twice (Issue #768).
          // eslint-disable-next-line no-param-reassign

          event.target.value = null;
        };

        _proto32.handleDrop = function handleDrop(event) {
          var _this101 = this;

          if (this.opts.onDrop) this.opts.onDrop(event);
          event.preventDefault();
          event.stopPropagation();
          clearTimeout(this.removeDragOverClassTimeout); // 2. Remove dragover class

          this.setPluginState({
            isDraggingOver: false
          }); // 3. Add all dropped files

          this.uppy.log('[DragDrop] Files were dropped');

          var logDropError = function logDropError(error) {
            _this101.uppy.log(error, 'error');
          };

          getDroppedFiles(event.dataTransfer, {
            logDropError: logDropError
          }).then(function (files) {
            return _this101.addFiles(files);
          });
        };

        _proto32.handleDragOver = function handleDragOver(event) {
          if (this.opts.onDragOver) this.opts.onDragOver(event);
          event.preventDefault();
          event.stopPropagation(); // 1. Add a small (+) icon on drop
          // (and prevent browsers from interpreting this as files being _moved_ into the browser
          // https://github.com/transloadit/uppy/issues/1978)
          //
          // eslint-disable-next-line no-param-reassign

          event.dataTransfer.dropEffect = 'copy';
          clearTimeout(this.removeDragOverClassTimeout);
          this.setPluginState({
            isDraggingOver: true
          });
        };

        _proto32.handleDragLeave = function handleDragLeave(event) {
          var _this102 = this;

          if (this.opts.onDragLeave) this.opts.onDragLeave(event);
          event.preventDefault();
          event.stopPropagation();
          clearTimeout(this.removeDragOverClassTimeout); // Timeout against flickering, this solution is taken from drag-drop library.
          // Solution with 'pointer-events: none' didn't work across browsers.

          this.removeDragOverClassTimeout = setTimeout(function () {
            _this102.setPluginState({
              isDraggingOver: false
            });
          }, 50);
        };

        _proto32.renderHiddenFileInput = function renderHiddenFileInput() {
          var _this103 = this;

          var restrictions = this.uppy.opts.restrictions;
          return h("input", {
            className: "uppy-DragDrop-input",
            type: "file",
            hidden: true,
            ref: function ref(_ref28) {
              _this103.fileInputRef = _ref28;
            },
            name: this.opts.inputName,
            multiple: restrictions.maxNumberOfFiles !== 1,
            accept: restrictions.allowedFileTypes,
            onChange: this.onInputChange
          });
        };

        DragDrop.renderArrowSvg = function renderArrowSvg() {
          return h("svg", {
            "aria-hidden": "true",
            focusable: "false",
            className: "uppy-c-icon uppy-DragDrop-arrow",
            width: "16",
            height: "16",
            viewBox: "0 0 16 16"
          }, h("path", {
            d: "M11 10V0H5v10H2l6 6 6-6h-3zm0 0",
            fillRule: "evenodd"
          }));
        };

        _proto32.renderLabel = function renderLabel() {
          return h("div", {
            className: "uppy-DragDrop-label"
          }, this.i18nArray('dropHereOr', {
            browse: h("span", {
              className: "uppy-DragDrop-browse"
            }, this.i18n('browse'))
          }));
        };

        _proto32.renderNote = function renderNote() {
          return h("span", {
            className: "uppy-DragDrop-note"
          }, this.opts.note);
        };

        _proto32.render = function render() {
          var _this104 = this;

          var dragDropClass = "uppy-Root\n      uppy-u-reset\n      uppy-DragDrop-container\n      " + (this.isDragDropSupported ? 'uppy-DragDrop--isDragDropSupported' : '') + "\n      " + (this.getPluginState().isDraggingOver ? 'uppy-DragDrop--isDraggingOver' : '') + "\n    ";
          var dragDropStyle = {
            width: this.opts.width,
            height: this.opts.height
          };
          return h("button", {
            type: "button",
            className: dragDropClass,
            style: dragDropStyle,
            onClick: function onClick() {
              return _this104.fileInputRef.click();
            },
            onDragOver: this.handleDragOver,
            onDragLeave: this.handleDragLeave,
            onDrop: this.handleDrop
          }, this.renderHiddenFileInput(), h("div", {
            className: "uppy-DragDrop-inner"
          }, DragDrop.renderArrowSvg(), this.renderLabel(), this.renderNote()));
        };

        _proto32.install = function install() {
          var target = this.opts.target;
          this.setPluginState({
            isDraggingOver: false
          });

          if (target) {
            this.mount(target, this);
          }
        };

        _proto32.uninstall = function uninstall() {
          this.unmount();
        };

        return DragDrop;
      }(UIPlugin), _class.VERSION = "2.0.1", _temp);
    }, {
      "@uppy/core": 645,
      "@uppy/utils/lib/getDroppedFiles": 761,
      "@uppy/utils/lib/isDragDropSupported": 775,
      "@uppy/utils/lib/toArray": 784,
      "preact": 595
    }],
    676: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var _require49 = require('@uppy/core'),
          BasePlugin = _require49.BasePlugin;

      var getDroppedFiles = require('@uppy/utils/lib/getDroppedFiles');

      var toArray = require('@uppy/utils/lib/toArray');
      /**
       * Drop Target plugin
       *
       */


      module.exports = (_temp = _class = /*#__PURE__*/function (_BasePlugin4) {
        _inheritsLoose(DropTarget, _BasePlugin4);

        function DropTarget(uppy, opts) {
          var _this105;

          _this105 = _BasePlugin4.call(this, uppy, opts) || this;

          _this105.addFiles = function (files) {
            var descriptors = files.map(function (file) {
              return {
                source: _this105.id,
                name: file.name,
                type: file.type,
                data: file,
                meta: {
                  // path of the file relative to the ancestor directory the user selected.
                  // e.g. 'docs/Old Prague/airbnb.pdf'
                  relativePath: file.relativePath || null
                }
              };
            });

            try {
              _this105.uppy.addFiles(descriptors);
            } catch (err) {
              _this105.uppy.log(err);
            }
          };

          _this105.handleDrop = function (event) {
            event.preventDefault();
            event.stopPropagation();
            clearTimeout(_this105.removeDragOverClassTimeout); // 2. Remove dragover class

            event.currentTarget.classList.remove('uppy-is-drag-over');

            _this105.setPluginState({
              isDraggingOver: false
            }); // 3. Add all dropped files


            _this105.uppy.log('[DropTarget] Files were dropped');

            var logDropError = function logDropError(error) {
              _this105.uppy.log(error, 'error');
            };

            getDroppedFiles(event.dataTransfer, {
              logDropError: logDropError
            }).then(function (files) {
              return _this105.addFiles(files);
            });
          };

          _this105.handleDragOver = function (event) {
            event.preventDefault();
            event.stopPropagation(); // 1. Add a small (+) icon on drop
            // (and prevent browsers from interpreting this as files being _moved_ into the browser,
            // https://github.com/transloadit/uppy/issues/1978)

            event.dataTransfer.dropEffect = 'copy';
            clearTimeout(_this105.removeDragOverClassTimeout);
            event.currentTarget.classList.add('uppy-is-drag-over');

            _this105.setPluginState({
              isDraggingOver: true
            });
          };

          _this105.handleDragLeave = function (event) {
            event.preventDefault();
            event.stopPropagation();
            var currentTarget = event.currentTarget;
            clearTimeout(_this105.removeDragOverClassTimeout); // Timeout against flickering, this solution is taken from drag-drop library.
            // Solution with 'pointer-events: none' didn't work across browsers.

            _this105.removeDragOverClassTimeout = setTimeout(function () {
              currentTarget.classList.remove('uppy-is-drag-over');

              _this105.setPluginState({
                isDraggingOver: false
              });
            }, 50);
          };

          _this105.addListeners = function () {
            var target = _this105.opts.target;

            if (target instanceof Element) {
              _this105.nodes = [target];
            } else if (typeof target === 'string') {
              _this105.nodes = toArray(document.querySelectorAll(target));
            }

            if (!_this105.nodes && !_this105.nodes.length > 0) {
              throw new Error("\"" + target + "\" does not match any HTML elements");
            }

            _this105.nodes.forEach(function (node) {
              node.addEventListener('dragover', _this105.handleDragOver, false);
              node.addEventListener('dragleave', _this105.handleDragLeave, false);
              node.addEventListener('drop', _this105.handleDrop, false);
            });
          };

          _this105.removeListeners = function () {
            if (_this105.nodes) {
              _this105.nodes.forEach(function (node) {
                node.removeEventListener('dragover', _this105.handleDragOver, false);
                node.removeEventListener('dragleave', _this105.handleDragLeave, false);
                node.removeEventListener('drop', _this105.handleDrop, false);
              });
            }
          };

          _this105.type = 'acquirer';
          _this105.id = _this105.opts.id || 'DropTarget';
          _this105.title = 'Drop Target'; // Default options

          var defaultOpts = {
            target: null
          }; // Merge default options with the ones set by user

          _this105.opts = Object.assign({}, defaultOpts, opts);
          _this105.removeDragOverClassTimeout = null;
          return _this105;
        }

        var _proto33 = DropTarget.prototype;

        _proto33.install = function install() {
          this.setPluginState({
            isDraggingOver: false
          });
          this.addListeners();
        };

        _proto33.uninstall = function uninstall() {
          this.removeListeners();
        };

        return DropTarget;
      }(BasePlugin), _class.VERSION = "1.0.1", _temp);
    }, {
      "@uppy/core": 645,
      "@uppy/utils/lib/getDroppedFiles": 761,
      "@uppy/utils/lib/toArray": 784
    }],
    677: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var _require50 = require('@uppy/core'),
          UIPlugin = _require50.UIPlugin;

      var _require51 = require('@uppy/companion-client'),
          Provider = _require51.Provider;

      var _require52 = require('@uppy/provider-views'),
          ProviderViews = _require52.ProviderViews;

      var _require53 = require('preact'),
          h = _require53.h;

      module.exports = (_temp = _class = /*#__PURE__*/function (_UIPlugin4) {
        _inheritsLoose(Dropbox, _UIPlugin4);

        function Dropbox(uppy, opts) {
          var _this106;

          _this106 = _UIPlugin4.call(this, uppy, opts) || this;
          _this106.id = _this106.opts.id || 'Dropbox';
          Provider.initPlugin(_assertThisInitialized2(_this106), opts);
          _this106.title = _this106.opts.title || 'Dropbox';

          _this106.icon = function () {
            return h("svg", {
              "aria-hidden": "true",
              focusable: "false",
              width: "32",
              height: "32",
              viewBox: "0 0 32 32"
            }, h("g", {
              fill: "none",
              fillRule: "evenodd"
            }, h("rect", {
              className: "uppy-ProviderIconBg",
              fill: "#0D2481",
              width: "32",
              height: "32",
              rx: "16"
            }), h("path", {
              d: "M11 8l5 3.185-5 3.186-5-3.186L11 8zm10 0l5 3.185-5 3.186-5-3.186L21 8zM6 17.556l5-3.185 5 3.185-5 3.186-5-3.186zm15-3.185l5 3.185-5 3.186-5-3.186 5-3.185zm-10 7.432l5-3.185 5 3.185-5 3.186-5-3.186z",
              fill: "#FFF",
              fillRule: "nonzero"
            })));
          };

          _this106.provider = new Provider(uppy, {
            companionUrl: _this106.opts.companionUrl,
            companionHeaders: _this106.opts.companionHeaders,
            companionKeysParams: _this106.opts.companionKeysParams,
            companionCookiesRule: _this106.opts.companionCookiesRule,
            provider: 'dropbox',
            pluginId: _this106.id
          });
          _this106.defaultLocale = {
            strings: {
              pluginNameDropbox: 'Dropbox'
            }
          };

          _this106.i18nInit();

          _this106.title = _this106.i18n('pluginNameDropbox');
          _this106.onFirstRender = _this106.onFirstRender.bind(_assertThisInitialized2(_this106));
          _this106.render = _this106.render.bind(_assertThisInitialized2(_this106));
          return _this106;
        }

        var _proto34 = Dropbox.prototype;

        _proto34.install = function install() {
          this.view = new ProviderViews(this, {
            provider: this.provider
          });
          var target = this.opts.target;

          if (target) {
            this.mount(target, this);
          }
        };

        _proto34.uninstall = function uninstall() {
          this.view.tearDown();
          this.unmount();
        };

        _proto34.onFirstRender = function onFirstRender() {
          return Promise.all([this.provider.fetchPreAuthToken(), this.view.getFolder()]);
        };

        _proto34.render = function render(state) {
          return this.view.render(state);
        };

        return Dropbox;
      }(UIPlugin), _class.VERSION = "2.0.1", _temp);
    }, {
      "@uppy/companion-client": 640,
      "@uppy/core": 645,
      "@uppy/provider-views": 716,
      "preact": 595
    }],
    678: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var _require54 = require('@uppy/core'),
          UIPlugin = _require54.UIPlugin;

      var _require55 = require('@uppy/companion-client'),
          Provider = _require55.Provider;

      var _require56 = require('@uppy/provider-views'),
          ProviderViews = _require56.ProviderViews;

      var _require57 = require('preact'),
          h = _require57.h;

      module.exports = (_temp = _class = /*#__PURE__*/function (_UIPlugin5) {
        _inheritsLoose(Facebook, _UIPlugin5);

        function Facebook(uppy, opts) {
          var _this107;

          _this107 = _UIPlugin5.call(this, uppy, opts) || this;
          _this107.id = _this107.opts.id || 'Facebook';
          Provider.initPlugin(_assertThisInitialized2(_this107), opts);
          _this107.title = _this107.opts.title || 'Facebook';

          _this107.icon = function () {
            return h("svg", {
              "aria-hidden": "true",
              focusable: "false",
              width: "32",
              height: "32",
              viewBox: "0 0 32 32"
            }, h("g", {
              fill: "none",
              fillRule: "evenodd"
            }, h("rect", {
              className: "uppy-ProviderIconBg",
              width: "32",
              height: "32",
              rx: "16",
              fill: "#3C5A99"
            }), h("path", {
              d: "M17.842 26v-8.667h2.653l.398-3.377h-3.051v-2.157c0-.978.248-1.644 1.527-1.644H21V7.132A19.914 19.914 0 0 0 18.623 7c-2.352 0-3.963 1.574-3.963 4.465v2.49H12v3.378h2.66V26h3.182z",
              fill: "#FFF",
              fillRule: "nonzero"
            })));
          };

          _this107.provider = new Provider(uppy, {
            companionUrl: _this107.opts.companionUrl,
            companionHeaders: _this107.opts.companionHeaders,
            companionKeysParams: _this107.opts.companionKeysParams,
            companionCookiesRule: _this107.opts.companionCookiesRule,
            provider: 'facebook',
            pluginId: _this107.id
          });
          _this107.defaultLocale = {
            strings: {
              pluginNameFacebook: 'Facebook'
            }
          };

          _this107.i18nInit();

          _this107.title = _this107.i18n('pluginNameFacebook');
          _this107.onFirstRender = _this107.onFirstRender.bind(_assertThisInitialized2(_this107));
          _this107.render = _this107.render.bind(_assertThisInitialized2(_this107));
          return _this107;
        }

        var _proto35 = Facebook.prototype;

        _proto35.install = function install() {
          this.view = new ProviderViews(this, {
            provider: this.provider
          });
          var target = this.opts.target;

          if (target) {
            this.mount(target, this);
          }
        };

        _proto35.uninstall = function uninstall() {
          this.view.tearDown();
          this.unmount();
        };

        _proto35.onFirstRender = function onFirstRender() {
          return Promise.all([this.provider.fetchPreAuthToken(), this.view.getFolder()]);
        };

        _proto35.render = function render(state) {
          var viewOptions = {};

          if (this.getPluginState().files.length && !this.getPluginState().folders.length) {
            viewOptions.viewType = 'grid';
            viewOptions.showFilter = false;
            viewOptions.showTitles = false;
          }

          return this.view.render(state, viewOptions);
        };

        return Facebook;
      }(UIPlugin), _class.VERSION = "2.0.1", _temp);
    }, {
      "@uppy/companion-client": 640,
      "@uppy/core": 645,
      "@uppy/provider-views": 716,
      "preact": 595
    }],
    679: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var _require58 = require('@uppy/core'),
          UIPlugin = _require58.UIPlugin;

      var toArray = require('@uppy/utils/lib/toArray');

      var _require59 = require('preact'),
          h = _require59.h;

      module.exports = (_temp = _class = /*#__PURE__*/function (_UIPlugin6) {
        _inheritsLoose(FileInput, _UIPlugin6);

        function FileInput(uppy, opts) {
          var _this108;

          _this108 = _UIPlugin6.call(this, uppy, opts) || this;
          _this108.id = _this108.opts.id || 'FileInput';
          _this108.title = 'File Input';
          _this108.type = 'acquirer';
          _this108.defaultLocale = {
            strings: {
              // The same key is used for the same purpose by @uppy/robodog's `form()` API, but our
              // locale pack scripts can't access it in Robodog. If it is updated here, it should
              // also be updated there!
              chooseFiles: 'Choose files'
            }
          }; // Default options

          var defaultOptions = {
            target: null,
            pretty: true,
            inputName: 'files[]'
          }; // Merge default options with the ones set by user

          _this108.opts = Object.assign({}, defaultOptions, opts);

          _this108.i18nInit();

          _this108.render = _this108.render.bind(_assertThisInitialized2(_this108));
          _this108.handleInputChange = _this108.handleInputChange.bind(_assertThisInitialized2(_this108));
          _this108.handleClick = _this108.handleClick.bind(_assertThisInitialized2(_this108));
          return _this108;
        }

        var _proto36 = FileInput.prototype;

        _proto36.addFiles = function addFiles(files) {
          var _this109 = this;

          var descriptors = files.map(function (file) {
            return {
              source: _this109.id,
              name: file.name,
              type: file.type,
              data: file
            };
          });

          try {
            this.uppy.addFiles(descriptors);
          } catch (err) {
            this.uppy.log(err);
          }
        };

        _proto36.handleInputChange = function handleInputChange(event) {
          this.uppy.log('[FileInput] Something selected through input...');
          var files = toArray(event.target.files);
          this.addFiles(files); // We clear the input after a file is selected, because otherwise
          // change event is not fired in Chrome and Safari when a file
          // with the same name is selected.
          // ___Why not use value="" on <input/> instead?
          //    Because if we use that method of clearing the input,
          //    Chrome will not trigger change if we drop the same file twice (Issue #768).

          event.target.value = null;
        };

        _proto36.handleClick = function handleClick() {
          this.input.click();
        };

        _proto36.render = function render() {
          var _this110 = this;

          /* http://tympanus.net/codrops/2015/09/15/styling-customizing-file-inputs-smart-way/ */
          var hiddenInputStyle = {
            width: '0.1px',
            height: '0.1px',
            opacity: 0,
            overflow: 'hidden',
            position: 'absolute',
            zIndex: -1
          };
          var restrictions = this.uppy.opts.restrictions;
          var accept = restrictions.allowedFileTypes ? restrictions.allowedFileTypes.join(',') : null;
          return h("div", {
            className: "uppy-Root uppy-FileInput-container"
          }, h("input", {
            className: "uppy-FileInput-input",
            style: this.opts.pretty && hiddenInputStyle,
            type: "file",
            name: this.opts.inputName,
            onChange: this.handleInputChange,
            multiple: restrictions.maxNumberOfFiles !== 1,
            accept: accept,
            ref: function ref(input) {
              _this110.input = input;
            }
          }), this.opts.pretty && h("button", {
            className: "uppy-FileInput-btn",
            type: "button",
            onClick: this.handleClick
          }, this.i18n('chooseFiles')));
        };

        _proto36.install = function install() {
          var target = this.opts.target;

          if (target) {
            this.mount(target, this);
          }
        };

        _proto36.uninstall = function uninstall() {
          this.unmount();
        };

        return FileInput;
      }(UIPlugin), _class.VERSION = "2.0.1", _temp);
    }, {
      "@uppy/core": 645,
      "@uppy/utils/lib/toArray": 784,
      "preact": 595
    }],
    680: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var _require60 = require('@uppy/core'),
          BasePlugin = _require60.BasePlugin;

      var findDOMElement = require('@uppy/utils/lib/findDOMElement');

      var toArray = require('@uppy/utils/lib/toArray'); // Rollup uses get-form-data's ES modules build, and rollup-plugin-commonjs automatically resolves `.default`.
      // So, if we are being built using rollup, this require() won't have a `.default` property.


      var getFormData = require('get-form-data').default || require('get-form-data');
      /**
       * Form
       */


      module.exports = (_temp = _class = /*#__PURE__*/function (_BasePlugin5) {
        _inheritsLoose(Form, _BasePlugin5);

        function Form(uppy, opts) {
          var _this111;

          _this111 = _BasePlugin5.call(this, uppy, opts) || this;
          _this111.type = 'acquirer';
          _this111.id = _this111.opts.id || 'Form';
          _this111.title = 'Form'; // set default options

          var defaultOptions = {
            target: null,
            resultName: 'uppyResult',
            getMetaFromForm: true,
            addResultToForm: true,
            submitOnSuccess: false,
            triggerUploadOnSubmit: false
          }; // merge default options with the ones set by user

          _this111.opts = Object.assign({}, defaultOptions, opts);
          _this111.handleFormSubmit = _this111.handleFormSubmit.bind(_assertThisInitialized2(_this111));
          _this111.handleUploadStart = _this111.handleUploadStart.bind(_assertThisInitialized2(_this111));
          _this111.handleSuccess = _this111.handleSuccess.bind(_assertThisInitialized2(_this111));
          _this111.addResultToForm = _this111.addResultToForm.bind(_assertThisInitialized2(_this111));
          _this111.getMetaFromForm = _this111.getMetaFromForm.bind(_assertThisInitialized2(_this111));
          return _this111;
        }

        var _proto37 = Form.prototype;

        _proto37.handleUploadStart = function handleUploadStart() {
          if (this.opts.getMetaFromForm) {
            this.getMetaFromForm();
          }
        };

        _proto37.handleSuccess = function handleSuccess(result) {
          if (this.opts.addResultToForm) {
            this.addResultToForm(result);
          }

          if (this.opts.submitOnSuccess) {
            this.form.submit();
          }
        };

        _proto37.handleFormSubmit = function handleFormSubmit(ev) {
          var _this112 = this;

          if (this.opts.triggerUploadOnSubmit) {
            ev.preventDefault();
            var elements = toArray(ev.target.elements);
            var disabledByUppy = [];
            elements.forEach(function (el) {
              var isButton = el.tagName === 'BUTTON' || el.tagName === 'INPUT' && el.type === 'submit';

              if (isButton && !el.disabled) {
                el.disabled = true;
                disabledByUppy.push(el);
              }
            });
            this.uppy.upload().then(function () {
              disabledByUppy.forEach(function (button) {
                button.disabled = false;
              });
            }, function (err) {
              disabledByUppy.forEach(function (button) {
                button.disabled = false;
              });
              return Promise.reject(err);
            }).catch(function (err) {
              _this112.uppy.log(err.stack || err.message || err);
            });
          }
        };

        _proto37.addResultToForm = function addResultToForm(result) {
          this.uppy.log('[Form] Adding result to the original form:');
          this.uppy.log(result);
          var resultInput = this.form.querySelector("[name=\"" + this.opts.resultName + "\"]");

          if (resultInput) {
            // Append new result to the previous result array.
            // If the previous result is empty, or not an array,
            // set it to an empty array.
            var updatedResult;

            try {
              updatedResult = JSON.parse(resultInput.value);
            } catch (err) {// Nothing, since we check for array below anyway
            }

            if (!Array.isArray(updatedResult)) {
              updatedResult = [];
            }

            updatedResult.push(result);
            resultInput.value = JSON.stringify(updatedResult);
            return;
          }

          resultInput = document.createElement('input');
          resultInput.name = this.opts.resultName;
          resultInput.type = 'hidden';
          resultInput.value = JSON.stringify([result]);
          this.form.appendChild(resultInput);
        };

        _proto37.getMetaFromForm = function getMetaFromForm() {
          var formMeta = getFormData(this.form); // We want to exclude meta the the Form plugin itself has added
          // See https://github.com/transloadit/uppy/issues/1637

          delete formMeta[this.opts.resultName];
          this.uppy.setMeta(formMeta);
        };

        _proto37.install = function install() {
          this.form = findDOMElement(this.opts.target);

          if (!this.form || this.form.nodeName !== 'FORM') {
            this.uppy.log('Form plugin requires a <form> target element passed in options to operate, none was found', 'error');
            return;
          }

          this.form.addEventListener('submit', this.handleFormSubmit);
          this.uppy.on('upload', this.handleUploadStart);
          this.uppy.on('complete', this.handleSuccess);
        };

        _proto37.uninstall = function uninstall() {
          this.form.removeEventListener('submit', this.handleFormSubmit);
          this.uppy.off('upload', this.handleUploadStart);
          this.uppy.off('complete', this.handleSuccess);
        };

        return Form;
      }(BasePlugin), _class.VERSION = "2.0.1", _temp);
    }, {
      "@uppy/core": 645,
      "@uppy/utils/lib/findDOMElement": 758,
      "@uppy/utils/lib/toArray": 784,
      "get-form-data": 581
    }],
    681: [function (require, module, exports) {
      "use strict";

      var indexedDB = typeof window !== 'undefined' && (window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.OIndexedDB || window.msIndexedDB);
      var isSupported = !!indexedDB;
      var DB_NAME = 'uppy-blobs';
      var STORE_NAME = 'files'; // maybe have a thumbnail store in the future

      var DEFAULT_EXPIRY = 24 * 60 * 60 * 1000; // 24 hours

      var DB_VERSION = 3; // Set default `expires` dates on existing stored blobs.

      function migrateExpiration(store) {
        var request = store.openCursor();

        request.onsuccess = function (event) {
          var cursor = event.target.result;

          if (!cursor) {
            return;
          }

          var entry = cursor.value;
          entry.expires = Date.now() + DEFAULT_EXPIRY;
          cursor.update(entry);
        };
      }

      function connect(dbName) {
        var request = indexedDB.open(dbName, DB_VERSION);
        return new Promise(function (resolve, reject) {
          request.onupgradeneeded = function (event) {
            var db = event.target.result;
            var transaction = event.currentTarget.transaction;

            if (event.oldVersion < 2) {
              // Added in v2: DB structure changed to a single shared object store
              var store = db.createObjectStore(STORE_NAME, {
                keyPath: 'id'
              });
              store.createIndex('store', 'store', {
                unique: false
              });
            }

            if (event.oldVersion < 3) {
              // Added in v3
              var _store2 = transaction.objectStore(STORE_NAME);

              _store2.createIndex('expires', 'expires', {
                unique: false
              });

              migrateExpiration(_store2);
            }

            transaction.oncomplete = function () {
              resolve(db);
            };
          };

          request.onsuccess = function (event) {
            resolve(event.target.result);
          };

          request.onerror = reject;
        });
      }

      function waitForRequest(request) {
        return new Promise(function (resolve, reject) {
          request.onsuccess = function (event) {
            resolve(event.target.result);
          };

          request.onerror = reject;
        });
      }

      var cleanedUp = false;

      var IndexedDBStore = /*#__PURE__*/function () {
        function IndexedDBStore(opts) {
          var _this113 = this;

          this.opts = Object.assign({
            dbName: DB_NAME,
            storeName: 'default',
            expires: DEFAULT_EXPIRY,
            // 24 hours
            maxFileSize: 10 * 1024 * 1024,
            // 10 MB
            maxTotalSize: 300 * 1024 * 1024
          }, opts);
          this.name = this.opts.storeName;

          var createConnection = function createConnection() {
            return connect(_this113.opts.dbName);
          };

          if (!cleanedUp) {
            cleanedUp = true;
            this.ready = IndexedDBStore.cleanup().then(createConnection, createConnection);
          } else {
            this.ready = createConnection();
          }
        }

        var _proto38 = IndexedDBStore.prototype;

        _proto38.key = function key(fileID) {
          return this.name + "!" + fileID;
        }
        /**
         * List all file blobs currently in the store.
         */
        ;

        _proto38.list = function list() {
          var _this114 = this;

          return this.ready.then(function (db) {
            var transaction = db.transaction([STORE_NAME], 'readonly');
            var store = transaction.objectStore(STORE_NAME);
            var request = store.index('store').getAll(IDBKeyRange.only(_this114.name));
            return waitForRequest(request);
          }).then(function (files) {
            var result = {};
            files.forEach(function (file) {
              result[file.fileID] = file.data;
            });
            return result;
          });
        }
        /**
         * Get one file blob from the store.
         */
        ;

        _proto38.get = function get(fileID) {
          var _this115 = this;

          return this.ready.then(function (db) {
            var transaction = db.transaction([STORE_NAME], 'readonly');
            var request = transaction.objectStore(STORE_NAME).get(_this115.key(fileID));
            return waitForRequest(request);
          }).then(function (result) {
            return {
              id: result.data.fileID,
              data: result.data.data
            };
          });
        }
        /**
         * Get the total size of all stored files.
         *
         * @private
         */
        ;

        _proto38.getSize = function getSize() {
          var _this116 = this;

          return this.ready.then(function (db) {
            var transaction = db.transaction([STORE_NAME], 'readonly');
            var store = transaction.objectStore(STORE_NAME);
            var request = store.index('store').openCursor(IDBKeyRange.only(_this116.name));
            return new Promise(function (resolve, reject) {
              var size = 0;

              request.onsuccess = function (event) {
                var cursor = event.target.result;

                if (cursor) {
                  size += cursor.value.data.size;
                  cursor.continue();
                } else {
                  resolve(size);
                }
              };

              request.onerror = function () {
                reject(new Error('Could not retrieve stored blobs size'));
              };
            });
          });
        }
        /**
         * Save a file in the store.
         */
        ;

        _proto38.put = function put(file) {
          var _this117 = this;

          if (file.data.size > this.opts.maxFileSize) {
            return Promise.reject(new Error('File is too big to store.'));
          }

          return this.getSize().then(function (size) {
            if (size > _this117.opts.maxTotalSize) {
              return Promise.reject(new Error('No space left'));
            }

            return _this117.ready;
          }).then(function (db) {
            var transaction = db.transaction([STORE_NAME], 'readwrite');
            var request = transaction.objectStore(STORE_NAME).add({
              id: _this117.key(file.id),
              fileID: file.id,
              store: _this117.name,
              expires: Date.now() + _this117.opts.expires,
              data: file.data
            });
            return waitForRequest(request);
          });
        }
        /**
         * Delete a file blob from the store.
         */
        ;

        _proto38.delete = function _delete(fileID) {
          var _this118 = this;

          return this.ready.then(function (db) {
            var transaction = db.transaction([STORE_NAME], 'readwrite');
            var request = transaction.objectStore(STORE_NAME).delete(_this118.key(fileID));
            return waitForRequest(request);
          });
        }
        /**
         * Delete all stored blobs that have an expiry date that is before Date.now().
         * This is a static method because it deletes expired blobs from _all_ Uppy instances.
         */
        ;

        IndexedDBStore.cleanup = function cleanup() {
          return connect(DB_NAME).then(function (db) {
            var transaction = db.transaction([STORE_NAME], 'readwrite');
            var store = transaction.objectStore(STORE_NAME);
            var request = store.index('expires').openCursor(IDBKeyRange.upperBound(Date.now()));
            return new Promise(function (resolve, reject) {
              request.onsuccess = function (event) {
                var cursor = event.target.result;

                if (cursor) {
                  cursor.delete(); // Ignoring return value … it's not terrible if this goes wrong.

                  cursor.continue();
                } else {
                  resolve(db);
                }
              };

              request.onerror = reject;
            });
          }).then(function (db) {
            db.close();
          });
        };

        return IndexedDBStore;
      }();

      IndexedDBStore.isSupported = isSupported;
      module.exports = IndexedDBStore;
    }, {}],
    682: [function (require, module, exports) {
      "use strict";
      /**
       * Get uppy instance IDs for which state is stored.
       */

      function findUppyInstances() {
        var instances = [];

        for (var i = 0; i < localStorage.length; i++) {
          var key = localStorage.key(i);

          if (/^uppyState:/.test(key)) {
            instances.push(key.slice('uppyState:'.length));
          }
        }

        return instances;
      }
      /**
       * Try to JSON-parse a string, return null on failure.
       */


      function maybeParse(str) {
        try {
          return JSON.parse(str);
        } catch (err) {
          return null;
        }
      }

      var cleanedUp = false;

      module.exports = /*#__PURE__*/function () {
        function MetaDataStore(opts) {
          this.opts = Object.assign({
            expires: 24 * 60 * 60 * 1000
          }, opts);
          this.name = "uppyState:" + opts.storeName;

          if (!cleanedUp) {
            cleanedUp = true;
            MetaDataStore.cleanup();
          }
        }
        /**
         *
         */


        var _proto39 = MetaDataStore.prototype;

        _proto39.load = function load() {
          var savedState = localStorage.getItem(this.name);
          if (!savedState) return null;
          var data = maybeParse(savedState);
          if (!data) return null; // Upgrade pre-0.20.0 uppyState: it used to be just a flat object,
          // without `expires`.

          if (!data.metadata) {
            this.save(data);
            return data;
          }

          return data.metadata;
        };

        _proto39.save = function save(metadata) {
          var expires = Date.now() + this.opts.expires;
          var state = JSON.stringify({
            metadata: metadata,
            expires: expires
          });
          localStorage.setItem(this.name, state);
        }
        /**
         * Remove all expired state.
         */
        ;

        MetaDataStore.cleanup = function cleanup(instanceID) {
          if (instanceID) {
            localStorage.removeItem("uppyState:" + instanceID);
            return;
          }

          var instanceIDs = findUppyInstances();
          var now = Date.now();
          instanceIDs.forEach(function (id) {
            var data = localStorage.getItem("uppyState:" + id);
            if (!data) return null;
            var obj = maybeParse(data);
            if (!obj) return null;

            if (obj.expires && obj.expires < now) {
              localStorage.removeItem("uppyState:" + id);
            }
          });
        };

        return MetaDataStore;
      }();
    }, {}],
    683: [function (require, module, exports) {
      "use strict";
      /*eslint-disable */

      var isSupported = typeof navigator !== 'undefined' && 'serviceWorker' in navigator;

      function waitForServiceWorker() {
        return new Promise(function (resolve, reject) {
          if (!isSupported) {
            reject(new Error('Unsupported'));
          } else if (navigator.serviceWorker.controller) {
            // A serviceWorker is already registered and active.
            resolve();
          } else {
            navigator.serviceWorker.addEventListener('controllerchange', function () {
              resolve();
            });
          }
        });
      }

      var ServiceWorkerStore = /*#__PURE__*/function () {
        function ServiceWorkerStore(opts) {
          this.ready = waitForServiceWorker();
          this.name = opts.storeName;
        }

        var _proto40 = ServiceWorkerStore.prototype;

        _proto40.list = function list() {
          var _this119 = this;

          var defer = {};
          var promise = new Promise(function (resolve, reject) {
            defer.resolve = resolve;
            defer.reject = reject;
          });
          console.log('Loading stored blobs from Service Worker');

          var onMessage = function onMessage(event) {
            if (event.data.store !== _this119.name) {
              return;
            }

            switch (event.data.type) {
              case 'uppy/ALL_FILES':
                defer.resolve(event.data.files);
                navigator.serviceWorker.removeEventListener('message', onMessage);
                break;

              default:
                defer.reject();
            }
          };

          this.ready.then(function () {
            navigator.serviceWorker.addEventListener('message', onMessage);
            navigator.serviceWorker.controller.postMessage({
              type: 'uppy/GET_FILES',
              store: _this119.name
            });
          });
          return promise;
        };

        _proto40.put = function put(file) {
          var _this120 = this;

          return this.ready.then(function () {
            navigator.serviceWorker.controller.postMessage({
              type: 'uppy/ADD_FILE',
              store: _this120.name,
              file: file
            });
          });
        };

        _proto40.delete = function _delete(fileID) {
          var _this121 = this;

          return this.ready.then(function () {
            navigator.serviceWorker.controller.postMessage({
              type: 'uppy/REMOVE_FILE',
              store: _this121.name,
              fileID: fileID
            });
          });
        };

        return ServiceWorkerStore;
      }();

      ServiceWorkerStore.isSupported = isSupported;
      module.exports = ServiceWorkerStore;
    }, {}],
    684: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var throttle = require('lodash.throttle');

      var _require61 = require('@uppy/core'),
          BasePlugin = _require61.BasePlugin;

      var ServiceWorkerStore = require('./ServiceWorkerStore');

      var IndexedDBStore = require('./IndexedDBStore');

      var MetaDataStore = require('./MetaDataStore');
      /**
       * The GoldenRetriever plugin — restores selected files and resumes uploads
       * after a closed tab or a browser crash!
       *
       * Uses localStorage, IndexedDB and ServiceWorker to do its magic, read more:
       * https://uppy.io/blog/2017/07/golden-retriever/
       */


      module.exports = (_temp = _class = /*#__PURE__*/function (_BasePlugin6) {
        _inheritsLoose(GoldenRetriever, _BasePlugin6);

        function GoldenRetriever(uppy, opts) {
          var _this122;

          _this122 = _BasePlugin6.call(this, uppy, opts) || this;

          _this122.addBlobToStores = function (file) {
            if (file.isRemote) return;

            if (_this122.ServiceWorkerStore) {
              _this122.ServiceWorkerStore.put(file).catch(function (err) {
                _this122.uppy.log('[GoldenRetriever] Could not store file', 'warning');

                _this122.uppy.log(err);
              });
            }

            _this122.IndexedDBStore.put(file).catch(function (err) {
              _this122.uppy.log('[GoldenRetriever] Could not store file', 'warning');

              _this122.uppy.log(err);
            });
          };

          _this122.removeBlobFromStores = function (file) {
            if (_this122.ServiceWorkerStore) {
              _this122.ServiceWorkerStore.delete(file.id).catch(function (err) {
                _this122.uppy.log('[GoldenRetriever] Failed to remove file', 'warning');

                _this122.uppy.log(err);
              });
            }

            _this122.IndexedDBStore.delete(file.id).catch(function (err) {
              _this122.uppy.log('[GoldenRetriever] Failed to remove file', 'warning');

              _this122.uppy.log(err);
            });
          };

          _this122.replaceBlobInStores = function (file) {
            _this122.removeBlobFromStores(file);

            _this122.addBlobToStores(file);
          };

          _this122.handleRestoreConfirmed = function () {
            _this122.uppy.log('[GoldenRetriever] Restore confirmed, proceeding...'); // start all uploads again when file blobs are restored


            var _this122$uppy$getStat = _this122.uppy.getState(),
                currentUploads = _this122$uppy$getStat.currentUploads;

            if (currentUploads) {
              Object.keys(currentUploads).forEach(function (uploadId) {
                _this122.uppy.restore(uploadId, currentUploads[uploadId]);
              });

              _this122.uppy.resumeAll();
            }

            _this122.uppy.upload();

            _this122.uppy.setState({
              recoveredState: null
            });
          };

          _this122.abortRestore = function () {
            _this122.uppy.log('[GoldenRetriever] Aborting restore...');

            var fileIDs = Object.keys(_this122.uppy.getState().files);

            _this122.deleteBlobs(fileIDs).then(function () {
              _this122.uppy.log("[GoldenRetriever] Removed " + fileIDs.length + " files");
            }).catch(function (err) {
              _this122.uppy.log("[GoldenRetriever] Could not remove " + fileIDs.length + " files", 'warning');

              _this122.uppy.log(err);
            });

            _this122.uppy.cancelAll();

            _this122.uppy.setState({
              recoveredState: null
            });

            MetaDataStore.cleanup(_this122.uppy.opts.id);
          };

          _this122.handleComplete = function (_ref29) {
            var successful = _ref29.successful;
            var fileIDs = successful.map(function (file) {
              return file.id;
            });

            _this122.deleteBlobs(fileIDs).then(function () {
              _this122.uppy.log("[GoldenRetriever] Removed " + successful.length + " files that finished uploading");
            }).catch(function (err) {
              _this122.uppy.log("[GoldenRetriever] Could not remove " + successful.length + " files that finished uploading", 'warning');

              _this122.uppy.log(err);
            });

            _this122.uppy.setState({
              recoveredState: null
            });

            MetaDataStore.cleanup(_this122.uppy.opts.id);
          };

          _this122.restoreBlobs = function () {
            if (_this122.uppy.getFiles().length > 0) {
              Promise.all([_this122.loadFileBlobsFromServiceWorker(), _this122.loadFileBlobsFromIndexedDB()]).then(function (resultingArrayOfObjects) {
                var blobs = Object.assign({}, resultingArrayOfObjects[0], resultingArrayOfObjects[1]);

                _this122.onBlobsLoaded(blobs);
              });
            } else {
              _this122.uppy.log('[GoldenRetriever] No files need to be loaded, only restoring processing state...');

              _this122.onBlobsLoaded([]);
            }
          };

          _this122.type = 'debugger';
          _this122.id = _this122.opts.id || 'GoldenRetriever';
          _this122.title = 'Golden Retriever';
          var defaultOptions = {
            expires: 24 * 60 * 60 * 1000,
            // 24 hours
            serviceWorker: false
          };
          _this122.opts = Object.assign({}, defaultOptions, opts);
          _this122.MetaDataStore = new MetaDataStore({
            expires: _this122.opts.expires,
            storeName: uppy.getID()
          });
          _this122.ServiceWorkerStore = null;

          if (_this122.opts.serviceWorker) {
            _this122.ServiceWorkerStore = new ServiceWorkerStore({
              storeName: uppy.getID()
            });
          }

          _this122.IndexedDBStore = new IndexedDBStore(Object.assign({
            expires: _this122.opts.expires
          }, _this122.opts.indexedDB || {}, {
            storeName: uppy.getID()
          }));
          _this122.saveFilesStateToLocalStorage = throttle(_this122.saveFilesStateToLocalStorage.bind(_assertThisInitialized2(_this122)), 500, {
            leading: true,
            trailing: true
          });
          _this122.restoreState = _this122.restoreState.bind(_assertThisInitialized2(_this122));
          _this122.loadFileBlobsFromServiceWorker = _this122.loadFileBlobsFromServiceWorker.bind(_assertThisInitialized2(_this122));
          _this122.loadFileBlobsFromIndexedDB = _this122.loadFileBlobsFromIndexedDB.bind(_assertThisInitialized2(_this122));
          _this122.onBlobsLoaded = _this122.onBlobsLoaded.bind(_assertThisInitialized2(_this122));
          return _this122;
        }

        var _proto41 = GoldenRetriever.prototype;

        _proto41.restoreState = function restoreState() {
          var savedState = this.MetaDataStore.load();

          if (savedState) {
            this.uppy.log('[GoldenRetriever] Recovered some state from Local Storage');
            this.uppy.setState({
              currentUploads: savedState.currentUploads || {},
              files: savedState.files || {},
              recoveredState: savedState
            });
            this.savedPluginData = savedState.pluginData;
          }
        }
        /**
         * Get file objects that are currently waiting: they've been selected,
         * but aren't yet being uploaded.
         */
        ;

        _proto41.getWaitingFiles = function getWaitingFiles() {
          var waitingFiles = {};
          this.uppy.getFiles().forEach(function (file) {
            if (!file.progress || !file.progress.uploadStarted) {
              waitingFiles[file.id] = file;
            }
          });
          return waitingFiles;
        }
        /**
         * Get file objects that are currently being uploaded. If a file has finished
         * uploading, but the other files in the same batch have not, the finished
         * file is also returned.
         */
        ;

        _proto41.getUploadingFiles = function getUploadingFiles() {
          var _this123 = this;

          var uploadingFiles = {};

          var _this$uppy$getState6 = this.uppy.getState(),
              currentUploads = _this$uppy$getState6.currentUploads;

          if (currentUploads) {
            var uploadIDs = Object.keys(currentUploads);
            uploadIDs.forEach(function (uploadID) {
              var filesInUpload = currentUploads[uploadID].fileIDs;
              filesInUpload.forEach(function (fileID) {
                uploadingFiles[fileID] = _this123.uppy.getFile(fileID);
              });
            });
          }

          return uploadingFiles;
        };

        _proto41.saveFilesStateToLocalStorage = function saveFilesStateToLocalStorage() {
          var filesToSave = Object.assign({}, this.getWaitingFiles(), this.getUploadingFiles()); // If all files have been removed by the user, clear recovery state

          if (Object.keys(filesToSave).length === 0) {
            this.uppy.setState({
              recoveredState: null
            });
            MetaDataStore.cleanup(this.uppy.opts.id);
            return;
          } // We dont’t need to store file.data on local files, because the actual blob will be restored later,
          // and we want to avoid having weird properties in the serialized object.
          // Also adding file.isRestored to all files, since they will be restored from local storage


          var filesToSaveWithoutData = {};
          Object.keys(filesToSave).forEach(function (file) {
            if (filesToSave[file].isRemote) {
              filesToSaveWithoutData[file] = Object.assign({}, filesToSave[file], {
                isRestored: true
              });
            } else {
              filesToSaveWithoutData[file] = Object.assign({}, filesToSave[file], {
                isRestored: true,
                data: null,
                preview: null
              });
            }
          });
          var pluginData = {}; // TODO Find a better way to do this?
          // Other plugins can attach a restore:get-data listener that receives this callback.
          // Plugins can then use this callback (sync) to provide data to be stored.

          this.uppy.emit('restore:get-data', function (data) {
            Object.assign(pluginData, data);
          });

          var _this$uppy$getState7 = this.uppy.getState(),
              currentUploads = _this$uppy$getState7.currentUploads;

          this.MetaDataStore.save({
            currentUploads: currentUploads,
            files: filesToSaveWithoutData,
            pluginData: pluginData
          });
        };

        _proto41.loadFileBlobsFromServiceWorker = function loadFileBlobsFromServiceWorker() {
          var _this124 = this;

          if (!this.ServiceWorkerStore) {
            return Promise.resolve({});
          }

          return this.ServiceWorkerStore.list().then(function (blobs) {
            var files = _this124.uppy.getFiles();

            var localFilesOnly = files.filter(function (file) {
              // maybe && !file.progress.uploadComplete
              return !file.isRemote;
            });
            var numberOfFilesRecovered = Object.keys(blobs).length;
            var numberOfFilesTryingToRecover = localFilesOnly.length;

            if (numberOfFilesRecovered === numberOfFilesTryingToRecover) {
              _this124.uppy.log("[GoldenRetriever] Successfully recovered " + numberOfFilesRecovered + " blobs from Service Worker!");

              return blobs;
            }

            _this124.uppy.log('[GoldenRetriever] No blobs found in Service Worker, trying IndexedDB now...');

            return {};
          }).catch(function (err) {
            _this124.uppy.log('[GoldenRetriever] Failed to recover blobs from Service Worker', 'warning');

            _this124.uppy.log(err);

            return {};
          });
        };

        _proto41.loadFileBlobsFromIndexedDB = function loadFileBlobsFromIndexedDB() {
          var _this125 = this;

          return this.IndexedDBStore.list().then(function (blobs) {
            var numberOfFilesRecovered = Object.keys(blobs).length;

            if (numberOfFilesRecovered > 0) {
              _this125.uppy.log("[GoldenRetriever] Successfully recovered " + numberOfFilesRecovered + " blobs from IndexedDB!");

              return blobs;
            }

            _this125.uppy.log('[GoldenRetriever] No blobs found in IndexedDB');

            return {};
          }).catch(function (err) {
            _this125.uppy.log('[GoldenRetriever] Failed to recover blobs from IndexedDB', 'warning');

            _this125.uppy.log(err);

            return {};
          });
        };

        _proto41.onBlobsLoaded = function onBlobsLoaded(blobs) {
          var _this126 = this;

          var obsoleteBlobs = [];
          var updatedFiles = Object.assign({}, this.uppy.getState().files); // Loop through blobs that we can restore, add blobs to file objects

          Object.keys(blobs).forEach(function (fileID) {
            var originalFile = _this126.uppy.getFile(fileID);

            if (!originalFile) {
              obsoleteBlobs.push(fileID);
              return;
            }

            var cachedData = blobs[fileID];
            var updatedFileData = {
              data: cachedData,
              isRestored: true,
              isGhost: false
            };
            updatedFiles[fileID] = Object.assign({}, originalFile, updatedFileData);
          }); // Loop through files that we can’t restore fully — we only have meta, not blobs,
          // set .isGhost on them, also set isRestored to all files

          Object.keys(updatedFiles).forEach(function (fileID) {
            if (updatedFiles[fileID].data === null) {
              updatedFiles[fileID] = Object.assign({}, updatedFiles[fileID], {
                isGhost: true
              });
            }
          });
          this.uppy.setState({
            files: updatedFiles
          });
          this.uppy.emit('restored', this.savedPluginData);

          if (obsoleteBlobs.length) {
            this.deleteBlobs(obsoleteBlobs).then(function () {
              _this126.uppy.log("[GoldenRetriever] Cleaned up " + obsoleteBlobs.length + " old files");
            }).catch(function (err) {
              _this126.uppy.log("[GoldenRetriever] Could not clean up " + obsoleteBlobs.length + " old files", 'warning');

              _this126.uppy.log(err);
            });
          }
        };

        _proto41.deleteBlobs = function deleteBlobs(fileIDs) {
          var _this127 = this;

          var promises = [];
          fileIDs.forEach(function (id) {
            if (_this127.ServiceWorkerStore) {
              promises.push(_this127.ServiceWorkerStore.delete(id));
            }

            if (_this127.IndexedDBStore) {
              promises.push(_this127.IndexedDBStore.delete(id));
            }
          });
          return Promise.all(promises);
        };

        _proto41.install = function install() {
          this.restoreState();
          this.restoreBlobs();
          this.uppy.on('file-added', this.addBlobToStores);
          this.uppy.on('file-editor:complete', this.replaceBlobInStores);
          this.uppy.on('file-removed', this.removeBlobFromStores);
          this.uppy.on('state-update', this.saveFilesStateToLocalStorage);
          this.uppy.on('restore-confirmed', this.handleRestoreConfirmed);
          this.uppy.on('restore-canceled', this.abortRestore);
          this.uppy.on('complete', this.handleComplete);
        };

        _proto41.uninstall = function uninstall() {
          this.uppy.off('file-added', this.addBlobToStores);
          this.uppy.off('file-editor:complete', this.replaceBlobInStores);
          this.uppy.off('file-removed', this.removeBlobFromStores);
          this.uppy.off('state-update', this.saveFilesStateToLocalStorage);
          this.uppy.off('restore-confirmed', this.handleRestoreConfirmed);
          this.uppy.off('restore-canceled', this.abortRestore);
          this.uppy.off('complete', this.handleComplete);
        };

        return GoldenRetriever;
      }(BasePlugin), _class.VERSION = "2.0.2", _temp);
    }, {
      "./IndexedDBStore": 681,
      "./MetaDataStore": 682,
      "./ServiceWorkerStore": 683,
      "@uppy/core": 645,
      "lodash.throttle": 587
    }],
    685: [function (require, module, exports) {
      "use strict";

      var _require62 = require('@uppy/provider-views'),
          ProviderViews = _require62.ProviderViews;

      module.exports = /*#__PURE__*/function (_ProviderViews) {
        _inheritsLoose(DriveProviderViews, _ProviderViews);

        function DriveProviderViews() {
          return _ProviderViews.apply(this, arguments) || this;
        }

        var _proto42 = DriveProviderViews.prototype;

        _proto42.toggleCheckbox = function toggleCheckbox(e, file) {
          e.stopPropagation();
          e.preventDefault(); // Shared Drives aren't selectable; for all else, defer to the base ProviderView.

          if (!file.custom.isSharedDrive) {
            _ProviderViews.prototype.toggleCheckbox.call(this, e, file);
          }
        };

        return DriveProviderViews;
      }(ProviderViews);
    }, {
      "@uppy/provider-views": 716
    }],
    686: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var _require63 = require('@uppy/core'),
          UIPlugin = _require63.UIPlugin;

      var _require64 = require('@uppy/companion-client'),
          Provider = _require64.Provider;

      var _require65 = require('preact'),
          h = _require65.h;

      var DriveProviderViews = require('./DriveProviderViews');

      module.exports = (_temp = _class = /*#__PURE__*/function (_UIPlugin7) {
        _inheritsLoose(GoogleDrive, _UIPlugin7);

        function GoogleDrive(uppy, opts) {
          var _this128;

          _this128 = _UIPlugin7.call(this, uppy, opts) || this;
          _this128.id = _this128.opts.id || 'GoogleDrive';
          _this128.title = _this128.opts.title || 'Google Drive';
          Provider.initPlugin(_assertThisInitialized2(_this128), opts);
          _this128.title = _this128.opts.title || 'Google Drive';

          _this128.icon = function () {
            return h("svg", {
              "aria-hidden": "true",
              focusable: "false",
              width: "32",
              height: "32",
              viewBox: "0 0 32 32"
            }, h("g", {
              fill: "none",
              fillRule: "evenodd"
            }, h("rect", {
              className: "uppy-ProviderIconBg",
              fill: "#4285F4",
              width: "32",
              height: "32",
              rx: "16"
            }), h("path", {
              d: "M25.216 17.736L19.043 7h-6.086l6.175 10.736h6.084zm-11.275.896L10.9 24h11.723l3.04-5.368H13.942zm-1.789-10.29l-5.816 10.29L9.38 24l5.905-10.29-3.132-5.369z",
              fill: "#FFF"
            })));
          };

          _this128.provider = new Provider(uppy, {
            companionUrl: _this128.opts.companionUrl,
            companionHeaders: _this128.opts.companionHeaders,
            companionKeysParams: _this128.opts.companionKeysParams,
            companionCookiesRule: _this128.opts.companionCookiesRule,
            provider: 'drive',
            pluginId: _this128.id
          });
          _this128.defaultLocale = {
            strings: {
              pluginNameGoogleDrive: 'Google Drive'
            }
          };

          _this128.i18nInit();

          _this128.title = _this128.i18n('pluginNameGoogleDrive');
          _this128.onFirstRender = _this128.onFirstRender.bind(_assertThisInitialized2(_this128));
          _this128.render = _this128.render.bind(_assertThisInitialized2(_this128));
          return _this128;
        }

        var _proto43 = GoogleDrive.prototype;

        _proto43.install = function install() {
          this.view = new DriveProviderViews(this, {
            provider: this.provider
          });
          var target = this.opts.target;

          if (target) {
            this.mount(target, this);
          }
        };

        _proto43.uninstall = function uninstall() {
          this.view.tearDown();
          this.unmount();
        };

        _proto43.onFirstRender = function onFirstRender() {
          return Promise.all([this.provider.fetchPreAuthToken(), this.view.getFolder('root', '/')]);
        };

        _proto43.render = function render(state) {
          return this.view.render(state);
        };

        return GoogleDrive;
      }(UIPlugin), _class.VERSION = "2.0.1", _temp);
    }, {
      "./DriveProviderViews": 685,
      "@uppy/companion-client": 640,
      "@uppy/core": 645,
      "preact": 595
    }],
    687: [function (require, module, exports) {
      "use strict";

      var Cropper = require('cropperjs');

      var _require66 = require('preact'),
          h = _require66.h,
          Component = _require66.Component;

      module.exports = /*#__PURE__*/function (_Component6) {
        _inheritsLoose(Editor, _Component6);

        function Editor(props) {
          var _this129;

          _this129 = _Component6.call(this, props) || this;

          _this129.save = function () {
            var _this129$props = _this129.props,
                opts = _this129$props.opts,
                save = _this129$props.save,
                currentImage = _this129$props.currentImage;

            _this129.cropper.getCroppedCanvas(opts.cropperOptions.croppedCanvasOptions).toBlob(function (blob) {
              return save(blob);
            }, currentImage.type, opts.quality);
          };

          _this129.granularRotateOnChange = function (ev) {
            var _this129$state = _this129.state,
                rotationAngle = _this129$state.rotationAngle,
                rotationDelta = _this129$state.rotationDelta;
            var pendingRotationDelta = Number(ev.target.value) - rotationDelta;
            cancelAnimationFrame(_this129.granularRotateOnInputNextFrame);

            if (pendingRotationDelta !== 0) {
              var pendingRotationAngle = rotationAngle + pendingRotationDelta;
              _this129.granularRotateOnInputNextFrame = requestAnimationFrame(function () {
                _this129.cropper.rotateTo(pendingRotationAngle);
              });
            }
          };

          _this129.state = {
            rotationAngle: 0,
            rotationDelta: 0
          };
          return _this129;
        }

        var _proto44 = Editor.prototype;

        _proto44.componentDidMount = function componentDidMount() {
          var _this130 = this;

          var _this$props = this.props,
              opts = _this$props.opts,
              storeCropperInstance = _this$props.storeCropperInstance;
          this.cropper = new Cropper(this.imgElement, opts.cropperOptions);
          storeCropperInstance(this.cropper);

          if (opts.actions.granularRotate) {
            this.imgElement.addEventListener('crop', function (ev) {
              var rotationAngle = ev.detail.rotate;

              _this130.setState({
                rotationAngle: rotationAngle,
                // 405 == 360 + 45
                rotationDelta: (rotationAngle + 405) % 90 - 45
              });
            });
          }
        };

        _proto44.componentWillUnmount = function componentWillUnmount() {
          this.cropper.destroy();
        };

        _proto44.renderGranularRotate = function renderGranularRotate() {
          var i18n = this.props.i18n;
          var _this$state3 = this.state,
              rotationDelta = _this$state3.rotationDelta,
              rotationAngle = _this$state3.rotationAngle;
          return (// eslint-disable-next-line jsx-a11y/label-has-associated-control
            h("label", {
              "data-microtip-position": "top",
              role: "tooltip",
              "aria-label": rotationAngle + "\xBA",
              className: "uppy-ImageCropper-rangeWrapper uppy-u-reset"
            }, h("input", {
              className: "uppy-ImageCropper-range uppy-u-reset",
              type: "range",
              onInput: this.granularRotateOnChange,
              onChange: this.granularRotateOnChange,
              value: rotationDelta,
              min: "-45",
              max: "44",
              "aria-label": i18n('rotate')
            }))
          );
        };

        _proto44.renderRevert = function renderRevert() {
          var _this131 = this;

          var i18n = this.props.i18n;
          return h("button", {
            type: "button",
            className: "uppy-u-reset uppy-c-btn",
            "aria-label": i18n('revert'),
            "data-microtip-position": "top",
            onClick: function onClick() {
              _this131.cropper.reset();

              _this131.cropper.setAspectRatio(0);
            }
          }, h("svg", {
            "aria-hidden": "true",
            className: "uppy-c-icon",
            width: "24",
            height: "24",
            viewBox: "0 0 24 24"
          }, h("path", {
            d: "M0 0h24v24H0z",
            fill: "none"
          }), h("path", {
            d: "M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z"
          })));
        };

        _proto44.renderRotate = function renderRotate() {
          var _this132 = this;

          var i18n = this.props.i18n;
          return h("button", {
            type: "button",
            className: "uppy-u-reset uppy-c-btn",
            onClick: function onClick() {
              return _this132.cropper.rotate(-90);
            },
            "aria-label": i18n('rotate'),
            "data-microtip-position": "top"
          }, h("svg", {
            "aria-hidden": "true",
            className: "uppy-c-icon",
            width: "24",
            height: "24",
            viewBox: "0 0 24 24"
          }, h("path", {
            d: "M0 0h24v24H0V0zm0 0h24v24H0V0z",
            fill: "none"
          }), h("path", {
            d: "M14 10a2 2 0 012 2v7a2 2 0 01-2 2H6a2 2 0 01-2-2v-7a2 2 0 012-2h8zm0 1.75H6a.25.25 0 00-.243.193L5.75 12v7a.25.25 0 00.193.243L6 19.25h8a.25.25 0 00.243-.193L14.25 19v-7a.25.25 0 00-.193-.243L14 11.75zM12 .76V4c2.3 0 4.61.88 6.36 2.64a8.95 8.95 0 012.634 6.025L21 13a1 1 0 01-1.993.117L19 13h-.003a6.979 6.979 0 00-2.047-4.95 6.97 6.97 0 00-4.652-2.044L12 6v3.24L7.76 5 12 .76z"
          })));
        };

        _proto44.renderFlip = function renderFlip() {
          var _this133 = this;

          var i18n = this.props.i18n;
          return h("button", {
            type: "button",
            className: "uppy-u-reset uppy-c-btn",
            "aria-label": i18n('flipHorizontal'),
            "data-microtip-position": "top",
            onClick: function onClick() {
              return _this133.cropper.scaleX(-_this133.cropper.getData().scaleX || -1);
            }
          }, h("svg", {
            "aria-hidden": "true",
            className: "uppy-c-icon",
            width: "24",
            height: "24",
            viewBox: "0 0 24 24"
          }, h("path", {
            d: "M0 0h24v24H0z",
            fill: "none"
          }), h("path", {
            d: "M15 21h2v-2h-2v2zm4-12h2V7h-2v2zM3 5v14c0 1.1.9 2 2 2h4v-2H5V5h4V3H5c-1.1 0-2 .9-2 2zm16-2v2h2c0-1.1-.9-2-2-2zm-8 20h2V1h-2v22zm8-6h2v-2h-2v2zM15 5h2V3h-2v2zm4 8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2z"
          })));
        };

        _proto44.renderZoomIn = function renderZoomIn() {
          var _this134 = this;

          var i18n = this.props.i18n;
          return h("button", {
            type: "button",
            className: "uppy-u-reset uppy-c-btn",
            "aria-label": i18n('zoomIn'),
            "data-microtip-position": "top",
            onClick: function onClick() {
              return _this134.cropper.zoom(0.1);
            }
          }, h("svg", {
            "aria-hidden": "true",
            className: "uppy-c-icon",
            height: "24",
            viewBox: "0 0 24 24",
            width: "24"
          }, h("path", {
            d: "M0 0h24v24H0V0z",
            fill: "none"
          }), h("path", {
            d: "M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"
          }), h("path", {
            d: "M12 10h-2v2H9v-2H7V9h2V7h1v2h2v1z"
          })));
        };

        _proto44.renderZoomOut = function renderZoomOut() {
          var _this135 = this;

          var i18n = this.props.i18n;
          return h("button", {
            type: "button",
            className: "uppy-u-reset uppy-c-btn",
            "aria-label": i18n('zoomOut'),
            "data-microtip-position": "top",
            onClick: function onClick() {
              return _this135.cropper.zoom(-0.1);
            }
          }, h("svg", {
            "aria-hidden": "true",
            className: "uppy-c-icon",
            width: "24",
            height: "24",
            viewBox: "0 0 24 24"
          }, h("path", {
            d: "M0 0h24v24H0V0z",
            fill: "none"
          }), h("path", {
            d: "M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14zM7 9h5v1H7z"
          })));
        };

        _proto44.renderCropSquare = function renderCropSquare() {
          var _this136 = this;

          var i18n = this.props.i18n;
          return h("button", {
            type: "button",
            className: "uppy-u-reset uppy-c-btn",
            "aria-label": i18n('aspectRatioSquare'),
            "data-microtip-position": "top",
            onClick: function onClick() {
              return _this136.cropper.setAspectRatio(1);
            }
          }, h("svg", {
            "aria-hidden": "true",
            className: "uppy-c-icon",
            width: "24",
            height: "24",
            viewBox: "0 0 24 24"
          }, h("path", {
            d: "M0 0h24v24H0z",
            fill: "none"
          }), h("path", {
            d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
          })));
        };

        _proto44.renderCropWidescreen = function renderCropWidescreen() {
          var _this137 = this;

          var i18n = this.props.i18n;
          return h("button", {
            type: "button",
            className: "uppy-u-reset uppy-c-btn",
            "aria-label": i18n('aspectRatioLandscape'),
            "data-microtip-position": "top",
            onClick: function onClick() {
              return _this137.cropper.setAspectRatio(16 / 9);
            }
          }, h("svg", {
            "aria-hidden": "true",
            className: "uppy-c-icon",
            width: "24",
            height: "24",
            viewBox: "0 0 24 24"
          }, h("path", {
            d: "M 19,4.9999992 V 17.000001 H 4.9999998 V 6.9999992 H 19 m 0,-2 H 4.9999998 c -1.0999999,0 -1.9999999,0.9000001 -1.9999999,2 V 17.000001 c 0,1.1 0.9,2 1.9999999,2 H 19 c 1.1,0 2,-0.9 2,-2 V 6.9999992 c 0,-1.0999999 -0.9,-2 -2,-2 z"
          }), h("path", {
            fill: "none",
            d: "M0 0h24v24H0z"
          })));
        };

        _proto44.renderCropWidescreenVertical = function renderCropWidescreenVertical() {
          var _this138 = this;

          var i18n = this.props.i18n;
          return h("button", {
            type: "button",
            className: "uppy-u-reset uppy-c-btn",
            "aria-label": i18n('aspectRatioPortrait'),
            "data-microtip-position": "top",
            onClick: function onClick() {
              return _this138.cropper.setAspectRatio(9 / 16);
            }
          }, h("svg", {
            "aria-hidden": "true",
            className: "uppy-c-icon",
            width: "24",
            height: "24",
            viewBox: "0 0 24 24"
          }, h("path", {
            d: "M 19.000001,19 H 6.999999 V 5 h 10.000002 v 14 m 2,0 V 5 c 0,-1.0999999 -0.9,-1.9999999 -2,-1.9999999 H 6.999999 c -1.1,0 -2,0.9 -2,1.9999999 v 14 c 0,1.1 0.9,2 2,2 h 10.000002 c 1.1,0 2,-0.9 2,-2 z"
          }), h("path", {
            d: "M0 0h24v24H0z",
            fill: "none"
          })));
        };

        _proto44.render = function render() {
          var _this139 = this;

          var _this$props2 = this.props,
              currentImage = _this$props2.currentImage,
              opts = _this$props2.opts;
          var actions = opts.actions;
          var imageURL = URL.createObjectURL(currentImage.data);
          return h("div", {
            className: "uppy-ImageCropper"
          }, h("div", {
            className: "uppy-ImageCropper-container"
          }, h("img", {
            className: "uppy-ImageCropper-image",
            alt: currentImage.name,
            src: imageURL,
            ref: function ref(_ref30) {
              _this139.imgElement = _ref30;
            }
          })), h("div", {
            className: "uppy-ImageCropper-controls"
          }, actions.revert && this.renderRevert(), actions.rotate && this.renderRotate(), actions.granularRotate && this.renderGranularRotate(), actions.flip && this.renderFlip(), actions.zoomIn && this.renderZoomIn(), actions.zoomOut && this.renderZoomOut(), actions.cropSquare && this.renderCropSquare(), actions.cropWidescreen && this.renderCropWidescreen(), actions.cropWidescreenVertical && this.renderCropWidescreenVertical()));
        };

        return Editor;
      }(Component);
    }, {
      "cropperjs": 561,
      "preact": 595
    }],
    688: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var _require67 = require('@uppy/core'),
          UIPlugin = _require67.UIPlugin;

      var _require68 = require('preact'),
          h = _require68.h;

      var Editor = require('./Editor');

      module.exports = (_temp = _class = /*#__PURE__*/function (_UIPlugin8) {
        _inheritsLoose(ImageEditor, _UIPlugin8);

        // eslint-disable-next-line global-require
        function ImageEditor(uppy, opts) {
          var _this140;

          _this140 = _UIPlugin8.call(this, uppy, opts) || this;

          _this140.save = function () {
            var saveBlobCallback = function saveBlobCallback(blob) {
              var _this140$getPluginSta = _this140.getPluginState(),
                  currentImage = _this140$getPluginSta.currentImage;

              _this140.uppy.setFileState(currentImage.id, {
                data: blob,
                size: blob.size,
                preview: null
              });

              var updatedFile = _this140.uppy.getFile(currentImage.id);

              _this140.uppy.emit('thumbnail:request', updatedFile);

              _this140.setPluginState({
                currentImage: updatedFile
              });

              _this140.uppy.emit('file-editor:complete', updatedFile);
            };

            var _this140$getPluginSta2 = _this140.getPluginState(),
                currentImage = _this140$getPluginSta2.currentImage;

            _this140.cropper.getCroppedCanvas().toBlob(saveBlobCallback, currentImage.type, _this140.opts.quality);
          };

          _this140.storeCropperInstance = function (cropper) {
            _this140.cropper = cropper;
          };

          _this140.selectFile = function (file) {
            _this140.uppy.emit('file-editor:start', file);

            _this140.setPluginState({
              currentImage: file
            });
          };

          _this140.id = _this140.opts.id || 'ImageEditor';
          _this140.title = 'Image Editor';
          _this140.type = 'editor';
          _this140.defaultLocale = {
            strings: {
              revert: 'Revert',
              rotate: 'Rotate',
              zoomIn: 'Zoom in',
              zoomOut: 'Zoom out',
              flipHorizontal: 'Flip horizontal',
              aspectRatioSquare: 'Crop square',
              aspectRatioLandscape: 'Crop landscape (16:9)',
              aspectRatioPortrait: 'Crop portrait (9:16)'
            }
          };
          var defaultCropperOptions = {
            viewMode: 1,
            background: false,
            autoCropArea: 1,
            responsive: true,
            croppedCanvasOptions: {}
          };
          var defaultActions = {
            revert: true,
            rotate: true,
            granularRotate: true,
            flip: true,
            zoomIn: true,
            zoomOut: true,
            cropSquare: true,
            cropWidescreen: true,
            cropWidescreenVertical: true
          };
          var defaultOptions = {
            quality: 0.8
          };
          _this140.opts = Object.assign({}, defaultOptions, opts, {
            actions: Object.assign({}, defaultActions, opts.actions),
            cropperOptions: Object.assign({}, defaultCropperOptions, opts.cropperOptions)
          });

          _this140.i18nInit();

          return _this140;
        } // eslint-disable-next-line class-methods-use-this


        var _proto45 = ImageEditor.prototype;

        _proto45.canEditFile = function canEditFile(file) {
          if (!file.type || file.isRemote) {
            return false;
          }

          var fileTypeSpecific = file.type.split('/')[1];

          if (/^(jpe?g|gif|png|bmp|webp)$/.test(fileTypeSpecific)) {
            return true;
          }

          return false;
        };

        _proto45.install = function install() {
          this.setPluginState({
            currentImage: null
          });
          var target = this.opts.target;

          if (target) {
            this.mount(target, this);
          }
        };

        _proto45.uninstall = function uninstall() {
          this.unmount();
        };

        _proto45.render = function render() {
          var _this$getPluginState = this.getPluginState(),
              currentImage = _this$getPluginState.currentImage;

          if (currentImage === null || currentImage.isRemote) {
            return null;
          }

          return h(Editor, {
            currentImage: currentImage,
            storeCropperInstance: this.storeCropperInstance,
            save: this.save,
            opts: this.opts,
            i18n: this.i18n
          });
        };

        return ImageEditor;
      }(UIPlugin), _class.VERSION = "1.0.1", _temp);
    }, {
      "./Editor": 687,
      "@uppy/core": 645,
      "preact": 595
    }],
    689: [function (require, module, exports) {
      "use strict";

      var _require69 = require('preact'),
          h = _require69.h,
          Component = _require69.Component,
          createRef = _require69.createRef;

      var TRANSITION_MS = 300;

      module.exports = /*#__PURE__*/function (_Component7) {
        _inheritsLoose(FadeIn, _Component7);

        function FadeIn() {
          var _this141;

          for (var _len20 = arguments.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {
            args[_key20] = arguments[_key20];
          }

          _this141 = _Component7.call.apply(_Component7, [this].concat(args)) || this;
          _this141.ref = createRef();
          return _this141;
        }

        var _proto46 = FadeIn.prototype;

        _proto46.componentWillEnter = function componentWillEnter(callback) {
          this.ref.current.style.opacity = '1';
          this.ref.current.style.transform = 'none';
          setTimeout(callback, TRANSITION_MS);
        };

        _proto46.componentWillLeave = function componentWillLeave(callback) {
          this.ref.current.style.opacity = '0';
          this.ref.current.style.transform = 'translateY(350%)';
          setTimeout(callback, TRANSITION_MS);
        };

        _proto46.render = function render() {
          var children = this.props.children;
          return h("div", {
            className: "uppy-Informer-animated",
            ref: this.ref
          }, children);
        };

        return FadeIn;
      }(Component);
    }, {
      "preact": 595
    }],
    690: [function (require, module, exports) {
      /* eslint-disable */

      /**
       * @source https://github.com/developit/preact-transition-group
       */
      'use strict';

      var _require70 = require('preact'),
          Component = _require70.Component,
          cloneElement = _require70.cloneElement,
          h = _require70.h,
          toChildArray = _require70.toChildArray;

      function assign(obj, props) {
        return Object.assign(obj, props);
      }

      function getKey(vnode, fallback) {
        var _vnode$key;

        return (_vnode$key = vnode == null ? void 0 : vnode.key) != null ? _vnode$key : fallback;
      }

      function linkRef(component, name) {
        var cache = component._ptgLinkedRefs || (component._ptgLinkedRefs = {});
        return cache[name] || (cache[name] = function (c) {
          component.refs[name] = c;
        });
      }

      function getChildMapping(children) {
        var out = {};

        for (var i = 0; i < children.length; i++) {
          if (children[i] != null) {
            var key = getKey(children[i], i.toString(36));
            out[key] = children[i];
          }
        }

        return out;
      }

      function mergeChildMappings(prev, next) {
        prev = prev || {};
        next = next || {};

        var getValueForKey = function getValueForKey(key) {
          return next.hasOwnProperty(key) ? next[key] : prev[key];
        }; // For each key of `next`, the list of keys to insert before that key in
        // the combined list


        var nextKeysPending = {};
        var pendingKeys = [];

        for (var prevKey in prev) {
          if (next.hasOwnProperty(prevKey)) {
            if (pendingKeys.length) {
              nextKeysPending[prevKey] = pendingKeys;
              pendingKeys = [];
            }
          } else {
            pendingKeys.push(prevKey);
          }
        }

        var childMapping = {};

        for (var nextKey in next) {
          if (nextKeysPending.hasOwnProperty(nextKey)) {
            for (var i = 0; i < nextKeysPending[nextKey].length; i++) {
              var pendingNextKey = nextKeysPending[nextKey][i];
              childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
            }
          }

          childMapping[nextKey] = getValueForKey(nextKey);
        } // Finally, add the keys which didn't appear before any key in `next`


        for (var _i5 = 0; _i5 < pendingKeys.length; _i5++) {
          childMapping[pendingKeys[_i5]] = getValueForKey(pendingKeys[_i5]);
        }

        return childMapping;
      }

      var identity = function identity(i) {
        return i;
      };

      var TransitionGroup = /*#__PURE__*/function (_Component8) {
        _inheritsLoose(TransitionGroup, _Component8);

        function TransitionGroup(props, context) {
          var _this142;

          _this142 = _Component8.call(this, props, context) || this;
          _this142.refs = {};
          _this142.state = {
            children: getChildMapping(toChildArray(toChildArray(_this142.props.children)) || [])
          };
          _this142.performAppear = _this142.performAppear.bind(_assertThisInitialized2(_this142));
          _this142.performEnter = _this142.performEnter.bind(_assertThisInitialized2(_this142));
          _this142.performLeave = _this142.performLeave.bind(_assertThisInitialized2(_this142));
          return _this142;
        }

        var _proto47 = TransitionGroup.prototype;

        _proto47.componentWillMount = function componentWillMount() {
          this.currentlyTransitioningKeys = {};
          this.keysToAbortLeave = [];
          this.keysToEnter = [];
          this.keysToLeave = [];
        };

        _proto47.componentDidMount = function componentDidMount() {
          var initialChildMapping = this.state.children;

          for (var key in initialChildMapping) {
            if (initialChildMapping[key]) {
              // this.performAppear(getKey(initialChildMapping[key], key));
              this.performAppear(key);
            }
          }
        };

        _proto47.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
          var nextChildMapping = getChildMapping(toChildArray(nextProps.children) || []);
          var prevChildMapping = this.state.children;
          this.setState(function (prevState) {
            return {
              children: mergeChildMappings(prevState.children, nextChildMapping)
            };
          });
          var key;

          for (key in nextChildMapping) {
            if (nextChildMapping.hasOwnProperty(key)) {
              var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key); // We should re-enter the component and abort its leave function

              if (nextChildMapping[key] && hasPrev && this.currentlyTransitioningKeys[key]) {
                this.keysToEnter.push(key);
                this.keysToAbortLeave.push(key);
              } else if (nextChildMapping[key] && !hasPrev && !this.currentlyTransitioningKeys[key]) {
                this.keysToEnter.push(key);
              }
            }
          }

          for (key in prevChildMapping) {
            if (prevChildMapping.hasOwnProperty(key)) {
              var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);

              if (prevChildMapping[key] && !hasNext && !this.currentlyTransitioningKeys[key]) {
                this.keysToLeave.push(key);
              }
            }
          }
        };

        _proto47.componentDidUpdate = function componentDidUpdate() {
          var keysToEnter = this.keysToEnter;
          this.keysToEnter = [];
          keysToEnter.forEach(this.performEnter);
          var keysToLeave = this.keysToLeave;
          this.keysToLeave = [];
          keysToLeave.forEach(this.performLeave);
        };

        _proto47._finishAbort = function _finishAbort(key) {
          var idx = this.keysToAbortLeave.indexOf(key);

          if (idx !== -1) {
            this.keysToAbortLeave.splice(idx, 1);
          }
        };

        _proto47.performAppear = function performAppear(key) {
          this.currentlyTransitioningKeys[key] = true;
          var component = this.refs[key];

          if (component.componentWillAppear) {
            component.componentWillAppear(this._handleDoneAppearing.bind(this, key));
          } else {
            this._handleDoneAppearing(key);
          }
        };

        _proto47._handleDoneAppearing = function _handleDoneAppearing(key) {
          var component = this.refs[key];

          if (component.componentDidAppear) {
            component.componentDidAppear();
          }

          delete this.currentlyTransitioningKeys[key];

          this._finishAbort(key);

          var currentChildMapping = getChildMapping(toChildArray(this.props.children) || []);

          if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
            // This was removed before it had fully appeared. Remove it.
            this.performLeave(key);
          }
        };

        _proto47.performEnter = function performEnter(key) {
          this.currentlyTransitioningKeys[key] = true;
          var component = this.refs[key];

          if (component.componentWillEnter) {
            component.componentWillEnter(this._handleDoneEntering.bind(this, key));
          } else {
            this._handleDoneEntering(key);
          }
        };

        _proto47._handleDoneEntering = function _handleDoneEntering(key) {
          var component = this.refs[key];

          if (component.componentDidEnter) {
            component.componentDidEnter();
          }

          delete this.currentlyTransitioningKeys[key];

          this._finishAbort(key);

          var currentChildMapping = getChildMapping(toChildArray(this.props.children) || []);

          if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
            // This was removed before it had fully entered. Remove it.
            this.performLeave(key);
          }
        };

        _proto47.performLeave = function performLeave(key) {
          // If we should immediately abort this leave function,
          // don't run the leave transition at all.
          var idx = this.keysToAbortLeave.indexOf(key);

          if (idx !== -1) {
            return;
          }

          this.currentlyTransitioningKeys[key] = true;
          var component = this.refs[key];

          if (component.componentWillLeave) {
            component.componentWillLeave(this._handleDoneLeaving.bind(this, key));
          } else {
            // Note that this is somewhat dangerous b/c it calls setState()
            // again, effectively mutating the component before all the work
            // is done.
            this._handleDoneLeaving(key);
          }
        };

        _proto47._handleDoneLeaving = function _handleDoneLeaving(key) {
          // If we should immediately abort the leave,
          // then skip this altogether
          var idx = this.keysToAbortLeave.indexOf(key);

          if (idx !== -1) {
            return;
          }

          var component = this.refs[key];

          if (component.componentDidLeave) {
            component.componentDidLeave();
          }

          delete this.currentlyTransitioningKeys[key];
          var currentChildMapping = getChildMapping(toChildArray(this.props.children) || []);

          if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
            // This entered again before it fully left. Add it again.
            this.performEnter(key);
          } else {
            var children = assign({}, this.state.children);
            delete children[key];
            this.setState({
              children: children
            });
          }
        };

        _proto47.render = function render(_ref31, _ref32) {
          var childFactory = _ref31.childFactory,
              transitionLeave = _ref31.transitionLeave,
              transitionName = _ref31.transitionName,
              transitionAppear = _ref31.transitionAppear,
              transitionEnter = _ref31.transitionEnter,
              transitionLeaveTimeout = _ref31.transitionLeaveTimeout,
              transitionEnterTimeout = _ref31.transitionEnterTimeout,
              transitionAppearTimeout = _ref31.transitionAppearTimeout,
              component = _ref31.component,
              props = _objectWithoutPropertiesLoose(_ref31, _excluded2);

          var children = _ref32.children;
          // TODO: we could get rid of the need for the wrapper node
          // by cloning a single child
          var childrenToRender = [];

          for (var key in children) {
            if (children.hasOwnProperty(key)) {
              var child = children[key];

              if (child) {
                var ref = linkRef(this, key),
                    el = cloneElement(childFactory(child), {
                  ref: ref,
                  key: key
                });
                childrenToRender.push(el);
              }
            }
          }

          return h(component, props, childrenToRender);
        };

        return TransitionGroup;
      }(Component);

      TransitionGroup.defaultProps = {
        component: 'span',
        childFactory: identity
      };
      module.exports = TransitionGroup;
    }, {
      "preact": 595
    }],
    691: [function (require, module, exports) {
      "use strict";

      var _class, _temp;
      /* eslint-disable jsx-a11y/no-noninteractive-element-interactions  */

      /* eslint-disable jsx-a11y/click-events-have-key-events */


      var _require71 = require('preact'),
          h = _require71.h;

      var _require72 = require('@uppy/core'),
          UIPlugin = _require72.UIPlugin;

      var FadeIn = require('./FadeIn');

      var TransitionGroup = require('./TransitionGroup');
      /**
       * Informer
       * Shows rad message bubbles
       * used like this: `uppy.info('hello world', 'info', 5000)`
       * or for errors: `uppy.info('Error uploading img.jpg', 'error', 5000)`
       *
       */


      module.exports = (_temp = _class = /*#__PURE__*/function (_UIPlugin9) {
        _inheritsLoose(Informer, _UIPlugin9);

        // eslint-disable-next-line global-require
        function Informer(uppy, opts) {
          var _this143;

          _this143 = _UIPlugin9.call(this, uppy, opts) || this;

          _this143.render = function (state) {
            return h("div", {
              className: "uppy uppy-Informer"
            }, h(TransitionGroup, null, state.info.map(function (info) {
              return h(FadeIn, {
                key: info.message
              }, h("p", {
                role: "alert"
              }, info.message, ' ', info.details && h("span", {
                "aria-label": info.details,
                "data-microtip-position": "top-left",
                "data-microtip-size": "medium",
                role: "tooltip" // eslint-disable-next-line no-alert
                ,
                onClick: function onClick() {
                  return alert(info.message + " \n\n " + info.details);
                }
              }, "?")));
            })));
          };

          _this143.type = 'progressindicator';
          _this143.id = _this143.opts.id || 'Informer';
          _this143.title = 'Informer'; // set default options

          var defaultOptions = {}; // merge default options with the ones set by user

          _this143.opts = Object.assign({}, defaultOptions, opts);
          return _this143;
        }

        var _proto48 = Informer.prototype;

        _proto48.install = function install() {
          var target = this.opts.target;

          if (target) {
            this.mount(target, this);
          }
        };

        return Informer;
      }(UIPlugin), _class.VERSION = "2.0.1", _temp);
    }, {
      "./FadeIn": 689,
      "./TransitionGroup": 690,
      "@uppy/core": 645,
      "preact": 595
    }],
    692: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var _require73 = require('@uppy/core'),
          UIPlugin = _require73.UIPlugin;

      var _require74 = require('@uppy/companion-client'),
          Provider = _require74.Provider;

      var _require75 = require('@uppy/provider-views'),
          ProviderViews = _require75.ProviderViews;

      var _require76 = require('preact'),
          h = _require76.h;

      module.exports = (_temp = _class = /*#__PURE__*/function (_UIPlugin10) {
        _inheritsLoose(Instagram, _UIPlugin10);

        function Instagram(uppy, opts) {
          var _this144;

          _this144 = _UIPlugin10.call(this, uppy, opts) || this;
          _this144.id = _this144.opts.id || 'Instagram';
          Provider.initPlugin(_assertThisInitialized2(_this144), opts);

          _this144.icon = function () {
            return h("svg", {
              "aria-hidden": "true",
              focusable: "false",
              width: "32",
              height: "32",
              viewBox: "0 0 32 32"
            }, h("g", {
              fill: "none",
              fillRule: "evenodd"
            }, h("rect", {
              className: "uppy-ProviderIconBg",
              fill: "#E1306C",
              width: "32",
              height: "32",
              rx: "16"
            }), h("path", {
              d: "M16 8.622c2.403 0 2.688.009 3.637.052.877.04 1.354.187 1.67.31.392.144.745.374 1.036.673.299.29.529.644.673 1.035.123.317.27.794.31 1.671.043.95.052 1.234.052 3.637s-.009 2.688-.052 3.637c-.04.877-.187 1.354-.31 1.671a2.98 2.98 0 0 1-1.708 1.708c-.317.123-.794.27-1.671.31-.95.043-1.234.053-3.637.053s-2.688-.01-3.637-.053c-.877-.04-1.354-.187-1.671-.31a2.788 2.788 0 0 1-1.035-.673 2.788 2.788 0 0 1-.673-1.035c-.123-.317-.27-.794-.31-1.671-.043-.949-.052-1.234-.052-3.637s.009-2.688.052-3.637c.04-.877.187-1.354.31-1.67.144-.392.374-.745.673-1.036.29-.299.644-.529 1.035-.673.317-.123.794-.27 1.671-.31.95-.043 1.234-.052 3.637-.052zM16 7c-2.444 0-2.75.01-3.71.054-.959.044-1.613.196-2.185.419-.6.225-1.145.58-1.594 1.038-.458.45-.813.993-1.039 1.594-.222.572-.374 1.226-.418 2.184C7.01 13.25 7 13.556 7 16s.01 2.75.054 3.71c.044.959.196 1.613.419 2.185.226.6.58 1.145 1.038 1.594.45.458.993.813 1.594 1.038.572.223 1.227.375 2.184.419.96.044 1.267.054 3.711.054s2.75-.01 3.71-.054c.959-.044 1.613-.196 2.185-.419a4.602 4.602 0 0 0 2.632-2.632c.223-.572.375-1.226.419-2.184.044-.96.054-1.267.054-3.711s-.01-2.75-.054-3.71c-.044-.959-.196-1.613-.419-2.185A4.412 4.412 0 0 0 23.49 8.51a4.412 4.412 0 0 0-1.594-1.039c-.572-.222-1.226-.374-2.184-.418C18.75 7.01 18.444 7 16 7zm0 4.5a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9zm0 7.421a2.921 2.921 0 1 1 0-5.842 2.921 2.921 0 0 1 0 5.842zm4.875-6.671a1.125 1.125 0 1 1 0-2.25 1.125 1.125 0 0 1 0 2.25z",
              fill: "#FFF"
            })));
          };

          _this144.defaultLocale = {
            strings: {
              pluginNameInstagram: 'Instagram'
            }
          };

          _this144.i18nInit();

          _this144.title = _this144.i18n('pluginNameInstagram');
          _this144.provider = new Provider(uppy, {
            companionUrl: _this144.opts.companionUrl,
            companionHeaders: _this144.opts.companionHeaders,
            companionKeysParams: _this144.opts.companionKeysParams,
            companionCookiesRule: _this144.opts.companionCookiesRule,
            provider: 'instagram',
            pluginId: _this144.id
          });
          _this144.onFirstRender = _this144.onFirstRender.bind(_assertThisInitialized2(_this144));
          _this144.render = _this144.render.bind(_assertThisInitialized2(_this144));
          return _this144;
        }

        var _proto49 = Instagram.prototype;

        _proto49.install = function install() {
          this.view = new ProviderViews(this, {
            provider: this.provider,
            viewType: 'grid',
            showTitles: false,
            showFilter: false,
            showBreadcrumbs: false
          });
          var target = this.opts.target;

          if (target) {
            this.mount(target, this);
          }
        };

        _proto49.uninstall = function uninstall() {
          this.view.tearDown();
          this.unmount();
        };

        _proto49.onFirstRender = function onFirstRender() {
          return Promise.all([this.provider.fetchPreAuthToken(), this.view.getFolder('recent')]);
        };

        _proto49.render = function render(state) {
          return this.view.render(state);
        };

        return Instagram;
      }(UIPlugin), _class.VERSION = "2.0.1", _temp);
    }, {
      "@uppy/companion-client": 640,
      "@uppy/core": 645,
      "@uppy/provider-views": 716,
      "preact": 595
    }],
    693: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var _require77 = require('@uppy/core'),
          UIPlugin = _require77.UIPlugin;

      var _require78 = require('@uppy/companion-client'),
          Provider = _require78.Provider;

      var _require79 = require('@uppy/provider-views'),
          ProviderViews = _require79.ProviderViews;

      var _require80 = require('preact'),
          h = _require80.h;

      module.exports = (_temp = _class = /*#__PURE__*/function (_UIPlugin11) {
        _inheritsLoose(OneDrive, _UIPlugin11);

        function OneDrive(uppy, opts) {
          var _this145;

          _this145 = _UIPlugin11.call(this, uppy, opts) || this;
          _this145.id = _this145.opts.id || 'OneDrive';
          Provider.initPlugin(_assertThisInitialized2(_this145), opts);
          _this145.title = _this145.opts.title || 'OneDrive';

          _this145.icon = function () {
            return h("svg", {
              "aria-hidden": "true",
              focusable: "false",
              width: "32",
              height: "32",
              viewBox: "0 0 32 32"
            }, h("g", {
              fill: "none",
              fillRule: "evenodd"
            }, h("rect", {
              className: "uppy-ProviderIconBg",
              width: "32",
              height: "32",
              rx: "16",
              fill: "#0262C0"
            }), h("g", {
              fill: "#FFF",
              fillRule: "nonzero"
            }, h("path", {
              d: "M24.157 22s1.492-.205 1.79-1.655a2.624 2.624 0 0 0 .03-.878c-.22-1.64-1.988-2.01-1.988-2.01s.307-1.765-1.312-2.69c-1.62-.925-3.1 0-3.1 0S18.711 13 16.366 13c-3.016 0-3.519 3.448-3.519 3.448S10 16.618 10 19.14c0 2.523 2.597 2.86 2.597 2.86h11.56z"
            }), h("path", {
              d: "M9.421 19.246c0-2.197 1.606-3.159 2.871-3.472.44-1.477 1.654-3.439 4.135-3.439H16.445c1.721 0 2.79.823 3.368 1.476a3.99 3.99 0 0 1 1.147-.171h.01l.03.002C21.017 13.5 20.691 10 16.757 10c-2.69 0-3.639 2.345-3.639 2.345s-1.95-1.482-3.955.567c-1.028 1.052-.79 2.669-.79 2.669S6 15.824 6 18.412C6 20.757 8.452 21 8.452 21h1.372a3.77 3.77 0 0 1-.403-1.754z"
            }))));
          };

          _this145.provider = new Provider(uppy, {
            companionUrl: _this145.opts.companionUrl,
            companionHeaders: _this145.opts.companionHeaders,
            companionCookiesRule: _this145.opts.companionCookiesRule,
            provider: 'onedrive',
            pluginId: _this145.id
          });
          _this145.defaultLocale = {
            strings: {
              pluginNameOneDrive: 'OneDrive'
            }
          };

          _this145.i18nInit();

          _this145.title = _this145.i18n('pluginNameOneDrive');
          _this145.onFirstRender = _this145.onFirstRender.bind(_assertThisInitialized2(_this145));
          _this145.render = _this145.render.bind(_assertThisInitialized2(_this145));
          return _this145;
        }

        var _proto50 = OneDrive.prototype;

        _proto50.install = function install() {
          this.view = new ProviderViews(this, {
            provider: this.provider
          });
          var target = this.opts.target;

          if (target) {
            this.mount(target, this);
          }
        };

        _proto50.uninstall = function uninstall() {
          this.view.tearDown();
          this.unmount();
        };

        _proto50.onFirstRender = function onFirstRender() {
          return Promise.all([this.provider.fetchPreAuthToken(), this.view.getFolder()]);
        };

        _proto50.render = function render(state) {
          return this.view.render(state);
        };

        return OneDrive;
      }(UIPlugin), _class.VERSION = "2.0.1", _temp);
    }, {
      "@uppy/companion-client": 640,
      "@uppy/core": 645,
      "@uppy/provider-views": 716,
      "preact": 595
    }],
    694: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var _require81 = require('@uppy/core'),
          UIPlugin = _require81.UIPlugin;

      var _require82 = require('preact'),
          h = _require82.h;
      /**
       * Progress bar
       *
       */


      module.exports = (_temp = _class = /*#__PURE__*/function (_UIPlugin12) {
        _inheritsLoose(ProgressBar, _UIPlugin12);

        function ProgressBar(uppy, opts) {
          var _this146;

          _this146 = _UIPlugin12.call(this, uppy, opts) || this;
          _this146.id = _this146.opts.id || 'ProgressBar';
          _this146.title = 'Progress Bar';
          _this146.type = 'progressindicator'; // set default options

          var defaultOptions = {
            target: 'body',
            fixed: false,
            hideAfterFinish: true
          }; // merge default options with the ones set by user

          _this146.opts = Object.assign({}, defaultOptions, opts);
          _this146.render = _this146.render.bind(_assertThisInitialized2(_this146));
          return _this146;
        }

        var _proto51 = ProgressBar.prototype;

        _proto51.render = function render(state) {
          var progress = state.totalProgress || 0; // before starting and after finish should be hidden if specified in the options

          var isHidden = (progress === 0 || progress === 100) && this.opts.hideAfterFinish;
          return h("div", {
            className: "uppy uppy-ProgressBar",
            style: {
              position: this.opts.fixed ? 'fixed' : 'initial'
            },
            "aria-hidden": isHidden
          }, h("div", {
            className: "uppy-ProgressBar-inner",
            style: {
              width: progress + "%"
            }
          }), h("div", {
            className: "uppy-ProgressBar-percentage"
          }, progress));
        };

        _proto51.install = function install() {
          var target = this.opts.target;

          if (target) {
            this.mount(target, this);
          }
        };

        _proto51.uninstall = function uninstall() {
          this.unmount();
        };

        return ProgressBar;
      }(UIPlugin), _class.VERSION = "2.0.1", _temp);
    }, {
      "@uppy/core": 645,
      "preact": 595
    }],
    695: [function (require, module, exports) {
      "use strict";

      var _require83 = require('preact'),
          h = _require83.h,
          Fragment = _require83.Fragment;

      var Breadcrumb = function Breadcrumb(props) {
        var getFolder = props.getFolder,
            title = props.title,
            isLast = props.isLast;
        return h(Fragment, null, h("button", {
          type: "button",
          className: "uppy-u-reset",
          onClick: getFolder
        }, title), !isLast ? ' / ' : '');
      };

      module.exports = function (props) {
        var _getFolder = props.getFolder,
            title = props.title,
            breadcrumbsIcon = props.breadcrumbsIcon,
            directories = props.directories;
        return h("div", {
          className: "uppy-Provider-breadcrumbs"
        }, h("div", {
          className: "uppy-Provider-breadcrumbsIcon"
        }, breadcrumbsIcon), directories.map(function (directory, i) {
          return h(Breadcrumb, {
            key: directory.id,
            getFolder: function getFolder() {
              return _getFolder(directory.id);
            },
            title: i === 0 ? title : directory.title,
            isLast: i + 1 === directories.length
          });
        }));
      };
    }, {
      "preact": 595
    }],
    696: [function (require, module, exports) {
      "use strict";

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      var classNames = require('classnames');

      var _require84 = require('preact'),
          h = _require84.h;

      var Filter = require('./Filter');

      var ItemList = require('./ItemList');

      var FooterActions = require('./FooterActions');

      var Browser = function Browser(props) {
        var currentSelection = props.currentSelection,
            folders = props.folders,
            files = props.files,
            uppyFiles = props.uppyFiles,
            filterItems = props.filterItems,
            filterInput = props.filterInput;
        var filteredFolders = folders;
        var filteredFiles = files;

        if (filterInput !== '') {
          filteredFolders = filterItems(folders);
          filteredFiles = filterItems(files);
        }

        var selected = currentSelection.length;
        return h("div", {
          className: classNames('uppy-ProviderBrowser', "uppy-ProviderBrowser-viewType--" + props.viewType)
        }, h("div", {
          className: "uppy-ProviderBrowser-header"
        }, h("div", {
          className: classNames('uppy-ProviderBrowser-headerBar', !props.showBreadcrumbs && 'uppy-ProviderBrowser-headerBar--simple')
        }, props.headerComponent)), props.showFilter && h(Filter, props), h(ItemList, {
          columns: [{
            name: 'Name',
            key: 'title'
          }],
          folders: filteredFolders,
          files: filteredFiles,
          isChecked: props.isChecked,
          handleFolderClick: props.getNextFolder,
          toggleCheckbox: props.toggleCheckbox,
          handleScroll: props.handleScroll,
          title: props.title,
          showTitles: props.showTitles,
          i18n: props.i18n,
          viewType: props.viewType,
          validateRestrictions: props.validateRestrictions,
          uppyFiles: uppyFiles,
          currentSelection: currentSelection
        }), selected > 0 && h(FooterActions, _extends({
          selected: selected
        }, props)));
      };

      module.exports = Browser;
    }, {
      "./Filter": 698,
      "./FooterActions": 699,
      "./ItemList": 704,
      "classnames": 7,
      "preact": 595
    }],
    697: [function (require, module, exports) {
      "use strict";

      var _require85 = require('preact'),
          Component = _require85.Component,
          toChildArray = _require85.toChildArray;

      module.exports = /*#__PURE__*/function (_Component9) {
        _inheritsLoose(CloseWrapper, _Component9);

        function CloseWrapper() {
          return _Component9.apply(this, arguments) || this;
        }

        var _proto52 = CloseWrapper.prototype;

        _proto52.componentWillUnmount = function componentWillUnmount() {
          var onUnmount = this.props.onUnmount;
          onUnmount();
        };

        _proto52.render = function render() {
          var children = this.props.children;
          return toChildArray(children)[0];
        };

        return CloseWrapper;
      }(Component);
    }, {
      "preact": 595
    }],
    698: [function (require, module, exports) {
      "use strict";

      var _require86 = require('preact'),
          h = _require86.h,
          Component = _require86.Component;

      module.exports = /*#__PURE__*/function (_Component10) {
        _inheritsLoose(Filter, _Component10);

        function Filter(props) {
          var _this147;

          _this147 = _Component10.call(this, props) || this;
          _this147.preventEnterPress = _this147.preventEnterPress.bind(_assertThisInitialized2(_this147));
          return _this147;
        }

        var _proto53 = Filter.prototype;

        _proto53.preventEnterPress = function preventEnterPress(ev) {
          if (ev.keyCode === 13) {
            ev.stopPropagation();
            ev.preventDefault();
          }
        };

        _proto53.render = function render() {
          var _this148 = this;

          return h("div", {
            className: "uppy-ProviderBrowser-search"
          }, h("input", {
            className: "uppy-u-reset uppy-ProviderBrowser-searchInput",
            type: "text",
            placeholder: this.props.i18n('filter'),
            "aria-label": this.props.i18n('filter'),
            onKeyUp: this.preventEnterPress,
            onKeyDown: this.preventEnterPress,
            onKeyPress: this.preventEnterPress,
            onInput: function onInput(e) {
              return _this148.props.filterQuery(e);
            },
            value: this.props.filterInput
          }), h("svg", {
            "aria-hidden": "true",
            focusable: "false",
            className: "uppy-c-icon uppy-ProviderBrowser-searchIcon",
            width: "12",
            height: "12",
            viewBox: "0 0 12 12"
          }, h("path", {
            d: "M8.638 7.99l3.172 3.172a.492.492 0 1 1-.697.697L7.91 8.656a4.977 4.977 0 0 1-2.983.983C2.206 9.639 0 7.481 0 4.819 0 2.158 2.206 0 4.927 0c2.721 0 4.927 2.158 4.927 4.82a4.74 4.74 0 0 1-1.216 3.17zm-3.71.685c2.176 0 3.94-1.726 3.94-3.856 0-2.129-1.764-3.855-3.94-3.855C2.75.964.984 2.69.984 4.819c0 2.13 1.765 3.856 3.942 3.856z"
          })), this.props.filterInput && h("button", {
            className: "uppy-u-reset uppy-ProviderBrowser-searchClose",
            type: "button",
            "aria-label": this.props.i18n('resetFilter'),
            title: this.props.i18n('resetFilter'),
            onClick: this.props.filterQuery
          }, h("svg", {
            "aria-hidden": "true",
            focusable: "false",
            className: "uppy-c-icon",
            viewBox: "0 0 19 19"
          }, h("path", {
            d: "M17.318 17.232L9.94 9.854 9.586 9.5l-.354.354-7.378 7.378h.707l-.62-.62v.706L9.318 9.94l.354-.354-.354-.354L1.94 1.854v.707l.62-.62h-.706l7.378 7.378.354.354.354-.354 7.378-7.378h-.707l.622.62v-.706L9.854 9.232l-.354.354.354.354 7.378 7.378.708-.707-7.38-7.378v.708l7.38-7.38.353-.353-.353-.353-.622-.622-.353-.353-.354.352-7.378 7.38h.708L2.56 1.23 2.208.88l-.353.353-.622.62-.353.355.352.353 7.38 7.38v-.708l-7.38 7.38-.353.353.352.353.622.622.353.353.354-.353 7.38-7.38h-.708l7.38 7.38z"
          }))));
        };

        return Filter;
      }(Component);
    }, {
      "preact": 595
    }],
    699: [function (require, module, exports) {
      "use strict";

      var _require87 = require('preact'),
          h = _require87.h;

      module.exports = function (props) {
        return h("div", {
          className: "uppy-ProviderBrowser-footer"
        }, h("button", {
          className: "uppy-u-reset uppy-c-btn uppy-c-btn-primary",
          onClick: props.done,
          type: "button"
        }, props.i18n('selectX', {
          smart_count: props.selected
        })), h("button", {
          className: "uppy-u-reset uppy-c-btn uppy-c-btn-link",
          onClick: props.cancel,
          type: "button"
        }, props.i18n('cancel')));
      };
    }, {
      "preact": 595
    }],
    700: [function (require, module, exports) {
      "use strict";

      var _require88 = require('preact'),
          h = _require88.h;

      function GridListItem(props) {
        var className = props.className,
            isDisabled = props.isDisabled,
            restrictionReason = props.restrictionReason,
            isChecked = props.isChecked,
            title = props.title,
            itemIconEl = props.itemIconEl,
            showTitles = props.showTitles,
            toggleCheckbox = props.toggleCheckbox,
            id = props.id;
        return h("li", {
          className: className,
          title: isDisabled ? restrictionReason : null
        }, h("input", {
          type: "checkbox",
          className: "uppy-u-reset uppy-ProviderBrowserItem-checkbox " + (isChecked ? 'uppy-ProviderBrowserItem-checkbox--is-checked' : '') + " uppy-ProviderBrowserItem-checkbox--grid",
          onChange: toggleCheckbox,
          name: "listitem",
          id: id,
          checked: isChecked,
          disabled: isDisabled,
          "data-uppy-super-focusable": true
        }), h("label", {
          htmlFor: id,
          "aria-label": title,
          className: "uppy-u-reset uppy-ProviderBrowserItem-inner"
        }, itemIconEl, showTitles && title));
      }

      module.exports = GridListItem;
    }, {
      "preact": 595
    }],
    701: [function (require, module, exports) {
      "use strict";

      var _require89 = require('preact'),
          h = _require89.h;

      function FileIcon() {
        return h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-c-icon",
          width: 11,
          height: 14.5,
          viewBox: "0 0 44 58"
        }, h("path", {
          d: "M27.437.517a1 1 0 0 0-.094.03H4.25C2.037.548.217 2.368.217 4.58v48.405c0 2.212 1.82 4.03 4.03 4.03H39.03c2.21 0 4.03-1.818 4.03-4.03V15.61a1 1 0 0 0-.03-.28 1 1 0 0 0 0-.093 1 1 0 0 0-.03-.032 1 1 0 0 0 0-.03 1 1 0 0 0-.032-.063 1 1 0 0 0-.03-.063 1 1 0 0 0-.032 0 1 1 0 0 0-.03-.063 1 1 0 0 0-.032-.03 1 1 0 0 0-.03-.063 1 1 0 0 0-.063-.062l-14.593-14a1 1 0 0 0-.062-.062A1 1 0 0 0 28 .708a1 1 0 0 0-.374-.157 1 1 0 0 0-.156 0 1 1 0 0 0-.03-.03l-.003-.003zM4.25 2.547h22.218v9.97c0 2.21 1.82 4.03 4.03 4.03h10.564v36.438a2.02 2.02 0 0 1-2.032 2.032H4.25c-1.13 0-2.032-.9-2.032-2.032V4.58c0-1.13.902-2.032 2.03-2.032zm24.218 1.345l10.375 9.937.75.718H30.5c-1.13 0-2.032-.9-2.032-2.03V3.89z"
        }));
      }

      function FolderIcon() {
        return h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-c-icon",
          style: {
            minWidth: 16,
            marginRight: 3
          },
          viewBox: "0 0 276.157 276.157"
        }, h("path", {
          d: "M273.08 101.378c-3.3-4.65-8.86-7.32-15.254-7.32h-24.34V67.59c0-10.2-8.3-18.5-18.5-18.5h-85.322c-3.63 0-9.295-2.875-11.436-5.805l-6.386-8.735c-4.982-6.814-15.104-11.954-23.546-11.954H58.73c-9.292 0-18.638 6.608-21.737 15.372l-2.033 5.752c-.958 2.71-4.72 5.37-7.596 5.37H18.5C8.3 49.09 0 57.39 0 67.59v167.07c0 .886.16 1.73.443 2.52.152 3.306 1.18 6.424 3.053 9.064 3.3 4.652 8.86 7.32 15.255 7.32h188.487c11.395 0 23.27-8.425 27.035-19.18l40.677-116.188c2.11-6.035 1.43-12.164-1.87-16.816zM18.5 64.088h8.864c9.295 0 18.64-6.607 21.738-15.37l2.032-5.75c.96-2.712 4.722-5.373 7.597-5.373h29.565c3.63 0 9.295 2.876 11.437 5.806l6.386 8.735c4.982 6.815 15.104 11.954 23.546 11.954h85.322c1.898 0 3.5 1.602 3.5 3.5v26.47H69.34c-11.395 0-23.27 8.423-27.035 19.178L15 191.23V67.59c0-1.898 1.603-3.5 3.5-3.5zm242.29 49.15l-40.676 116.188c-1.674 4.78-7.812 9.135-12.877 9.135H18.75c-1.447 0-2.576-.372-3.02-.997-.442-.625-.422-1.814.057-3.18l40.677-116.19c1.674-4.78 7.812-9.134 12.877-9.134h188.487c1.448 0 2.577.372 3.02.997.443.625.423 1.814-.056 3.18z"
        }));
      }

      function VideoIcon() {
        return h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          style: {
            width: 16,
            marginRight: 4
          },
          viewBox: "0 0 58 58"
        }, h("path", {
          d: "M36.537 28.156l-11-7a1.005 1.005 0 0 0-1.02-.033C24.2 21.3 24 21.635 24 22v14a1 1 0 0 0 1.537.844l11-7a1.002 1.002 0 0 0 0-1.688zM26 34.18V23.82L34.137 29 26 34.18z"
        }), h("path", {
          d: "M57 6H1a1 1 0 0 0-1 1v44a1 1 0 0 0 1 1h56a1 1 0 0 0 1-1V7a1 1 0 0 0-1-1zM10 28H2v-9h8v9zm-8 2h8v9H2v-9zm10 10V8h34v42H12V40zm44-12h-8v-9h8v9zm-8 2h8v9h-8v-9zm8-22v9h-8V8h8zM2 8h8v9H2V8zm0 42v-9h8v9H2zm54 0h-8v-9h8v9z"
        }));
      }

      module.exports = function (props) {
        if (props.itemIconString === null) return;

        switch (props.itemIconString) {
          case 'file':
            return h(FileIcon, null);

          case 'folder':
            return h(FolderIcon, null);

          case 'video':
            return h(VideoIcon, null);

          default:
            return h("img", {
              src: props.itemIconString,
              alt: props.alt
            });
        }
      };
    }, {
      "preact": 595
    }],
    702: [function (require, module, exports) {
      "use strict";

      var _require90 = require('preact'),
          h = _require90.h; // if folder:
      //   + checkbox (selects all files from folder)
      //   + folder name (opens folder)
      // if file:
      //   + checkbox (selects file)
      //   + file name (selects file)


      function ListItem(props) {
        var className = props.className,
            isDisabled = props.isDisabled,
            restrictionReason = props.restrictionReason,
            isCheckboxDisabled = props.isCheckboxDisabled,
            isChecked = props.isChecked,
            toggleCheckbox = props.toggleCheckbox,
            type = props.type,
            id = props.id,
            itemIconEl = props.itemIconEl,
            title = props.title,
            handleFolderClick = props.handleFolderClick,
            showTitles = props.showTitles,
            i18n = props.i18n;
        return h("li", {
          className: className,
          title: isDisabled ? restrictionReason : null
        }, !isCheckboxDisabled ? h("input", {
          type: "checkbox",
          className: "uppy-u-reset uppy-ProviderBrowserItem-checkbox " + (isChecked ? 'uppy-ProviderBrowserItem-checkbox--is-checked' : ''),
          onChange: toggleCheckbox // for the <label/>
          ,
          name: "listitem",
          id: id,
          checked: isChecked,
          "aria-label": type === 'file' ? null : i18n('allFilesFromFolderNamed', {
            name: title
          }),
          disabled: isDisabled,
          "data-uppy-super-focusable": true
        }) : null, type === 'file' ? // label for a checkbox
        h("label", {
          htmlFor: id,
          className: "uppy-u-reset uppy-ProviderBrowserItem-inner"
        }, h("div", {
          className: "uppy-ProviderBrowserItem-iconWrap"
        }, itemIconEl), showTitles && title) : // button to open a folder
        h("button", {
          type: "button",
          className: "uppy-u-reset uppy-ProviderBrowserItem-inner",
          onClick: handleFolderClick,
          "aria-label": i18n('openFolderNamed', {
            name: title
          })
        }, h("div", {
          className: "uppy-ProviderBrowserItem-iconWrap"
        }, itemIconEl), showTitles && h("span", null, title)));
      }

      module.exports = ListItem;
    }, {
      "preact": 595
    }],
    703: [function (require, module, exports) {
      "use strict";

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      var _require91 = require('preact'),
          h = _require91.h;

      var classNames = require('classnames');

      var ItemIcon = require('./components/ItemIcon');

      var GridLi = require('./components/GridLi');

      var ListLi = require('./components/ListLi');

      module.exports = function (props) {
        var itemIconString = props.getItemIcon();
        var className = classNames('uppy-ProviderBrowserItem', {
          'uppy-ProviderBrowserItem--selected': props.isChecked
        }, {
          'uppy-ProviderBrowserItem--disabled': props.isDisabled
        }, {
          'uppy-ProviderBrowserItem--noPreview': itemIconString === 'video'
        });
        var itemIconEl = h(ItemIcon, {
          itemIconString: itemIconString
        });

        switch (props.viewType) {
          case 'grid':
            return h(GridLi, _extends({}, props, {
              className: className,
              itemIconEl: itemIconEl
            }));

          case 'list':
            return h(ListLi, _extends({}, props, {
              className: className,
              itemIconEl: itemIconEl
            }));

          default:
            throw new Error("There is no such type " + props.viewType);
        }
      };
    }, {
      "./components/GridLi": 700,
      "./components/ItemIcon": 701,
      "./components/ListLi": 702,
      "classnames": 7,
      "preact": 595
    }],
    704: [function (require, module, exports) {
      "use strict";

      var _require92 = require('preact'),
          h = _require92.h;

      var remoteFileObjToLocal = require('@uppy/utils/lib/remoteFileObjToLocal');

      var Item = require('./Item/index'); // Hopefully this name will not be used by Google


      var VIRTUAL_SHARED_DIR = 'shared-with-me';

      var getSharedProps = function getSharedProps(fileOrFolder, props) {
        return {
          id: fileOrFolder.id,
          title: fileOrFolder.name,
          getItemIcon: function getItemIcon() {
            return fileOrFolder.icon;
          },
          isChecked: props.isChecked(fileOrFolder),
          toggleCheckbox: function toggleCheckbox(e) {
            return props.toggleCheckbox(e, fileOrFolder);
          },
          columns: props.columns,
          showTitles: props.showTitles,
          viewType: props.viewType,
          i18n: props.i18n
        };
      };

      module.exports = function (props) {
        var folders = props.folders,
            files = props.files,
            handleScroll = props.handleScroll,
            isChecked = props.isChecked;

        if (!folders.length && !files.length) {
          return h("div", {
            className: "uppy-Provider-empty"
          }, props.i18n('noFilesFound'));
        }

        return h("div", {
          className: "uppy-ProviderBrowser-body"
        }, h("ul", {
          className: "uppy-ProviderBrowser-list",
          onScroll: handleScroll,
          role: "listbox" // making <ul> not focusable for firefox
          ,
          tabIndex: "-1"
        }, folders.map(function (folder) {
          return Item(Object.assign({}, getSharedProps(folder, props), {
            type: 'folder',
            isDisabled: isChecked(folder) ? isChecked(folder).loading : false,
            isCheckboxDisabled: folder.id === VIRTUAL_SHARED_DIR,
            handleFolderClick: function handleFolderClick() {
              return props.handleFolderClick(folder);
            }
          }));
        }), files.map(function (file) {
          var validateRestrictions = props.validateRestrictions(remoteFileObjToLocal(file), [].concat(props.uppyFiles, props.currentSelection));
          var sharedProps = getSharedProps(file, props);
          var restrictionReason = validateRestrictions.reason;
          return Item(Object.assign({}, sharedProps, {
            type: 'file',
            isDisabled: !validateRestrictions.result && !sharedProps.isChecked,
            restrictionReason: restrictionReason
          }));
        })));
      };
    }, {
      "./Item/index": 703,
      "@uppy/utils/lib/remoteFileObjToLocal": 781,
      "preact": 595
    }],
    705: [function (require, module, exports) {
      "use strict";

      var _require93 = require('preact'),
          h = _require93.h;

      module.exports = function (props) {
        return h("div", {
          className: "uppy-Provider-loading"
        }, h("span", null, props.i18n('loading')));
      };
    }, {
      "preact": 595
    }],
    706: [function (require, module, exports) {
      "use strict";

      var _require94 = require('preact'),
          h = _require94.h;

      function GoogleIcon() {
        return h("svg", {
          width: "26",
          height: "26",
          viewBox: "0 0 26 26",
          xmlns: "http://www.w3.org/2000/svg"
        }, h("g", {
          fill: "none",
          "fill-rule": "evenodd"
        }, h("circle", {
          fill: "#FFF",
          cx: "13",
          cy: "13",
          r: "13"
        }), h("path", {
          d: "M21.64 13.205c0-.639-.057-1.252-.164-1.841H13v3.481h4.844a4.14 4.14 0 01-1.796 2.716v2.259h2.908c1.702-1.567 2.684-3.875 2.684-6.615z",
          fill: "#4285F4",
          "fill-rule": "nonzero"
        }), h("path", {
          d: "M13 22c2.43 0 4.467-.806 5.956-2.18l-2.908-2.259c-.806.54-1.837.86-3.048.86-2.344 0-4.328-1.584-5.036-3.711H4.957v2.332A8.997 8.997 0 0013 22z",
          fill: "#34A853",
          "fill-rule": "nonzero"
        }), h("path", {
          d: "M7.964 14.71A5.41 5.41 0 017.682 13c0-.593.102-1.17.282-1.71V8.958H4.957A8.996 8.996 0 004 13c0 1.452.348 2.827.957 4.042l3.007-2.332z",
          fill: "#FBBC05",
          "fill-rule": "nonzero"
        }), h("path", {
          d: "M13 7.58c1.321 0 2.508.454 3.44 1.345l2.582-2.58C17.463 4.891 15.426 4 13 4a8.997 8.997 0 00-8.043 4.958l3.007 2.332C8.672 9.163 10.656 7.58 13 7.58z",
          fill: "#EA4335",
          "fill-rule": "nonzero"
        }), h("path", {
          d: "M4 4h18v18H4z"
        })));
      }

      function AuthView(props) {
        var pluginName = props.pluginName,
            pluginIcon = props.pluginIcon,
            i18nArray = props.i18nArray,
            handleAuth = props.handleAuth; // In order to comply with Google's brand we need to create a different button
        // for the Google Drive plugin

        var isGoogleDrive = pluginName === 'Google Drive';
        var pluginNameComponent = h("span", {
          className: "uppy-Provider-authTitleName"
        }, pluginName, h("br", null));
        return h("div", {
          className: "uppy-Provider-auth"
        }, h("div", {
          className: "uppy-Provider-authIcon"
        }, pluginIcon()), h("div", {
          className: "uppy-Provider-authTitle"
        }, i18nArray('authenticateWithTitle', {
          pluginName: pluginNameComponent
        })), isGoogleDrive ? h("button", {
          type: "button",
          className: "uppy-u-reset uppy-c-btn uppy-c-btn-primary uppy-Provider-authBtn uppy-Provider-btn-google",
          onClick: handleAuth,
          "data-uppy-super-focusable": true
        }, h(GoogleIcon, null), i18nArray('signInWithGoogle')) : h("button", {
          type: "button",
          className: "uppy-u-reset uppy-c-btn uppy-c-btn-primary uppy-Provider-authBtn",
          onClick: handleAuth,
          "data-uppy-super-focusable": true
        }, i18nArray('authenticateWith', {
          pluginName: pluginName
        })));
      }

      module.exports = AuthView;
    }, {
      "preact": 595
    }],
    707: [function (require, module, exports) {
      "use strict";

      var User = require('./User');

      var Breadcrumbs = require('../Breadcrumbs');

      module.exports = function (props) {
        var components = [];

        if (props.showBreadcrumbs) {
          components.push(Breadcrumbs({
            getFolder: props.getFolder,
            directories: props.directories,
            breadcrumbsIcon: props.pluginIcon && props.pluginIcon(),
            title: props.title
          }));
        }

        components.push(User({
          logout: props.logout,
          username: props.username,
          i18n: props.i18n
        }));
        return components;
      };
    }, {
      "../Breadcrumbs": 695,
      "./User": 709
    }],
    708: [function (require, module, exports) {
      "use strict";

      var _class, _isHandlingScroll, _sharedHandler, _updateFilesAndFolders, _isOriginAllowed, _temp;

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }

      var _require95 = require('preact'),
          h = _require95.h;

      var generateFileID = require('@uppy/utils/lib/generateFileID');

      var getFileType = require('@uppy/utils/lib/getFileType');

      var isPreviewSupported = require('@uppy/utils/lib/isPreviewSupported');

      var AuthView = require('./AuthView');

      var Header = require('./Header');

      var Browser = require('../Browser');

      var LoaderView = require('../Loader');

      var SharedHandler = require('../SharedHandler');

      var CloseWrapper = require('../CloseWrapper');

      function getOrigin() {
        // eslint-disable-next-line no-restricted-globals
        return location.origin;
      }
      /**
       * Class to easily generate generic views for Provider plugins
       */


      module.exports = (_temp = (_isHandlingScroll = /*#__PURE__*/_classPrivateFieldLooseKey("isHandlingScroll"), _sharedHandler = /*#__PURE__*/_classPrivateFieldLooseKey("sharedHandler"), _updateFilesAndFolders = /*#__PURE__*/_classPrivateFieldLooseKey("updateFilesAndFolders"), _isOriginAllowed = /*#__PURE__*/_classPrivateFieldLooseKey("isOriginAllowed"), _class = /*#__PURE__*/function () {
        /**
         * @param {object} plugin instance of the plugin
         * @param {object} opts
         */
        function ProviderView(plugin, opts) {
          Object.defineProperty(this, _isOriginAllowed, {
            value: _isOriginAllowed2
          });
          Object.defineProperty(this, _updateFilesAndFolders, {
            value: _updateFilesAndFolders2
          });
          Object.defineProperty(this, _isHandlingScroll, {
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, _sharedHandler, {
            writable: true,
            value: void 0
          });
          this.plugin = plugin;
          this.provider = opts.provider;
          _classPrivateFieldLooseBase(this, _sharedHandler)[_sharedHandler] = new SharedHandler(plugin); // set default options

          var defaultOptions = {
            viewType: 'list',
            showTitles: true,
            showFilter: true,
            showBreadcrumbs: true
          }; // merge default options with the ones set by user

          this.opts = Object.assign({}, defaultOptions, opts); // Logic

          this.addFile = this.addFile.bind(this);
          this.filterQuery = this.filterQuery.bind(this);
          this.getFolder = this.getFolder.bind(this);
          this.getNextFolder = this.getNextFolder.bind(this);
          this.logout = this.logout.bind(this);
          this.preFirstRender = this.preFirstRender.bind(this);
          this.handleAuth = this.handleAuth.bind(this);
          this.handleError = this.handleError.bind(this);
          this.handleScroll = this.handleScroll.bind(this);
          this.listAllFiles = this.listAllFiles.bind(this);
          this.donePicking = this.donePicking.bind(this);
          this.cancelPicking = this.cancelPicking.bind(this);
          this.clearSelection = this.clearSelection.bind(this); // Visual

          this.render = this.render.bind(this);
          this.clearSelection(); // Set default state for the plugin

          this.plugin.setPluginState({
            authenticated: false,
            files: [],
            folders: [],
            directories: [],
            filterInput: '',
            isSearchVisible: false
          });
        }

        var _proto54 = ProviderView.prototype;

        _proto54.tearDown = function tearDown() {// Nothing.
        }
        /**
         * Called only the first time the provider view is rendered.
         * Kind of like an init function.
         */
        ;

        _proto54.preFirstRender = function preFirstRender() {
          this.plugin.setPluginState({
            didFirstRender: true
          });
          this.plugin.onFirstRender();
        }
        /**
         * Based on folder ID, fetch a new folder and update it to state
         *
         * @param  {string} id Folder id
         * @returns {Promise}   Folders/files in folder
         */
        ;

        _proto54.getFolder = function getFolder(id, name) {
          var _this149 = this;

          return _classPrivateFieldLooseBase(this, _sharedHandler)[_sharedHandler].loaderWrapper(this.provider.list(id), function (res) {
            var folders = [];
            var files = [];
            var updatedDirectories;

            var state = _this149.plugin.getPluginState();

            var index = state.directories.findIndex(function (dir) {
              return id === dir.id;
            });

            if (index !== -1) {
              updatedDirectories = state.directories.slice(0, index + 1);
            } else {
              updatedDirectories = state.directories.concat([{
                id: id,
                title: name
              }]);
            }

            _this149.username = res.username || _this149.username;

            _classPrivateFieldLooseBase(_this149, _updateFilesAndFolders)[_updateFilesAndFolders](res, files, folders);

            _this149.plugin.setPluginState({
              directories: updatedDirectories
            });
          }, this.handleError);
        }
        /**
         * Fetches new folder
         *
         * @param  {object} folder
         */
        ;

        _proto54.getNextFolder = function getNextFolder(folder) {
          this.getFolder(folder.requestPath, folder.name);
          this.lastCheckbox = undefined;
        };

        _proto54.addFile = function addFile(file) {
          var tagFile = {
            id: this.providerFileToId(file),
            source: this.plugin.id,
            data: file,
            name: file.name || file.id,
            type: file.mimeType,
            isRemote: true,
            body: {
              fileId: file.id
            },
            remote: {
              companionUrl: this.plugin.opts.companionUrl,
              url: "" + this.provider.fileUrl(file.requestPath),
              body: {
                fileId: file.id
              },
              providerOptions: this.provider.opts
            }
          };
          var fileType = getFileType(tagFile); // TODO Should we just always use the thumbnail URL if it exists?

          if (fileType && isPreviewSupported(fileType)) {
            tagFile.preview = file.thumbnail;
          }

          this.plugin.uppy.log('Adding remote file');

          try {
            this.plugin.uppy.addFile(tagFile);
            return true;
          } catch (err) {
            if (!err.isRestriction) {
              this.plugin.uppy.log(err);
            }

            return false;
          }
        }
        /**
         * Removes session token on client side.
         */
        ;

        _proto54.logout = function logout() {
          var _this150 = this;

          this.provider.logout().then(function (res) {
            if (res.ok) {
              if (!res.revoked) {
                var message = _this150.plugin.uppy.i18n('companionUnauthorizeHint', {
                  provider: _this150.plugin.title,
                  url: res.manual_revoke_url
                });

                _this150.plugin.uppy.info(message, 'info', 7000);
              }

              var newState = {
                authenticated: false,
                files: [],
                folders: [],
                directories: []
              };

              _this150.plugin.setPluginState(newState);
            }
          }).catch(this.handleError);
        };

        _proto54.filterQuery = function filterQuery(e) {
          var state = this.plugin.getPluginState();
          this.plugin.setPluginState(Object.assign({}, state, {
            filterInput: e ? e.target.value : ''
          }));
        }
        /**
         * Adds all files found inside of specified folder.
         *
         * Uses separated state while folder contents are being fetched and
         * mantains list of selected folders, which are separated from files.
         */
        ;

        _proto54.addFolder = function addFolder(folder) {
          var _this151 = this;

          var folderId = this.providerFileToId(folder);
          var state = this.plugin.getPluginState();
          var folders = Object.assign({}, state.selectedFolders);

          if (folderId in folders && folders[folderId].loading) {
            return;
          }

          folders[folderId] = {
            loading: true,
            files: []
          };
          this.plugin.setPluginState({
            selectedFolders: Object.assign({}, folders)
          }); // eslint-disable-next-line consistent-return

          return this.listAllFiles(folder.requestPath).then(function (files) {
            var count = 0; // If the same folder is added again, we don't want to send
            // X amount of duplicate file notifications, we want to say
            // the folder was already added. This checks if all files are duplicate,
            // if that's the case, we don't add the files.

            files.forEach(function (file) {
              var id = _this151.providerFileToId(file);

              if (!_this151.plugin.uppy.checkIfFileAlreadyExists(id)) {
                count++;
              }
            });

            if (count > 0) {
              files.forEach(function (file) {
                return _this151.addFile(file);
              });
            }

            var ids = files.map(_this151.providerFileToId);
            folders[folderId] = {
              loading: false,
              files: ids
            };

            _this151.plugin.setPluginState({
              selectedFolders: folders
            });

            var message;

            if (count === 0) {
              message = _this151.plugin.uppy.i18n('folderAlreadyAdded', {
                folder: folder.name
              });
            } else if (files.length) {
              message = _this151.plugin.uppy.i18n('folderAdded', {
                smart_count: count,
                folder: folder.name
              });
            } else {
              message = _this151.plugin.uppy.i18n('emptyFolderAdded');
            }

            _this151.plugin.uppy.info(message);
          }).catch(function (e) {
            var state = _this151.plugin.getPluginState();

            var selectedFolders = Object.assign({}, state.selectedFolders);
            delete selectedFolders[folderId];

            _this151.plugin.setPluginState({
              selectedFolders: selectedFolders
            });

            _this151.handleError(e);
          });
        };

        _proto54.providerFileToId = function providerFileToId(file) {
          return generateFileID({
            data: file,
            name: file.name || file.id,
            type: file.mimeType
          });
        };

        _proto54.handleAuth = function handleAuth() {
          var _this152 = this;

          var authState = btoa(JSON.stringify({
            origin: getOrigin()
          }));
          var clientVersion = "@uppy/provider-views=" + ProviderView.VERSION;
          var link = this.provider.authUrl({
            state: authState,
            uppyVersions: clientVersion
          });
          var authWindow = window.open(link, '_blank');

          var handleToken = function handleToken(e) {
            if (!_classPrivateFieldLooseBase(_this152, _isOriginAllowed)[_isOriginAllowed](e.origin, _this152.plugin.opts.companionAllowedHosts) || e.source !== authWindow) {
              _this152.plugin.uppy.log("rejecting event from " + e.origin + " vs allowed pattern " + _this152.plugin.opts.companionAllowedHosts);

              return;
            } // Check if it's a string before doing the JSON.parse to maintain support
            // for older Companion versions that used object references


            var data = typeof e.data === 'string' ? JSON.parse(e.data) : e.data;

            if (!data.token) {
              _this152.plugin.uppy.log('did not receive token from auth window');

              return;
            }

            authWindow.close();
            window.removeEventListener('message', handleToken);

            _this152.provider.setAuthToken(data.token);

            _this152.preFirstRender();
          };

          window.addEventListener('message', handleToken);
        };

        _proto54.handleError = function handleError(error) {
          var uppy = this.plugin.uppy;
          uppy.log(error.toString());

          if (error.isAuthError) {
            return;
          }

          var message = uppy.i18n('companionError');
          uppy.info({
            message: message,
            details: error.toString()
          }, 'error', 5000);
        };

        _proto54.handleScroll = function handleScroll(e) {
          var _this153 = this;

          var scrollPos = e.target.scrollHeight - (e.target.scrollTop + e.target.offsetHeight);
          var path = this.nextPagePath || null;

          if (scrollPos < 50 && path && !_classPrivateFieldLooseBase(this, _isHandlingScroll)[_isHandlingScroll]) {
            this.provider.list(path).then(function (res) {
              var _this153$plugin$getPl = _this153.plugin.getPluginState(),
                  files = _this153$plugin$getPl.files,
                  folders = _this153$plugin$getPl.folders;

              _classPrivateFieldLooseBase(_this153, _updateFilesAndFolders)[_updateFilesAndFolders](res, files, folders);
            }).catch(this.handleError).then(function () {
              _classPrivateFieldLooseBase(_this153, _isHandlingScroll)[_isHandlingScroll] = false;
            }); // always called

            _classPrivateFieldLooseBase(this, _isHandlingScroll)[_isHandlingScroll] = true;
          }
        };

        _proto54.listAllFiles = function listAllFiles(path, files) {
          var _this154 = this;

          if (files === void 0) {
            files = null;
          }

          files = files || [];
          return new Promise(function (resolve, reject) {
            _this154.provider.list(path).then(function (res) {
              res.items.forEach(function (item) {
                if (!item.isFolder) {
                  files.push(item);
                } else {
                  _this154.addFolder(item);
                }
              });
              var moreFiles = res.nextPagePath || null;

              if (moreFiles) {
                return _this154.listAllFiles(moreFiles, files).then(function (files) {
                  return resolve(files);
                }).catch(function (e) {
                  return reject(e);
                });
              }

              return resolve(files);
            }).catch(function (e) {
              return reject(e);
            });
          });
        };

        _proto54.donePicking = function donePicking() {
          var _this155 = this;

          var _this$plugin$getPlugi = this.plugin.getPluginState(),
              currentSelection = _this$plugin$getPlugi.currentSelection;

          var promises = currentSelection.map(function (file) {
            if (file.isFolder) {
              return _this155.addFolder(file);
            }

            return _this155.addFile(file);
          });

          _classPrivateFieldLooseBase(this, _sharedHandler)[_sharedHandler].loaderWrapper(Promise.all(promises), function () {
            _this155.clearSelection();
          }, function () {});
        };

        _proto54.cancelPicking = function cancelPicking() {
          this.clearSelection();
          var dashboard = this.plugin.uppy.getPlugin('Dashboard');
          if (dashboard) dashboard.hideAllPanels();
        };

        _proto54.clearSelection = function clearSelection() {
          this.plugin.setPluginState({
            currentSelection: []
          });
        };

        _proto54.render = function render(state, viewOptions) {
          var _this156 = this;

          if (viewOptions === void 0) {
            viewOptions = {};
          }

          var _this$plugin$getPlugi2 = this.plugin.getPluginState(),
              authenticated = _this$plugin$getPlugi2.authenticated,
              didFirstRender = _this$plugin$getPlugi2.didFirstRender;

          if (!didFirstRender) {
            this.preFirstRender();
          } // reload pluginState for "loading" attribute because it might
          // have changed above.


          if (this.plugin.getPluginState().loading) {
            return h(CloseWrapper, {
              onUnmount: this.clearSelection
            }, h(LoaderView, {
              i18n: this.plugin.uppy.i18n
            }));
          }

          if (!authenticated) {
            return h(CloseWrapper, {
              onUnmount: this.clearSelection
            }, h(AuthView, {
              pluginName: this.plugin.title,
              pluginIcon: this.plugin.icon,
              handleAuth: this.handleAuth,
              i18n: this.plugin.uppy.i18n,
              i18nArray: this.plugin.uppy.i18nArray
            }));
          }

          var targetViewOptions = Object.assign({}, this.opts, viewOptions);
          var headerProps = {
            showBreadcrumbs: targetViewOptions.showBreadcrumbs,
            getFolder: this.getFolder,
            directories: this.plugin.getPluginState().directories,
            pluginIcon: this.plugin.icon,
            title: this.plugin.title,
            logout: this.logout,
            username: this.username,
            i18n: this.plugin.uppy.i18n
          };
          var browserProps = Object.assign({}, this.plugin.getPluginState(), {
            username: this.username,
            getNextFolder: this.getNextFolder,
            getFolder: this.getFolder,
            filterItems: _classPrivateFieldLooseBase(this, _sharedHandler)[_sharedHandler].filterItems,
            filterQuery: this.filterQuery,
            logout: this.logout,
            isChecked: _classPrivateFieldLooseBase(this, _sharedHandler)[_sharedHandler].isChecked,
            toggleCheckbox: _classPrivateFieldLooseBase(this, _sharedHandler)[_sharedHandler].toggleCheckbox,
            handleScroll: this.handleScroll,
            listAllFiles: this.listAllFiles,
            done: this.donePicking,
            cancel: this.cancelPicking,
            headerComponent: Header(headerProps),
            title: this.plugin.title,
            viewType: targetViewOptions.viewType,
            showTitles: targetViewOptions.showTitles,
            showFilter: targetViewOptions.showFilter,
            showBreadcrumbs: targetViewOptions.showBreadcrumbs,
            pluginIcon: this.plugin.icon,
            i18n: this.plugin.uppy.i18n,
            uppyFiles: this.plugin.uppy.getFiles(),
            validateRestrictions: function validateRestrictions() {
              var _this156$plugin$uppy;

              return (_this156$plugin$uppy = _this156.plugin.uppy).validateRestrictions.apply(_this156$plugin$uppy, arguments);
            }
          });
          return h(CloseWrapper, {
            onUnmount: this.clearSelection
          }, h(Browser, browserProps));
        };

        return ProviderView;
      }()), _class.VERSION = "2.0.1", _temp);

      function _updateFilesAndFolders2(res, files, folders) {
        this.nextPagePath = res.nextPagePath;
        res.items.forEach(function (item) {
          if (item.isFolder) {
            folders.push(item);
          } else {
            files.push(item);
          }
        });
        this.plugin.setPluginState({
          folders: folders,
          files: files
        });
      }

      function _isOriginAllowed2(origin, allowedOrigin) {
        var getRegex = function getRegex(value) {
          if (typeof value === 'string') {
            return new RegExp("^" + value + "$");
          }

          if (value instanceof RegExp) {
            return value;
          }
        };

        var patterns = Array.isArray(allowedOrigin) ? allowedOrigin.map(getRegex) : [getRegex(allowedOrigin)];
        return patterns.filter(function (pattern) {
          return pattern != null;
        }) // loose comparison to catch undefined
        .some(function (pattern) {
          return pattern.test(origin) || pattern.test(origin + "/");
        }); // allowing for trailing '/'
      }
    }, {
      "../Browser": 696,
      "../CloseWrapper": 697,
      "../Loader": 705,
      "../SharedHandler": 715,
      "./AuthView": 706,
      "./Header": 707,
      "@uppy/utils/lib/generateFileID": 759,
      "@uppy/utils/lib/getFileType": 767,
      "@uppy/utils/lib/isPreviewSupported": 778,
      "preact": 595
    }],
    709: [function (require, module, exports) {
      "use strict";

      var _require96 = require('preact'),
          h = _require96.h;

      module.exports = function (props) {
        return [h("span", {
          className: "uppy-ProviderBrowser-user",
          key: "username"
        }, props.username), h("button", {
          type: "button",
          onClick: props.logout,
          className: "uppy-u-reset uppy-ProviderBrowser-userLogout",
          key: "logout"
        }, props.i18n('logOut'))];
      };
    }, {
      "preact": 595
    }],
    710: [function (require, module, exports) {
      "use strict";

      module.exports = require('./ProviderView');
    }, {
      "./ProviderView": 708
    }],
    711: [function (require, module, exports) {
      "use strict";

      var _require97 = require('preact'),
          h = _require97.h;

      module.exports = function (props) {
        return h("button", {
          type: "button",
          onClick: props.triggerSearchInput,
          className: "uppy-u-reset uppy-ProviderBrowser-userLogout"
        }, props.i18n('backToSearch'));
      };
    }, {
      "preact": 595
    }],
    712: [function (require, module, exports) {
      "use strict";

      var _require98 = require('preact'),
          h = _require98.h;

      module.exports = function (props) {
        var input;

        var handleKeyPress = function handleKeyPress(ev) {
          if (ev.keyCode === 13) {
            validateAndSearch();
          }
        };

        var validateAndSearch = function validateAndSearch() {
          if (input.value) {
            props.search(input.value);
          }
        };

        return h("div", {
          className: "uppy-SearchProvider"
        }, h("input", {
          className: "uppy-u-reset uppy-c-textInput uppy-SearchProvider-input",
          type: "text",
          "aria-label": props.i18n('enterTextToSearch'),
          placeholder: props.i18n('enterTextToSearch'),
          onKeyUp: handleKeyPress,
          ref: function ref(input_) {
            input = input_;
          },
          "data-uppy-super-focusable": true
        }), h("button", {
          className: "uppy-u-reset uppy-c-btn uppy-c-btn-primary uppy-SearchProvider-searchButton",
          type: "button",
          onClick: validateAndSearch
        }, props.i18n('searchImages')));
      };
    }, {
      "preact": 595
    }],
    713: [function (require, module, exports) {
      "use strict";

      var _class, _isHandlingScroll, _searchTerm, _sharedHandler, _updateFilesAndInputMode, _temp;

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }

      var _require99 = require('preact'),
          h = _require99.h;

      var generateFileID = require('@uppy/utils/lib/generateFileID');

      var getFileType = require('@uppy/utils/lib/getFileType');

      var isPreviewSupported = require('@uppy/utils/lib/isPreviewSupported');

      var SearchInput = require('./InputView');

      var Browser = require('../Browser');

      var LoaderView = require('../Loader');

      var Header = require('./Header');

      var SharedHandler = require('../SharedHandler');

      var CloseWrapper = require('../CloseWrapper');
      /**
       * Class to easily generate generic views for Provider plugins
       */


      module.exports = (_temp = (_isHandlingScroll = /*#__PURE__*/_classPrivateFieldLooseKey("isHandlingScroll"), _searchTerm = /*#__PURE__*/_classPrivateFieldLooseKey("searchTerm"), _sharedHandler = /*#__PURE__*/_classPrivateFieldLooseKey("sharedHandler"), _updateFilesAndInputMode = /*#__PURE__*/_classPrivateFieldLooseKey("updateFilesAndInputMode"), _class = /*#__PURE__*/function () {
        /**
         * @param {object} plugin instance of the plugin
         * @param {object} opts
         */
        function ProviderView(plugin, opts) {
          Object.defineProperty(this, _updateFilesAndInputMode, {
            value: _updateFilesAndInputMode2
          });
          Object.defineProperty(this, _isHandlingScroll, {
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, _searchTerm, {
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, _sharedHandler, {
            writable: true,
            value: void 0
          });
          this.plugin = plugin;
          this.provider = opts.provider;
          _classPrivateFieldLooseBase(this, _sharedHandler)[_sharedHandler] = new SharedHandler(plugin); // set default options

          var defaultOptions = {
            viewType: 'grid',
            showTitles: false,
            showFilter: false,
            showBreadcrumbs: false
          }; // merge default options with the ones set by user

          this.opts = Object.assign({}, defaultOptions, opts); // Logic

          this.search = this.search.bind(this);
          this.triggerSearchInput = this.triggerSearchInput.bind(this);
          this.addFile = this.addFile.bind(this);
          this.preFirstRender = this.preFirstRender.bind(this);
          this.handleError = this.handleError.bind(this);
          this.handleScroll = this.handleScroll.bind(this);
          this.donePicking = this.donePicking.bind(this);
          this.cancelPicking = this.cancelPicking.bind(this);
          this.clearSelection = this.clearSelection.bind(this); // Visual

          this.render = this.render.bind(this);
          this.clearSelection(); // Set default state for the plugin

          this.plugin.setPluginState({
            isInputMode: true,
            files: [],
            folders: [],
            directories: [],
            filterInput: '',
            isSearchVisible: false
          });
        }

        var _proto55 = ProviderView.prototype;

        _proto55.tearDown = function tearDown() {// Nothing.
        }
        /**
         * Called only the first time the provider view is rendered.
         * Kind of like an init function.
         */
        ;

        _proto55.preFirstRender = function preFirstRender() {
          this.plugin.setPluginState({
            didFirstRender: true
          });
          this.plugin.onFirstRender();
        };

        _proto55.search = function search(query) {
          var _this157 = this;

          if (query && query === _classPrivateFieldLooseBase(this, _searchTerm)[_searchTerm]) {
            // no need to search again as this is the same as the previous search
            this.plugin.setPluginState({
              isInputMode: false
            });
            return;
          }

          return _classPrivateFieldLooseBase(this, _sharedHandler)[_sharedHandler].loaderWrapper(this.provider.search(query), function (res) {
            _classPrivateFieldLooseBase(_this157, _updateFilesAndInputMode)[_updateFilesAndInputMode](res, []);
          }, this.handleError);
        };

        _proto55.triggerSearchInput = function triggerSearchInput() {
          this.plugin.setPluginState({
            isInputMode: true
          });
        } // @todo this function should really be a function of the plugin and not the view.
        // maybe we should consider creating a base ProviderPlugin class that has this method
        ;

        _proto55.addFile = function addFile(file) {
          var tagFile = {
            id: this.providerFileToId(file),
            source: this.plugin.id,
            data: file,
            name: file.name || file.id,
            type: file.mimeType,
            isRemote: true,
            body: {
              fileId: file.id
            },
            remote: {
              companionUrl: this.plugin.opts.companionUrl,
              url: "" + this.provider.fileUrl(file.requestPath),
              body: {
                fileId: file.id
              },
              providerOptions: Object.assign({}, this.provider.opts, {
                provider: null
              })
            }
          };
          var fileType = getFileType(tagFile); // TODO Should we just always use the thumbnail URL if it exists?

          if (fileType && isPreviewSupported(fileType)) {
            tagFile.preview = file.thumbnail;
          }

          this.plugin.uppy.log('Adding remote file');

          try {
            this.plugin.uppy.addFile(tagFile);
          } catch (err) {
            if (!err.isRestriction) {
              this.plugin.uppy.log(err);
            }
          }
        };

        _proto55.providerFileToId = function providerFileToId(file) {
          return generateFileID({
            data: file,
            name: file.name || file.id,
            type: file.mimeType
          });
        };

        _proto55.handleError = function handleError(error) {
          var uppy = this.plugin.uppy;
          uppy.log(error.toString());
          var message = uppy.i18n('companionError');
          uppy.info({
            message: message,
            details: error.toString()
          }, 'error', 5000);
        };

        _proto55.handleScroll = function handleScroll(e) {
          var _this158 = this;

          var scrollPos = e.target.scrollHeight - (e.target.scrollTop + e.target.offsetHeight);
          var query = this.nextPageQuery || null;

          if (scrollPos < 50 && query && !_classPrivateFieldLooseBase(this, _isHandlingScroll)[_isHandlingScroll]) {
            this.provider.search(_classPrivateFieldLooseBase(this, _searchTerm)[_searchTerm], query).then(function (res) {
              var _this158$plugin$getPl = _this158.plugin.getPluginState(),
                  files = _this158$plugin$getPl.files;

              _classPrivateFieldLooseBase(_this158, _updateFilesAndInputMode)[_updateFilesAndInputMode](res, files);
            }).catch(this.handleError).then(function () {
              _classPrivateFieldLooseBase(_this158, _isHandlingScroll)[_isHandlingScroll] = false;
            }); // always called

            _classPrivateFieldLooseBase(this, _isHandlingScroll)[_isHandlingScroll] = true;
          }
        };

        _proto55.donePicking = function donePicking() {
          var _this159 = this;

          var _this$plugin$getPlugi3 = this.plugin.getPluginState(),
              currentSelection = _this$plugin$getPlugi3.currentSelection;

          var promises = currentSelection.map(function (file) {
            return _this159.addFile(file);
          });

          _classPrivateFieldLooseBase(this, _sharedHandler)[_sharedHandler].loaderWrapper(Promise.all(promises), function () {
            _this159.clearSelection();
          }, function () {});
        };

        _proto55.cancelPicking = function cancelPicking() {
          this.clearSelection();
          var dashboard = this.plugin.uppy.getPlugin('Dashboard');
          if (dashboard) dashboard.hideAllPanels();
        };

        _proto55.clearSelection = function clearSelection() {
          this.plugin.setPluginState({
            currentSelection: []
          });
        };

        _proto55.render = function render(state, viewOptions) {
          var _this160 = this;

          if (viewOptions === void 0) {
            viewOptions = {};
          }

          var _this$plugin$getPlugi4 = this.plugin.getPluginState(),
              didFirstRender = _this$plugin$getPlugi4.didFirstRender,
              isInputMode = _this$plugin$getPlugi4.isInputMode;

          if (!didFirstRender) {
            this.preFirstRender();
          } // reload pluginState for "loading" attribute because it might
          // have changed above.


          if (this.plugin.getPluginState().loading) {
            return h(CloseWrapper, {
              onUnmount: this.clearSelection
            }, h(LoaderView, {
              i18n: this.plugin.uppy.i18n
            }));
          }

          if (isInputMode) {
            return h(CloseWrapper, {
              onUnmount: this.clearSelection
            }, h(SearchInput, {
              search: this.search,
              i18n: this.plugin.uppy.i18n
            }));
          }

          var targetViewOptions = Object.assign({}, this.opts, viewOptions);
          var browserProps = Object.assign({}, this.plugin.getPluginState(), {
            isChecked: _classPrivateFieldLooseBase(this, _sharedHandler)[_sharedHandler].isChecked,
            toggleCheckbox: _classPrivateFieldLooseBase(this, _sharedHandler)[_sharedHandler].toggleCheckbox,
            handleScroll: this.handleScroll,
            done: this.donePicking,
            cancel: this.cancelPicking,
            headerComponent: Header({
              triggerSearchInput: this.triggerSearchInput,
              i18n: this.plugin.uppy.i18n
            }),
            title: this.plugin.title,
            viewType: targetViewOptions.viewType,
            showTitles: targetViewOptions.showTitles,
            showFilter: targetViewOptions.showFilter,
            showBreadcrumbs: targetViewOptions.showBreadcrumbs,
            pluginIcon: this.plugin.icon,
            i18n: this.plugin.uppy.i18n,
            uppyFiles: this.plugin.uppy.getFiles(),
            validateRestrictions: function validateRestrictions() {
              var _this160$plugin$uppy;

              return (_this160$plugin$uppy = _this160.plugin.uppy).validateRestrictions.apply(_this160$plugin$uppy, arguments);
            }
          });
          return h(CloseWrapper, {
            onUnmount: this.clearSelection
          }, h(Browser, browserProps));
        };

        return ProviderView;
      }()), _class.VERSION = "2.0.1", _temp);

      function _updateFilesAndInputMode2(res, files) {
        this.nextPageQuery = res.nextPageQuery;
        _classPrivateFieldLooseBase(this, _searchTerm)[_searchTerm] = res.searchedFor;
        res.items.forEach(function (item) {
          files.push(item);
        });
        this.plugin.setPluginState({
          isInputMode: false,
          files: files
        });
      }
    }, {
      "../Browser": 696,
      "../CloseWrapper": 697,
      "../Loader": 705,
      "../SharedHandler": 715,
      "./Header": 711,
      "./InputView": 712,
      "@uppy/utils/lib/generateFileID": 759,
      "@uppy/utils/lib/getFileType": 767,
      "@uppy/utils/lib/isPreviewSupported": 778,
      "preact": 595
    }],
    714: [function (require, module, exports) {
      "use strict";

      module.exports = require('./SearchProviderView');
    }, {
      "./SearchProviderView": 713
    }],
    715: [function (require, module, exports) {
      "use strict";

      var remoteFileObjToLocal = require('@uppy/utils/lib/remoteFileObjToLocal');

      module.exports = /*#__PURE__*/function () {
        function SharedHandler(plugin) {
          this.plugin = plugin;
          this.filterItems = this.filterItems.bind(this);
          this.toggleCheckbox = this.toggleCheckbox.bind(this);
          this.isChecked = this.isChecked.bind(this);
          this.loaderWrapper = this.loaderWrapper.bind(this);
        }

        var _proto56 = SharedHandler.prototype;

        _proto56.filterItems = function filterItems(items) {
          var state = this.plugin.getPluginState();

          if (!state.filterInput || state.filterInput === '') {
            return items;
          }

          return items.filter(function (folder) {
            return folder.name.toLowerCase().indexOf(state.filterInput.toLowerCase()) !== -1;
          });
        }
        /**
         * Toggles file/folder checkbox to on/off state while updating files list.
         *
         * Note that some extra complexity comes from supporting shift+click to
         * toggle multiple checkboxes at once, which is done by getting all files
         * in between last checked file and current one.
         */
        ;

        _proto56.toggleCheckbox = function toggleCheckbox(e, file) {
          e.stopPropagation();
          e.preventDefault();
          e.currentTarget.focus();

          var _this$plugin$getPlugi5 = this.plugin.getPluginState(),
              folders = _this$plugin$getPlugi5.folders,
              files = _this$plugin$getPlugi5.files;

          var items = this.filterItems(folders.concat(files)); // Shift-clicking selects a single consecutive list of items
          // starting at the previous click and deselects everything else.

          if (this.lastCheckbox && e.shiftKey) {
            var prevIndex = items.indexOf(this.lastCheckbox);
            var currentIndex = items.indexOf(file);

            var _currentSelection = prevIndex < currentIndex ? items.slice(prevIndex, currentIndex + 1) : items.slice(currentIndex, prevIndex + 1);

            var reducedCurrentSelection = []; // Check restrictions on each file in currentSelection,
            // reduce it to only contain files that pass restrictions

            for (var _iterator2 = _createForOfIteratorHelperLoose(_currentSelection), _step2; !(_step2 = _iterator2()).done;) {
              var item = _step2.value;
              var uppy = this.plugin.uppy;
              var validatedRestrictions = uppy.validateRestrictions(remoteFileObjToLocal(item), [].concat(uppy.getFiles(), reducedCurrentSelection));

              if (validatedRestrictions.result) {
                reducedCurrentSelection.push(item);
              } else {
                uppy.info({
                  message: validatedRestrictions.reason
                }, 'error', uppy.opts.infoTimeout);
              }
            }

            this.plugin.setPluginState({
              currentSelection: reducedCurrentSelection
            });
            return;
          }

          this.lastCheckbox = file;

          var _this$plugin$getPlugi6 = this.plugin.getPluginState(),
              currentSelection = _this$plugin$getPlugi6.currentSelection;

          if (this.isChecked(file)) {
            this.plugin.setPluginState({
              currentSelection: currentSelection.filter(function (item) {
                return item.id !== file.id;
              })
            });
          } else {
            this.plugin.setPluginState({
              currentSelection: currentSelection.concat([file])
            });
          }
        };

        _proto56.isChecked = function isChecked(file) {
          var _this$plugin$getPlugi7 = this.plugin.getPluginState(),
              currentSelection = _this$plugin$getPlugi7.currentSelection; // comparing id instead of the file object, because the reference to the object
          // changes when we switch folders, and the file list is updated


          return currentSelection.some(function (item) {
            return item.id === file.id;
          });
        };

        _proto56.loaderWrapper = function loaderWrapper(promise, then, catch_) {
          var _this161 = this;

          promise.then(function (result) {
            _this161.plugin.setPluginState({
              loading: false
            });

            then(result);
          }).catch(function (err) {
            _this161.plugin.setPluginState({
              loading: false
            });

            catch_(err);
          });
          this.plugin.setPluginState({
            loading: true
          });
        };

        return SharedHandler;
      }();
    }, {
      "@uppy/utils/lib/remoteFileObjToLocal": 781
    }],
    716: [function (require, module, exports) {
      "use strict";

      var ProviderViews = require('./ProviderView');

      var SearchProviderViews = require('./SearchProviderView');

      module.exports = {
        ProviderViews: ProviderViews,
        SearchProviderViews: SearchProviderViews
      };
    }, {
      "./ProviderView": 710,
      "./SearchProviderView": 714
    }],
    717: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var _require100 = require('@uppy/core'),
          UIPlugin = _require100.UIPlugin;
      /* eslint-disable max-len */

      /**
       * Add Redux DevTools support to Uppy
       *
       * See https://medium.com/@zalmoxis/redux-devtools-without-redux-or-how-to-have-a-predictable-state-with-any-architecture-61c5f5a7716f
       * and https://github.com/zalmoxisus/mobx-remotedev/blob/master/src/monitorActions.js
       */

      /* eslint-enable max-len */


      module.exports = (_temp = _class = /*#__PURE__*/function (_UIPlugin13) {
        _inheritsLoose(ReduxDevTools, _UIPlugin13);

        function ReduxDevTools(uppy, opts) {
          var _this162;

          _this162 = _UIPlugin13.call(this, uppy, opts) || this;
          _this162.type = 'debugger';
          _this162.id = _this162.opts.id || 'ReduxDevTools';
          _this162.title = 'Redux DevTools'; // set default options

          var defaultOptions = {}; // merge default options with the ones set by user

          _this162.opts = Object.assign({}, defaultOptions, opts);
          _this162.handleStateChange = _this162.handleStateChange.bind(_assertThisInitialized2(_this162));
          _this162.initDevTools = _this162.initDevTools.bind(_assertThisInitialized2(_this162));
          return _this162;
        }

        var _proto57 = ReduxDevTools.prototype;

        _proto57.handleStateChange = function handleStateChange(prevState, nextState) {
          this.devTools.send('UPPY_STATE_UPDATE', nextState);
        };

        _proto57.initDevTools = function initDevTools() {
          var _this163 = this;

          this.devTools = window.devToolsExtension.connect();
          this.devToolsUnsubscribe = this.devTools.subscribe(function (message) {
            if (message.type === 'DISPATCH') {
              // Implement monitors actions
              switch (message.payload.type) {
                case 'RESET':
                  _this163.uppy.reset();

                  return;

                case 'IMPORT_STATE':
                  {
                    var computedStates = message.payload.nextLiftedState.computedStates;
                    _this163.uppy.store.state = Object.assign({}, _this163.uppy.getState(), computedStates[computedStates.length - 1].state);

                    _this163.uppy.updateAll(_this163.uppy.getState());

                    return;
                  }

                case 'JUMP_TO_STATE':
                case 'JUMP_TO_ACTION':
                  _this163.uppy.store.state = Object.assign({}, _this163.uppy.getState(), JSON.parse(message.state));

                  _this163.uppy.updateAll(_this163.uppy.getState());

              }
            }
          });
        };

        _proto57.install = function install() {
          // eslint-disable-next-line no-underscore-dangle
          this.withDevTools = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION__;

          if (this.withDevTools) {
            this.initDevTools();
            this.uppy.on('state-update', this.handleStateChange);
          }
        };

        _proto57.uninstall = function uninstall() {
          if (this.withDevTools) {
            this.devToolsUnsubscribe();
            this.uppy.off('state-update', this.handleStateUpdate);
          }
        };

        return ReduxDevTools;
      }(UIPlugin), _class.VERSION = "2.0.1", _temp);
    }, {
      "@uppy/core": 645
    }],
    718: [function (require, module, exports) {
      "use strict";

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      var _require101 = require('preact'),
          h = _require101.h,
          Component = _require101.Component;

      var RecordButton = require('./RecordButton');

      var SubmitButton = require('./SubmitButton');

      var StopWatch = require('./StopWatch');

      var StreamStatus = require('./StreamStatus');

      var RecorderScreen = /*#__PURE__*/function (_Component11) {
        _inheritsLoose(RecorderScreen, _Component11);

        function RecorderScreen() {
          return _Component11.apply(this, arguments) || this;
        }

        var _proto58 = RecorderScreen.prototype;

        _proto58.componentWillUnmount = function componentWillUnmount() {
          this.props.onStop();
        };

        _proto58.render = function render() {
          var _this164 = this;

          var _this$props3 = this.props,
              recording = _this$props3.recording,
              videoStream = _this$props3.stream,
              recordedVideo = _this$props3.recordedVideo;
          var videoProps = {
            playsinline: true
          }; // show stream

          if (recording || !recordedVideo && !recording) {
            videoProps.muted = true;
            videoProps.autoplay = true;
            videoProps.srcObject = videoStream;
          } // show preview


          if (recordedVideo && !recording) {
            videoProps.muted = false;
            videoProps.controls = true;
            videoProps.src = recordedVideo; // reset srcObject in dom. If not resetted, stream sticks in element

            if (this.videoElement) {
              this.videoElement.srcObject = undefined;
            }
          }

          return h("div", {
            className: "uppy uppy-ScreenCapture-container"
          }, h("div", {
            className: "uppy-ScreenCapture-videoContainer"
          }, h(StreamStatus, this.props), h("video", _extends({
            ref: function ref(videoElement) {
              _this164.videoElement = videoElement;
            },
            className: "uppy-ScreenCapture-video"
          }, videoProps)), h(StopWatch, this.props)), h("div", {
            className: "uppy-ScreenCapture-buttonContainer"
          }, h(RecordButton, this.props), h(SubmitButton, this.props)));
        };

        return RecorderScreen;
      }(Component);

      module.exports = RecorderScreen;
    }, {
      "./RecordButton": 719,
      "./StopWatch": 721,
      "./StreamStatus": 722,
      "./SubmitButton": 723,
      "preact": 595
    }],
    719: [function (require, module, exports) {
      "use strict";

      var _require102 = require('preact'),
          h = _require102.h;
      /**
       * Control screen capture recording. Will show record or stop button.
       */


      module.exports = function RecordButton(_ref33) {
        var recording = _ref33.recording,
            onStartRecording = _ref33.onStartRecording,
            onStopRecording = _ref33.onStopRecording,
            i18n = _ref33.i18n;

        if (recording) {
          return h("button", {
            className: "uppy-u-reset uppy-c-btn uppy-ScreenCapture-button uppy-ScreenCapture-button--video uppy-ScreenCapture-button--stop-rec",
            type: "button",
            title: i18n('stopCapturing'),
            "aria-label": i18n('stopCapturing'),
            onClick: onStopRecording,
            "data-uppy-super-focusable": true
          }, h("svg", {
            "aria-hidden": "true",
            focusable: "false",
            className: "uppy-c-icon",
            width: "100",
            height: "100",
            viewBox: "0 0 100 100"
          }, h("rect", {
            x: "15",
            y: "15",
            width: "70",
            height: "70"
          })));
        }

        return h("button", {
          className: "uppy-u-reset uppy-c-btn uppy-ScreenCapture-button uppy-ScreenCapture-button--video",
          type: "button",
          title: i18n('startCapturing'),
          "aria-label": i18n('startCapturing'),
          onClick: onStartRecording,
          "data-uppy-super-focusable": true
        }, h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-c-icon",
          width: "100",
          height: "100",
          viewBox: "0 0 100 100"
        }, h("circle", {
          cx: "50",
          cy: "50",
          r: "40"
        })));
      };
    }, {
      "preact": 595
    }],
    720: [function (require, module, exports) {
      "use strict";

      var _require103 = require('preact'),
          h = _require103.h;

      module.exports = function () {
        return h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          width: "32",
          height: "32",
          viewBox: "0 0 32 32"
        }, h("g", {
          fill: "none",
          fillRule: "evenodd"
        }, h("rect", {
          className: "uppy-ProviderIconBg",
          fill: "#2C3E50",
          width: "32",
          height: "32",
          rx: "16"
        }), h("path", {
          d: "M24.182 9H7.818C6.81 9 6 9.742 6 10.667v10c0 .916.81 1.666 1.818 1.666h4.546V24h7.272v-1.667h4.546c1 0 1.809-.75 1.809-1.666l.009-10C26 9.742 25.182 9 24.182 9zM24 21H8V11h16v10z",
          fill: "#FFF",
          fillRule: "nonzero"
        }), h("circle", {
          fill: "#FFF",
          cx: "16",
          cy: "16",
          r: "2"
        })));
      };
    }, {
      "preact": 595
    }],
    721: [function (require, module, exports) {
      "use strict";

      var _require104 = require('preact'),
          h = _require104.h,
          Component = _require104.Component;

      var Stopwatch = /*#__PURE__*/function (_Component12) {
        _inheritsLoose(Stopwatch, _Component12);

        function Stopwatch(props) {
          var _this165;

          _this165 = _Component12.call(this, props) || this;
          _this165.state = {
            elapsedTime: 0
          };
          _this165.wrapperStyle = {
            width: '100%',
            height: '100%',
            display: 'flex'
          };
          _this165.overlayStyle = {
            position: 'absolute',
            width: '100%',
            height: '100%',
            background: 'black',
            opacity: 0.7
          };
          _this165.infoContainerStyle = {
            marginLeft: 'auto',
            marginRight: 'auto',
            marginTop: 'auto',
            marginBottom: 'auto',
            zIndex: 1,
            color: 'white'
          };
          _this165.infotextStyle = {
            marginLeft: 'auto',
            marginRight: 'auto',
            marginBottom: '1rem',
            fontSize: '1.5rem'
          };
          _this165.timeStyle = {
            display: 'block',
            fontWeight: 'bold',
            marginLeft: 'auto',
            marginRight: 'auto',
            fontSize: '3rem',
            fontFamily: 'Courier New'
          };
          return _this165;
        }

        var _proto59 = Stopwatch.prototype;

        _proto59.startTimer = function startTimer() {
          this.timerTick();
          this.timerRunning = true;
        };

        _proto59.resetTimer = function resetTimer() {
          clearTimeout(this.timer);
          this.setState({
            elapsedTime: 0
          });
          this.timerRunning = false;
        };

        _proto59.timerTick = function timerTick() {
          var _this166 = this;

          this.timer = setTimeout(function () {
            _this166.setState(function (state) {
              return {
                elapsedTime: state.elapsedTime + 1
              };
            });

            _this166.timerTick();
          }, 1000);
        };

        _proto59.fmtMSS = function fmtMSS(s) {
          // eslint-disable-next-line no-return-assign
          return (s - (s %= 60)) / 60 + (s > 9 ? ':' : ':0') + s;
        };

        _proto59.render = function render() {
          var _this$props4 = Object.assign({}, this.props),
              recording = _this$props4.recording,
              i18n = _this$props4.i18n; // second to minutes and seconds


          var minAndSec = this.fmtMSS(this.state.elapsedTime);

          if (recording && !this.timerRunning) {
            this.startTimer();
          }

          if (!recording && this.timerRunning) {
            this.resetTimer();
          }

          if (recording) {
            return h("div", {
              style: this.wrapperStyle
            }, h("div", {
              style: this.overlayStyle
            }), h("div", {
              style: this.infoContainerStyle
            }, h("div", {
              style: this.infotextStyle
            }, i18n('recording')), h("div", {
              style: this.timeStyle
            }, minAndSec)));
          }

          return null;
        };

        return Stopwatch;
      }(Component);

      module.exports = Stopwatch;
    }, {
      "preact": 595
    }],
    722: [function (require, module, exports) {
      "use strict";

      var _require105 = require('preact'),
          h = _require105.h;

      module.exports = function (_ref34) {
        var streamActive = _ref34.streamActive,
            i18n = _ref34.i18n;

        if (streamActive) {
          return h("div", {
            title: i18n('streamActive'),
            "aria-label": i18n('streamActive'),
            className: "uppy-ScreenCapture-icon--stream uppy-ScreenCapture-icon--streamActive"
          }, h("svg", {
            "aria-hidden": "true",
            focusable: "false",
            width: "24",
            height: "24",
            viewBox: "0 0 24 24"
          }, h("path", {
            d: "M0 0h24v24H0z",
            opacity: ".1",
            fill: "none"
          }), h("path", {
            d: "M0 0h24v24H0z",
            fill: "none"
          }), h("path", {
            d: "M1 18v3h3c0-1.66-1.34-3-3-3zm0-4v2c2.76 0 5 2.24 5 5h2c0-3.87-3.13-7-7-7zm18-7H5v1.63c3.96 1.28 7.09 4.41 8.37 8.37H19V7zM1 10v2c4.97 0 9 4.03 9 9h2c0-6.08-4.93-11-11-11zm20-7H3c-1.1 0-2 .9-2 2v3h2V5h18v14h-7v2h7c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
          })));
        }

        return h("div", {
          title: i18n('streamPassive'),
          "aria-label": i18n('streamPassive'),
          className: "uppy-ScreenCapture-icon--stream"
        }, h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          width: "24",
          height: "24",
          viewBox: "0 0 24 24"
        }, h("path", {
          d: "M0 0h24v24H0z",
          opacity: ".1",
          fill: "none"
        }), h("path", {
          d: "M0 0h24v24H0z",
          fill: "none"
        }), h("path", {
          d: "M21 3H3c-1.1 0-2 .9-2 2v3h2V5h18v14h-7v2h7c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM1 18v3h3c0-1.66-1.34-3-3-3zm0-4v2c2.76 0 5 2.24 5 5h2c0-3.87-3.13-7-7-7zm0-4v2c4.97 0 9 4.03 9 9h2c0-6.08-4.93-11-11-11z"
        })));
      };
    }, {
      "preact": 595
    }],
    723: [function (require, module, exports) {
      "use strict";

      var _require106 = require('preact'),
          h = _require106.h;
      /**
       * Submit recorded video to uppy. Enabled when file is available
       */


      module.exports = function SubmitButton(_ref35) {
        var recording = _ref35.recording,
            recordedVideo = _ref35.recordedVideo,
            onSubmit = _ref35.onSubmit,
            i18n = _ref35.i18n;

        if (recordedVideo && !recording) {
          return h("button", {
            className: "uppy-u-reset uppy-c-btn uppy-ScreenCapture-button uppy-ScreenCapture-button--submit",
            type: "button",
            title: i18n('submitRecordedFile'),
            "aria-label": i18n('submitRecordedFile'),
            onClick: onSubmit,
            "data-uppy-super-focusable": true
          }, h("svg", {
            width: "12",
            height: "9",
            viewBox: "0 0 12 9",
            xmlns: "http://www.w3.org/2000/svg",
            "aria-hidden": "true",
            focusable: "false",
            className: "uppy-c-icon"
          }, h("path", {
            fill: "#fff",
            fillRule: "nonzero",
            d: "M10.66 0L12 1.31 4.136 9 0 4.956l1.34-1.31L4.136 6.38z"
          })));
        }

        return null;
      };
    }, {
      "preact": 595
    }],
    724: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      var _require107 = require('preact'),
          h = _require107.h;

      var _require108 = require('@uppy/core'),
          UIPlugin = _require108.UIPlugin;

      var getFileTypeExtension = require('@uppy/utils/lib/getFileTypeExtension');

      var ScreenRecIcon = require('./ScreenRecIcon');

      var CaptureScreen = require('./CaptureScreen'); // Adapted from: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia


      function getMediaDevices() {
        // check if screen capturing is supported
        return window.MediaRecorder && navigator.mediaDevices; // eslint-disable-line compat/compat
      }
      /**
       * Screen capture
       */


      module.exports = (_temp = _class = /*#__PURE__*/function (_UIPlugin14) {
        _inheritsLoose(ScreenCapture, _UIPlugin14);

        function ScreenCapture(uppy, opts) {
          var _this167;

          _this167 = _UIPlugin14.call(this, uppy, opts) || this;
          _this167.mediaDevices = getMediaDevices(); // eslint-disable-next-line no-restricted-globals

          _this167.protocol = location.protocol === 'https:' ? 'https' : 'http';
          _this167.id = _this167.opts.id || 'ScreenCapture';
          _this167.title = _this167.opts.title || 'Screencast';
          _this167.type = 'acquirer';
          _this167.icon = ScreenRecIcon;
          _this167.defaultLocale = {
            strings: {
              startCapturing: 'Begin screen capturing',
              stopCapturing: 'Stop screen capturing',
              submitRecordedFile: 'Submit recorded file',
              streamActive: 'Stream active',
              streamPassive: 'Stream passive',
              micDisabled: 'Microphone access denied by user',
              recording: 'Recording'
            }
          }; // set default options
          // https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints

          var defaultOptions = {
            // https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints#Properties_of_shared_screen_tracks
            displayMediaConstraints: {
              video: {
                width: 1280,
                height: 720,
                frameRate: {
                  ideal: 3,
                  max: 5
                },
                cursor: 'motion',
                displaySurface: 'monitor'
              }
            },
            // https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamConstraints/audio
            userMediaConstraints: {
              audio: true
            },
            preferredVideoMimeType: 'video/webm'
          }; // merge default options with the ones set by user

          _this167.opts = Object.assign({}, defaultOptions, opts); // i18n

          _this167.i18nInit(); // uppy plugin class related


          _this167.install = _this167.install.bind(_assertThisInitialized2(_this167));
          _this167.setPluginState = _this167.setPluginState.bind(_assertThisInitialized2(_this167));
          _this167.render = _this167.render.bind(_assertThisInitialized2(_this167)); // screen capturer related

          _this167.start = _this167.start.bind(_assertThisInitialized2(_this167));
          _this167.stop = _this167.stop.bind(_assertThisInitialized2(_this167));
          _this167.startRecording = _this167.startRecording.bind(_assertThisInitialized2(_this167));
          _this167.stopRecording = _this167.stopRecording.bind(_assertThisInitialized2(_this167));
          _this167.submit = _this167.submit.bind(_assertThisInitialized2(_this167));
          _this167.streamInterrupted = _this167.streamInactivated.bind(_assertThisInitialized2(_this167)); // initialize

          _this167.captureActive = false;
          _this167.capturedMediaFile = null;
          return _this167;
        }

        var _proto60 = ScreenCapture.prototype;

        _proto60.install = function install() {
          // Return if browser doesn’t support getDisplayMedia and
          if (!this.mediaDevices) {
            this.uppy.log('Screen recorder access is not supported', 'error');
            return null;
          }

          this.setPluginState({
            streamActive: false,
            audioStreamActive: false
          });
          var target = this.opts.target;

          if (target) {
            this.mount(target, this);
          }
        };

        _proto60.uninstall = function uninstall() {
          if (this.videoStream) {
            this.stop();
          }

          this.unmount();
        };

        _proto60.start = function start() {
          var _this168 = this;

          if (!this.mediaDevices) {
            return Promise.reject(new Error('Screen recorder access not supported'));
          }

          this.captureActive = true;
          this.selectAudioStreamSource();
          this.selectVideoStreamSource().then(function (res) {
            // something happened in start -> return
            if (res === false) {
              // Close the Dashboard panel if plugin is installed
              // into Dashboard (could be other parent UI plugin)
              if (_this168.parent && _this168.parent.hideAllPanels) {
                _this168.parent.hideAllPanels();

                _this168.captureActive = false;
              }
            }
          });
        };

        _proto60.selectVideoStreamSource = function selectVideoStreamSource() {
          var _this169 = this;

          // if active stream available, return it
          if (this.videoStream) {
            return new Promise(function (resolve) {
              return resolve(_this169.videoStream);
            });
          } // ask user to select source to record and get mediastream from that
          // eslint-disable-next-line compat/compat


          return this.mediaDevices.getDisplayMedia(this.opts.displayMediaConstraints).then(function (videoStream) {
            _this169.videoStream = videoStream; // add event listener to stop recording if stream is interrupted

            _this169.videoStream.addEventListener('inactive', function () {
              _this169.streamInactivated();
            });

            _this169.setPluginState({
              streamActive: true
            });

            return videoStream;
          }).catch(function (err) {
            _this169.setPluginState({
              screenRecError: err
            });

            _this169.userDenied = true;
            setTimeout(function () {
              _this169.userDenied = false;
            }, 1000);
            return false;
          });
        };

        _proto60.selectAudioStreamSource = function selectAudioStreamSource() {
          var _this170 = this;

          // if active stream available, return it
          if (this.audioStream) {
            return new Promise(function (resolve) {
              return resolve(_this170.audioStream);
            });
          } // ask user to select source to record and get mediastream from that
          // eslint-disable-next-line compat/compat


          return this.mediaDevices.getUserMedia(this.opts.userMediaConstraints).then(function (audioStream) {
            _this170.audioStream = audioStream;

            _this170.setPluginState({
              audioStreamActive: true
            });

            return audioStream;
          }).catch(function (err) {
            if (err.name === 'NotAllowedError') {
              _this170.uppy.info(_this170.i18n('micDisabled'), 'error', 5000);
            }

            return false;
          });
        };

        _proto60.startRecording = function startRecording() {
          var _this171 = this;

          var options = {};
          this.capturedMediaFile = null;
          this.recordingChunks = [];
          var preferredVideoMimeType = this.opts.preferredVideoMimeType;
          this.selectVideoStreamSource().then(function (videoStream) {
            // Attempt to use the passed preferredVideoMimeType (if any) during recording.
            // If the browser doesn't support it, we'll fall back to the browser default instead
            if (preferredVideoMimeType && MediaRecorder.isTypeSupported(preferredVideoMimeType) && getFileTypeExtension(preferredVideoMimeType)) {
              options.mimeType = preferredVideoMimeType;
            } // prepare tracks


            var tracks = [videoStream.getVideoTracks()[0]]; // merge audio if exits

            if (_this171.audioStream) {
              tracks.push(_this171.audioStream.getAudioTracks()[0]);
            } // create new stream from video and audio
            // eslint-disable-next-line compat/compat


            _this171.outputStream = new MediaStream(tracks); // initialize mediarecorder
            // eslint-disable-next-line compat/compat

            _this171.recorder = new MediaRecorder(_this171.outputStream, options); // push data to buffer when data available

            _this171.recorder.addEventListener('dataavailable', function (event) {
              _this171.recordingChunks.push(event.data);
            }); // start recording


            _this171.recorder.start(); // set plugin state to recording


            _this171.setPluginState({
              recording: true
            });
          }).catch(function (err) {
            _this171.uppy.log(err, 'error');
          });
        };

        _proto60.streamInactivated = function streamInactivated() {
          // get screen recorder state
          var _this$getPluginState2 = Object.assign({}, this.getPluginState()),
              recordedVideo = _this$getPluginState2.recordedVideo,
              recording = _this$getPluginState2.recording;

          if (!recordedVideo && !recording) {
            // Close the Dashboard panel if plugin is installed
            // into Dashboard (could be other parent UI plugin)
            if (this.parent && this.parent.hideAllPanels) {
              this.parent.hideAllPanels();
            }
          } else if (recording) {
            // stop recorder if it is active
            this.uppy.log('Capture stream inactive — stop recording');
            this.stopRecording();
          }

          this.videoStream = null;
          this.audioStream = null;
          this.setPluginState({
            streamActive: false,
            audioStreamActive: false
          });
        };

        _proto60.stopRecording = function stopRecording() {
          var _this172 = this;

          var stopped = new Promise(function (resolve) {
            _this172.recorder.addEventListener('stop', function () {
              resolve();
            });

            _this172.recorder.stop();
          });
          return stopped.then(function () {
            // recording stopped
            _this172.setPluginState({
              recording: false
            }); // get video file after recorder stopped


            return _this172.getVideo();
          }).then(function (file) {
            // store media file
            _this172.capturedMediaFile = file; // create object url for capture result preview

            _this172.setPluginState({
              // eslint-disable-next-line compat/compat
              recordedVideo: URL.createObjectURL(file.data)
            });
          }).then(function () {
            _this172.recordingChunks = null;
            _this172.recorder = null;
          }, function (error) {
            _this172.recordingChunks = null;
            _this172.recorder = null;
            throw error;
          });
        };

        _proto60.submit = function submit() {
          try {
            // add recorded file to uppy
            if (this.capturedMediaFile) {
              this.uppy.addFile(this.capturedMediaFile);
            }
          } catch (err) {
            // Logging the error, exept restrictions, which is handled in Core
            if (!err.isRestriction) {
              this.uppy.log(err, 'error');
            }
          }
        };

        _proto60.stop = function stop() {
          // flush video stream
          if (this.videoStream) {
            this.videoStream.getVideoTracks().forEach(function (track) {
              track.stop();
            });
            this.videoStream.getAudioTracks().forEach(function (track) {
              track.stop();
            });
            this.videoStream = null;
          } // flush audio stream


          if (this.audioStream) {
            this.audioStream.getAudioTracks().forEach(function (track) {
              track.stop();
            });
            this.audioStream.getVideoTracks().forEach(function (track) {
              track.stop();
            });
            this.audioStream = null;
          } // flush output stream


          if (this.outputStream) {
            this.outputStream.getAudioTracks().forEach(function (track) {
              track.stop();
            });
            this.outputStream.getVideoTracks().forEach(function (track) {
              track.stop();
            });
            this.outputStream = null;
          } // remove preview video


          this.setPluginState({
            recordedVideo: null
          });
          this.captureActive = false;
        };

        _proto60.getVideo = function getVideo() {
          var mimeType = this.recordingChunks[0].type;
          var fileExtension = getFileTypeExtension(mimeType);

          if (!fileExtension) {
            return Promise.reject(new Error("Could not retrieve recording: Unsupported media type \"" + mimeType + "\""));
          }

          var name = "screencap-" + Date.now() + "." + fileExtension;
          var blob = new Blob(this.recordingChunks, {
            type: mimeType
          });
          var file = {
            source: this.id,
            name: name,
            data: new Blob([blob], {
              type: mimeType
            }),
            type: mimeType
          };
          return Promise.resolve(file);
        };

        _proto60.render = function render() {
          // get screen recorder state
          var recorderState = this.getPluginState();

          if (!recorderState.streamActive && !this.captureActive && !this.userDenied) {
            this.start();
          }

          return h(CaptureScreen, _extends({}, recorderState, {
            onStartRecording: this.startRecording,
            onStopRecording: this.stopRecording,
            onStop: this.stop,
            onSubmit: this.submit,
            i18n: this.i18n,
            stream: this.videoStream
          }));
        };

        return ScreenCapture;
      }(UIPlugin), _class.VERSION = "2.0.1", _temp);
    }, {
      "./CaptureScreen": 718,
      "./ScreenRecIcon": 720,
      "@uppy/core": 645,
      "@uppy/utils/lib/getFileTypeExtension": 768,
      "preact": 595
    }],
    725: [function (require, module, exports) {
      "use strict";

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      var throttle = require('lodash.throttle');

      var classNames = require('classnames');

      var prettierBytes = require('@transloadit/prettier-bytes');

      var prettyETA = require('@uppy/utils/lib/prettyETA');

      var _require109 = require('preact'),
          h = _require109.h;

      var statusBarStates = require('./StatusBarStates');

      function calculateProcessingProgress(files) {
        // Collect pre or postprocessing progress states.
        var progresses = [];
        Object.keys(files).forEach(function (fileID) {
          var progress = files[fileID].progress;

          if (progress.preprocess) {
            progresses.push(progress.preprocess);
          }

          if (progress.postprocess) {
            progresses.push(progress.postprocess);
          }
        }); // In the future we should probably do this differently. For now we'll take the
        // mode and message from the first file…

        var _progresses$ = progresses[0],
            mode = _progresses$.mode,
            message = _progresses$.message;
        var value = progresses.filter(isDeterminate).reduce(function (total, progress, index, all) {
          return total + progress.value / all.length;
        }, 0);

        function isDeterminate(progress) {
          return progress.mode === 'determinate';
        }

        return {
          mode: mode,
          message: message,
          value: value
        };
      }

      function togglePauseResume(props) {
        if (props.isAllComplete) return;

        if (!props.resumableUploads) {
          return props.uppy.cancelAll();
        }

        if (props.isAllPaused) {
          return props.uppy.resumeAll();
        }

        return props.uppy.pauseAll();
      }

      module.exports = function (props) {
        props = props || {};
        var _props = props,
            newFiles = _props.newFiles,
            allowNewUpload = _props.allowNewUpload,
            isUploadInProgress = _props.isUploadInProgress,
            isAllPaused = _props.isAllPaused,
            resumableUploads = _props.resumableUploads,
            error = _props.error,
            hideUploadButton = _props.hideUploadButton,
            hidePauseResumeButton = _props.hidePauseResumeButton,
            hideCancelButton = _props.hideCancelButton,
            hideRetryButton = _props.hideRetryButton,
            recoveredState = _props.recoveredState;
        var _props2 = props,
            uploadState = _props2.uploadState;
        var progressValue = props.totalProgress;
        var progressMode;
        var progressBarContent;

        if (uploadState === statusBarStates.STATE_PREPROCESSING || uploadState === statusBarStates.STATE_POSTPROCESSING) {
          var progress = calculateProcessingProgress(props.files);
          progressMode = progress.mode;

          if (progressMode === 'determinate') {
            progressValue = progress.value * 100;
          }

          progressBarContent = ProgressBarProcessing(progress);
        } else if (uploadState === statusBarStates.STATE_COMPLETE) {
          progressBarContent = ProgressBarComplete(props);
        } else if (uploadState === statusBarStates.STATE_UPLOADING) {
          if (!props.supportsUploadProgress) {
            progressMode = 'indeterminate';
            progressValue = null;
          }

          progressBarContent = ProgressBarUploading(props);
        } else if (uploadState === statusBarStates.STATE_ERROR) {
          progressValue = undefined;
          progressBarContent = ProgressBarError(props);
        }

        var width = typeof progressValue === 'number' ? progressValue : 100;
        var isHidden = uploadState === statusBarStates.STATE_WAITING && props.hideUploadButton || uploadState === statusBarStates.STATE_WAITING && !props.newFiles > 0 || uploadState === statusBarStates.STATE_COMPLETE && props.hideAfterFinish;
        var showUploadBtn = !error && newFiles && !isUploadInProgress && !isAllPaused && allowNewUpload && !hideUploadButton;

        if (recoveredState) {
          isHidden = false;
          showUploadBtn = true;
        }

        var showCancelBtn = !hideCancelButton && uploadState !== statusBarStates.STATE_WAITING && uploadState !== statusBarStates.STATE_COMPLETE;
        var showPauseResumeBtn = resumableUploads && !hidePauseResumeButton && uploadState === statusBarStates.STATE_UPLOADING;
        var showRetryBtn = error && !hideRetryButton;
        var showDoneBtn = props.doneButtonHandler && uploadState === statusBarStates.STATE_COMPLETE;
        var progressClassNames = "uppy-StatusBar-progress\n                           " + (progressMode ? "is-" + progressMode : '');
        var statusBarClassNames = classNames({
          'uppy-Root': props.isTargetDOMEl
        }, 'uppy-StatusBar', "is-" + uploadState, {
          'has-ghosts': props.isSomeGhost
        });
        return h("div", {
          className: statusBarClassNames,
          "aria-hidden": isHidden
        }, h("div", {
          className: progressClassNames,
          style: {
            width: width + "%"
          },
          role: "progressbar",
          "aria-label": width + "%",
          "aria-valuetext": width + "%",
          "aria-valuemin": "0",
          "aria-valuemax": "100",
          "aria-valuenow": progressValue
        }), progressBarContent, h("div", {
          className: "uppy-StatusBar-actions"
        }, showUploadBtn ? h(UploadBtn, _extends({}, props, {
          uploadState: uploadState
        })) : null, showRetryBtn ? h(RetryBtn, props) : null, showPauseResumeBtn ? h(PauseResumeButton, props) : null, showCancelBtn ? h(CancelBtn, props) : null, showDoneBtn ? h(DoneBtn, props) : null));
      };

      var UploadBtn = function UploadBtn(props) {
        var uploadBtnClassNames = classNames('uppy-u-reset', 'uppy-c-btn', 'uppy-StatusBar-actionBtn', 'uppy-StatusBar-actionBtn--upload', {
          'uppy-c-btn-primary': props.uploadState === statusBarStates.STATE_WAITING
        }, {
          'uppy-StatusBar-actionBtn--disabled': props.isSomeGhost
        });
        var uploadBtnText = props.newFiles && props.isUploadStarted && !props.recoveredState ? props.i18n('uploadXNewFiles', {
          smart_count: props.newFiles
        }) : props.i18n('uploadXFiles', {
          smart_count: props.newFiles
        });
        return h("button", {
          type: "button",
          className: uploadBtnClassNames,
          "aria-label": props.i18n('uploadXFiles', {
            smart_count: props.newFiles
          }),
          onClick: props.startUpload,
          disabled: props.isSomeGhost,
          "data-uppy-super-focusable": true
        }, uploadBtnText);
      };

      var RetryBtn = function RetryBtn(props) {
        return h("button", {
          type: "button",
          className: "uppy-u-reset uppy-c-btn uppy-StatusBar-actionBtn uppy-StatusBar-actionBtn--retry",
          "aria-label": props.i18n('retryUpload'),
          onClick: function onClick() {
            return props.uppy.retryAll();
          },
          "data-uppy-super-focusable": true
        }, h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-c-icon",
          width: "8",
          height: "10",
          viewBox: "0 0 8 10"
        }, h("path", {
          d: "M4 2.408a2.75 2.75 0 1 0 2.75 2.75.626.626 0 0 1 1.25.018v.023a4 4 0 1 1-4-4.041V.25a.25.25 0 0 1 .389-.208l2.299 1.533a.25.25 0 0 1 0 .416l-2.3 1.533A.25.25 0 0 1 4 3.316v-.908z"
        })), props.i18n('retry'));
      };

      var CancelBtn = function CancelBtn(props) {
        return h("button", {
          type: "button",
          className: "uppy-u-reset uppy-StatusBar-actionCircleBtn",
          title: props.i18n('cancel'),
          "aria-label": props.i18n('cancel'),
          onClick: function onClick() {
            return props.uppy.cancelAll();
          },
          "data-uppy-super-focusable": true
        }, h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-c-icon",
          width: "16",
          height: "16",
          viewBox: "0 0 16 16"
        }, h("g", {
          fill: "none",
          fillRule: "evenodd"
        }, h("circle", {
          fill: "#888",
          cx: "8",
          cy: "8",
          r: "8"
        }), h("path", {
          fill: "#FFF",
          d: "M9.283 8l2.567 2.567-1.283 1.283L8 9.283 5.433 11.85 4.15 10.567 6.717 8 4.15 5.433 5.433 4.15 8 6.717l2.567-2.567 1.283 1.283z"
        }))));
      };

      var PauseResumeButton = function PauseResumeButton(props) {
        var isAllPaused = props.isAllPaused,
            i18n = props.i18n;
        var title = isAllPaused ? i18n('resume') : i18n('pause');
        return h("button", {
          title: title,
          "aria-label": title,
          className: "uppy-u-reset uppy-StatusBar-actionCircleBtn",
          type: "button",
          onClick: function onClick() {
            return togglePauseResume(props);
          },
          "data-uppy-super-focusable": true
        }, isAllPaused ? h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-c-icon",
          width: "16",
          height: "16",
          viewBox: "0 0 16 16"
        }, h("g", {
          fill: "none",
          fillRule: "evenodd"
        }, h("circle", {
          fill: "#888",
          cx: "8",
          cy: "8",
          r: "8"
        }), h("path", {
          fill: "#FFF",
          d: "M6 4.25L11.5 8 6 11.75z"
        }))) : h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-c-icon",
          width: "16",
          height: "16",
          viewBox: "0 0 16 16"
        }, h("g", {
          fill: "none",
          fillRule: "evenodd"
        }, h("circle", {
          fill: "#888",
          cx: "8",
          cy: "8",
          r: "8"
        }), h("path", {
          d: "M5 4.5h2v7H5v-7zm4 0h2v7H9v-7z",
          fill: "#FFF"
        }))));
      };

      var DoneBtn = function DoneBtn(props) {
        var i18n = props.i18n;
        return h("button", {
          type: "button",
          className: "uppy-u-reset uppy-c-btn uppy-StatusBar-actionBtn uppy-StatusBar-actionBtn--done",
          onClick: props.doneButtonHandler,
          "data-uppy-super-focusable": true
        }, i18n('done'));
      };

      var LoadingSpinner = function LoadingSpinner() {
        return h("svg", {
          className: "uppy-StatusBar-spinner",
          "aria-hidden": "true",
          focusable: "false",
          width: "14",
          height: "14"
        }, h("path", {
          d: "M13.983 6.547c-.12-2.509-1.64-4.893-3.939-5.936-2.48-1.127-5.488-.656-7.556 1.094C.524 3.367-.398 6.048.162 8.562c.556 2.495 2.46 4.52 4.94 5.183 2.932.784 5.61-.602 7.256-3.015-1.493 1.993-3.745 3.309-6.298 2.868-2.514-.434-4.578-2.349-5.153-4.84a6.226 6.226 0 0 1 2.98-6.778C6.34.586 9.74 1.1 11.373 3.493c.407.596.693 1.282.842 1.988.127.598.073 1.197.161 1.794.078.525.543 1.257 1.15.864.525-.341.49-1.05.456-1.592-.007-.15.02.3 0 0",
          fillRule: "evenodd"
        }));
      };

      var ProgressBarProcessing = function ProgressBarProcessing(props) {
        var value = Math.round(props.value * 100);
        return h("div", {
          className: "uppy-StatusBar-content"
        }, h(LoadingSpinner, null), props.mode === 'determinate' ? value + "% \xB7 " : '', props.message);
      };

      var renderDot = function renderDot() {
        return " \xB7 ";
      };

      var ProgressDetails = function ProgressDetails(props) {
        var ifShowFilesUploadedOfTotal = props.numUploads > 1;
        return h("div", {
          className: "uppy-StatusBar-statusSecondary"
        }, ifShowFilesUploadedOfTotal && props.i18n('filesUploadedOfTotal', {
          complete: props.complete,
          smart_count: props.numUploads
        }), h("span", {
          className: "uppy-StatusBar-additionalInfo"
        }, ifShowFilesUploadedOfTotal && renderDot(), props.i18n('dataUploadedOfTotal', {
          complete: prettierBytes(props.totalUploadedSize),
          total: prettierBytes(props.totalSize)
        }), renderDot(), props.i18n('xTimeLeft', {
          time: prettyETA(props.totalETA)
        })));
      };

      var UnknownProgressDetails = function UnknownProgressDetails(props) {
        return h("div", {
          className: "uppy-StatusBar-statusSecondary"
        }, props.i18n('filesUploadedOfTotal', {
          complete: props.complete,
          smart_count: props.numUploads
        }));
      };

      var UploadNewlyAddedFiles = function UploadNewlyAddedFiles(props) {
        var uploadBtnClassNames = classNames('uppy-u-reset', 'uppy-c-btn', 'uppy-StatusBar-actionBtn', 'uppy-StatusBar-actionBtn--uploadNewlyAdded');
        return h("div", {
          className: "uppy-StatusBar-statusSecondary"
        }, h("div", {
          className: "uppy-StatusBar-statusSecondaryHint"
        }, props.i18n('xMoreFilesAdded', {
          smart_count: props.newFiles
        })), h("button", {
          type: "button",
          className: uploadBtnClassNames,
          "aria-label": props.i18n('uploadXFiles', {
            smart_count: props.newFiles
          }),
          onClick: props.startUpload
        }, props.i18n('upload')));
      };

      var ThrottledProgressDetails = throttle(ProgressDetails, 500, {
        leading: true,
        trailing: true
      });

      var ProgressBarUploading = function ProgressBarUploading(props) {
        if (!props.isUploadStarted || props.isAllComplete) {
          return null;
        }

        var title = props.isAllPaused ? props.i18n('paused') : props.i18n('uploading');
        var showUploadNewlyAddedFiles = props.newFiles && props.isUploadStarted;
        return h("div", {
          className: "uppy-StatusBar-content",
          "aria-label": title,
          title: title
        }, !props.isAllPaused ? h(LoadingSpinner, null) : null, h("div", {
          className: "uppy-StatusBar-status"
        }, h("div", {
          className: "uppy-StatusBar-statusPrimary"
        }, props.supportsUploadProgress ? title + ": " + props.totalProgress + "%" : title), !props.isAllPaused && !showUploadNewlyAddedFiles && props.showProgressDetails ? props.supportsUploadProgress ? h(ThrottledProgressDetails, props) : h(UnknownProgressDetails, props) : null, showUploadNewlyAddedFiles ? h(UploadNewlyAddedFiles, props) : null));
      };

      var ProgressBarComplete = function ProgressBarComplete(_ref36) {
        var i18n = _ref36.i18n;
        return h("div", {
          className: "uppy-StatusBar-content",
          role: "status",
          title: i18n('complete')
        }, h("div", {
          className: "uppy-StatusBar-status"
        }, h("div", {
          className: "uppy-StatusBar-statusPrimary"
        }, h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-StatusBar-statusIndicator uppy-c-icon",
          width: "15",
          height: "11",
          viewBox: "0 0 15 11"
        }, h("path", {
          d: "M.414 5.843L1.627 4.63l3.472 3.472L13.202 0l1.212 1.213L5.1 10.528z"
        })), i18n('complete'))));
      };

      var ProgressBarError = function ProgressBarError(_ref37) {
        var error = _ref37.error,
            i18n = _ref37.i18n;

        function displayErrorAlert() {
          var errorMessage = i18n('uploadFailed') + " \n\n " + error; // eslint-disable-next-line no-alert

          alert(errorMessage); // TODO: move to custom alert implementation
        }

        return h("div", {
          className: "uppy-StatusBar-content",
          role: "alert",
          title: i18n('uploadFailed')
        }, h("div", {
          className: "uppy-StatusBar-status"
        }, h("div", {
          className: "uppy-StatusBar-statusPrimary"
        }, h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-StatusBar-statusIndicator uppy-c-icon",
          width: "11",
          height: "11",
          viewBox: "0 0 11 11"
        }, h("path", {
          d: "M4.278 5.5L0 1.222 1.222 0 5.5 4.278 9.778 0 11 1.222 6.722 5.5 11 9.778 9.778 11 5.5 6.722 1.222 11 0 9.778z"
        })), i18n('uploadFailed'))), h("button", {
          className: "uppy-StatusBar-details",
          "aria-label": error,
          "data-microtip-position": "top-right",
          "data-microtip-size": "medium",
          onClick: displayErrorAlert,
          type: "button"
        }, "?"));
      };
    }, {
      "./StatusBarStates": 726,
      "@transloadit/prettier-bytes": 1,
      "@uppy/utils/lib/prettyETA": 780,
      "classnames": 7,
      "lodash.throttle": 587,
      "preact": 595
    }],
    726: [function (require, module, exports) {
      "use strict";

      module.exports = {
        STATE_ERROR: 'error',
        STATE_WAITING: 'waiting',
        STATE_PREPROCESSING: 'preprocessing',
        STATE_UPLOADING: 'uploading',
        STATE_POSTPROCESSING: 'postprocessing',
        STATE_COMPLETE: 'complete'
      };
    }, {}],
    727: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var _require110 = require('@uppy/core'),
          UIPlugin = _require110.UIPlugin;

      var getSpeed = require('@uppy/utils/lib/getSpeed');

      var getBytesRemaining = require('@uppy/utils/lib/getBytesRemaining');

      var getTextDirection = require('@uppy/utils/lib/getTextDirection');

      var statusBarStates = require('./StatusBarStates');

      var StatusBarUI = require('./StatusBar');
      /**
       * StatusBar: renders a status bar with upload/pause/resume/cancel/retry buttons,
       * progress percentage and time remaining.
       */


      module.exports = (_temp = _class = /*#__PURE__*/function (_UIPlugin15) {
        _inheritsLoose(StatusBar, _UIPlugin15);

        function StatusBar(uppy, opts) {
          var _this173;

          _this173 = _UIPlugin15.call(this, uppy, opts) || this;

          _this173.startUpload = function () {
            var _this173$uppy$getStat = _this173.uppy.getState(),
                recoveredState = _this173$uppy$getStat.recoveredState;

            if (recoveredState) {
              _this173.uppy.emit('restore-confirmed');

              return;
            }

            return _this173.uppy.upload().catch(function () {// Error logged in Core
            });
          };

          _this173.id = _this173.opts.id || 'StatusBar';
          _this173.title = 'StatusBar';
          _this173.type = 'progressindicator';
          _this173.defaultLocale = {
            strings: {
              uploading: 'Uploading',
              upload: 'Upload',
              complete: 'Complete',
              uploadFailed: 'Upload failed',
              paused: 'Paused',
              retry: 'Retry',
              retryUpload: 'Retry upload',
              cancel: 'Cancel',
              pause: 'Pause',
              resume: 'Resume',
              done: 'Done',
              filesUploadedOfTotal: {
                0: '%{complete} of %{smart_count} file uploaded',
                1: '%{complete} of %{smart_count} files uploaded'
              },
              dataUploadedOfTotal: '%{complete} of %{total}',
              xTimeLeft: '%{time} left',
              uploadXFiles: {
                0: 'Upload %{smart_count} file',
                1: 'Upload %{smart_count} files'
              },
              uploadXNewFiles: {
                0: 'Upload +%{smart_count} file',
                1: 'Upload +%{smart_count} files'
              },
              xMoreFilesAdded: {
                0: '%{smart_count} more file added',
                1: '%{smart_count} more files added'
              }
            }
          }; // set default options

          var defaultOptions = {
            target: 'body',
            hideUploadButton: false,
            hideRetryButton: false,
            hidePauseResumeButton: false,
            hideCancelButton: false,
            showProgressDetails: false,
            hideAfterFinish: true,
            doneButtonHandler: null
          };
          _this173.opts = Object.assign({}, defaultOptions, opts);

          _this173.i18nInit();

          _this173.render = _this173.render.bind(_assertThisInitialized2(_this173));
          _this173.install = _this173.install.bind(_assertThisInitialized2(_this173));
          return _this173;
        }

        var _proto61 = StatusBar.prototype;

        _proto61.getTotalSpeed = function getTotalSpeed(files) {
          var totalSpeed = 0;
          files.forEach(function (file) {
            totalSpeed += getSpeed(file.progress);
          });
          return totalSpeed;
        };

        _proto61.getTotalETA = function getTotalETA(files) {
          var totalSpeed = this.getTotalSpeed(files);

          if (totalSpeed === 0) {
            return 0;
          }

          var totalBytesRemaining = files.reduce(function (total, file) {
            return total + getBytesRemaining(file.progress);
          }, 0);
          return Math.round(totalBytesRemaining / totalSpeed * 10) / 10;
        };

        _proto61.getUploadingState = function getUploadingState(isAllErrored, isAllComplete, recoveredState, files) {
          if (isAllErrored) {
            return statusBarStates.STATE_ERROR;
          }

          if (isAllComplete) {
            return statusBarStates.STATE_COMPLETE;
          }

          if (recoveredState) {
            return statusBarStates.STATE_WAITING;
          }

          var state = statusBarStates.STATE_WAITING;
          var fileIDs = Object.keys(files);

          for (var i = 0; i < fileIDs.length; i++) {
            var progress = files[fileIDs[i]].progress; // If ANY files are being uploaded right now, show the uploading state.

            if (progress.uploadStarted && !progress.uploadComplete) {
              return statusBarStates.STATE_UPLOADING;
            } // If files are being preprocessed AND postprocessed at this time, we show the
            // preprocess state. If any files are being uploaded we show uploading.


            if (progress.preprocess && state !== statusBarStates.STATE_UPLOADING) {
              state = statusBarStates.STATE_PREPROCESSING;
            } // If NO files are being preprocessed or uploaded right now, but some files are
            // being postprocessed, show the postprocess state.


            if (progress.postprocess && state !== statusBarStates.STATE_UPLOADING && state !== statusBarStates.STATE_PREPROCESSING) {
              state = statusBarStates.STATE_POSTPROCESSING;
            }
          }

          return state;
        };

        _proto61.render = function render(state) {
          var capabilities = state.capabilities,
              files = state.files,
              allowNewUpload = state.allowNewUpload,
              totalProgress = state.totalProgress,
              error = state.error,
              recoveredState = state.recoveredState;

          var _this$uppy$getObjectO = this.uppy.getObjectOfFilesPerState(),
              newFiles = _this$uppy$getObjectO.newFiles,
              startedFiles = _this$uppy$getObjectO.startedFiles,
              completeFiles = _this$uppy$getObjectO.completeFiles,
              inProgressNotPausedFiles = _this$uppy$getObjectO.inProgressNotPausedFiles,
              isUploadStarted = _this$uppy$getObjectO.isUploadStarted,
              isAllComplete = _this$uppy$getObjectO.isAllComplete,
              isAllErrored = _this$uppy$getObjectO.isAllErrored,
              isAllPaused = _this$uppy$getObjectO.isAllPaused,
              isUploadInProgress = _this$uppy$getObjectO.isUploadInProgress,
              isSomeGhost = _this$uppy$getObjectO.isSomeGhost; // If some state was recovered, we want to show Upload button/counter
          // for all the files, because in this case it’s not an Upload button,
          // but “Confirm Restore Button”


          var newFilesOrRecovered = recoveredState ? Object.values(files) : newFiles;
          var totalETA = this.getTotalETA(inProgressNotPausedFiles);
          var resumableUploads = !!capabilities.resumableUploads;
          var supportsUploadProgress = capabilities.uploadProgress !== false;
          var totalSize = 0;
          var totalUploadedSize = 0;
          startedFiles.forEach(function (file) {
            totalSize += file.progress.bytesTotal || 0;
            totalUploadedSize += file.progress.bytesUploaded || 0;
          });
          return StatusBarUI({
            error: error,
            uploadState: this.getUploadingState(isAllErrored, isAllComplete, recoveredState, state.files || {}),
            allowNewUpload: allowNewUpload,
            totalProgress: totalProgress,
            totalSize: totalSize,
            totalUploadedSize: totalUploadedSize,
            isAllComplete: isAllComplete,
            isAllPaused: isAllPaused,
            isAllErrored: isAllErrored,
            isUploadStarted: isUploadStarted,
            isUploadInProgress: isUploadInProgress,
            isSomeGhost: isSomeGhost,
            recoveredState: recoveredState,
            complete: completeFiles.length,
            newFiles: newFilesOrRecovered.length,
            numUploads: startedFiles.length,
            totalETA: totalETA,
            files: files,
            i18n: this.i18n,
            uppy: this.uppy,
            startUpload: this.startUpload,
            doneButtonHandler: this.opts.doneButtonHandler,
            resumableUploads: resumableUploads,
            supportsUploadProgress: supportsUploadProgress,
            showProgressDetails: this.opts.showProgressDetails,
            hideUploadButton: this.opts.hideUploadButton,
            hideRetryButton: this.opts.hideRetryButton,
            hidePauseResumeButton: this.opts.hidePauseResumeButton,
            hideCancelButton: this.opts.hideCancelButton,
            hideAfterFinish: this.opts.hideAfterFinish,
            isTargetDOMEl: this.isTargetDOMEl
          });
        };

        _proto61.onMount = function onMount() {
          // Set the text direction if the page has not defined one.
          var element = this.el;
          var direction = getTextDirection(element);

          if (!direction) {
            element.dir = 'ltr';
          }
        };

        _proto61.install = function install() {
          var target = this.opts.target;

          if (target) {
            this.mount(target, this);
          }
        };

        _proto61.uninstall = function uninstall() {
          this.unmount();
        };

        return StatusBar;
      }(UIPlugin), _class.VERSION = "2.0.1", _temp);
    }, {
      "./StatusBar": 725,
      "./StatusBarStates": 726,
      "@uppy/core": 645,
      "@uppy/utils/lib/getBytesRemaining": 760,
      "@uppy/utils/lib/getSpeed": 770,
      "@uppy/utils/lib/getTextDirection": 771
    }],
    728: [function (require, module, exports) {
      "use strict";

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }

      var _publish = /*#__PURE__*/_classPrivateFieldLooseKey("publish");
      /**
       * Default store that keeps state in a simple object.
       */


      var DefaultStore = /*#__PURE__*/function () {
        function DefaultStore() {
          Object.defineProperty(this, _publish, {
            value: _publish2
          });
          this.state = {};
          this.callbacks = [];
        }

        var _proto62 = DefaultStore.prototype;

        _proto62.getState = function getState() {
          return this.state;
        };

        _proto62.setState = function setState(patch) {
          var prevState = Object.assign({}, this.state);
          var nextState = Object.assign({}, this.state, patch);
          this.state = nextState;

          _classPrivateFieldLooseBase(this, _publish)[_publish](prevState, nextState, patch);
        };

        _proto62.subscribe = function subscribe(listener) {
          var _this174 = this;

          this.callbacks.push(listener);
          return function () {
            // Remove the listener.
            _this174.callbacks.splice(_this174.callbacks.indexOf(listener), 1);
          };
        };

        return DefaultStore;
      }();

      function _publish2() {
        for (var _len21 = arguments.length, args = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {
          args[_key21] = arguments[_key21];
        }

        this.callbacks.forEach(function (listener) {
          listener.apply(void 0, args);
        });
      }

      DefaultStore.VERSION = "2.0.0";

      module.exports = function defaultStore() {
        return new DefaultStore();
      };
    }, {}],
    729: [function (require, module, exports) {
      "use strict";

      var _Symbol$for;

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }

      var _require111 = require('nanoid'),
          nanoid = _require111.nanoid; // Redux action name.


      var STATE_UPDATE = 'uppy/STATE_UPDATE'; // Pluck Uppy state from the Redux store in the default location.

      var defaultSelector = function defaultSelector(id) {
        return function (state) {
          return state.uppy[id];
        };
      };
      /**
       * Redux store.
       *
       * @param {object} opts.store - The Redux store to use.
       * @param {string} opts.id - This store instance's ID. Defaults to a random string.
       *    If you need to access Uppy state through Redux, eg. to render custom UI, set this to something constant.
       * @param {Function} opts.selector - Function, `(state) => uppyState`, to pluck state from the Redux store.
       *    Defaults to retrieving `state.uppy[opts.id]`. Override if you placed Uppy state elsewhere in the Redux store.
       */


      var _id = /*#__PURE__*/_classPrivateFieldLooseKey("id");

      var _selector = /*#__PURE__*/_classPrivateFieldLooseKey("selector");

      var _store = /*#__PURE__*/_classPrivateFieldLooseKey("store");

      _Symbol$for = Symbol.for('uppy test: get id');

      var ReduxStore = /*#__PURE__*/function () {
        function ReduxStore(opts) {
          Object.defineProperty(this, _id, {
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, _selector, {
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, _store, {
            writable: true,
            value: void 0
          });
          _classPrivateFieldLooseBase(this, _store)[_store] = opts.store;
          _classPrivateFieldLooseBase(this, _id)[_id] = opts.id || nanoid();
          _classPrivateFieldLooseBase(this, _selector)[_selector] = opts.selector || defaultSelector(_classPrivateFieldLooseBase(this, _id)[_id]); // Calling `setState` to dispatch an action to the Redux store.
          // The intent is to make sure that the reducer has run once.

          this.setState({});
        }

        var _proto63 = ReduxStore.prototype;

        _proto63.setState = function setState(patch) {
          _classPrivateFieldLooseBase(this, _store)[_store].dispatch({
            type: STATE_UPDATE,
            id: _classPrivateFieldLooseBase(this, _id)[_id],
            payload: patch
          });
        };

        _proto63.getState = function getState() {
          return _classPrivateFieldLooseBase(this, _selector)[_selector](_classPrivateFieldLooseBase(this, _store)[_store].getState());
        };

        _proto63.subscribe = function subscribe(cb) {
          var _this175 = this;

          var prevState = this.getState();
          return _classPrivateFieldLooseBase(this, _store)[_store].subscribe(function () {
            var nextState = _this175.getState();

            if (prevState !== nextState) {
              var patch = getPatch(prevState, nextState);
              cb(prevState, nextState, patch);
              prevState = nextState;
            }
          });
        };

        _proto63[_Symbol$for] = function () {
          return _classPrivateFieldLooseBase(this, _id)[_id];
        };

        return ReduxStore;
      }();

      ReduxStore.VERSION = "2.0.0";

      function getPatch(prev, next) {
        var nextKeys = Object.keys(next);
        var patch = {};
        nextKeys.forEach(function (k) {
          if (prev[k] !== next[k]) patch[k] = next[k];
        });
        return patch;
      }

      function reducer(state, action) {
        if (state === void 0) {
          state = {};
        }

        if (action.type === STATE_UPDATE) {
          var _Object$assign11;

          var newState = Object.assign({}, state[action.id], action.payload);
          return Object.assign({}, state, (_Object$assign11 = {}, _Object$assign11[action.id] = newState, _Object$assign11));
        }

        return state;
      }

      function middleware() {
        // Do nothing, at the moment.
        return function () {
          return function (next) {
            return function (action) {
              next(action);
            };
          };
        };
      }

      module.exports = ReduxStore;
      module.exports.ReduxStore = ReduxStore;
      module.exports.STATE_UPDATE = STATE_UPDATE;
      module.exports.reducer = reducer;
      module.exports.middleware = middleware;
    }, {
      "nanoid": 730
    }],
    730: [function (require, module, exports) {
      (function (process) {
        (function () {
          // This file replaces `index.js` in bundlers like webpack or Rollup,
          // according to `browser` config in `package.json`.
          var _require112 = require('./url-alphabet/index.cjs'),
              urlAlphabet = _require112.urlAlphabet;

          if (process.env.NODE_ENV !== 'production') {
            // All bundlers will remove this block in the production bundle.
            if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative' && typeof crypto === 'undefined') {
              throw new Error('React Native does not have a built-in secure random generator. ' + 'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' + 'For secure IDs, import `react-native-get-random-values` ' + 'before Nano ID.');
            }

            if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {
              throw new Error('Import file with `if (!window.crypto) window.crypto = window.msCrypto`' + ' before importing Nano ID to fix IE 11 support');
            }

            if (typeof crypto === 'undefined') {
              throw new Error('Your browser does not have secure random generator. ' + 'If you don’t need unpredictable IDs, you can use nanoid/non-secure.');
            }
          }

          var random = function random(bytes) {
            return crypto.getRandomValues(new Uint8Array(bytes));
          };

          var customRandom = function customRandom(alphabet, size, getRandom) {
            // First, a bitmask is necessary to generate the ID. The bitmask makes bytes
            // values closer to the alphabet size. The bitmask calculates the closest
            // `2^31 - 1` number, which exceeds the alphabet size.
            // For example, the bitmask for the alphabet size 30 is 31 (00011111).
            // `Math.clz32` is not used, because it is not available in browsers.
            var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1; // Though, the bitmask solution is not perfect since the bytes exceeding
            // the alphabet size are refused. Therefore, to reliably generate the ID,
            // the random bytes redundancy has to be satisfied.
            // Note: every hardware random generator call is performance expensive,
            // because the system call for entropy collection takes a lot of time.
            // So, to avoid additional system calls, extra bytes are requested in advance.
            // Next, a step determines how many random bytes to generate.
            // The number of random bytes gets decided upon the ID size, mask,
            // alphabet size, and magic number 1.6 (using 1.6 peaks at performance
            // according to benchmarks).
            // `-~f => Math.ceil(f)` if f is a float
            // `-~i => i + 1` if i is an integer

            var step = -~(1.6 * mask * size / alphabet.length);
            return function () {
              var id = '';

              while (true) {
                var bytes = getRandom(step); // A compact alternative for `for (var i = 0; i < step; i++)`.

                var j = step;

                while (j--) {
                  // Adding `|| ''` refuses a random byte that exceeds the alphabet size.
                  id += alphabet[bytes[j] & mask] || '';
                  if (id.length === size) return id;
                }
              }
            };
          };

          var customAlphabet = function customAlphabet(alphabet, size) {
            return customRandom(alphabet, size, random);
          };

          var nanoid = function nanoid(size) {
            if (size === void 0) {
              size = 21;
            }

            var id = '';
            var bytes = crypto.getRandomValues(new Uint8Array(size)); // A compact alternative for `for (var i = 0; i < step; i++)`.

            while (size--) {
              // It is incorrect to use bytes exceeding the alphabet size.
              // The following mask reduces the random byte in the 0-255 value
              // range to the 0-63 value range. Therefore, adding hacks, such
              // as empty string fallback or magic numbers, is unneccessary because
              // the bitmask trims bytes down to the alphabet size.
              var byte = bytes[size] & 63;

              if (byte < 36) {
                // `0-9a-z`
                id += byte.toString(36);
              } else if (byte < 62) {
                // `A-Z`
                id += (byte - 26).toString(36).toUpperCase();
              } else if (byte < 63) {
                id += '_';
              } else {
                id += '-';
              }
            }

            return id;
          };

          module.exports = {
            nanoid: nanoid,
            customAlphabet: customAlphabet,
            customRandom: customRandom,
            urlAlphabet: urlAlphabet,
            random: random
          };
        }).call(this);
      }).call(this, require('_process'));
    }, {
      "./url-alphabet/index.cjs": 731,
      "_process": 596
    }],
    731: [function (require, module, exports) {
      arguments[4][633][0].apply(exports, arguments);
    }, {
      "dup": 633
    }],
    732: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var _require113 = require('@uppy/core'),
          UIPlugin = _require113.UIPlugin;

      var dataURItoBlob = require('@uppy/utils/lib/dataURItoBlob');

      var isObjectURL = require('@uppy/utils/lib/isObjectURL');

      var isPreviewSupported = require('@uppy/utils/lib/isPreviewSupported');

      var exifr = require('exifr/dist/mini.legacy.umd.js');
      /**
       * The Thumbnail Generator plugin
       */


      module.exports = (_temp = _class = /*#__PURE__*/function (_UIPlugin16) {
        _inheritsLoose(ThumbnailGenerator, _UIPlugin16);

        function ThumbnailGenerator(uppy, opts) {
          var _this176;

          _this176 = _UIPlugin16.call(this, uppy, opts) || this;

          _this176.onFileAdded = function (file) {
            if (!file.preview && file.data && isPreviewSupported(file.type) && !file.isRemote) {
              _this176.addToQueue(file.id);
            }
          };

          _this176.onCancelRequest = function (file) {
            var index = _this176.queue.indexOf(file.id);

            if (index !== -1) {
              _this176.queue.splice(index, 1);
            }
          };

          _this176.onFileRemoved = function (file) {
            var index = _this176.queue.indexOf(file.id);

            if (index !== -1) {
              _this176.queue.splice(index, 1);
            } // Clean up object URLs.


            if (file.preview && isObjectURL(file.preview)) {
              URL.revokeObjectURL(file.preview);
            }
          };

          _this176.onRestored = function () {
            var restoredFiles = _this176.uppy.getFiles().filter(function (file) {
              return file.isRestored;
            });

            restoredFiles.forEach(function (file) {
              // Only add blob URLs; they are likely invalid after being restored.
              if (!file.preview || isObjectURL(file.preview)) {
                _this176.addToQueue(file.id);
              }
            });
          };

          _this176.waitUntilAllProcessed = function (fileIDs) {
            fileIDs.forEach(function (fileID) {
              var file = _this176.uppy.getFile(fileID);

              _this176.uppy.emit('preprocess-progress', file, {
                mode: 'indeterminate',
                message: _this176.i18n('generatingThumbnails')
              });
            });

            var emitPreprocessCompleteForAll = function emitPreprocessCompleteForAll() {
              fileIDs.forEach(function (fileID) {
                var file = _this176.uppy.getFile(fileID);

                _this176.uppy.emit('preprocess-complete', file);
              });
            };

            return new Promise(function (resolve) {
              if (_this176.queueProcessing) {
                _this176.uppy.once('thumbnail:all-generated', function () {
                  emitPreprocessCompleteForAll();
                  resolve();
                });
              } else {
                emitPreprocessCompleteForAll();
                resolve();
              }
            });
          };

          _this176.type = 'modifier';
          _this176.id = _this176.opts.id || 'ThumbnailGenerator';
          _this176.title = 'Thumbnail Generator';
          _this176.queue = [];
          _this176.queueProcessing = false;
          _this176.defaultThumbnailDimension = 200;
          _this176.thumbnailType = _this176.opts.thumbnailType || 'image/jpeg';
          _this176.defaultLocale = {
            strings: {
              generatingThumbnails: 'Generating thumbnails...'
            }
          };
          var defaultOptions = {
            thumbnailWidth: null,
            thumbnailHeight: null,
            waitForThumbnailsBeforeUpload: false,
            lazy: false
          };
          _this176.opts = Object.assign({}, defaultOptions, opts);

          _this176.i18nInit();

          if (_this176.opts.lazy && _this176.opts.waitForThumbnailsBeforeUpload) {
            throw new Error('ThumbnailGenerator: The `lazy` and `waitForThumbnailsBeforeUpload` options are mutually exclusive. Please ensure at most one of them is set to `true`.');
          }

          return _this176;
        }
        /**
         * Create a thumbnail for the given Uppy file object.
         *
         * @param {{data: Blob}} file
         * @param {number} targetWidth
         * @param {number} targetHeight
         * @returns {Promise}
         */


        var _proto64 = ThumbnailGenerator.prototype;

        _proto64.createThumbnail = function createThumbnail(file, targetWidth, targetHeight) {
          var _this177 = this;

          var originalUrl = URL.createObjectURL(file.data);
          var onload = new Promise(function (resolve, reject) {
            var image = new Image();
            image.src = originalUrl;
            image.addEventListener('load', function () {
              URL.revokeObjectURL(originalUrl);
              resolve(image);
            });
            image.addEventListener('error', function (event) {
              URL.revokeObjectURL(originalUrl);
              reject(event.error || new Error('Could not create thumbnail'));
            });
          });
          var orientationPromise = exifr.rotation(file.data).catch(function () {
            return 1;
          });
          return Promise.all([onload, orientationPromise]).then(function (_ref38) {
            var image = _ref38[0],
                orientation = _ref38[1];

            var dimensions = _this177.getProportionalDimensions(image, targetWidth, targetHeight, orientation.deg);

            var rotatedImage = _this177.rotateImage(image, orientation);

            var resizedImage = _this177.resizeImage(rotatedImage, dimensions.width, dimensions.height);

            return _this177.canvasToBlob(resizedImage, _this177.thumbnailType, 80);
          }).then(function (blob) {
            return URL.createObjectURL(blob);
          });
        }
        /**
         * Get the new calculated dimensions for the given image and a target width
         * or height. If both width and height are given, only width is taken into
         * account. If neither width nor height are given, the default dimension
         * is used.
         */
        ;

        _proto64.getProportionalDimensions = function getProportionalDimensions(img, width, height, rotation) {
          var aspect = img.width / img.height;

          if (rotation === 90 || rotation === 270) {
            aspect = img.height / img.width;
          }

          if (width != null) {
            return {
              width: width,
              height: Math.round(width / aspect)
            };
          }

          if (height != null) {
            return {
              width: Math.round(height * aspect),
              height: height
            };
          }

          return {
            width: this.defaultThumbnailDimension,
            height: Math.round(this.defaultThumbnailDimension / aspect)
          };
        }
        /**
         * Make sure the image doesn’t exceed browser/device canvas limits.
         * For ios with 256 RAM and ie
         */
        ;

        _proto64.protect = function protect(image) {
          // https://stackoverflow.com/questions/6081483/maximum-size-of-a-canvas-element
          var ratio = image.width / image.height;
          var maxSquare = 5000000; // ios max canvas square

          var maxSize = 4096; // ie max canvas dimensions

          var maxW = Math.floor(Math.sqrt(maxSquare * ratio));
          var maxH = Math.floor(maxSquare / Math.sqrt(maxSquare * ratio));

          if (maxW > maxSize) {
            maxW = maxSize;
            maxH = Math.round(maxW / ratio);
          }

          if (maxH > maxSize) {
            maxH = maxSize;
            maxW = Math.round(ratio * maxH);
          }

          if (image.width > maxW) {
            var canvas = document.createElement('canvas');
            canvas.width = maxW;
            canvas.height = maxH;
            canvas.getContext('2d').drawImage(image, 0, 0, maxW, maxH);
            image = canvas;
          }

          return image;
        }
        /**
         * Resize an image to the target `width` and `height`.
         *
         * Returns a Canvas with the resized image on it.
         */
        ;

        _proto64.resizeImage = function resizeImage(image, targetWidth, targetHeight) {
          // Resizing in steps refactored to use a solution from
          // https://blog.uploadcare.com/image-resize-in-browsers-is-broken-e38eed08df01
          image = this.protect(image);
          var steps = Math.ceil(Math.log2(image.width / targetWidth));

          if (steps < 1) {
            steps = 1;
          }

          var sW = targetWidth * Math.pow(2, steps - 1);
          var sH = targetHeight * Math.pow(2, steps - 1);
          var x = 2;

          while (steps--) {
            var canvas = document.createElement('canvas');
            canvas.width = sW;
            canvas.height = sH;
            canvas.getContext('2d').drawImage(image, 0, 0, sW, sH);
            image = canvas;
            sW = Math.round(sW / x);
            sH = Math.round(sH / x);
          }

          return image;
        };

        _proto64.rotateImage = function rotateImage(image, translate) {
          var w = image.width;
          var h = image.height;

          if (translate.deg === 90 || translate.deg === 270) {
            w = image.height;
            h = image.width;
          }

          var canvas = document.createElement('canvas');
          canvas.width = w;
          canvas.height = h;
          var context = canvas.getContext('2d');
          context.translate(w / 2, h / 2);

          if (translate.canvas) {
            context.rotate(translate.rad);
            context.scale(translate.scaleX, translate.scaleY);
          }

          context.drawImage(image, -image.width / 2, -image.height / 2, image.width, image.height);
          return canvas;
        }
        /**
         * Save a <canvas> element's content to a Blob object.
         *
         * @param {HTMLCanvasElement} canvas
         * @returns {Promise}
         */
        ;

        _proto64.canvasToBlob = function canvasToBlob(canvas, type, quality) {
          try {
            canvas.getContext('2d').getImageData(0, 0, 1, 1);
          } catch (err) {
            if (err.code === 18) {
              return Promise.reject(new Error('cannot read image, probably an svg with external resources'));
            }
          }

          if (canvas.toBlob) {
            return new Promise(function (resolve) {
              canvas.toBlob(resolve, type, quality);
            }).then(function (blob) {
              if (blob === null) {
                throw new Error('cannot read image, probably an svg with external resources');
              }

              return blob;
            });
          }

          return Promise.resolve().then(function () {
            return dataURItoBlob(canvas.toDataURL(type, quality), {});
          }).then(function (blob) {
            if (blob === null) {
              throw new Error('could not extract blob, probably an old browser');
            }

            return blob;
          });
        }
        /**
         * Set the preview URL for a file.
         */
        ;

        _proto64.setPreviewURL = function setPreviewURL(fileID, preview) {
          this.uppy.setFileState(fileID, {
            preview: preview
          });
        };

        _proto64.addToQueue = function addToQueue(item) {
          this.queue.push(item);

          if (this.queueProcessing === false) {
            this.processQueue();
          }
        };

        _proto64.processQueue = function processQueue() {
          var _this178 = this;

          this.queueProcessing = true;

          if (this.queue.length > 0) {
            var current = this.uppy.getFile(this.queue.shift());

            if (!current) {
              this.uppy.log('[ThumbnailGenerator] file was removed before a thumbnail could be generated, but not removed from the queue. This is probably a bug', 'error');
              return;
            }

            return this.requestThumbnail(current).catch(function () {}) // eslint-disable-line node/handle-callback-err
            .then(function () {
              return _this178.processQueue();
            });
          }

          this.queueProcessing = false;
          this.uppy.log('[ThumbnailGenerator] Emptied thumbnail queue');
          this.uppy.emit('thumbnail:all-generated');
        };

        _proto64.requestThumbnail = function requestThumbnail(file) {
          var _this179 = this;

          if (isPreviewSupported(file.type) && !file.isRemote) {
            return this.createThumbnail(file, this.opts.thumbnailWidth, this.opts.thumbnailHeight).then(function (preview) {
              _this179.setPreviewURL(file.id, preview);

              _this179.uppy.log("[ThumbnailGenerator] Generated thumbnail for " + file.id);

              _this179.uppy.emit('thumbnail:generated', _this179.uppy.getFile(file.id), preview);
            }).catch(function (err) {
              _this179.uppy.log("[ThumbnailGenerator] Failed thumbnail for " + file.id + ":", 'warning');

              _this179.uppy.log(err, 'warning');

              _this179.uppy.emit('thumbnail:error', _this179.uppy.getFile(file.id), err);
            });
          }

          return Promise.resolve();
        };

        _proto64.install = function install() {
          this.uppy.on('file-removed', this.onFileRemoved);

          if (this.opts.lazy) {
            this.uppy.on('thumbnail:request', this.onFileAdded);
            this.uppy.on('thumbnail:cancel', this.onCancelRequest);
          } else {
            this.uppy.on('file-added', this.onFileAdded);
            this.uppy.on('restored', this.onRestored);
          }

          if (this.opts.waitForThumbnailsBeforeUpload) {
            this.uppy.addPreProcessor(this.waitUntilAllProcessed);
          }
        };

        _proto64.uninstall = function uninstall() {
          this.uppy.off('file-removed', this.onFileRemoved);

          if (this.opts.lazy) {
            this.uppy.off('thumbnail:request', this.onFileAdded);
            this.uppy.off('thumbnail:cancel', this.onCancelRequest);
          } else {
            this.uppy.off('file-added', this.onFileAdded);
            this.uppy.off('restored', this.onRestored);
          }

          if (this.opts.waitForThumbnailsBeforeUpload) {
            this.uppy.removePreProcessor(this.waitUntilAllProcessed);
          }
        };

        return ThumbnailGenerator;
      }(UIPlugin), _class.VERSION = "2.0.2", _temp);
    }, {
      "@uppy/core": 645,
      "@uppy/utils/lib/dataURItoBlob": 753,
      "@uppy/utils/lib/isObjectURL": 777,
      "@uppy/utils/lib/isPreviewSupported": 778,
      "exifr/dist/mini.legacy.umd.js": 580
    }],
    733: [function (require, module, exports) {
      "use strict";

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }

      var Emitter = require('component-emitter');

      var has = require('@uppy/utils/lib/hasProperty');

      var NetworkError = require('@uppy/utils/lib/NetworkError');

      var fetchWithNetworkError = require('@uppy/utils/lib/fetchWithNetworkError');

      var parseUrl = require('./parseUrl'); // Lazy load socket.io to avoid a console error
      // in IE 10 when the Transloadit plugin is not used.
      // (The console.error call comes from `buffer`. I
      // think we actually don't use that part of socket.io
      // at all…)


      var socketIo;

      function requireSocketIo() {
        var _socketIo; // eslint-disable-next-line global-require


        (_socketIo = socketIo) != null ? _socketIo : socketIo = require('socket.io-client');
        return socketIo;
      }

      var ASSEMBLY_UPLOADING = 'ASSEMBLY_UPLOADING';
      var ASSEMBLY_EXECUTING = 'ASSEMBLY_EXECUTING';
      var ASSEMBLY_COMPLETED = 'ASSEMBLY_COMPLETED';
      var statusOrder = [ASSEMBLY_UPLOADING, ASSEMBLY_EXECUTING, ASSEMBLY_COMPLETED];
      /**
       * Check that an assembly status is equal to or larger than some desired status.
       * It checks for things that are larger so that a comparison like this works,
       * when the old assembly status is UPLOADING but the new is FINISHED:
       *
       * !isStatus(oldStatus, ASSEMBLY_EXECUTING) && isStatus(newState, ASSEMBLY_EXECUTING)
       *
       * …so that we can emit the 'executing' event even if the execution step was so
       * fast that we missed it.
       */

      function isStatus(status, test) {
        return statusOrder.indexOf(status) >= statusOrder.indexOf(test);
      }

      var _onFinished = /*#__PURE__*/_classPrivateFieldLooseKey("onFinished");

      var _connectSocket = /*#__PURE__*/_classPrivateFieldLooseKey("connectSocket");

      var _onError = /*#__PURE__*/_classPrivateFieldLooseKey("onError");

      var _beginPolling = /*#__PURE__*/_classPrivateFieldLooseKey("beginPolling");

      var _fetchStatus = /*#__PURE__*/_classPrivateFieldLooseKey("fetchStatus");

      var _diffStatus = /*#__PURE__*/_classPrivateFieldLooseKey("diffStatus");

      var TransloaditAssembly = /*#__PURE__*/function (_Emitter7) {
        _inheritsLoose(TransloaditAssembly, _Emitter7);

        function TransloaditAssembly(assembly) {
          var _this180;

          _this180 = _Emitter7.call(this) || this; // The current assembly status.

          Object.defineProperty(_assertThisInitialized2(_this180), _diffStatus, {
            value: _diffStatus2
          });
          Object.defineProperty(_assertThisInitialized2(_this180), _fetchStatus, {
            value: _fetchStatus2
          });
          Object.defineProperty(_assertThisInitialized2(_this180), _beginPolling, {
            value: _beginPolling2
          });
          Object.defineProperty(_assertThisInitialized2(_this180), _onError, {
            value: _onError2
          });
          Object.defineProperty(_assertThisInitialized2(_this180), _connectSocket, {
            value: _connectSocket2
          });
          Object.defineProperty(_assertThisInitialized2(_this180), _onFinished, {
            value: _onFinished2
          });
          _this180.status = assembly; // The socket.io connection.

          _this180.socket = null; // The interval timer for full status updates.

          _this180.pollInterval = null; // Whether this assembly has been closed (finished or errored)

          _this180.closed = false;
          return _this180;
        }

        var _proto65 = TransloaditAssembly.prototype;

        _proto65.connect = function connect() {
          _classPrivateFieldLooseBase(this, _connectSocket)[_connectSocket]();

          _classPrivateFieldLooseBase(this, _beginPolling)[_beginPolling]();
        };

        _proto65.update = function update() {
          return _classPrivateFieldLooseBase(this, _fetchStatus)[_fetchStatus]({
            diff: true
          });
        }
        /**
         * Update this assembly's status with a full new object. Events will be
         * emitted for status changes, new files, and new results.
         *
         * @param {object} next The new assembly status object.
         */
        ;

        _proto65.updateStatus = function updateStatus(next) {
          _classPrivateFieldLooseBase(this, _diffStatus)[_diffStatus](this.status, next);

          this.status = next;
        }
        /**
         * Diff two assembly statuses, and emit the events necessary to go from `prev`
         * to `next`.
         *
         * @param {object} prev The previous assembly status.
         * @param {object} next The new assembly status.
         */

        /**
         * Stop updating this assembly.
         */
        ;

        _proto65.close = function close() {
          this.closed = true;

          if (this.socket) {
            this.socket.disconnect();
            this.socket = null;
          }

          clearInterval(this.pollInterval);
        };

        return TransloaditAssembly;
      }(Emitter);

      function _onFinished2() {
        this.emit('finished');
        this.close();
      }

      function _connectSocket2() {
        var _this181 = this;

        var parsed = parseUrl(this.status.websocket_url);
        var socket = requireSocketIo().connect(parsed.origin, {
          transports: ['websocket'],
          path: parsed.pathname
        });
        socket.on('connect', function () {
          socket.emit('assembly_connect', {
            id: _this181.status.assembly_id
          });

          _this181.emit('connect');
        });
        socket.on('connect_failed', function () {
          _classPrivateFieldLooseBase(_this181, _onError)[_onError](new NetworkError('Transloadit Socket.io connection error'));

          _this181.socket = null;
        });
        socket.on('connect_error', function () {
          socket.disconnect();
          _this181.socket = null;
        });
        socket.on('assembly_finished', function () {
          _classPrivateFieldLooseBase(_this181, _onFinished)[_onFinished]();
        });
        socket.on('assembly_upload_finished', function (file) {
          _this181.emit('upload', file);

          _this181.status.uploads.push(file);
        });
        socket.on('assembly_uploading_finished', function () {
          _this181.emit('executing');
        });
        socket.on('assembly_upload_meta_data_extracted', function () {
          _this181.emit('metadata');

          _classPrivateFieldLooseBase(_this181, _fetchStatus)[_fetchStatus]({
            diff: false
          });
        });
        socket.on('assembly_result_finished', function (stepName, result) {
          _this181.emit('result', stepName, result);

          if (!_this181.status.results[stepName]) {
            _this181.status.results[stepName] = [];
          }

          _this181.status.results[stepName].push(result);
        });
        socket.on('assembly_error', function (err) {
          _classPrivateFieldLooseBase(_this181, _onError)[_onError](err); // Refetch for updated status code


          _classPrivateFieldLooseBase(_this181, _fetchStatus)[_fetchStatus]({
            diff: false
          });
        });
        this.socket = socket;
      }

      function _onError2(err) {
        this.emit('error', Object.assign(new Error(err.message), err));
      }

      function _beginPolling2() {
        var _this182 = this;

        this.pollInterval = setInterval(function () {
          if (!_this182.socket || !_this182.socket.connected) {
            _classPrivateFieldLooseBase(_this182, _fetchStatus)[_fetchStatus]();
          }
        }, 2000);
      }

      function _fetchStatus2(_temp3) {
        var _this183 = this;

        var _ref39 = _temp3 === void 0 ? {} : _temp3,
            _ref39$diff = _ref39.diff,
            diff = _ref39$diff === void 0 ? true : _ref39$diff;

        return fetchWithNetworkError(this.status.assembly_ssl_url).then(function (response) {
          return response.json();
        }).then(function (status) {
          // Avoid updating if we closed during this request's lifetime.
          if (_this183.closed) return;

          _this183.emit('status', status);

          if (diff) {
            _this183.updateStatus(status);
          } else {
            _this183.status = status;
          }
        }).catch(function (err) {
          return _classPrivateFieldLooseBase(_this183, _onError)[_onError](err);
        });
      }

      function _diffStatus2(prev, next) {
        var _this184 = this;

        var prevStatus = prev.ok;
        var nextStatus = next.ok;

        if (next.error && !prev.error) {
          return _classPrivateFieldLooseBase(this, _onError)[_onError](next);
        } // Desired emit order:
        //  - executing
        //  - (n × upload)
        //  - metadata
        //  - (m × result)
        //  - finished
        // The below checks run in this order, that way even if we jump from
        // UPLOADING straight to FINISHED all the events are emitted as expected.


        var nowExecuting = isStatus(nextStatus, ASSEMBLY_EXECUTING) && !isStatus(prevStatus, ASSEMBLY_EXECUTING);

        if (nowExecuting) {
          // Without WebSockets, this is our only way to tell if uploading finished.
          // Hence, we emit this just before the 'upload's and before the 'metadata'
          // event for the most intuitive ordering, corresponding to the _usual_
          // ordering (if not guaranteed) that you'd get on the WebSocket.
          this.emit('executing');
        } // Find new uploaded files.


        Object.keys(next.uploads).filter(function (upload) {
          return !has(prev.uploads, upload);
        }).forEach(function (upload) {
          _this184.emit('upload', next.uploads[upload]);
        });

        if (nowExecuting) {
          this.emit('metadata');
        } // Find new results.


        Object.keys(next.results).forEach(function (stepName) {
          var nextResults = next.results[stepName];
          var prevResults = prev.results[stepName];
          nextResults.filter(function (n) {
            return !prevResults || !prevResults.some(function (p) {
              return p.id === n.id;
            });
          }).forEach(function (result) {
            _this184.emit('result', stepName, result);
          });
        });

        if (isStatus(nextStatus, ASSEMBLY_COMPLETED) && !isStatus(prevStatus, ASSEMBLY_COMPLETED)) {
          this.emit('finished');
        }

        return undefined;
      }

      module.exports = TransloaditAssembly;
    }, {
      "./parseUrl": 738,
      "@uppy/utils/lib/NetworkError": 748,
      "@uppy/utils/lib/fetchWithNetworkError": 756,
      "@uppy/utils/lib/hasProperty": 773,
      "component-emitter": 8,
      "socket.io-client": 600
    }],
    734: [function (require, module, exports) {
      "use strict";

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }
      /**
       * Check that Assembly parameters are present and include all required fields.
       */


      function validateParams(params) {
        if (params == null) {
          throw new Error('Transloadit: The `params` option is required.');
        }

        if (typeof params === 'string') {
          try {
            // eslint-disable-next-line no-param-reassign
            params = JSON.parse(params);
          } catch (err) {
            // Tell the user that this is not an Uppy bug!
            var error = new Error('Transloadit: The `params` option is a malformed JSON string.');
            err.cause = err;
            throw error;
          }
        }

        if (!params.auth || !params.auth.key) {
          throw new Error('Transloadit: The `params.auth.key` option is required. ' + 'You can find your Transloadit API key at https://transloadit.com/account/api-settings.');
        }
      }
      /**
       * Normalize Uppy-specific Assembly option features to a Transloadit-
       * compatible object.
       */


      function normalizeAssemblyOptions(file, assemblyOptions) {
        // eslint-disable-next-line no-param-reassign
        assemblyOptions.fields = Array.isArray(assemblyOptions.fields) ? Object.fromEntries(assemblyOptions.fields.map(function (fieldName) {
          return [fieldName, file.meta[fieldName]];
        })) : {};
        return assemblyOptions;
      }
      /**
       * Combine Assemblies with the same options into a single Assembly for all the
       * relevant files.
       */


      function dedupe(list) {
        var dedupeMap = Object.create(null);

        for (var _iterator3 = _createForOfIteratorHelperLoose(list), _step3; !(_step3 = _iterator3()).done;) {
          var _step3$value = _step3.value,
              fileIDs = _step3$value.fileIDs,
              options = _step3$value.options;

          var _id2 = JSON.stringify(options);

          if (_id2 in dedupeMap) {
            dedupeMap[_id2].fileIDArrays.push(fileIDs);
          } else {
            dedupeMap[_id2] = {
              options: options,
              fileIDArrays: [fileIDs]
            };
          }
        }

        return Object.values(dedupeMap).map(function (_ref40) {
          var options = _ref40.options,
              fileIDArrays = _ref40.fileIDArrays;
          return {
            options: options,
            fileIDs: fileIDArrays.flat(1)
          };
        });
      }
      /**
       * Turn Transloadit plugin options and a list of files into a list of Assembly
       * options.
       */


      var _getAssemblyOptions = /*#__PURE__*/_classPrivateFieldLooseKey("getAssemblyOptions");

      var AssemblyOptions = /*#__PURE__*/function () {
        function AssemblyOptions(files, opts) {
          Object.defineProperty(this, _getAssemblyOptions, {
            value: _getAssemblyOptions2
          });
          this.files = files;
          this.opts = opts;
        }
        /**
         * Get Assembly options for a file.
         */

        /**
         * Generate a set of Assemblies that will handle the upload.
         * Returns a Promise for an object with keys:
         *  - fileIDs - an array of file IDs to add to this Assembly
         *  - options - Assembly options
         */


        var _proto66 = AssemblyOptions.prototype;

        _proto66.build =
        /*#__PURE__*/
        function () {
          var _build = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
            var _this185 = this;

            var options, assemblyOptions;
            return regeneratorRuntime.wrap(function _callee6$(_context6) {
              while (1) {
                switch (_context6.prev = _context6.next) {
                  case 0:
                    options = this.opts;

                    if (!(this.files.length > 0)) {
                      _context6.next = 3;
                      break;
                    }

                    return _context6.abrupt("return", Promise.all(this.files.map(function (file) {
                      return _classPrivateFieldLooseBase(_this185, _getAssemblyOptions)[_getAssemblyOptions](file);
                    })).then(dedupe));

                  case 3:
                    if (!options.alwaysRunAssembly) {
                      _context6.next = 9;
                      break;
                    }

                    _context6.next = 6;
                    return options.getAssemblyOptions(null, options);

                  case 6:
                    assemblyOptions = _context6.sent;
                    validateParams(assemblyOptions.params);
                    return _context6.abrupt("return", [{
                      fileIDs: this.files.map(function (file) {
                        return file.id;
                      }),
                      options: assemblyOptions
                    }]);

                  case 9:
                    return _context6.abrupt("return", []);

                  case 10:
                  case "end":
                    return _context6.stop();
                }
              }
            }, _callee6, this);
          }));

          function build() {
            return _build.apply(this, arguments);
          }

          return build;
        }();

        return AssemblyOptions;
      }();

      function _getAssemblyOptions2(_x4) {
        return _getAssemblyOptions3.apply(this, arguments);
      }

      function _getAssemblyOptions3() {
        _getAssemblyOptions3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(file) {
          var options, assemblyOptions;
          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  options = this.opts;
                  _context7.next = 3;
                  return options.getAssemblyOptions(file, options);

                case 3:
                  assemblyOptions = _context7.sent;
                  validateParams(assemblyOptions.params);
                  normalizeAssemblyOptions(file, assemblyOptions);
                  return _context7.abrupt("return", {
                    fileIDs: [file.id],
                    options: assemblyOptions
                  });

                case 7:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));
        return _getAssemblyOptions3.apply(this, arguments);
      }

      module.exports = AssemblyOptions;
      module.exports.validateParams = validateParams;
    }, {}],
    735: [function (require, module, exports) {
      "use strict";

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }

      var Emitter = require('component-emitter');
      /**
       * Track completion of multiple assemblies.
       *
       * Emits 'assembly-complete' when an assembly completes.
       * Emits 'assembly-error' when an assembly fails.
       * Exposes a `.promise` property that resolves when all assemblies have
       * completed (or failed).
       */


      var _assemblyIDs = /*#__PURE__*/_classPrivateFieldLooseKey("assemblyIDs");

      var _reject = /*#__PURE__*/_classPrivateFieldLooseKey("reject");

      var _remaining = /*#__PURE__*/_classPrivateFieldLooseKey("remaining");

      var _resolve = /*#__PURE__*/_classPrivateFieldLooseKey("resolve");

      var _uppy = /*#__PURE__*/_classPrivateFieldLooseKey("uppy");

      var _watching = /*#__PURE__*/_classPrivateFieldLooseKey("watching");

      var _onAssemblyComplete = /*#__PURE__*/_classPrivateFieldLooseKey("onAssemblyComplete");

      var _onAssemblyCancel = /*#__PURE__*/_classPrivateFieldLooseKey("onAssemblyCancel");

      var _onAssemblyError = /*#__PURE__*/_classPrivateFieldLooseKey("onAssemblyError");

      var _onImportError = /*#__PURE__*/_classPrivateFieldLooseKey("onImportError");

      var _checkAllComplete = /*#__PURE__*/_classPrivateFieldLooseKey("checkAllComplete");

      var _removeListeners = /*#__PURE__*/_classPrivateFieldLooseKey("removeListeners");

      var _addListeners = /*#__PURE__*/_classPrivateFieldLooseKey("addListeners");

      var TransloaditAssemblyWatcher = /*#__PURE__*/function (_Emitter8) {
        _inheritsLoose(TransloaditAssemblyWatcher, _Emitter8);

        function TransloaditAssemblyWatcher(uppy, assemblyIDs) {
          var _this186;

          _this186 = _Emitter8.call(this) || this;
          Object.defineProperty(_assertThisInitialized2(_this186), _addListeners, {
            value: _addListeners2
          });
          Object.defineProperty(_assertThisInitialized2(_this186), _removeListeners, {
            value: _removeListeners2
          });
          Object.defineProperty(_assertThisInitialized2(_this186), _checkAllComplete, {
            value: _checkAllComplete2
          });
          Object.defineProperty(_assertThisInitialized2(_this186), _watching, {
            value: _watching2
          });
          Object.defineProperty(_assertThisInitialized2(_this186), _assemblyIDs, {
            writable: true,
            value: void 0
          });
          Object.defineProperty(_assertThisInitialized2(_this186), _reject, {
            writable: true,
            value: void 0
          });
          Object.defineProperty(_assertThisInitialized2(_this186), _remaining, {
            writable: true,
            value: void 0
          });
          Object.defineProperty(_assertThisInitialized2(_this186), _resolve, {
            writable: true,
            value: void 0
          });
          Object.defineProperty(_assertThisInitialized2(_this186), _uppy, {
            writable: true,
            value: void 0
          });
          Object.defineProperty(_assertThisInitialized2(_this186), _onAssemblyComplete, {
            writable: true,
            value: function value(assembly) {
              if (!_classPrivateFieldLooseBase(_assertThisInitialized2(_this186), _watching)[_watching](assembly.assembly_id)) {
                return;
              }

              _classPrivateFieldLooseBase(_assertThisInitialized2(_this186), _uppy)[_uppy].log("[Transloadit] AssemblyWatcher: Got Assembly finish " + assembly.assembly_id);

              _this186.emit('assembly-complete', assembly.assembly_id);

              _classPrivateFieldLooseBase(_assertThisInitialized2(_this186), _checkAllComplete)[_checkAllComplete]();
            }
          });
          Object.defineProperty(_assertThisInitialized2(_this186), _onAssemblyCancel, {
            writable: true,
            value: function value(assembly) {
              if (!_classPrivateFieldLooseBase(_assertThisInitialized2(_this186), _watching)[_watching](assembly.assembly_id)) {
                return;
              }

              _classPrivateFieldLooseBase(_assertThisInitialized2(_this186), _checkAllComplete)[_checkAllComplete]();
            }
          });
          Object.defineProperty(_assertThisInitialized2(_this186), _onAssemblyError, {
            writable: true,
            value: function value(assembly, error) {
              if (!_classPrivateFieldLooseBase(_assertThisInitialized2(_this186), _watching)[_watching](assembly.assembly_id)) {
                return;
              }

              _classPrivateFieldLooseBase(_assertThisInitialized2(_this186), _uppy)[_uppy].log("[Transloadit] AssemblyWatcher: Got Assembly error " + assembly.assembly_id);

              _classPrivateFieldLooseBase(_assertThisInitialized2(_this186), _uppy)[_uppy].log(error);

              _this186.emit('assembly-error', assembly.assembly_id, error);

              _classPrivateFieldLooseBase(_assertThisInitialized2(_this186), _checkAllComplete)[_checkAllComplete]();
            }
          });
          Object.defineProperty(_assertThisInitialized2(_this186), _onImportError, {
            writable: true,
            value: function value(assembly, fileID, error) {
              if (!_classPrivateFieldLooseBase(_assertThisInitialized2(_this186), _watching)[_watching](assembly.assembly_id)) {
                return;
              } // Not sure if we should be doing something when it's just one file failing.
              // ATM, the only options are 1) ignoring or 2) failing the entire upload.
              // I think failing the upload is better than silently ignoring.
              // In the future we should maybe have a way to resolve uploads with some failures,
              // like returning an object with `{ successful, failed }` uploads.


              _classPrivateFieldLooseBase(_assertThisInitialized2(_this186), _onAssemblyError)[_onAssemblyError](assembly, error);
            }
          });
          _classPrivateFieldLooseBase(_assertThisInitialized2(_this186), _uppy)[_uppy] = uppy;
          _classPrivateFieldLooseBase(_assertThisInitialized2(_this186), _assemblyIDs)[_assemblyIDs] = assemblyIDs;
          _classPrivateFieldLooseBase(_assertThisInitialized2(_this186), _remaining)[_remaining] = assemblyIDs.length;
          _this186.promise = new Promise(function (resolve, reject) {
            _classPrivateFieldLooseBase(_assertThisInitialized2(_this186), _resolve)[_resolve] = resolve;
            _classPrivateFieldLooseBase(_assertThisInitialized2(_this186), _reject)[_reject] = reject;
          });

          _classPrivateFieldLooseBase(_assertThisInitialized2(_this186), _addListeners)[_addListeners]();

          return _this186;
        }
        /**
         * Are we watching this assembly ID?
         */


        return TransloaditAssemblyWatcher;
      }(Emitter);

      function _watching2(id) {
        return _classPrivateFieldLooseBase(this, _assemblyIDs)[_assemblyIDs].indexOf(id) !== -1;
      }

      function _checkAllComplete2() {
        _classPrivateFieldLooseBase(this, _remaining)[_remaining] -= 1;

        if (_classPrivateFieldLooseBase(this, _remaining)[_remaining] === 0) {
          // We're done, these listeners can be removed
          _classPrivateFieldLooseBase(this, _removeListeners)[_removeListeners]();

          _classPrivateFieldLooseBase(this, _resolve)[_resolve]();
        }
      }

      function _removeListeners2() {
        _classPrivateFieldLooseBase(this, _uppy)[_uppy].off('transloadit:complete', _classPrivateFieldLooseBase(this, _onAssemblyComplete)[_onAssemblyComplete]);

        _classPrivateFieldLooseBase(this, _uppy)[_uppy].off('transloadit:assembly-cancel', _classPrivateFieldLooseBase(this, _onAssemblyCancel)[_onAssemblyCancel]);

        _classPrivateFieldLooseBase(this, _uppy)[_uppy].off('transloadit:assembly-error', _classPrivateFieldLooseBase(this, _onAssemblyError)[_onAssemblyError]);

        _classPrivateFieldLooseBase(this, _uppy)[_uppy].off('transloadit:import-error', _classPrivateFieldLooseBase(this, _onImportError)[_onImportError]);
      }

      function _addListeners2() {
        _classPrivateFieldLooseBase(this, _uppy)[_uppy].on('transloadit:complete', _classPrivateFieldLooseBase(this, _onAssemblyComplete)[_onAssemblyComplete]);

        _classPrivateFieldLooseBase(this, _uppy)[_uppy].on('transloadit:assembly-cancel', _classPrivateFieldLooseBase(this, _onAssemblyCancel)[_onAssemblyCancel]);

        _classPrivateFieldLooseBase(this, _uppy)[_uppy].on('transloadit:assembly-error', _classPrivateFieldLooseBase(this, _onAssemblyError)[_onAssemblyError]);

        _classPrivateFieldLooseBase(this, _uppy)[_uppy].on('transloadit:import-error', _classPrivateFieldLooseBase(this, _onImportError)[_onImportError]);
      }

      module.exports = TransloaditAssemblyWatcher;
    }, {
      "component-emitter": 8
    }],
    736: [function (require, module, exports) {
      "use strict";

      var _headers, _reportError;

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }

      var fetchWithNetworkError = require('@uppy/utils/lib/fetchWithNetworkError');
      /**
       * A Barebones HTTP API client for Transloadit.
       */


      module.exports = (_headers = /*#__PURE__*/_classPrivateFieldLooseKey("headers"), _reportError = /*#__PURE__*/_classPrivateFieldLooseKey("reportError"), /*#__PURE__*/function () {
        function Client(_opts) {
          var _this187 = this;

          if (_opts === void 0) {
            _opts = {};
          }

          Object.defineProperty(this, _headers, {
            writable: true,
            value: {}
          });
          Object.defineProperty(this, _reportError, {
            writable: true,
            value: function value(err, params) {
              if (_this187.opts.errorReporting === false) {
                throw err;
              }

              var opts = {
                type: params.type
              };

              if (params.assembly) {
                opts.assembly = params.assembly.assembly_id;
                opts.instance = params.assembly.instance;
              }

              if (params.url) {
                opts.endpoint = params.url;
              }

              _this187.submitError(err, opts).catch(function () {// not much we can do then is there
              });

              throw err;
            }
          });
          this.opts = _opts;

          if (this.opts.client != null) {
            _classPrivateFieldLooseBase(this, _headers)[_headers]['Transloadit-Client'] = this.opts.client;
          }
        }
        /**
         * Create a new assembly.
         *
         * @param {object} options
         * @param {string|object} options.params
         * @param {object} options.fields
         * @param {string} options.signature
         * @param {number} options.expectedFiles
         */


        var _proto67 = Client.prototype;

        _proto67.createAssembly = function createAssembly(_ref41) {
          var _this188 = this;

          var params = _ref41.params,
              fields = _ref41.fields,
              signature = _ref41.signature,
              expectedFiles = _ref41.expectedFiles;
          var data = new FormData();
          data.append('params', typeof params === 'string' ? params : JSON.stringify(params));

          if (signature) {
            data.append('signature', signature);
          }

          Object.keys(fields).forEach(function (key) {
            data.append(key, fields[key]);
          });
          data.append('num_expected_upload_files', expectedFiles);
          var url = new URL('/assemblies', "" + this.opts.service).href;
          return fetchWithNetworkError(url, {
            method: 'post',
            headers: _classPrivateFieldLooseBase(this, _headers)[_headers],
            body: data
          }).then(function (response) {
            return response.json();
          }).then(function (assembly) {
            if (assembly.error) {
              var error = new Error(assembly.error);
              error.details = assembly.message;
              error.assembly = assembly;

              if (assembly.assembly_id) {
                error.details += " Assembly ID: " + assembly.assembly_id;
              }

              throw error;
            }

            return assembly;
          }).catch(function (err) {
            return _classPrivateFieldLooseBase(_this188, _reportError)[_reportError](err, {
              url: url,
              type: 'API_ERROR'
            });
          });
        }
        /**
         * Reserve resources for a file in an Assembly. Then addFile can be used later.
         *
         * @param {object} assembly
         * @param {UppyFile} file
         */
        ;

        _proto67.reserveFile = function reserveFile(assembly, file) {
          var _this189 = this;

          var size = encodeURIComponent(file.size);
          var url = assembly.assembly_ssl_url + "/reserve_file?size=" + size;
          return fetchWithNetworkError(url, {
            method: 'post',
            headers: _classPrivateFieldLooseBase(this, _headers)[_headers]
          }).then(function (response) {
            return response.json();
          }).catch(function (err) {
            return _classPrivateFieldLooseBase(_this189, _reportError)[_reportError](err, {
              assembly: assembly,
              file: file,
              url: url,
              type: 'API_ERROR'
            });
          });
        }
        /**
         * Import a remote file to an Assembly.
         *
         * @param {object} assembly
         * @param {UppyFile} file
         */
        ;

        _proto67.addFile = function addFile(assembly, file) {
          var _this190 = this;

          if (!file.uploadURL) {
            return Promise.reject(new Error('File does not have an `uploadURL`.'));
          }

          var size = encodeURIComponent(file.size);
          var uploadUrl = encodeURIComponent(file.uploadURL);
          var filename = encodeURIComponent(file.name);
          var fieldname = 'file';
          var qs = "size=" + size + "&filename=" + filename + "&fieldname=" + fieldname + "&s3Url=" + uploadUrl;
          var url = assembly.assembly_ssl_url + "/add_file?" + qs;
          return fetchWithNetworkError(url, {
            method: 'post',
            headers: _classPrivateFieldLooseBase(this, _headers)[_headers]
          }).then(function (response) {
            return response.json();
          }).catch(function (err) {
            return _classPrivateFieldLooseBase(_this190, _reportError)[_reportError](err, {
              assembly: assembly,
              file: file,
              url: url,
              type: 'API_ERROR'
            });
          });
        }
        /**
         * Cancel a running Assembly.
         *
         * @param {object} assembly
         */
        ;

        _proto67.cancelAssembly = function cancelAssembly(assembly) {
          var _this191 = this;

          var url = assembly.assembly_ssl_url;
          return fetchWithNetworkError(url, {
            method: 'delete',
            headers: _classPrivateFieldLooseBase(this, _headers)[_headers]
          }).then(function (response) {
            return response.json();
          }).catch(function (err) {
            return _classPrivateFieldLooseBase(_this191, _reportError)[_reportError](err, {
              url: url,
              type: 'API_ERROR'
            });
          });
        }
        /**
         * Get the current status for an assembly.
         *
         * @param {string} url The status endpoint of the assembly.
         */
        ;

        _proto67.getAssemblyStatus = function getAssemblyStatus(url) {
          var _this192 = this;

          return fetchWithNetworkError(url, {
            headers: _classPrivateFieldLooseBase(this, _headers)[_headers]
          }).then(function (response) {
            return response.json();
          }).catch(function (err) {
            return _classPrivateFieldLooseBase(_this192, _reportError)[_reportError](err, {
              url: url,
              type: 'STATUS_ERROR'
            });
          });
        };

        _proto67.submitError = function submitError(err, _temp4) {
          var _ref42 = _temp4 === void 0 ? {} : _temp4,
              endpoint = _ref42.endpoint,
              instance = _ref42.instance,
              assembly = _ref42.assembly;

          var message = err.details ? err.message + " (" + err.details + ")" : err.message;
          return fetchWithNetworkError('https://transloaditstatus.com/client_error', {
            method: 'post',
            body: JSON.stringify({
              endpoint: endpoint,
              instance: instance,
              assembly_id: assembly,
              agent: typeof navigator !== 'undefined' ? navigator.userAgent : '',
              client: this.opts.client,
              error: message
            })
          }).then(function (response) {
            return response.json();
          });
        };

        return Client;
      }());
    }, {
      "@uppy/utils/lib/fetchWithNetworkError": 756
    }],
    737: [function (require, module, exports) {
      "use strict";

      var _class, _getClientVersion, _attachAssemblyMetadata, _createAssembly, _createAssemblyWatcher, _shouldWaitAfterUpload, _reserveFiles, _onFileUploadURLAvailable, _findFile, _onFileUploadComplete, _onResult, _onAssemblyFinished, _cancelAssembly, _onCancelAll, _getPersistentData, _onRestored, _connectAssembly, _prepareUpload, _afterUpload, _onError, _onTusError, _temp;

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }

      var hasProperty = require('@uppy/utils/lib/hasProperty');

      var _require114 = require('@uppy/core'),
          BasePlugin = _require114.BasePlugin;

      var Tus = require('@uppy/tus');

      var Assembly = require('./Assembly');

      var Client = require('./Client');

      var AssemblyOptions = require('./AssemblyOptions');

      var AssemblyWatcher = require('./AssemblyWatcher');

      function defaultGetAssemblyOptions(file, options) {
        return {
          params: options.params,
          signature: options.signature,
          fields: options.fields
        };
      }

      var sendErrorToConsole = function sendErrorToConsole(originalErr) {
        return function (err) {
          var error = new Error('Failed to send error to the client');
          error.cause = err;
          console.error(error, originalErr);
        };
      };

      var COMPANION = 'https://api2.transloadit.com/companion'; // Regex matching acceptable postMessage() origins for authentication feedback from companion.

      var ALLOWED_COMPANION_PATTERN = /\.transloadit\.com$/; // Regex used to check if a Companion address is run by Transloadit.

      var TL_COMPANION = /https?:\/\/api2(?:-\w+)?\.transloadit\.com\/companion/;
      /**
       * Upload files to Transloadit using Tus.
       */

      module.exports = (_temp = (_getClientVersion = /*#__PURE__*/_classPrivateFieldLooseKey("getClientVersion"), _attachAssemblyMetadata = /*#__PURE__*/_classPrivateFieldLooseKey("attachAssemblyMetadata"), _createAssembly = /*#__PURE__*/_classPrivateFieldLooseKey("createAssembly"), _createAssemblyWatcher = /*#__PURE__*/_classPrivateFieldLooseKey("createAssemblyWatcher"), _shouldWaitAfterUpload = /*#__PURE__*/_classPrivateFieldLooseKey("shouldWaitAfterUpload"), _reserveFiles = /*#__PURE__*/_classPrivateFieldLooseKey("reserveFiles"), _onFileUploadURLAvailable = /*#__PURE__*/_classPrivateFieldLooseKey("onFileUploadURLAvailable"), _findFile = /*#__PURE__*/_classPrivateFieldLooseKey("findFile"), _onFileUploadComplete = /*#__PURE__*/_classPrivateFieldLooseKey("onFileUploadComplete"), _onResult = /*#__PURE__*/_classPrivateFieldLooseKey("onResult"), _onAssemblyFinished = /*#__PURE__*/_classPrivateFieldLooseKey("onAssemblyFinished"), _cancelAssembly = /*#__PURE__*/_classPrivateFieldLooseKey("cancelAssembly"), _onCancelAll = /*#__PURE__*/_classPrivateFieldLooseKey("onCancelAll"), _getPersistentData = /*#__PURE__*/_classPrivateFieldLooseKey("getPersistentData"), _onRestored = /*#__PURE__*/_classPrivateFieldLooseKey("onRestored"), _connectAssembly = /*#__PURE__*/_classPrivateFieldLooseKey("connectAssembly"), _prepareUpload = /*#__PURE__*/_classPrivateFieldLooseKey("prepareUpload"), _afterUpload = /*#__PURE__*/_classPrivateFieldLooseKey("afterUpload"), _onError = /*#__PURE__*/_classPrivateFieldLooseKey("onError"), _onTusError = /*#__PURE__*/_classPrivateFieldLooseKey("onTusError"), _class = /*#__PURE__*/function (_BasePlugin7) {
        _inheritsLoose(Transloadit, _BasePlugin7);

        // eslint-disable-line global-require
        function Transloadit(uppy, opts) {
          var _this193;

          _this193 = _BasePlugin7.call(this, uppy, opts) || this;
          Object.defineProperty(_assertThisInitialized2(_this193), _connectAssembly, {
            value: _connectAssembly2
          });
          Object.defineProperty(_assertThisInitialized2(_this193), _cancelAssembly, {
            value: _cancelAssembly2
          });
          Object.defineProperty(_assertThisInitialized2(_this193), _onAssemblyFinished, {
            value: _onAssemblyFinished2
          });
          Object.defineProperty(_assertThisInitialized2(_this193), _onResult, {
            value: _onResult2
          });
          Object.defineProperty(_assertThisInitialized2(_this193), _onFileUploadComplete, {
            value: _onFileUploadComplete2
          });
          Object.defineProperty(_assertThisInitialized2(_this193), _findFile, {
            value: _findFile2
          });
          Object.defineProperty(_assertThisInitialized2(_this193), _reserveFiles, {
            value: _reserveFiles2
          });
          Object.defineProperty(_assertThisInitialized2(_this193), _shouldWaitAfterUpload, {
            value: _shouldWaitAfterUpload2
          });
          Object.defineProperty(_assertThisInitialized2(_this193), _createAssemblyWatcher, {
            value: _createAssemblyWatcher2
          });
          Object.defineProperty(_assertThisInitialized2(_this193), _createAssembly, {
            value: _createAssembly2
          });
          Object.defineProperty(_assertThisInitialized2(_this193), _attachAssemblyMetadata, {
            value: _attachAssemblyMetadata2
          });
          Object.defineProperty(_assertThisInitialized2(_this193), _getClientVersion, {
            value: _getClientVersion2
          });
          Object.defineProperty(_assertThisInitialized2(_this193), _onFileUploadURLAvailable, {
            writable: true,
            value: function value(rawFile) {
              var file = _this193.uppy.getFile(rawFile.id);

              if (!file || !file.transloadit || !file.transloadit.assembly) {
                return;
              }

              var _this193$getPluginSta = _this193.getPluginState(),
                  assemblies = _this193$getPluginSta.assemblies;

              var assembly = assemblies[file.transloadit.assembly];

              _this193.client.addFile(assembly, file).catch(function (err) {
                _this193.uppy.log(err);

                _this193.uppy.emit('transloadit:import-error', assembly, file.id, err);
              });
            }
          });
          Object.defineProperty(_assertThisInitialized2(_this193), _onCancelAll, {
            writable: true,
            value: function value() {
              var _this193$getPluginSta2 = _this193.getPluginState(),
                  uploadsAssemblies = _this193$getPluginSta2.uploadsAssemblies;

              var assemblyIDs = Object.values(uploadsAssemblies).flat(1);
              var cancelPromises = assemblyIDs.map(function (assemblyID) {
                var assembly = _this193.getAssembly(assemblyID);

                return _classPrivateFieldLooseBase(_assertThisInitialized2(_this193), _cancelAssembly)[_cancelAssembly](assembly);
              });
              Promise.all(cancelPromises).catch(function (err) {
                _this193.uppy.log(err);
              });
            }
          });
          Object.defineProperty(_assertThisInitialized2(_this193), _getPersistentData, {
            writable: true,
            value: function value(setData) {
              var _setData;

              var _this193$getPluginSta3 = _this193.getPluginState(),
                  assemblies = _this193$getPluginSta3.assemblies,
                  uploadsAssemblies = _this193$getPluginSta3.uploadsAssemblies;

              setData((_setData = {}, _setData[_this193.id] = {
                assemblies: assemblies,
                uploadsAssemblies: uploadsAssemblies
              }, _setData));
            }
          });
          Object.defineProperty(_assertThisInitialized2(_this193), _onRestored, {
            writable: true,
            value: function value(pluginData) {
              var savedState = pluginData && pluginData[_this193.id] ? pluginData[_this193.id] : {};
              var previousAssemblies = savedState.assemblies || {};
              var uploadsAssemblies = savedState.uploadsAssemblies || {};

              if (Object.keys(uploadsAssemblies).length === 0) {
                // Nothing to restore.
                return;
              } // Convert loaded Assembly statuses to a Transloadit plugin state object.


              var restoreState = function restoreState(assemblies) {
                var files = {};
                var results = [];

                var _loop2 = function _loop2() {
                  var _Object$entries$_i = _Object$entries[_i6],
                      id = _Object$entries$_i[0],
                      status = _Object$entries$_i[1];
                  status.uploads.forEach(function (uploadedFile) {
                    var file = _classPrivateFieldLooseBase(_assertThisInitialized2(_this193), _findFile)[_findFile](uploadedFile);

                    files[uploadedFile.id] = {
                      id: file.id,
                      assembly: id,
                      uploadedFile: uploadedFile
                    };
                  });

                  var state = _this193.getPluginState();

                  Object.keys(status.results).forEach(function (stepName) {
                    for (var _iterator4 = _createForOfIteratorHelperLoose(status.results[stepName]), _step4; !(_step4 = _iterator4()).done;) {
                      var result = _step4.value;
                      var file = state.files[result.original_id];
                      result.localId = file ? file.id : null;
                      results.push({
                        id: result.id,
                        result: result,
                        stepName: stepName,
                        assembly: id
                      });
                    }
                  });
                };

                for (var _i6 = 0, _Object$entries = Object.entries(assemblies); _i6 < _Object$entries.length; _i6++) {
                  _loop2();
                }

                _this193.setPluginState({
                  assemblies: assemblies,
                  files: files,
                  results: results,
                  uploadsAssemblies: uploadsAssemblies
                });
              }; // Set up the Assembly instances and AssemblyWatchers for existing Assemblies.


              var restoreAssemblies = function restoreAssemblies() {
                // eslint-disable-next-line no-shadow
                var _this193$getPluginSta4 = _this193.getPluginState(),
                    assemblies = _this193$getPluginSta4.assemblies,
                    uploadsAssemblies = _this193$getPluginSta4.uploadsAssemblies; // Set up the assembly watchers again for all the ongoing uploads.


                Object.keys(uploadsAssemblies).forEach(function (uploadID) {
                  var assemblyIDs = uploadsAssemblies[uploadID];
                  var fileIDsInUpload = assemblyIDs.flatMap(function (assemblyID) {
                    return _this193.getAssemblyFiles(assemblyID).map(function (file) {
                      return file.id;
                    });
                  });

                  _classPrivateFieldLooseBase(_assertThisInitialized2(_this193), _createAssemblyWatcher)[_createAssemblyWatcher](assemblyIDs, fileIDsInUpload, uploadID);
                });
                var allAssemblyIDs = Object.keys(assemblies);
                allAssemblyIDs.forEach(function (id) {
                  var assembly = new Assembly(assemblies[id]);

                  _classPrivateFieldLooseBase(_assertThisInitialized2(_this193), _connectAssembly)[_connectAssembly](assembly);
                });
              }; // Force-update all Assemblies to check for missed events.


              var updateAssemblies = function updateAssemblies() {
                var _this193$getPluginSta5 = _this193.getPluginState(),
                    assemblies = _this193$getPluginSta5.assemblies;

                return Promise.all(Object.keys(assemblies).map(function (id) {
                  return _this193.activeAssemblies[id].update();
                }));
              }; // Restore all Assembly state.


              _this193.restored = Promise.resolve().then(function () {
                restoreState(previousAssemblies);
                restoreAssemblies();
                return updateAssemblies();
              });

              _this193.restored.then(function () {
                _this193.restored = null;
              });
            }
          });
          Object.defineProperty(_assertThisInitialized2(_this193), _prepareUpload, {
            writable: true,
            value: function value(fileIDs, uploadID) {
              var _Object$assign12;

              // Only use files without errors
              var filteredFileIDs = fileIDs.filter(function (file) {
                return !file.error;
              });
              var files = filteredFileIDs.map(function (fileID) {
                var file = _this193.uppy.getFile(fileID);

                _this193.uppy.emit('preprocess-progress', file, {
                  mode: 'indeterminate',
                  message: _this193.i18n('creatingAssembly')
                });

                return file;
              }); // eslint-disable-next-line no-shadow

              var createAssembly = /*#__PURE__*/function () {
                var _ref44 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(_ref43) {
                  var fileIDs, options, assembly;
                  return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                      switch (_context8.prev = _context8.next) {
                        case 0:
                          fileIDs = _ref43.fileIDs, options = _ref43.options;
                          _context8.prev = 1;
                          _context8.next = 4;
                          return _classPrivateFieldLooseBase(_assertThisInitialized2(_this193), _createAssembly)[_createAssembly](fileIDs, uploadID, options);

                        case 4:
                          assembly = _context8.sent;

                          if (!_this193.opts.importFromUploadURLs) {
                            _context8.next = 8;
                            break;
                          }

                          _context8.next = 8;
                          return _classPrivateFieldLooseBase(_assertThisInitialized2(_this193), _reserveFiles)[_reserveFiles](assembly, fileIDs);

                        case 8:
                          fileIDs.forEach(function (fileID) {
                            var file = _this193.uppy.getFile(fileID);

                            _this193.uppy.emit('preprocess-complete', file);
                          });
                          return _context8.abrupt("return", assembly);

                        case 12:
                          _context8.prev = 12;
                          _context8.t0 = _context8["catch"](1);
                          fileIDs.forEach(function (fileID) {
                            var file = _this193.uppy.getFile(fileID); // Clear preprocessing state when the Assembly could not be created,
                            // otherwise the UI gets confused about the lingering progress keys


                            _this193.uppy.emit('preprocess-complete', file);

                            _this193.uppy.emit('upload-error', file, _context8.t0);
                          });
                          throw _context8.t0;

                        case 16:
                        case "end":
                          return _context8.stop();
                      }
                    }
                  }, _callee8, null, [[1, 12]]);
                }));

                return function createAssembly(_x5) {
                  return _ref44.apply(this, arguments);
                };
              }();

              var _this193$getPluginSta6 = _this193.getPluginState(),
                  uploadsAssemblies = _this193$getPluginSta6.uploadsAssemblies;

              _this193.setPluginState({
                uploadsAssemblies: Object.assign({}, uploadsAssemblies, (_Object$assign12 = {}, _Object$assign12[uploadID] = [], _Object$assign12))
              });

              var assemblyOptions = new AssemblyOptions(files, _this193.opts);
              return assemblyOptions.build().then(function (assemblies) {
                return Promise.all(assemblies.map(createAssembly));
              }).then(function (createdAssemblies) {
                var assemblyIDs = createdAssemblies.map(function (assembly) {
                  return assembly.status.assembly_id;
                });

                _classPrivateFieldLooseBase(_assertThisInitialized2(_this193), _createAssemblyWatcher)[_createAssemblyWatcher](assemblyIDs, filteredFileIDs, uploadID);

                return Promise.all(createdAssemblies.map(function (assembly) {
                  return _classPrivateFieldLooseBase(_assertThisInitialized2(_this193), _connectAssembly)[_connectAssembly](assembly);
                }));
              }) // If something went wrong before any Assemblies could be created,
              // clear all processing state.
              .catch(function (err) {
                files.forEach(function (file) {
                  _this193.uppy.emit('preprocess-complete', file);

                  _this193.uppy.emit('upload-error', file, err);
                });
                throw err;
              });
            }
          });
          Object.defineProperty(_assertThisInitialized2(_this193), _afterUpload, {
            writable: true,
            value: function value(fileIDs, uploadID) {
              var files = fileIDs.map(function (fileID) {
                return _this193.uppy.getFile(fileID);
              }); // Only use files without errors

              var filteredFileIDs = files.filter(function (file) {
                return !file.error;
              }).map(function (file) {
                return file.id;
              });

              var state = _this193.getPluginState(); // If we're still restoring state, wait for that to be done.


              if (_this193.restored) {
                return _this193.restored.then(function () {
                  return _classPrivateFieldLooseBase(_assertThisInitialized2(_this193), _afterUpload)[_afterUpload](filteredFileIDs, uploadID);
                });
              }

              var assemblyIDs = state.uploadsAssemblies[uploadID];

              var closeSocketConnections = function closeSocketConnections() {
                assemblyIDs.forEach(function (assemblyID) {
                  var assembly = _this193.activeAssemblies[assemblyID];
                  assembly.close();
                  delete _this193.activeAssemblies[assemblyID];
                });
              }; // If we don't have to wait for encoding metadata or results, we can close
              // the socket immediately and finish the upload.


              if (!_classPrivateFieldLooseBase(_assertThisInitialized2(_this193), _shouldWaitAfterUpload)[_shouldWaitAfterUpload]()) {
                closeSocketConnections();
                var assemblies = assemblyIDs.map(function (id) {
                  return _this193.getAssembly(id);
                });

                _this193.uppy.addResultData(uploadID, {
                  transloadit: assemblies
                });

                return Promise.resolve();
              } // If no Assemblies were created for this upload, we also do not have to wait.
              // There's also no sockets or anything to close, so just return immediately.


              if (assemblyIDs.length === 0) {
                _this193.uppy.addResultData(uploadID, {
                  transloadit: []
                });

                return Promise.resolve();
              }

              var incompleteFiles = files.filter(function (file) {
                return !hasProperty(_this193.completedFiles, file.id);
              });
              incompleteFiles.forEach(function (file) {
                _this193.uppy.emit('postprocess-progress', file, {
                  mode: 'indeterminate',
                  message: _this193.i18n('encoding')
                });
              });
              var watcher = _this193.assemblyWatchers[uploadID];
              return watcher.promise.then(function () {
                closeSocketConnections();
                var assemblies = assemblyIDs.map(function (id) {
                  return _this193.getAssembly(id);
                }); // Remove the Assembly ID list for this upload,
                // it's no longer going to be used anywhere.

                var uploadsAssemblies = Object.assign({}, _this193.getPluginState().uploadsAssemblies);
                delete uploadsAssemblies[uploadID];

                _this193.setPluginState({
                  uploadsAssemblies: uploadsAssemblies
                });

                _this193.uppy.addResultData(uploadID, {
                  transloadit: assemblies
                });
              });
            }
          });
          Object.defineProperty(_assertThisInitialized2(_this193), _onError, {
            writable: true,
            value: function value(err, uploadID) {
              if (err === void 0) {
                err = null;
              }

              var state = _this193.getPluginState();

              var assemblyIDs = state.uploadsAssemblies[uploadID];
              assemblyIDs == null ? void 0 : assemblyIDs.forEach(function (assemblyID) {
                if (_this193.activeAssemblies[assemblyID]) {
                  _this193.activeAssemblies[assemblyID].close();
                }
              });

              _this193.client.submitError(err) // if we can't report the error that sucks
              .catch(sendErrorToConsole(err));
            }
          });
          Object.defineProperty(_assertThisInitialized2(_this193), _onTusError, {
            writable: true,
            value: function value(err) {
              if (err && /^tus: /.test(err.message)) {
                var xhr = err.originalRequest ? err.originalRequest.getUnderlyingObject() : null;
                var url = xhr && xhr.responseURL ? xhr.responseURL : null;

                _this193.client.submitError(err, {
                  url: url,
                  type: 'TUS_ERROR'
                }) // if we can't report the error that sucks
                .catch(sendErrorToConsole(err));
              }
            }
          });
          _this193.type = 'uploader';
          _this193.id = _this193.opts.id || 'Transloadit';
          _this193.title = 'Transloadit';
          _this193.defaultLocale = {
            strings: {
              creatingAssembly: 'Preparing upload...',
              creatingAssemblyFailed: 'Transloadit: Could not create Assembly',
              encoding: 'Encoding...'
            }
          };
          var defaultOptions = {
            service: 'https://api2.transloadit.com',
            errorReporting: true,
            waitForEncoding: false,
            waitForMetadata: false,
            alwaysRunAssembly: false,
            importFromUploadURLs: false,
            signature: null,
            params: null,
            fields: {},
            getAssemblyOptions: defaultGetAssemblyOptions,
            limit: 0
          };
          _this193.opts = Object.assign({}, defaultOptions, opts);

          _this193.i18nInit();

          var hasCustomAssemblyOptions = _this193.opts.getAssemblyOptions !== defaultOptions.getAssemblyOptions;

          if (_this193.opts.params) {
            AssemblyOptions.validateParams(_this193.opts.params);
          } else if (!hasCustomAssemblyOptions) {
            // Throw the same error that we'd throw if the `params` returned from a
            // `getAssemblyOptions()` function is null.
            AssemblyOptions.validateParams(null);
          }

          _this193.client = new Client({
            service: _this193.opts.service,
            client: _classPrivateFieldLooseBase(_assertThisInitialized2(_this193), _getClientVersion)[_getClientVersion](),
            errorReporting: _this193.opts.errorReporting
          }); // Contains Assembly instances for in-progress Assemblies.

          _this193.activeAssemblies = {}; // Contains a mapping of uploadID to AssemblyWatcher

          _this193.assemblyWatchers = {}; // Contains a file IDs that have completed postprocessing before the upload
          // they belong to has entered the postprocess stage.

          _this193.completedFiles = Object.create(null);
          return _this193;
        }

        var _proto68 = Transloadit.prototype;

        _proto68.install = function install() {
          this.uppy.addPreProcessor(_classPrivateFieldLooseBase(this, _prepareUpload)[_prepareUpload]);
          this.uppy.addPostProcessor(_classPrivateFieldLooseBase(this, _afterUpload)[_afterUpload]); // We may need to close socket.io connections on error.

          this.uppy.on('error', _classPrivateFieldLooseBase(this, _onError)[_onError]); // Handle cancellation.

          this.uppy.on('cancel-all', _classPrivateFieldLooseBase(this, _onCancelAll)[_onCancelAll]); // For error reporting.

          this.uppy.on('upload-error', _classPrivateFieldLooseBase(this, _onTusError)[_onTusError]);

          if (this.opts.importFromUploadURLs) {
            // No uploader needed when importing; instead we take the upload URL from an existing uploader.
            this.uppy.on('upload-success', _classPrivateFieldLooseBase(this, _onFileUploadURLAvailable)[_onFileUploadURLAvailable]);
          } else {
            this.uppy.use(Tus, {
              // Disable tus-js-client fingerprinting, otherwise uploading the same file at different times
              // will upload to an outdated Assembly, and we won't get socket events for it.
              //
              // To resume a Transloadit upload, we need to reconnect to the websocket, and the state that's
              // required to do that is not saved by tus-js-client's fingerprinting. We need the tus URL,
              // the Assembly URL, and the WebSocket URL, at least. We also need to know _all_ the files that
              // were added to the Assembly, so we can properly complete it. All that state is handled by
              // Golden Retriever. So, Golden Retriever is required to do resumability with the Transloadit plugin,
              // and we disable Tus's default resume implementation to prevent bad behaviours.
              storeFingerprintForResuming: false,
              // Disable Companion's retry optimisation; we need to change the endpoint on retry
              // so it can't just reuse the same tus.Upload instance server-side.
              useFastRemoteRetry: false,
              // Only send Assembly metadata to the tus endpoint.
              metaFields: ['assembly_url', 'filename', 'fieldname'],
              // Pass the limit option to @uppy/tus
              limit: this.opts.limit
            });
          }

          this.uppy.on('restore:get-data', _classPrivateFieldLooseBase(this, _getPersistentData)[_getPersistentData]);
          this.uppy.on('restored', _classPrivateFieldLooseBase(this, _onRestored)[_onRestored]);
          this.setPluginState({
            // Contains Assembly status objects, indexed by their ID.
            assemblies: {},
            // Contains arrays of Assembly IDs, indexed by the upload ID that they belong to.
            uploadsAssemblies: {},
            // Contains file data from Transloadit, indexed by their Transloadit-assigned ID.
            files: {},
            // Contains result data from Transloadit.
            results: []
          }); // We cannot cancel individual files because Assemblies tend to contain many files.

          var _this$uppy$getState8 = this.uppy.getState(),
              capabilities = _this$uppy$getState8.capabilities;

          this.uppy.setState({
            capabilities: Object.assign({}, capabilities, {
              individualCancellation: false
            })
          });
        };

        _proto68.uninstall = function uninstall() {
          this.uppy.removePreProcessor(_classPrivateFieldLooseBase(this, _prepareUpload)[_prepareUpload]);
          this.uppy.removePostProcessor(_classPrivateFieldLooseBase(this, _afterUpload)[_afterUpload]);
          this.uppy.off('error', _classPrivateFieldLooseBase(this, _onError)[_onError]);

          if (this.opts.importFromUploadURLs) {
            this.uppy.off('upload-success', _classPrivateFieldLooseBase(this, _onFileUploadURLAvailable)[_onFileUploadURLAvailable]);
          }

          var _this$uppy$getState9 = this.uppy.getState(),
              capabilities = _this$uppy$getState9.capabilities;

          this.uppy.setState({
            capabilities: Object.assign({}, capabilities, {
              individualCancellation: true
            })
          });
        };

        _proto68.getAssembly = function getAssembly(id) {
          var _this$getPluginState3 = this.getPluginState(),
              assemblies = _this$getPluginState3.assemblies;

          return assemblies[id];
        };

        _proto68.getAssemblyFiles = function getAssemblyFiles(assemblyID) {
          return this.uppy.getFiles().filter(function (file) {
            return file && file.transloadit && file.transloadit.assembly === assemblyID;
          });
        };

        return Transloadit;
      }(BasePlugin)), _class.VERSION = "2.0.1", _temp);

      function _getClientVersion2() {
        var _this194 = this;

        var list = ["uppy-core:" + this.uppy.constructor.VERSION, "uppy-transloadit:" + this.constructor.VERSION, "uppy-tus:" + Tus.VERSION];

        var addPluginVersion = function addPluginVersion(pluginName, versionName) {
          var plugin = _this194.uppy.getPlugin(pluginName);

          if (plugin) {
            list.push(versionName + ":" + plugin.constructor.VERSION);
          }
        };

        if (this.opts.importFromUploadURLs) {
          addPluginVersion('XHRUpload', 'uppy-xhr-upload');
          addPluginVersion('AwsS3', 'uppy-aws-s3');
          addPluginVersion('AwsS3Multipart', 'uppy-aws-s3-multipart');
        }

        addPluginVersion('Dropbox', 'uppy-dropbox');
        addPluginVersion('Box', 'uppy-box');
        addPluginVersion('Facebook', 'uppy-facebook');
        addPluginVersion('GoogleDrive', 'uppy-google-drive');
        addPluginVersion('Instagram', 'uppy-instagram');
        addPluginVersion('OneDrive', 'uppy-onedrive');
        addPluginVersion('Zoom', 'uppy-zoom');
        addPluginVersion('Url', 'uppy-url');
        return list.join(',');
      }

      function _attachAssemblyMetadata2(file, status) {
        // Add the metadata parameters Transloadit needs.
        var meta = Object.assign({}, file.meta, {
          assembly_url: status.assembly_url,
          filename: file.name,
          fieldname: 'file'
        }); // Add Assembly-specific Tus endpoint.

        var tus = Object.assign({}, file.tus, {
          endpoint: status.tus_url,
          // Include X-Request-ID headers for better debugging.
          addRequestId: true
        }); // Set Companion location. We only add this, if 'file' has the attribute
        // remote, because this is the criteria to identify remote files.
        // We only replace the hostname for Transloadit's companions, so that
        // people can also self-host them while still using Transloadit for encoding.

        var remote = file.remote;

        if (file.remote && TL_COMPANION.test(file.remote.companionUrl)) {
          var newHost = status.companion_url.replace(/\/$/, '');
          var path = file.remote.url.replace(file.remote.companionUrl, '').replace(/^\//, '');
          remote = Object.assign({}, file.remote, {
            companionUrl: newHost,
            url: newHost + "/" + path
          });
        } // Store the Assembly ID this file is in on the file under the `transloadit` key.


        var newFile = Object.assign({}, file, {
          transloadit: {
            assembly: status.assembly_id
          }
        }); // Only configure the Tus plugin if we are uploading straight to Transloadit (the default).

        if (!this.opts.importFromUploadURLs) {
          Object.assign(newFile, {
            meta: meta,
            tus: tus,
            remote: remote
          });
        }

        return newFile;
      }

      function _createAssembly2(fileIDs, uploadID, options) {
        var _this195 = this;

        this.uppy.log('[Transloadit] Create Assembly');
        return this.client.createAssembly({
          params: options.params,
          fields: options.fields,
          expectedFiles: fileIDs.length,
          signature: options.signature
        }).then(function (newAssembly) {
          var _Object$assign13, _Object$assign14;

          var assembly = new Assembly(newAssembly);
          var status = assembly.status;
          var assemblyID = status.assembly_id;

          var _this195$getPluginSta = _this195.getPluginState(),
              assemblies = _this195$getPluginSta.assemblies,
              uploadsAssemblies = _this195$getPluginSta.uploadsAssemblies;

          _this195.setPluginState({
            // Store the Assembly status.
            assemblies: Object.assign({}, assemblies, (_Object$assign13 = {}, _Object$assign13[assemblyID] = status, _Object$assign13)),
            // Store the list of Assemblies related to this upload.
            uploadsAssemblies: Object.assign({}, uploadsAssemblies, (_Object$assign14 = {}, _Object$assign14[uploadID] = [].concat(uploadsAssemblies[uploadID], [assemblyID]), _Object$assign14))
          });

          var _this195$uppy$getStat = _this195.uppy.getState(),
              files = _this195$uppy$getStat.files;

          var updatedFiles = {};
          fileIDs.forEach(function (id) {
            updatedFiles[id] = _classPrivateFieldLooseBase(_this195, _attachAssemblyMetadata)[_attachAssemblyMetadata](_this195.uppy.getFile(id), status);
          });

          _this195.uppy.setState({
            files: Object.assign({}, files, updatedFiles)
          });

          _this195.uppy.emit('transloadit:assembly-created', status, fileIDs);

          _this195.uppy.log("[Transloadit] Created Assembly " + assemblyID);

          return assembly;
        }).catch(function (err) {
          var error = new Error(_this195.i18n('creatingAssemblyFailed') + ": " + err.message);
          error.cause = err; // Reject the promise.

          throw error;
        });
      }

      function _createAssemblyWatcher2(assemblyID, fileIDs, uploadID) {
        var _this196 = this;

        // AssemblyWatcher tracks completion states of all Assemblies in this upload.
        var watcher = new AssemblyWatcher(this.uppy, assemblyID);
        watcher.on('assembly-complete', function (id) {
          var files = _this196.getAssemblyFiles(id);

          files.forEach(function (file) {
            _this196.completedFiles[file.id] = true;

            _this196.uppy.emit('postprocess-complete', file);
          });
        });
        watcher.on('assembly-error', function (id, error) {
          // Clear postprocessing state for all our files.
          var files = _this196.getAssemblyFiles(id);

          files.forEach(function (file) {
            // TODO Maybe make a postprocess-error event here?
            _this196.uppy.emit('upload-error', file, error);

            _this196.uppy.emit('postprocess-complete', file);
          });
        });
        this.assemblyWatchers[uploadID] = watcher;
      }

      function _shouldWaitAfterUpload2() {
        return this.opts.waitForEncoding || this.opts.waitForMetadata;
      }

      function _reserveFiles2(assembly, fileIDs) {
        var _this197 = this;

        return Promise.all(fileIDs.map(function (fileID) {
          var file = _this197.uppy.getFile(fileID);

          return _this197.client.reserveFile(assembly.status, file);
        }));
      }

      function _findFile2(uploadedFile) {
        var files = this.uppy.getFiles();

        for (var i = 0; i < files.length; i++) {
          var file = files[i]; // Completed file upload.

          if (file.uploadURL === uploadedFile.tus_upload_url) {
            return file;
          } // In-progress file upload.


          if (file.tus && file.tus.uploadUrl === uploadedFile.tus_upload_url) {
            return file;
          }

          if (!uploadedFile.is_tus_file) {
            // Fingers-crossed check for non-tus uploads, eg imported from S3.
            if (file.name === uploadedFile.name && file.size === uploadedFile.size) {
              return file;
            }
          }
        }

        return undefined;
      }

      function _onFileUploadComplete2(assemblyId, uploadedFile) {
        var _Object$assign15;

        var state = this.getPluginState();

        var file = _classPrivateFieldLooseBase(this, _findFile)[_findFile](uploadedFile);

        if (!file) {
          this.uppy.log('[Transloadit] Couldn’t file the file, it was likely removed in the process');
          return;
        }

        this.setPluginState({
          files: Object.assign({}, state.files, (_Object$assign15 = {}, _Object$assign15[uploadedFile.id] = {
            assembly: assemblyId,
            id: file.id,
            uploadedFile: uploadedFile
          }, _Object$assign15))
        });
        this.uppy.emit('transloadit:upload', uploadedFile, this.getAssembly(assemblyId));
      }

      function _onResult2(assemblyId, stepName, result) {
        var state = this.getPluginState();
        var file = state.files[result.original_id]; // The `file` may not exist if an import robot was used instead of a file upload.

        result.localId = file ? file.id : null; // eslint-disable-line no-param-reassign

        var entry = {
          result: result,
          stepName: stepName,
          id: result.id,
          assembly: assemblyId
        };
        this.setPluginState({
          results: [].concat(state.results, [entry])
        });
        this.uppy.emit('transloadit:result', stepName, result, this.getAssembly(assemblyId));
      }

      function _onAssemblyFinished2(status) {
        var _this198 = this;

        var url = status.assembly_ssl_url;
        this.client.getAssemblyStatus(url).then(function (finalStatus) {
          var _Object$assign16;

          var assemblyId = finalStatus.assembly_id;

          var state = _this198.getPluginState();

          _this198.setPluginState({
            assemblies: Object.assign({}, state.assemblies, (_Object$assign16 = {}, _Object$assign16[assemblyId] = finalStatus, _Object$assign16))
          });

          _this198.uppy.emit('transloadit:complete', finalStatus);
        });
      }

      function _cancelAssembly2(_x6) {
        return _cancelAssembly3.apply(this, arguments);
      }

      function _cancelAssembly3() {
        _cancelAssembly3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(assembly) {
          return regeneratorRuntime.wrap(function _callee9$(_context9) {
            while (1) {
              switch (_context9.prev = _context9.next) {
                case 0:
                  _context9.next = 2;
                  return this.client.cancelAssembly(assembly);

                case 2:
                  // TODO bubble this through AssemblyWatcher so its event handlers can clean up correctly
                  this.uppy.emit('transloadit:assembly-cancelled', assembly);

                case 3:
                case "end":
                  return _context9.stop();
              }
            }
          }, _callee9, this);
        }));
        return _cancelAssembly3.apply(this, arguments);
      }

      function _connectAssembly2(assembly) {
        var _this199 = this;

        var status = assembly.status;
        var id = status.assembly_id;
        this.activeAssemblies[id] = assembly; // Sync local `assemblies` state

        assembly.on('status', function (newStatus) {
          var _Object$assign17;

          var _this199$getPluginSta = _this199.getPluginState(),
              assemblies = _this199$getPluginSta.assemblies;

          _this199.setPluginState({
            assemblies: Object.assign({}, assemblies, (_Object$assign17 = {}, _Object$assign17[id] = newStatus, _Object$assign17))
          });
        });
        assembly.on('upload', function (file) {
          _classPrivateFieldLooseBase(_this199, _onFileUploadComplete)[_onFileUploadComplete](id, file);
        });
        assembly.on('error', function (error) {
          error.assembly = assembly.status; // eslint-disable-line no-param-reassign

          _this199.uppy.emit('transloadit:assembly-error', assembly.status, error);
        });
        assembly.on('executing', function () {
          _this199.uppy.emit('transloadit:assembly-executing', assembly.status);
        });

        if (this.opts.waitForEncoding) {
          assembly.on('result', function (stepName, result) {
            _classPrivateFieldLooseBase(_this199, _onResult)[_onResult](id, stepName, result);
          });
        }

        if (this.opts.waitForEncoding) {
          assembly.on('finished', function () {
            _classPrivateFieldLooseBase(_this199, _onAssemblyFinished)[_onAssemblyFinished](assembly.status);
          });
        } else if (this.opts.waitForMetadata) {
          assembly.on('metadata', function () {
            _classPrivateFieldLooseBase(_this199, _onAssemblyFinished)[_onAssemblyFinished](assembly.status);
          });
        } // No need to connect to the socket if the Assembly has completed by now.


        if (assembly.ok === 'ASSEMBLY_COMPLETE') {
          return assembly;
        }

        assembly.connect();
        return assembly;
      }

      module.exports.COMPANION = COMPANION;
      module.exports.COMPANION_PATTERN = ALLOWED_COMPANION_PATTERN;
    }, {
      "./Assembly": 733,
      "./AssemblyOptions": 734,
      "./AssemblyWatcher": 735,
      "./Client": 736,
      "@uppy/core": 645,
      "@uppy/tus": 740,
      "@uppy/utils/lib/hasProperty": 773
    }],
    738: [function (require, module, exports) {
      "use strict";

      module.exports = function parseUrl(url) {
        var scheme = /^\w+:\/\//.exec(url);
        var i = 0;

        if (scheme) {
          i = scheme[0].length + 1;
        }

        var slashIndex = url.indexOf('/', i);

        if (slashIndex === -1) {
          return {
            origin: url,
            pathname: '/'
          };
        }

        return {
          origin: url.slice(0, slashIndex),
          pathname: url.slice(slashIndex)
        };
      };
    }, {}],
    739: [function (require, module, exports) {
      "use strict";

      var tus = require('tus-js-client');

      function isCordova() {
        return typeof window !== 'undefined' && (typeof window.PhoneGap !== 'undefined' || typeof window.Cordova !== 'undefined' || typeof window.cordova !== 'undefined');
      }

      function isReactNative() {
        return typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative';
      } // We override tus fingerprint to uppy’s `file.id`, since the `file.id`
      // now also includes `relativePath` for files added from folders.
      // This means you can add 2 identical files, if one is in folder a,
      // the other in folder b — `a/file.jpg` and `b/file.jpg`, when added
      // together with a folder, will be treated as 2 separate files.
      //
      // For React Native and Cordova, we let tus-js-client’s default
      // fingerprint handling take charge.


      module.exports = function getFingerprint(uppyFileObj) {
        return function (file, options) {
          if (isCordova() || isReactNative()) {
            return tus.defaultOptions.fingerprint(file, options);
          }

          var uppyFingerprint = ['tus', uppyFileObj.id, options.endpoint].join('-');
          return Promise.resolve(uppyFingerprint);
        };
      };
    }, {
      "tus-js-client": 612
    }],
    740: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var _require115 = require('@uppy/core'),
          BasePlugin = _require115.BasePlugin;

      var tus = require('tus-js-client');

      var _require116 = require('@uppy/companion-client'),
          Provider = _require116.Provider,
          RequestClient = _require116.RequestClient,
          Socket = _require116.Socket;

      var emitSocketProgress = require('@uppy/utils/lib/emitSocketProgress');

      var getSocketHost = require('@uppy/utils/lib/getSocketHost');

      var settle = require('@uppy/utils/lib/settle');

      var EventTracker = require('@uppy/utils/lib/EventTracker');

      var NetworkError = require('@uppy/utils/lib/NetworkError');

      var isNetworkError = require('@uppy/utils/lib/isNetworkError');

      var _require117 = require('@uppy/utils/lib/RateLimitedQueue'),
          RateLimitedQueue = _require117.RateLimitedQueue;

      var hasProperty = require('@uppy/utils/lib/hasProperty');

      var getFingerprint = require('./getFingerprint');
      /** @typedef {import('..').TusOptions} TusOptions */

      /** @typedef {import('tus-js-client').UploadOptions} RawTusOptions */

      /** @typedef {import('@uppy/core').Uppy} Uppy */

      /** @typedef {import('@uppy/core').UppyFile} UppyFile */

      /** @typedef {import('@uppy/core').FailedUppyFile<{}>} FailedUppyFile */

      /**
       * Extracted from https://github.com/tus/tus-js-client/blob/master/lib/upload.js#L13
       * excepted we removed 'fingerprint' key to avoid adding more dependencies
       *
       * @type {RawTusOptions}
       */


      var tusDefaultOptions = {
        endpoint: '',
        uploadUrl: null,
        metadata: {},
        uploadSize: null,
        onProgress: null,
        onChunkComplete: null,
        onSuccess: null,
        onError: null,
        overridePatchMethod: false,
        headers: {},
        addRequestId: false,
        chunkSize: Infinity,
        retryDelays: [0, 1000, 3000, 5000],
        parallelUploads: 1,
        removeFingerprintOnSuccess: false,
        uploadLengthDeferred: false,
        uploadDataDuringCreation: false
      };
      /**
       * Tus resumable file uploader
       */

      module.exports = (_temp = _class = /*#__PURE__*/function (_BasePlugin8) {
        _inheritsLoose(Tus, _BasePlugin8);

        /**
         * @param {Uppy} uppy
         * @param {TusOptions} opts
         */
        function Tus(uppy, opts) {
          var _this200;

          _this200 = _BasePlugin8.call(this, uppy, opts) || this;
          _this200.type = 'uploader';
          _this200.id = _this200.opts.id || 'Tus';
          _this200.title = 'Tus'; // set default options

          var defaultOptions = {
            useFastRemoteRetry: true,
            limit: 5,
            retryDelays: [0, 1000, 3000, 5000],
            withCredentials: false
          }; // merge default options with the ones set by user

          /** @type {import("..").TusOptions} */

          _this200.opts = Object.assign({}, defaultOptions, opts);

          if ('autoRetry' in opts) {
            throw new Error('The `autoRetry` option was deprecated and has been removed.');
          }
          /**
           * Simultaneous upload limiting is shared across all uploads with this plugin.
           *
           * @type {RateLimitedQueue}
           */


          _this200.requests = new RateLimitedQueue(_this200.opts.limit);
          _this200.uploaders = Object.create(null);
          _this200.uploaderEvents = Object.create(null);
          _this200.uploaderSockets = Object.create(null);
          _this200.handleResetProgress = _this200.handleResetProgress.bind(_assertThisInitialized2(_this200));
          _this200.handleUpload = _this200.handleUpload.bind(_assertThisInitialized2(_this200));
          return _this200;
        }

        var _proto69 = Tus.prototype;

        _proto69.handleResetProgress = function handleResetProgress() {
          var files = Object.assign({}, this.uppy.getState().files);
          Object.keys(files).forEach(function (fileID) {
            // Only clone the file object if it has a Tus `uploadUrl` attached.
            if (files[fileID].tus && files[fileID].tus.uploadUrl) {
              var tusState = Object.assign({}, files[fileID].tus);
              delete tusState.uploadUrl;
              files[fileID] = Object.assign({}, files[fileID], {
                tus: tusState
              });
            }
          });
          this.uppy.setState({
            files: files
          });
        }
        /**
         * Clean up all references for a file's upload: the tus.Upload instance,
         * any events related to the file, and the Companion WebSocket connection.
         *
         * @param {string} fileID
         */
        ;

        _proto69.resetUploaderReferences = function resetUploaderReferences(fileID, opts) {
          if (opts === void 0) {
            opts = {};
          }

          if (this.uploaders[fileID]) {
            var uploader = this.uploaders[fileID];
            uploader.abort();

            if (opts.abort) {
              uploader.abort(true);
            }

            this.uploaders[fileID] = null;
          }

          if (this.uploaderEvents[fileID]) {
            this.uploaderEvents[fileID].remove();
            this.uploaderEvents[fileID] = null;
          }

          if (this.uploaderSockets[fileID]) {
            this.uploaderSockets[fileID].close();
            this.uploaderSockets[fileID] = null;
          }
        }
        /**
         * Create a new Tus upload.
         *
         * A lot can happen during an upload, so this is quite hard to follow!
         * - First, the upload is started. If the file was already paused by the time the upload starts, nothing should happen.
         *   If the `limit` option is used, the upload must be queued onto the `this.requests` queue.
         *   When an upload starts, we store the tus.Upload instance, and an EventTracker instance that manages the event listeners
         *   for pausing, cancellation, removal, etc.
         * - While the upload is in progress, it may be paused or cancelled.
         *   Pausing aborts the underlying tus.Upload, and removes the upload from the `this.requests` queue. All other state is
         *   maintained.
         *   Cancelling removes the upload from the `this.requests` queue, and completely aborts the upload-- the `tus.Upload`
         *   instance is aborted and discarded, the EventTracker instance is destroyed (removing all listeners).
         *   Resuming the upload uses the `this.requests` queue as well, to prevent selectively pausing and resuming uploads from
         *   bypassing the limit.
         * - After completing an upload, the tus.Upload and EventTracker instances are cleaned up, and the upload is marked as done
         *   in the `this.requests` queue.
         * - When an upload completed with an error, the same happens as on successful completion, but the `upload()` promise is
         *   rejected.
         *
         * When working on this function, keep in mind:
         *  - When an upload is completed or cancelled for any reason, the tus.Upload and EventTracker instances need to be cleaned
         *    up using this.resetUploaderReferences().
         *  - When an upload is cancelled or paused, for any reason, it needs to be removed from the `this.requests` queue using
         *    `queuedRequest.abort()`.
         *  - When an upload is completed for any reason, including errors, it needs to be marked as such using
         *    `queuedRequest.done()`.
         *  - When an upload is started or resumed, it needs to go through the `this.requests` queue. The `queuedRequest` variable
         *    must be updated so the other uses of it are valid.
         *  - Before replacing the `queuedRequest` variable, the previous `queuedRequest` must be aborted, else it will keep taking
         *    up a spot in the queue.
         *
         * @param {UppyFile} file for use with upload
         * @param {number} current file in a queue
         * @param {number} total number of files in a queue
         * @returns {Promise<void>}
         */
        ;

        _proto69.upload = function upload(file) {
          var _this201 = this;

          this.resetUploaderReferences(file.id); // Create a new tus upload

          return new Promise(function (resolve, reject) {
            _this201.uppy.emit('upload-started', file);

            var opts = Object.assign({}, _this201.opts, file.tus || {});
            /** @type {RawTusOptions} */

            var uploadOptions = Object.assign({}, tusDefaultOptions, opts); // We override tus fingerprint to uppy’s `file.id`, since the `file.id`
            // now also includes `relativePath` for files added from folders.
            // This means you can add 2 identical files, if one is in folder a,
            // the other in folder b.

            uploadOptions.fingerprint = getFingerprint(file);

            uploadOptions.onBeforeRequest = function (req) {
              var xhr = req.getUnderlyingObject();
              xhr.withCredentials = !!opts.withCredentials;

              if (typeof opts.onBeforeRequest === 'function') {
                opts.onBeforeRequest(req);
              }
            };

            uploadOptions.onError = function (err) {
              _this201.uppy.log(err);

              var xhr = err.originalRequest ? err.originalRequest.getUnderlyingObject() : null;

              if (isNetworkError(xhr)) {
                err = new NetworkError(err, xhr);
              }

              _this201.resetUploaderReferences(file.id);

              queuedRequest.done();

              _this201.uppy.emit('upload-error', file, err);

              reject(err);
            };

            uploadOptions.onProgress = function (bytesUploaded, bytesTotal) {
              _this201.onReceiveUploadUrl(file, upload.url);

              _this201.uppy.emit('upload-progress', file, {
                uploader: _this201,
                bytesUploaded: bytesUploaded,
                bytesTotal: bytesTotal
              });
            };

            uploadOptions.onSuccess = function () {
              var uploadResp = {
                uploadURL: upload.url
              };

              _this201.resetUploaderReferences(file.id);

              queuedRequest.done();

              _this201.uppy.emit('upload-success', file, uploadResp);

              if (upload.url) {
                _this201.uppy.log("Download " + upload.file.name + " from " + upload.url);
              }

              resolve(upload);
            };

            var copyProp = function copyProp(obj, srcProp, destProp) {
              if (hasProperty(obj, srcProp) && !hasProperty(obj, destProp)) {
                obj[destProp] = obj[srcProp];
              }
            };
            /** @type {Record<string, string>} */


            var meta = {};
            var metaFields = Array.isArray(opts.metaFields) ? opts.metaFields // Send along all fields by default.
            : Object.keys(file.meta);
            metaFields.forEach(function (item) {
              meta[item] = file.meta[item];
            }); // tusd uses metadata fields 'filetype' and 'filename'

            copyProp(meta, 'type', 'filetype');
            copyProp(meta, 'name', 'filename');
            uploadOptions.metadata = meta;
            var upload = new tus.Upload(file.data, uploadOptions);
            _this201.uploaders[file.id] = upload;
            _this201.uploaderEvents[file.id] = new EventTracker(_this201.uppy);
            upload.findPreviousUploads().then(function (previousUploads) {
              var previousUpload = previousUploads[0];

              if (previousUpload) {
                _this201.uppy.log("[Tus] Resuming upload of " + file.id + " started at " + previousUpload.creationTime);

                upload.resumeFromPreviousUpload(previousUpload);
              }
            });

            var queuedRequest = _this201.requests.run(function () {
              if (!file.isPaused) {
                upload.start();
              } // Don't do anything here, the caller will take care of cancelling the upload itself
              // using resetUploaderReferences(). This is because resetUploaderReferences() has to be
              // called when this request is still in the queue, and has not been started yet, too. At
              // that point this cancellation function is not going to be called.
              // Also, we need to remove the request from the queue _without_ destroying everything
              // related to this upload to handle pauses.


              return function () {};
            });

            _this201.onFileRemove(file.id, function (targetFileID) {
              queuedRequest.abort();

              _this201.resetUploaderReferences(file.id, {
                abort: !!upload.url
              });

              resolve("upload " + targetFileID + " was removed");
            });

            _this201.onPause(file.id, function (isPaused) {
              if (isPaused) {
                // Remove this file from the queue so another file can start in its place.
                queuedRequest.abort();
                upload.abort();
              } else {
                // Resuming an upload should be queued, else you could pause and then
                // resume a queued upload to make it skip the queue.
                queuedRequest.abort();
                queuedRequest = _this201.requests.run(function () {
                  upload.start();
                  return function () {};
                });
              }
            });

            _this201.onPauseAll(file.id, function () {
              queuedRequest.abort();
              upload.abort();
            });

            _this201.onCancelAll(file.id, function () {
              queuedRequest.abort();

              _this201.resetUploaderReferences(file.id, {
                abort: !!upload.url
              });

              resolve("upload " + file.id + " was canceled");
            });

            _this201.onResumeAll(file.id, function () {
              queuedRequest.abort();

              if (file.error) {
                upload.abort();
              }

              queuedRequest = _this201.requests.run(function () {
                upload.start();
                return function () {};
              });
            });
          }).catch(function (err) {
            _this201.uppy.emit('upload-error', file, err);

            throw err;
          });
        }
        /**
         * @param {UppyFile} file for use with upload
         * @param {number} current file in a queue
         * @param {number} total number of files in a queue
         * @returns {Promise<void>}
         */
        ;

        _proto69.uploadRemote = function uploadRemote(file) {
          var _this202 = this;

          this.resetUploaderReferences(file.id);
          var opts = Object.assign({}, this.opts);

          if (file.tus) {
            // Install file-specific upload overrides.
            Object.assign(opts, file.tus);
          }

          this.uppy.emit('upload-started', file);
          this.uppy.log(file.remote.url);

          if (file.serverToken) {
            return this.connectToServerSocket(file);
          }

          return new Promise(function (resolve, reject) {
            var Client = file.remote.providerOptions.provider ? Provider : RequestClient;
            var client = new Client(_this202.uppy, file.remote.providerOptions); // !! cancellation is NOT supported at this stage yet

            client.post(file.remote.url, Object.assign({}, file.remote.body, {
              endpoint: opts.endpoint,
              uploadUrl: opts.uploadUrl,
              protocol: 'tus',
              size: file.data.size,
              headers: opts.headers,
              metadata: file.meta
            })).then(function (res) {
              _this202.uppy.setFileState(file.id, {
                serverToken: res.token
              });

              file = _this202.uppy.getFile(file.id);
              return _this202.connectToServerSocket(file);
            }).then(function () {
              resolve();
            }).catch(function (err) {
              _this202.uppy.emit('upload-error', file, err);

              reject(err);
            });
          });
        }
        /**
         * See the comment on the upload() method.
         *
         * Additionally, when an upload is removed, completed, or cancelled, we need to close the WebSocket connection. This is
         * handled by the resetUploaderReferences() function, so the same guidelines apply as in upload().
         *
         * @param {UppyFile} file
         */
        ;

        _proto69.connectToServerSocket = function connectToServerSocket(file) {
          var _this203 = this;

          return new Promise(function (resolve, reject) {
            var token = file.serverToken;
            var host = getSocketHost(file.remote.companionUrl);
            var socket = new Socket({
              target: host + "/api/" + token,
              autoOpen: false
            });
            _this203.uploaderSockets[file.id] = socket;
            _this203.uploaderEvents[file.id] = new EventTracker(_this203.uppy);

            _this203.onFileRemove(file.id, function () {
              queuedRequest.abort();
              socket.send('cancel', {});

              _this203.resetUploaderReferences(file.id);

              resolve("upload " + file.id + " was removed");
            });

            _this203.onPause(file.id, function (isPaused) {
              if (isPaused) {
                // Remove this file from the queue so another file can start in its place.
                queuedRequest.abort();
                socket.send('pause', {});
              } else {
                // Resuming an upload should be queued, else you could pause and then
                // resume a queued upload to make it skip the queue.
                queuedRequest.abort();
                queuedRequest = _this203.requests.run(function () {
                  socket.send('resume', {});
                  return function () {};
                });
              }
            });

            _this203.onPauseAll(file.id, function () {
              queuedRequest.abort();
              socket.send('pause', {});
            });

            _this203.onCancelAll(file.id, function () {
              queuedRequest.abort();
              socket.send('cancel', {});

              _this203.resetUploaderReferences(file.id);

              resolve("upload " + file.id + " was canceled");
            });

            _this203.onResumeAll(file.id, function () {
              queuedRequest.abort();

              if (file.error) {
                socket.send('pause', {});
              }

              queuedRequest = _this203.requests.run(function () {
                socket.send('resume', {});
                return function () {};
              });
            });

            _this203.onRetry(file.id, function () {
              // Only do the retry if the upload is actually in progress;
              // else we could try to send these messages when the upload is still queued.
              // We may need a better check for this since the socket may also be closed
              // for other reasons, like network failures.
              if (socket.isOpen) {
                socket.send('pause', {});
                socket.send('resume', {});
              }
            });

            _this203.onRetryAll(file.id, function () {
              // See the comment in the onRetry() call
              if (socket.isOpen) {
                socket.send('pause', {});
                socket.send('resume', {});
              }
            });

            socket.on('progress', function (progressData) {
              return emitSocketProgress(_this203, progressData, file);
            });
            socket.on('error', function (errData) {
              var message = errData.error.message;
              var error = Object.assign(new Error(message), {
                cause: errData.error
              }); // If the remote retry optimisation should not be used,
              // close the socket—this will tell companion to clear state and delete the file.

              if (!_this203.opts.useFastRemoteRetry) {
                _this203.resetUploaderReferences(file.id); // Remove the serverToken so that a new one will be created for the retry.


                _this203.uppy.setFileState(file.id, {
                  serverToken: null
                });
              } else {
                socket.close();
              }

              _this203.uppy.emit('upload-error', file, error);

              queuedRequest.done();
              reject(error);
            });
            socket.on('success', function (data) {
              var uploadResp = {
                uploadURL: data.url
              };

              _this203.uppy.emit('upload-success', file, uploadResp);

              _this203.resetUploaderReferences(file.id);

              queuedRequest.done();
              resolve();
            });

            var queuedRequest = _this203.requests.run(function () {
              socket.open();

              if (file.isPaused) {
                socket.send('pause', {});
              } // Don't do anything here, the caller will take care of cancelling the upload itself
              // using resetUploaderReferences(). This is because resetUploaderReferences() has to be
              // called when this request is still in the queue, and has not been started yet, too. At
              // that point this cancellation function is not going to be called.
              // Also, we need to remove the request from the queue _without_ destroying everything
              // related to this upload to handle pauses.


              return function () {};
            });
          });
        }
        /**
         * Store the uploadUrl on the file options, so that when Golden Retriever
         * restores state, we will continue uploading to the correct URL.
         *
         * @param {UppyFile} file
         * @param {string} uploadURL
         */
        ;

        _proto69.onReceiveUploadUrl = function onReceiveUploadUrl(file, uploadURL) {
          var currentFile = this.uppy.getFile(file.id);
          if (!currentFile) return; // Only do the update if we didn't have an upload URL yet.

          if (!currentFile.tus || currentFile.tus.uploadUrl !== uploadURL) {
            this.uppy.log('[Tus] Storing upload url');
            this.uppy.setFileState(currentFile.id, {
              tus: Object.assign({}, currentFile.tus, {
                uploadUrl: uploadURL
              })
            });
          }
        }
        /**
         * @param {string} fileID
         * @param {function(string): void} cb
         */
        ;

        _proto69.onFileRemove = function onFileRemove(fileID, cb) {
          this.uploaderEvents[fileID].on('file-removed', function (file) {
            if (fileID === file.id) cb(file.id);
          });
        }
        /**
         * @param {string} fileID
         * @param {function(boolean): void} cb
         */
        ;

        _proto69.onPause = function onPause(fileID, cb) {
          this.uploaderEvents[fileID].on('upload-pause', function (targetFileID, isPaused) {
            if (fileID === targetFileID) {
              // const isPaused = this.uppy.pauseResume(fileID)
              cb(isPaused);
            }
          });
        }
        /**
         * @param {string} fileID
         * @param {function(): void} cb
         */
        ;

        _proto69.onRetry = function onRetry(fileID, cb) {
          this.uploaderEvents[fileID].on('upload-retry', function (targetFileID) {
            if (fileID === targetFileID) {
              cb();
            }
          });
        }
        /**
         * @param {string} fileID
         * @param {function(): void} cb
         */
        ;

        _proto69.onRetryAll = function onRetryAll(fileID, cb) {
          var _this204 = this;

          this.uploaderEvents[fileID].on('retry-all', function () {
            if (!_this204.uppy.getFile(fileID)) return;
            cb();
          });
        }
        /**
         * @param {string} fileID
         * @param {function(): void} cb
         */
        ;

        _proto69.onPauseAll = function onPauseAll(fileID, cb) {
          var _this205 = this;

          this.uploaderEvents[fileID].on('pause-all', function () {
            if (!_this205.uppy.getFile(fileID)) return;
            cb();
          });
        }
        /**
         * @param {string} fileID
         * @param {function(): void} cb
         */
        ;

        _proto69.onCancelAll = function onCancelAll(fileID, cb) {
          var _this206 = this;

          this.uploaderEvents[fileID].on('cancel-all', function () {
            if (!_this206.uppy.getFile(fileID)) return;
            cb();
          });
        }
        /**
         * @param {string} fileID
         * @param {function(): void} cb
         */
        ;

        _proto69.onResumeAll = function onResumeAll(fileID, cb) {
          var _this207 = this;

          this.uploaderEvents[fileID].on('resume-all', function () {
            if (!_this207.uppy.getFile(fileID)) return;
            cb();
          });
        }
        /**
         * @param {(UppyFile | FailedUppyFile)[]} files
         */
        ;

        _proto69.uploadFiles = function uploadFiles(files) {
          var _this208 = this;

          var promises = files.map(function (file, i) {
            var current = i + 1;
            var total = files.length;

            if ('error' in file && file.error) {
              return Promise.reject(new Error(file.error));
            }

            if (file.isRemote) {
              // We emit upload-started here, so that it's also emitted for files
              // that have to wait due to the `limit` option.
              // Don't double-emit upload-started for Golden Retriever-restored files that were already started
              if (!file.progress.uploadStarted || !file.isRestored) {
                _this208.uppy.emit('upload-started', file);
              }

              return _this208.uploadRemote(file, current, total);
            } // Don't double-emit upload-started for Golden Retriever-restored files that were already started


            if (!file.progress.uploadStarted || !file.isRestored) {
              _this208.uppy.emit('upload-started', file);
            }

            return _this208.upload(file, current, total);
          });
          return settle(promises);
        }
        /**
         * @param {string[]} fileIDs
         */
        ;

        _proto69.handleUpload = function handleUpload(fileIDs) {
          var _this209 = this;

          if (fileIDs.length === 0) {
            this.uppy.log('[Tus] No files to upload');
            return Promise.resolve();
          }

          if (this.opts.limit === 0) {
            this.uppy.log('[Tus] When uploading multiple files at once, consider setting the `limit` option (to `10` for example), to limit the number of concurrent uploads, which helps prevent memory and network issues: https://uppy.io/docs/tus/#limit-0', 'warning');
          }

          this.uppy.log('[Tus] Uploading...');
          var filesToUpload = fileIDs.map(function (fileID) {
            return _this209.uppy.getFile(fileID);
          });
          return this.uploadFiles(filesToUpload).then(function () {
            return null;
          });
        };

        _proto69.install = function install() {
          this.uppy.setState({
            capabilities: Object.assign({}, this.uppy.getState().capabilities, {
              resumableUploads: true
            })
          });
          this.uppy.addUploader(this.handleUpload);
          this.uppy.on('reset-progress', this.handleResetProgress);
        };

        _proto69.uninstall = function uninstall() {
          this.uppy.setState({
            capabilities: Object.assign({}, this.uppy.getState().capabilities, {
              resumableUploads: false
            })
          });
          this.uppy.removeUploader(this.handleUpload);
        };

        return Tus;
      }(BasePlugin), _class.VERSION = "2.0.1", _temp);
    }, {
      "./getFingerprint": 739,
      "@uppy/companion-client": 640,
      "@uppy/core": 645,
      "@uppy/utils/lib/EventTracker": 746,
      "@uppy/utils/lib/NetworkError": 748,
      "@uppy/utils/lib/RateLimitedQueue": 750,
      "@uppy/utils/lib/emitSocketProgress": 755,
      "@uppy/utils/lib/getSocketHost": 769,
      "@uppy/utils/lib/hasProperty": 773,
      "@uppy/utils/lib/isNetworkError": 776,
      "@uppy/utils/lib/settle": 783,
      "tus-js-client": 612
    }],
    741: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var _require118 = require('@uppy/core'),
          UIPlugin = _require118.UIPlugin;

      var _require119 = require('preact'),
          h = _require119.h;

      var _require120 = require('@uppy/companion-client'),
          SearchProvider = _require120.SearchProvider;

      var _require121 = require('@uppy/provider-views'),
          SearchProviderViews = _require121.SearchProviderViews;
      /**
       * Unsplash
       *
       */


      module.exports = (_temp = _class = /*#__PURE__*/function (_UIPlugin17) {
        _inheritsLoose(Unsplash, _UIPlugin17);

        function Unsplash(uppy, opts) {
          var _this210;

          _this210 = _UIPlugin17.call(this, uppy, opts) || this;
          _this210.id = _this210.opts.id || 'Unsplash';
          _this210.title = _this210.opts.title || 'Unsplash';
          _this210.type = 'acquirer';

          _this210.icon = function () {
            return h("svg", {
              viewBox: "0 0 32 32",
              height: "32",
              width: "32",
              "aria-hidden": "true"
            }, h("path", {
              d: "M46.575 10.883v-9h12v9zm12 5h10v18h-32v-18h10v9h12z",
              fill: "#fff"
            }), h("rect", {
              className: "uppy-ProviderIconBg",
              width: "32",
              height: "32",
              rx: "16"
            }), h("path", {
              d: "M13 12.5V8h6v4.5zm6 2.5h5v9H8v-9h5v4.5h6z",
              fill: "#fff"
            }));
          };

          var defaultOptions = {};
          _this210.opts = Object.assign({}, defaultOptions, opts);
          _this210.hostname = _this210.opts.companionUrl;

          if (!_this210.hostname) {
            throw new Error('Companion hostname is required, please consult https://uppy.io/docs/companion');
          }

          _this210.provider = new SearchProvider(uppy, {
            companionUrl: _this210.opts.companionUrl,
            companionHeaders: _this210.opts.companionHeaders,
            companionCookiesRule: _this210.opts.companionCookiesRule,
            provider: 'unsplash',
            pluginId: _this210.id
          });
          return _this210;
        }

        var _proto70 = Unsplash.prototype;

        _proto70.install = function install() {
          this.view = new SearchProviderViews(this, {
            provider: this.provider
          });
          var target = this.opts.target;

          if (target) {
            this.mount(target, this);
          }
        };

        _proto70.onFirstRender = function onFirstRender() {// do nothing
        };

        _proto70.render = function render(state) {
          return this.view.render(state);
        };

        _proto70.uninstall = function uninstall() {
          this.unmount();
        };

        return Unsplash;
      }(UIPlugin), _class.VERSION = "1.0.1", _temp);
    }, {
      "@uppy/companion-client": 640,
      "@uppy/core": 645,
      "@uppy/provider-views": 716,
      "preact": 595
    }],
    742: [function (require, module, exports) {
      "use strict";

      var _require122 = require('preact'),
          h = _require122.h,
          Component = _require122.Component;

      var UrlUI = /*#__PURE__*/function (_Component13) {
        _inheritsLoose(UrlUI, _Component13);

        function UrlUI(props) {
          var _this211;

          _this211 = _Component13.call(this, props) || this;
          _this211.handleKeyPress = _this211.handleKeyPress.bind(_assertThisInitialized2(_this211));
          _this211.handleClick = _this211.handleClick.bind(_assertThisInitialized2(_this211));
          return _this211;
        }

        var _proto71 = UrlUI.prototype;

        _proto71.componentDidMount = function componentDidMount() {
          this.input.value = '';
        };

        _proto71.handleKeyPress = function handleKeyPress(ev) {
          if (ev.keyCode === 13) {
            this.props.addFile(this.input.value);
          }
        };

        _proto71.handleClick = function handleClick() {
          this.props.addFile(this.input.value);
        };

        _proto71.render = function render() {
          var _this212 = this;

          return h("div", {
            className: "uppy-Url"
          }, h("input", {
            className: "uppy-u-reset uppy-c-textInput uppy-Url-input",
            type: "text",
            "aria-label": this.props.i18n('enterUrlToImport'),
            placeholder: this.props.i18n('enterUrlToImport'),
            onKeyUp: this.handleKeyPress,
            ref: function ref(input) {
              _this212.input = input;
            },
            "data-uppy-super-focusable": true
          }), h("button", {
            className: "uppy-u-reset uppy-c-btn uppy-c-btn-primary uppy-Url-importButton",
            type: "button",
            onClick: this.handleClick
          }, this.props.i18n('import')));
        };

        return UrlUI;
      }(Component);

      module.exports = UrlUI;
    }, {
      "preact": 595
    }],
    743: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var _require123 = require('@uppy/core'),
          UIPlugin = _require123.UIPlugin;

      var _require124 = require('preact'),
          h = _require124.h;

      var _require125 = require('@uppy/companion-client'),
          RequestClient = _require125.RequestClient;

      var UrlUI = require('./UrlUI.js');

      var forEachDroppedOrPastedUrl = require('./utils/forEachDroppedOrPastedUrl');

      function UrlIcon() {
        return h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          width: "32",
          height: "32",
          viewBox: "0 0 32 32"
        }, h("g", {
          fill: "none",
          fillRule: "evenodd"
        }, h("rect", {
          className: "uppy-ProviderIconBg",
          fill: "#FF753E",
          width: "32",
          height: "32",
          rx: "16"
        }), h("path", {
          d: "M22.788 15.389l-2.199 2.19a3.184 3.184 0 0 1-.513.437c-.806.584-1.686.876-2.638.876a4.378 4.378 0 0 1-3.519-1.752c-.22-.292-.146-.802.147-1.021.293-.22.806-.146 1.026.146.953 1.313 2.785 1.532 4.105.583a.571.571 0 0 0 .293-.292l2.199-2.189c1.1-1.167 1.1-2.992-.073-4.086a2.976 2.976 0 0 0-4.105 0l-1.246 1.24a.71.71 0 0 1-1.026 0 .703.703 0 0 1 0-1.022l1.246-1.24a4.305 4.305 0 0 1 6.083 0c1.833 1.605 1.906 4.451.22 6.13zm-7.183 5.035l-1.246 1.24a2.976 2.976 0 0 1-4.105 0c-1.172-1.094-1.172-2.991-.073-4.086l2.2-2.19.292-.291c.66-.438 1.393-.657 2.2-.584.805.146 1.465.51 1.905 1.168.22.292.733.365 1.026.146.293-.22.367-.73.147-1.022-.733-.949-1.76-1.532-2.859-1.678-1.1-.22-2.272.073-3.225.802l-.44.438-2.199 2.19c-1.686 1.75-1.612 4.524.074 6.202.88.803 1.979 1.241 3.078 1.241 1.1 0 2.199-.438 3.079-1.24l1.246-1.241a.703.703 0 0 0 0-1.022c-.294-.292-.807-.365-1.1-.073z",
          fill: "#FFF",
          fillRule: "nonzero"
        })));
      }
      /**
       * Url
       *
       */


      module.exports = (_temp = _class = /*#__PURE__*/function (_UIPlugin18) {
        _inheritsLoose(Url, _UIPlugin18);

        function Url(uppy, opts) {
          var _this213;

          _this213 = _UIPlugin18.call(this, uppy, opts) || this;
          _this213.id = _this213.opts.id || 'Url';
          _this213.title = _this213.opts.title || 'Link';
          _this213.type = 'acquirer';

          _this213.icon = function () {
            return h(UrlIcon, null);
          }; // Set default options and locale


          _this213.defaultLocale = {
            strings: {
              import: 'Import',
              enterUrlToImport: 'Enter URL to import a file',
              failedToFetch: 'Companion failed to fetch this URL, please make sure it’s correct',
              enterCorrectUrl: 'Incorrect URL: Please make sure you are entering a direct link to a file'
            }
          };
          var defaultOptions = {};
          _this213.opts = Object.assign({}, defaultOptions, opts);

          _this213.i18nInit();

          _this213.hostname = _this213.opts.companionUrl;

          if (!_this213.hostname) {
            throw new Error('Companion hostname is required, please consult https://uppy.io/docs/companion');
          } // Bind all event handlers for referencability


          _this213.getMeta = _this213.getMeta.bind(_assertThisInitialized2(_this213));
          _this213.addFile = _this213.addFile.bind(_assertThisInitialized2(_this213));
          _this213.handleRootDrop = _this213.handleRootDrop.bind(_assertThisInitialized2(_this213));
          _this213.handleRootPaste = _this213.handleRootPaste.bind(_assertThisInitialized2(_this213));
          _this213.client = new RequestClient(uppy, {
            companionUrl: _this213.opts.companionUrl,
            companionHeaders: _this213.opts.companionHeaders,
            companionCookiesRule: _this213.opts.companionCookiesRule
          });
          return _this213;
        }

        var _proto72 = Url.prototype;

        _proto72.getFileNameFromUrl = function getFileNameFromUrl(url) {
          return url.substring(url.lastIndexOf('/') + 1);
        };

        _proto72.checkIfCorrectURL = function checkIfCorrectURL(url) {
          if (!url) return false;
          var protocol = url.match(/^([a-z0-9]+):\/\//)[1];

          if (protocol !== 'http' && protocol !== 'https') {
            return false;
          }

          return true;
        };

        _proto72.addProtocolToURL = function addProtocolToURL(url) {
          var protocolRegex = /^[a-z0-9]+:\/\//;
          var defaultProtocol = 'http://';

          if (protocolRegex.test(url)) {
            return url;
          }

          return defaultProtocol + url;
        };

        _proto72.getMeta = function getMeta(url) {
          var _this214 = this;

          return this.client.post('url/meta', {
            url: url
          }).then(function (res) {
            if (res.error) {
              _this214.uppy.log('[URL] Error:');

              _this214.uppy.log(res.error);

              throw new Error('Failed to fetch the file');
            }

            return res;
          });
        };

        _proto72.addFile = function addFile(url) {
          var _this215 = this;

          url = this.addProtocolToURL(url);

          if (!this.checkIfCorrectURL(url)) {
            this.uppy.log("[URL] Incorrect URL entered: " + url);
            this.uppy.info(this.i18n('enterCorrectUrl'), 'error', 4000);
            return;
          }

          return this.getMeta(url).then(function (meta) {
            var tagFile = {
              source: _this215.id,
              name: _this215.getFileNameFromUrl(url),
              type: meta.type,
              data: {
                size: meta.size
              },
              isRemote: true,
              body: {
                url: url
              },
              remote: {
                companionUrl: _this215.opts.companionUrl,
                url: _this215.hostname + "/url/get",
                body: {
                  fileId: url,
                  url: url
                },
                providerOptions: _this215.client.opts
              }
            };
            return tagFile;
          }).then(function (tagFile) {
            _this215.uppy.log('[Url] Adding remote file');

            try {
              return _this215.uppy.addFile(tagFile);
            } catch (err) {
              if (!err.isRestriction) {
                _this215.uppy.log(err);
              }

              return err;
            }
          }).catch(function (err) {
            _this215.uppy.log(err);

            _this215.uppy.info({
              message: _this215.i18n('failedToFetch'),
              details: err
            }, 'error', 4000);

            return err;
          });
        };

        _proto72.handleRootDrop = function handleRootDrop(e) {
          var _this216 = this;

          forEachDroppedOrPastedUrl(e.dataTransfer, 'drop', function (url) {
            _this216.uppy.log("[URL] Adding file from dropped url: " + url);

            _this216.addFile(url);
          });
        };

        _proto72.handleRootPaste = function handleRootPaste(e) {
          var _this217 = this;

          forEachDroppedOrPastedUrl(e.clipboardData, 'paste', function (url) {
            _this217.uppy.log("[URL] Adding file from pasted url: " + url);

            _this217.addFile(url);
          });
        };

        _proto72.render = function render() {
          return h(UrlUI, {
            i18n: this.i18n,
            addFile: this.addFile
          });
        };

        _proto72.install = function install() {
          var target = this.opts.target;

          if (target) {
            this.mount(target, this);
          }
        };

        _proto72.uninstall = function uninstall() {
          this.unmount();
        };

        return Url;
      }(UIPlugin), _class.VERSION = "2.0.1", _temp);
    }, {
      "./UrlUI.js": 742,
      "./utils/forEachDroppedOrPastedUrl": 744,
      "@uppy/companion-client": 640,
      "@uppy/core": 645,
      "preact": 595
    }],
    744: [function (require, module, exports) {
      "use strict";

      var toArray = require('@uppy/utils/lib/toArray');
      /*
        SITUATION
      
          1. Cross-browser dataTransfer.items
      
            paste in chrome [Copy Image]:
            0: {kind: "file", type: "image/png"}
            1: {kind: "string", type: "text/html"}
            paste in safari [Copy Image]:
            0: {kind: "file", type: "image/png"}
            1: {kind: "string", type: "text/html"}
            2: {kind: "string", type: "text/plain"}
            3: {kind: "string", type: "text/uri-list"}
            paste in firefox [Copy Image]:
            0: {kind: "file", type: "image/png"}
            1: {kind: "string", type: "text/html"}
      
            paste in chrome [Copy Image Address]:
            0: {kind: "string", type: "text/plain"}
            paste in safari [Copy Image Address]:
            0: {kind: "string", type: "text/plain"}
            1: {kind: "string", type: "text/uri-list"}
            paste in firefox [Copy Image Address]:
            0: {kind: "string", type: "text/plain"}
      
            drop in chrome [from browser]:
            0: {kind: "string", type: "text/uri-list"}
            1: {kind: "string", type: "text/html"}
            drop in safari [from browser]:
            0: {kind: "string", type: "text/uri-list"}
            1: {kind: "string", type: "text/html"}
            2: {kind: "file", type: "image/png"}
            drop in firefox [from browser]:
            0: {kind: "string", type: "text/uri-list"}
            1: {kind: "string", type: "text/x-moz-url"}
            2: {kind: "string", type: "text/plain"}
      
          2. We can determine if it's a 'copypaste' or a 'drop', but we can't discern between [Copy Image] and [Copy Image Address]
      
        CONCLUSION
      
          1. 'paste' ([Copy Image] or [Copy Image Address], we can't discern between these two)
            Don't do anything if there is 'file' item. .handlePaste in the DashboardPlugin will deal with all 'file' items.
            If there are no 'file' items - handle 'text/plain' items.
      
          2. 'drop'
            Take 'text/uri-list' items. Safari has an additional item of .kind === 'file', and you may worry about the item being
            duplicated (first by DashboardPlugin, and then by UrlPlugin, now), but don't. Directory handling code won't pay
            attention to this particular item of kind 'file'.
      */

      /**
       * Finds all links dropped/pasted from one browser window to another.
       *
       * @param {object} dataTransfer - DataTransfer instance, e.g. e.clipboardData, or e.dataTransfer
       * @param {string} isDropOrPaste - either 'drop' or 'paste'
       * @param {Function} callback - (urlString) => {}
       */


      module.exports = function forEachDroppedOrPastedUrl(dataTransfer, isDropOrPaste, callback) {
        var items = toArray(dataTransfer.items);
        var urlItems;

        switch (isDropOrPaste) {
          case 'paste':
            {
              var atLeastOneFileIsDragged = items.some(function (item) {
                return item.kind === 'file';
              });

              if (atLeastOneFileIsDragged) {
                return;
              }

              urlItems = items.filter(function (item) {
                return item.kind === 'string' && item.type === 'text/plain';
              });
              break;
            }

          case 'drop':
            {
              urlItems = items.filter(function (item) {
                return item.kind === 'string' && item.type === 'text/uri-list';
              });
              break;
            }

          default:
            {
              throw new Error("isDropOrPaste must be either 'drop' or 'paste', but it's " + isDropOrPaste);
            }
        }

        urlItems.forEach(function (item) {
          item.getAsString(function (urlString) {
            return callback(urlString);
          });
        });
      };
    }, {
      "@uppy/utils/lib/toArray": 784
    }],
    745: [function (require, module, exports) {
      "use strict";
      /**
       * Little AbortController proxy module so we can swap out the implementation easily later.
       */

      exports.AbortController = globalThis.AbortController;
      exports.AbortSignal = globalThis.AbortSignal;

      exports.createAbortError = function (message) {
        if (message === void 0) {
          message = 'Aborted';
        }

        return new DOMException(message, 'AbortError');
      };
    }, {}],
    746: [function (require, module, exports) {
      "use strict";

      var _emitter, _events;

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }
      /**
       * Create a wrapper around an event emitter with a `remove` method to remove
       * all events that were added using the wrapped emitter.
       */


      module.exports = (_emitter = /*#__PURE__*/_classPrivateFieldLooseKey("emitter"), _events = /*#__PURE__*/_classPrivateFieldLooseKey("events"), /*#__PURE__*/function () {
        function EventTracker(emitter) {
          Object.defineProperty(this, _emitter, {
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, _events, {
            writable: true,
            value: []
          });
          _classPrivateFieldLooseBase(this, _emitter)[_emitter] = emitter;
        }

        var _proto73 = EventTracker.prototype;

        _proto73.on = function on(event, fn) {
          _classPrivateFieldLooseBase(this, _events)[_events].push([event, fn]);

          return _classPrivateFieldLooseBase(this, _emitter)[_emitter].on(event, fn);
        };

        _proto73.remove = function remove() {
          for (var _iterator5 = _createForOfIteratorHelperLoose(_classPrivateFieldLooseBase(this, _events)[_events].splice(0)), _step5; !(_step5 = _iterator5()).done;) {
            var _step5$value = _step5.value,
                event = _step5$value[0],
                fn = _step5$value[1];

            _classPrivateFieldLooseBase(this, _emitter)[_emitter].off(event, fn);
          }
        };

        return EventTracker;
      }());
    }, {}],
    747: [function (require, module, exports) {
      "use strict";

      module.exports = ['a[href]:not([tabindex^="-"]):not([inert]):not([aria-hidden])', 'area[href]:not([tabindex^="-"]):not([inert]):not([aria-hidden])', 'input:not([disabled]):not([inert]):not([aria-hidden])', 'select:not([disabled]):not([inert]):not([aria-hidden])', 'textarea:not([disabled]):not([inert]):not([aria-hidden])', 'button:not([disabled]):not([inert]):not([aria-hidden])', 'iframe:not([tabindex^="-"]):not([inert]):not([aria-hidden])', 'object:not([tabindex^="-"]):not([inert]):not([aria-hidden])', 'embed:not([tabindex^="-"]):not([inert]):not([aria-hidden])', '[contenteditable]:not([tabindex^="-"]):not([inert]):not([aria-hidden])', '[tabindex]:not([tabindex^="-"]):not([inert]):not([aria-hidden])'];
    }, {}],
    748: [function (require, module, exports) {
      "use strict";

      var NetworkError = /*#__PURE__*/function (_Error5) {
        _inheritsLoose(NetworkError, _Error5);

        function NetworkError(error, xhr) {
          var _this218;

          if (xhr === void 0) {
            xhr = null;
          }

          _this218 = _Error5.call(this, "This looks like a network error, the endpoint might be blocked by an internet provider or a firewall.") || this;
          _this218.cause = error;
          _this218.isNetworkError = true;
          _this218.request = xhr;
          return _this218;
        }

        return NetworkError;
      }( /*#__PURE__*/_wrapNativeSuper2(Error));

      module.exports = NetworkError;
    }, {}],
    749: [function (require, module, exports) {
      "use strict";

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }

      var _aliveTimer = /*#__PURE__*/_classPrivateFieldLooseKey("aliveTimer");

      var _isDone = /*#__PURE__*/_classPrivateFieldLooseKey("isDone");

      var _onTimedOut = /*#__PURE__*/_classPrivateFieldLooseKey("onTimedOut");

      var _timeout = /*#__PURE__*/_classPrivateFieldLooseKey("timeout");
      /**
       * Helper to abort upload requests if there has not been any progress for `timeout` ms.
       * Create an instance using `timer = new ProgressTimeout(10000, onTimeout)`
       * Call `timer.progress()` to signal that there has been progress of any kind.
       * Call `timer.done()` when the upload has completed.
       */


      var ProgressTimeout = /*#__PURE__*/function () {
        function ProgressTimeout(timeout, timeoutHandler) {
          Object.defineProperty(this, _aliveTimer, {
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, _isDone, {
            writable: true,
            value: false
          });
          Object.defineProperty(this, _onTimedOut, {
            writable: true,
            value: void 0
          });
          Object.defineProperty(this, _timeout, {
            writable: true,
            value: void 0
          });
          _classPrivateFieldLooseBase(this, _timeout)[_timeout] = timeout;
          _classPrivateFieldLooseBase(this, _onTimedOut)[_onTimedOut] = timeoutHandler;
        }

        var _proto74 = ProgressTimeout.prototype;

        _proto74.progress = function progress() {
          // Some browsers fire another progress event when the upload is
          // cancelled, so we have to ignore progress after the timer was
          // told to stop.
          if (_classPrivateFieldLooseBase(this, _isDone)[_isDone]) return;

          if (_classPrivateFieldLooseBase(this, _timeout)[_timeout] > 0) {
            clearTimeout(_classPrivateFieldLooseBase(this, _aliveTimer)[_aliveTimer]);
            _classPrivateFieldLooseBase(this, _aliveTimer)[_aliveTimer] = setTimeout(_classPrivateFieldLooseBase(this, _onTimedOut)[_onTimedOut], _classPrivateFieldLooseBase(this, _timeout)[_timeout]);
          }
        };

        _proto74.done = function done() {
          if (!_classPrivateFieldLooseBase(this, _isDone)[_isDone]) {
            clearTimeout(_classPrivateFieldLooseBase(this, _aliveTimer)[_aliveTimer]);
            _classPrivateFieldLooseBase(this, _aliveTimer)[_aliveTimer] = null;
            _classPrivateFieldLooseBase(this, _isDone)[_isDone] = true;
          }
        };

        return ProgressTimeout;
      }();

      module.exports = ProgressTimeout;
    }, {}],
    750: [function (require, module, exports) {
      "use strict";

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }

      function createCancelError() {
        return new Error('Cancelled');
      }

      var _activeRequests = /*#__PURE__*/_classPrivateFieldLooseKey("activeRequests");

      var _queuedHandlers = /*#__PURE__*/_classPrivateFieldLooseKey("queuedHandlers");

      var _call = /*#__PURE__*/_classPrivateFieldLooseKey("call");

      var _queueNext = /*#__PURE__*/_classPrivateFieldLooseKey("queueNext");

      var _next = /*#__PURE__*/_classPrivateFieldLooseKey("next");

      var _queue = /*#__PURE__*/_classPrivateFieldLooseKey("queue");

      var _dequeue = /*#__PURE__*/_classPrivateFieldLooseKey("dequeue");

      var RateLimitedQueue = /*#__PURE__*/function () {
        function RateLimitedQueue(limit) {
          Object.defineProperty(this, _dequeue, {
            value: _dequeue2
          });
          Object.defineProperty(this, _queue, {
            value: _queue2
          });
          Object.defineProperty(this, _next, {
            value: _next2
          });
          Object.defineProperty(this, _queueNext, {
            value: _queueNext2
          });
          Object.defineProperty(this, _call, {
            value: _call2
          });
          Object.defineProperty(this, _activeRequests, {
            writable: true,
            value: 0
          });
          Object.defineProperty(this, _queuedHandlers, {
            writable: true,
            value: []
          });

          if (typeof limit !== 'number' || limit === 0) {
            this.limit = Infinity;
          } else {
            this.limit = limit;
          }
        }

        var _proto75 = RateLimitedQueue.prototype;

        _proto75.run = function run(fn, queueOptions) {
          if (_classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] < this.limit) {
            return _classPrivateFieldLooseBase(this, _call)[_call](fn);
          }

          return _classPrivateFieldLooseBase(this, _queue)[_queue](fn, queueOptions);
        };

        _proto75.wrapPromiseFunction = function wrapPromiseFunction(fn, queueOptions) {
          var _this219 = this;

          return function () {
            for (var _len22 = arguments.length, args = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {
              args[_key22] = arguments[_key22];
            }

            var queuedRequest;
            var outerPromise = new Promise(function (resolve, reject) {
              queuedRequest = _this219.run(function () {
                var cancelError;
                var innerPromise;

                try {
                  innerPromise = Promise.resolve(fn.apply(void 0, args));
                } catch (err) {
                  innerPromise = Promise.reject(err);
                }

                innerPromise.then(function (result) {
                  if (cancelError) {
                    reject(cancelError);
                  } else {
                    queuedRequest.done();
                    resolve(result);
                  }
                }, function (err) {
                  if (cancelError) {
                    reject(cancelError);
                  } else {
                    queuedRequest.done();
                    reject(err);
                  }
                });
                return function () {
                  cancelError = createCancelError();
                };
              }, queueOptions);
            });

            outerPromise.abort = function () {
              queuedRequest.abort();
            };

            return outerPromise;
          };
        };

        return RateLimitedQueue;
      }();

      function _call2(fn) {
        var _this220 = this;

        _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] += 1;
        var _done = false;
        var cancelActive;

        try {
          cancelActive = fn();
        } catch (err) {
          _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] -= 1;
          throw err;
        }

        return {
          abort: function abort() {
            if (_done) return;
            _done = true;
            _classPrivateFieldLooseBase(_this220, _activeRequests)[_activeRequests] -= 1;
            cancelActive();

            _classPrivateFieldLooseBase(_this220, _queueNext)[_queueNext]();
          },
          done: function done() {
            if (_done) return;
            _done = true;
            _classPrivateFieldLooseBase(_this220, _activeRequests)[_activeRequests] -= 1;

            _classPrivateFieldLooseBase(_this220, _queueNext)[_queueNext]();
          }
        };
      }

      function _queueNext2() {
        var _this221 = this;

        // Do it soon but not immediately, this allows clearing out the entire queue synchronously
        // one by one without continuously _advancing_ it (and starting new tasks before immediately
        // aborting them)
        queueMicrotask(function () {
          return _classPrivateFieldLooseBase(_this221, _next)[_next]();
        });
      }

      function _next2() {
        if (_classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] >= this.limit) {
          return;
        }

        if (_classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].length === 0) {
          return;
        } // Dispatch the next request, and update the abort/done handlers
        // so that cancelling it does the Right Thing (and doesn't just try
        // to dequeue an already-running request).


        var next = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].shift();

        var handler = _classPrivateFieldLooseBase(this, _call)[_call](next.fn);

        next.abort = handler.abort;
        next.done = handler.done;
      }

      function _queue2(fn, options) {
        var _this222 = this;

        if (options === void 0) {
          options = {};
        }

        var handler = {
          fn: fn,
          priority: options.priority || 0,
          abort: function abort() {
            _classPrivateFieldLooseBase(_this222, _dequeue)[_dequeue](handler);
          },
          done: function done() {
            throw new Error('Cannot mark a queued request as done: this indicates a bug');
          }
        };

        var index = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].findIndex(function (other) {
          return handler.priority > other.priority;
        });

        if (index === -1) {
          _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].push(handler);
        } else {
          _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].splice(index, 0, handler);
        }

        return handler;
      }

      function _dequeue2(handler) {
        var index = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].indexOf(handler);

        if (index !== -1) {
          _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].splice(index, 1);
        }
      }

      module.exports = {
        RateLimitedQueue: RateLimitedQueue,
        internalRateLimitedQueue: Symbol('__queue')
      };
    }, {}],
    751: [function (require, module, exports) {
      "use strict";

      var _apply;

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }

      var has = require('./hasProperty');

      function insertReplacement(source, rx, replacement) {
        var newParts = [];
        source.forEach(function (chunk) {
          // When the source contains multiple placeholders for interpolation,
          // we should ignore chunks that are not strings, because those
          // can be JSX objects and will be otherwise incorrectly turned into strings.
          // Without this condition we’d get this: [object Object] hello [object Object] my <button>
          if (typeof chunk !== 'string') {
            return newParts.push(chunk);
          }

          return rx[Symbol.split](chunk).forEach(function (raw, i, list) {
            if (raw !== '') {
              newParts.push(raw);
            } // Interlace with the `replacement` value


            if (i < list.length - 1) {
              newParts.push(replacement);
            }
          });
        });
        return newParts;
      }
      /**
       * Takes a string with placeholder variables like `%{smart_count} file selected`
       * and replaces it with values from options `{smart_count: 5}`
       *
       * @license https://github.com/airbnb/polyglot.js/blob/master/LICENSE
       * taken from https://github.com/airbnb/polyglot.js/blob/master/lib/polyglot.js#L299
       *
       * @param {string} phrase that needs interpolation, with placeholders
       * @param {object} options with values that will be used to replace placeholders
       * @returns {any[]} interpolated
       */


      function interpolate(phrase, options) {
        var dollarRegex = /\$/g;
        var dollarBillsYall = '$$$$';
        var interpolated = [phrase];
        if (options == null) return interpolated;

        for (var _i7 = 0, _Object$keys2 = Object.keys(options); _i7 < _Object$keys2.length; _i7++) {
          var arg = _Object$keys2[_i7];

          if (arg !== '_') {
            // Ensure replacement value is escaped to prevent special $-prefixed
            // regex replace tokens. the "$$$$" is needed because each "$" needs to
            // be escaped with "$" itself, and we need two in the resulting output.
            var replacement = options[arg];

            if (typeof replacement === 'string') {
              replacement = dollarRegex[Symbol.replace](replacement, dollarBillsYall);
            } // We create a new `RegExp` each time instead of using a more-efficient
            // string replace so that the same argument can be replaced multiple times
            // in the same phrase.


            interpolated = insertReplacement(interpolated, new RegExp("%\\{" + arg + "\\}", 'g'), replacement);
          }
        }

        return interpolated;
      }
      /**
       * Translates strings with interpolation & pluralization support.
       * Extensible with custom dictionaries and pluralization functions.
       *
       * Borrows heavily from and inspired by Polyglot https://github.com/airbnb/polyglot.js,
       * basically a stripped-down version of it. Differences: pluralization functions are not hardcoded
       * and can be easily added among with dictionaries, nested objects are used for pluralization
       * as opposed to `||||` delimeter
       *
       * Usage example: `translator.translate('files_chosen', {smart_count: 3})`
       */


      module.exports = (_apply = /*#__PURE__*/_classPrivateFieldLooseKey("apply"), /*#__PURE__*/function () {
        /**
         * @param {object|Array<object>} locales - locale or list of locales.
         */
        function Translator(locales) {
          Object.defineProperty(this, _apply, {
            value: _apply2
          });
          this.locale = {
            strings: {},
            pluralize: function pluralize(n) {
              if (n === 1) {
                return 0;
              }

              return 1;
            }
          };

          if (Array.isArray(locales)) {
            locales.forEach(_classPrivateFieldLooseBase(this, _apply)[_apply], this);
          } else {
            _classPrivateFieldLooseBase(this, _apply)[_apply](locales);
          }
        }
        /**
         * Public translate method
         *
         * @param {string} key
         * @param {object} options with values that will be used later to replace placeholders in string
         * @returns {string} translated (and interpolated)
         */


        var _proto76 = Translator.prototype;

        _proto76.translate = function translate(key, options) {
          return this.translateArray(key, options).join('');
        }
        /**
         * Get a translation and return the translated and interpolated parts as an array.
         *
         * @param {string} key
         * @param {object} options with values that will be used to replace placeholders
         * @returns {Array} The translated and interpolated parts, in order.
         */
        ;

        _proto76.translateArray = function translateArray(key, options) {
          if (!has(this.locale.strings, key)) {
            throw new Error("missing string: " + key);
          }

          var string = this.locale.strings[key];
          var hasPluralForms = typeof string === 'object';

          if (hasPluralForms) {
            if (options && typeof options.smart_count !== 'undefined') {
              var plural = this.locale.pluralize(options.smart_count);
              return interpolate(string[plural], options);
            }

            throw new Error('Attempted to use a string with plural forms, but no value was given for %{smart_count}');
          }

          return interpolate(string, options);
        };

        return Translator;
      }());

      function _apply2(locale) {
        if (!(locale != null && locale.strings)) {
          return;
        }

        var prevLocale = this.locale;
        this.locale = Object.assign({}, prevLocale, {
          strings: Object.assign({}, prevLocale.strings, locale.strings)
        });
        this.locale.pluralize = locale.pluralize || prevLocale.pluralize;
      }
    }, {
      "./hasProperty": 773
    }],
    752: [function (require, module, exports) {
      "use strict";
      /**
       * Save a <canvas> element's content to a Blob object.
       *
       * @param {HTMLCanvasElement} canvas
       * @returns {Promise}
       */

      module.exports = function canvasToBlob(canvas, type, quality) {
        return new Promise(function (resolve) {
          canvas.toBlob(resolve, type, quality);
        });
      };
    }, {}],
    753: [function (require, module, exports) {
      "use strict";

      var DATA_URL_PATTERN = /^data:([^/]+\/[^,;]+(?:[^,]*?))(;base64)?,([\s\S]*)$/;

      module.exports = function dataURItoBlob(dataURI, opts, toFile) {
        var _ref, _opts$mimeType; // get the base64 data


        var dataURIData = DATA_URL_PATTERN.exec(dataURI); // user may provide mime type, if not get it from data URI

        var mimeType = (_ref = (_opts$mimeType = opts.mimeType) != null ? _opts$mimeType : dataURIData == null ? void 0 : dataURIData[1]) != null ? _ref : 'plain/text';
        var data;

        if (dataURIData[2] != null) {
          var binary = atob(decodeURIComponent(dataURIData[3]));
          var bytes = new Uint8Array(binary.length);

          for (var i = 0; i < binary.length; i++) {
            bytes[i] = binary.charCodeAt(i);
          }

          data = [bytes];
        } else {
          data = [decodeURIComponent(dataURIData[3])];
        } // Convert to a File?


        if (toFile) {
          return new File(data, opts.name || '', {
            type: mimeType
          });
        }

        return new Blob(data, {
          type: mimeType
        });
      };
    }, {}],
    754: [function (require, module, exports) {
      "use strict";

      var _require126 = require('./AbortController'),
          createAbortError = _require126.createAbortError;
      /**
       * Return a Promise that resolves after `ms` milliseconds.
       *
       * @param {number} ms - Number of milliseconds to wait.
       * @param {{ signal?: AbortSignal }} [opts] - An abort signal that can be used to cancel the delay early.
       * @returns {Promise<void>} A Promise that resolves after the given amount of `ms`.
       */


      module.exports = function delay(ms, opts) {
        return new Promise(function (resolve, reject) {
          var _opts$signal, _opts$signal2;

          if (opts != null && (_opts$signal = opts.signal) != null && _opts$signal.aborted) {
            return reject(createAbortError());
          }

          var timeout = setTimeout(function () {
            cleanup(); // eslint-disable-line no-use-before-define

            resolve();
          }, ms);

          function onabort() {
            clearTimeout(timeout);
            cleanup(); // eslint-disable-line no-use-before-define

            reject(createAbortError());
          }

          opts == null ? void 0 : (_opts$signal2 = opts.signal) == null ? void 0 : _opts$signal2.addEventListener('abort', onabort);

          function cleanup() {
            var _opts$signal3;

            opts == null ? void 0 : (_opts$signal3 = opts.signal) == null ? void 0 : _opts$signal3.removeEventListener('abort', onabort);
          }

          return undefined;
        });
      };
    }, {
      "./AbortController": 745
    }],
    755: [function (require, module, exports) {
      "use strict";

      var throttle = require('lodash.throttle');

      function emitSocketProgress(uploader, progressData, file) {
        var progress = progressData.progress,
            bytesUploaded = progressData.bytesUploaded,
            bytesTotal = progressData.bytesTotal;

        if (progress) {
          uploader.uppy.log("Upload progress: " + progress);
          uploader.uppy.emit('upload-progress', file, {
            uploader: uploader,
            bytesUploaded: bytesUploaded,
            bytesTotal: bytesTotal
          });
        }
      }

      module.exports = throttle(emitSocketProgress, 300, {
        leading: true,
        trailing: true
      });
    }, {
      "lodash.throttle": 587
    }],
    756: [function (require, module, exports) {
      "use strict";

      var NetworkError = require('./NetworkError');
      /**
       * Wrapper around window.fetch that throws a NetworkError when appropriate
       */


      module.exports = function fetchWithNetworkError() {
        return fetch.apply(void 0, arguments).catch(function (err) {
          if (err.name === 'AbortError') {
            throw err;
          } else {
            throw new NetworkError(err);
          }
        });
      };
    }, {
      "./NetworkError": 748
    }],
    757: [function (require, module, exports) {
      "use strict";

      var isDOMElement = require('./isDOMElement');
      /**
       * Find one or more DOM elements.
       *
       * @param {string|Node} element
       * @returns {Node[]|null}
       */


      module.exports = function findAllDOMElements(element) {
        if (typeof element === 'string') {
          var elements = document.querySelectorAll(element);
          return elements.length === 0 ? null : Array.from(elements);
        }

        if (typeof element === 'object' && isDOMElement(element)) {
          return [element];
        }

        return null;
      };
    }, {
      "./isDOMElement": 774
    }],
    758: [function (require, module, exports) {
      "use strict";

      var isDOMElement = require('./isDOMElement');
      /**
       * Find a DOM element.
       *
       * @param {Node|string} element
       * @returns {Node|null}
       */


      module.exports = function findDOMElement(element, context) {
        if (context === void 0) {
          context = document;
        }

        if (typeof element === 'string') {
          return context.querySelector(element);
        }

        if (isDOMElement(element)) {
          return element;
        }

        return null;
      };
    }, {
      "./isDOMElement": 774
    }],
    759: [function (require, module, exports) {
      "use strict";

      function encodeCharacter(character) {
        return character.charCodeAt(0).toString(32);
      }

      function encodeFilename(name) {
        var suffix = '';
        return name.replace(/[^A-Z0-9]/ig, function (character) {
          suffix += "-" + encodeCharacter(character);
          return '/';
        }) + suffix;
      }
      /**
       * Takes a file object and turns it into fileID, by converting file.name to lowercase,
       * removing extra characters and adding type, size and lastModified
       *
       * @param {object} file
       * @returns {string} the fileID
       */


      module.exports = function generateFileID(file) {
        // It's tempting to do `[items].filter(Boolean).join('-')` here, but that
        // is slower! simple string concatenation is fast
        var id = 'uppy';

        if (typeof file.name === 'string') {
          id += "-" + encodeFilename(file.name.toLowerCase());
        }

        if (file.type !== undefined) {
          id += "-" + file.type;
        }

        if (file.meta && typeof file.meta.relativePath === 'string') {
          id += "-" + encodeFilename(file.meta.relativePath.toLowerCase());
        }

        if (file.data.size !== undefined) {
          id += "-" + file.data.size;
        }

        if (file.data.lastModified !== undefined) {
          id += "-" + file.data.lastModified;
        }

        return id;
      };
    }, {}],
    760: [function (require, module, exports) {
      "use strict";

      module.exports = function getBytesRemaining(fileProgress) {
        return fileProgress.bytesTotal - fileProgress.bytesUploaded;
      };
    }, {}],
    761: [function (require, module, exports) {
      "use strict";

      var webkitGetAsEntryApi = require('./utils/webkitGetAsEntryApi/index');

      var fallbackApi = require('./utils/fallbackApi');
      /**
       * Returns a promise that resolves to the array of dropped files (if a folder is
       * dropped, and browser supports folder parsing - promise resolves to the flat
       * array of all files in all directories).
       * Each file has .relativePath prop appended to it (e.g. "/docs/Prague/ticket_from_prague_to_ufa.pdf")
       * if browser supports it. Otherwise it's undefined.
       *
       * @param {DataTransfer} dataTransfer
       * @param {Function} logDropError - a function that's called every time some
       * folder or some file error out (e.g. because of the folder name being too long
       * on Windows). Notice that resulting promise will always be resolved anyway.
       *
       * @returns {Promise} - Array<File>
       */


      module.exports = function getDroppedFiles(dataTransfer, _temp5) {
        var _ref45 = _temp5 === void 0 ? {} : _temp5,
            _ref45$logDropError = _ref45.logDropError,
            logDropError = _ref45$logDropError === void 0 ? function () {} : _ref45$logDropError;

        var _dataTransfer$items; // Get all files from all subdirs. Works (at least) in Chrome, Mozilla, and Safari


        if ((_dataTransfer$items = dataTransfer.items) != null && _dataTransfer$items[0] && 'webkitGetAsEntry' in dataTransfer.items[0]) {
          return webkitGetAsEntryApi(dataTransfer, logDropError); // Otherwise just return all first-order files
        }

        return fallbackApi(dataTransfer);
      };
    }, {
      "./utils/fallbackApi": 762,
      "./utils/webkitGetAsEntryApi/index": 765
    }],
    762: [function (require, module, exports) {
      "use strict";

      var toArray = require('../../toArray'); // .files fallback, should be implemented in any browser


      module.exports = function fallbackApi(dataTransfer) {
        var files = toArray(dataTransfer.files);
        return Promise.resolve(files);
      };
    }, {
      "../../toArray": 784
    }],
    763: [function (require, module, exports) {
      "use strict";
      /**
       * Recursive function, calls the original callback() when the directory is entirely parsed.
       *
       * @param {FileSystemDirectoryReader} directoryReader
       * @param {Array} oldEntries
       * @param {Function} logDropError
       * @param {Function} callback - called with ([ all files and directories in that directoryReader ])
       */

      module.exports = function getFilesAndDirectoriesFromDirectory(directoryReader, oldEntries, logDropError, _ref46) {
        var onSuccess = _ref46.onSuccess;
        directoryReader.readEntries(function (entries) {
          var newEntries = [].concat(oldEntries, entries); // According to the FileSystem API spec, getFilesAndDirectoriesFromDirectory()
          // must be called until it calls the onSuccess with an empty array.

          if (entries.length) {
            setTimeout(function () {
              getFilesAndDirectoriesFromDirectory(directoryReader, newEntries, logDropError, {
                onSuccess: onSuccess
              });
            }, 0); // Done iterating this particular directory
          } else {
            onSuccess(newEntries);
          }
        }, // Make sure we resolve on error anyway, it's fine if only one directory couldn't be parsed!
        function (error) {
          logDropError(error);
          onSuccess(oldEntries);
        });
      };
    }, {}],
    764: [function (require, module, exports) {
      "use strict";
      /**
       * Get the relative path from the FileEntry#fullPath, because File#webkitRelativePath is always '', at least onDrop.
       *
       * @param {FileEntry} fileEntry
       *
       * @returns {string|null} - if file is not in a folder - return null (this is to
       * be consistent with .relativePath-s of files selected from My Device). If file
       * is in a folder - return its fullPath, e.g. '/simpsons/hi.jpeg'.
       */

      module.exports = function getRelativePath(fileEntry) {
        // fileEntry.fullPath - "/simpsons/hi.jpeg" or undefined (for browsers that don't support it)
        // fileEntry.name - "hi.jpeg"
        if (!fileEntry.fullPath || fileEntry.fullPath === "/" + fileEntry.name) {
          return null;
        }

        return fileEntry.fullPath;
      };
    }, {}],
    765: [function (require, module, exports) {
      "use strict";

      var toArray = require('../../../toArray');

      var getRelativePath = require('./getRelativePath');

      var getFilesAndDirectoriesFromDirectory = require('./getFilesAndDirectoriesFromDirectory');

      module.exports = function webkitGetAsEntryApi(dataTransfer, logDropError) {
        var files = [];
        var rootPromises = [];
        /**
         * Returns a resolved promise, when :files array is enhanced
         *
         * @param {(FileSystemFileEntry|FileSystemDirectoryEntry)} entry
         * @returns {Promise} - empty promise that resolves when :files is enhanced with a file
         */

        var createPromiseToAddFileOrParseDirectory = function createPromiseToAddFileOrParseDirectory(entry) {
          return new Promise(function (resolve) {
            // This is a base call
            if (entry.isFile) {
              // Creates a new File object which can be used to read the file.
              entry.file(function (file) {
                // eslint-disable-next-line no-param-reassign
                file.relativePath = getRelativePath(entry);
                files.push(file);
                resolve();
              }, // Make sure we resolve on error anyway, it's fine if only one file couldn't be read!
              function (error) {
                logDropError(error);
                resolve();
              }); // This is a recursive call
            } else if (entry.isDirectory) {
              var directoryReader = entry.createReader();
              getFilesAndDirectoriesFromDirectory(directoryReader, [], logDropError, {
                onSuccess: function onSuccess(entries) {
                  return resolve(Promise.all(entries.map(createPromiseToAddFileOrParseDirectory)));
                }
              });
            }
          });
        }; // For each dropped item, - make sure it's a file/directory, and start deepening in!


        toArray(dataTransfer.items).forEach(function (item) {
          var entry = item.webkitGetAsEntry(); // :entry can be null when we drop the url e.g.

          if (entry) {
            rootPromises.push(createPromiseToAddFileOrParseDirectory(entry));
          }
        });
        return Promise.all(rootPromises).then(function () {
          return files;
        });
      };
    }, {
      "../../../toArray": 784,
      "./getFilesAndDirectoriesFromDirectory": 763,
      "./getRelativePath": 764
    }],
    766: [function (require, module, exports) {
      "use strict";
      /**
       * Takes a full filename string and returns an object {name, extension}
       *
       * @param {string} fullFileName
       * @returns {object} {name, extension}
       */

      module.exports = function getFileNameAndExtension(fullFileName) {
        var lastDot = fullFileName.lastIndexOf('.'); // these count as no extension: "no-dot", "trailing-dot."

        if (lastDot === -1 || lastDot === fullFileName.length - 1) {
          return {
            name: fullFileName,
            extension: undefined
          };
        }

        return {
          name: fullFileName.slice(0, lastDot),
          extension: fullFileName.slice(lastDot + 1)
        };
      };
    }, {}],
    767: [function (require, module, exports) {
      "use strict";

      var getFileNameAndExtension = require('./getFileNameAndExtension');

      var mimeTypes = require('./mimeTypes');

      module.exports = function getFileType(file) {
        var _getFileNameAndExtens;

        if (file.type) return file.type;
        var fileExtension = file.name ? (_getFileNameAndExtens = getFileNameAndExtension(file.name).extension) == null ? void 0 : _getFileNameAndExtens.toLowerCase() : null;

        if (fileExtension && fileExtension in mimeTypes) {
          // else, see if we can map extension to a mime type
          return mimeTypes[fileExtension];
        } // if all fails, fall back to a generic byte stream type


        return 'application/octet-stream';
      };
    }, {
      "./getFileNameAndExtension": 766,
      "./mimeTypes": 779
    }],
    768: [function (require, module, exports) {
      "use strict";

      var mimeToExtensions = {
        'audio/mp3': 'mp3',
        'audio/mp4': 'mp4',
        'audio/ogg': 'ogg',
        'audio/webm': 'webm',
        'image/gif': 'gif',
        'image/heic': 'heic',
        'image/heif': 'heif',
        'image/jpeg': 'jpg',
        'image/png': 'png',
        'image/svg+xml': 'svg',
        'video/mp4': 'mp4',
        'video/ogg': 'ogv',
        'video/quicktime': 'mov',
        'video/webm': 'webm',
        'video/x-matroska': 'mkv',
        'video/x-msvideo': 'avi'
      };

      module.exports = function getFileTypeExtension(mimeType) {
        // Remove the ; bit in 'video/x-matroska;codecs=avc1'
        // eslint-disable-next-line no-param-reassign
        var _mimeType$split = mimeType.split(';', 1);

        mimeType = _mimeType$split[0];
        return mimeToExtensions[mimeType] || null;
      };
    }, {}],
    769: [function (require, module, exports) {
      "use strict";

      module.exports = function getSocketHost(url) {
        // get the host domain
        var regex = /^(?:https?:\/\/|\/\/)?(?:[^@\n]+@)?(?:www\.)?([^\n]+)/i;
        var host = regex.exec(url)[1];
        var socketProtocol = /^http:\/\//i.test(url) ? 'ws' : 'wss';
        return socketProtocol + "://" + host;
      };
    }, {}],
    770: [function (require, module, exports) {
      "use strict";

      module.exports = function getSpeed(fileProgress) {
        if (!fileProgress.bytesUploaded) return 0;
        var timeElapsed = Date.now() - fileProgress.uploadStarted;
        var uploadSpeed = fileProgress.bytesUploaded / (timeElapsed / 1000);
        return uploadSpeed;
      };
    }, {}],
    771: [function (require, module, exports) {
      "use strict";
      /**
       * Get the declared text direction for an element.
       *
       * @param {Node} element
       * @returns {string|undefined}
       */

      function getTextDirection(element) {
        var _element; // There is another way to determine text direction using getComputedStyle(), as done here:
        // https://github.com/pencil-js/text-direction/blob/2a235ce95089b3185acec3b51313cbba921b3811/text-direction.js
        //
        // We do not use that approach because we are interested specifically in the _declared_ text direction.
        // If no text direction is declared, we have to provide our own explicit text direction so our
        // bidirectional CSS style sheets work.


        while (element && !element.dir) {
          // eslint-disable-next-line no-param-reassign
          element = element.parentNode;
        }

        return (_element = element) == null ? void 0 : _element.dir;
      }

      module.exports = getTextDirection;
    }, {}],
    772: [function (require, module, exports) {
      "use strict";
      /**
       * Adds zero to strings shorter than two characters.
       *
       * @param {number} number
       * @returns {string}
       */

      function pad(number) {
        return number < 10 ? "0" + number : number.toString();
      }
      /**
       * Returns a timestamp in the format of `hours:minutes:seconds`
       */


      module.exports = function getTimeStamp() {
        var date = new Date();
        var hours = pad(date.getHours());
        var minutes = pad(date.getMinutes());
        var seconds = pad(date.getSeconds());
        return hours + ":" + minutes + ":" + seconds;
      };
    }, {}],
    773: [function (require, module, exports) {
      "use strict";

      module.exports = function has(object, key) {
        return Object.prototype.hasOwnProperty.call(object, key);
      };
    }, {}],
    774: [function (require, module, exports) {
      "use strict";
      /**
       * Check if an object is a DOM element. Duck-typing based on `nodeType`.
       *
       * @param {*} obj
       */

      module.exports = function isDOMElement(obj) {
        return (obj == null ? void 0 : obj.nodeType) === Node.ELEMENT_NODE;
      };
    }, {}],
    775: [function (require, module, exports) {
      "use strict";
      /**
       * Checks if the browser supports Drag & Drop (not supported on mobile devices, for example).
       *
       * @returns {boolean}
       */

      module.exports = function isDragDropSupported() {
        var div = document.body;

        if (!('draggable' in div) || !('ondragstart' in div && 'ondrop' in div)) {
          return false;
        }

        if (!('FormData' in window)) {
          return false;
        }

        if (!('FileReader' in window)) {
          return false;
        }

        return true;
      };
    }, {}],
    776: [function (require, module, exports) {
      "use strict";

      function isNetworkError(xhr) {
        if (!xhr) {
          return false;
        }

        return xhr.readyState !== 0 && xhr.readyState !== 4 || xhr.status === 0;
      }

      module.exports = isNetworkError;
    }, {}],
    777: [function (require, module, exports) {
      "use strict";
      /**
       * Check if a URL string is an object URL from `URL.createObjectURL`.
       *
       * @param {string} url
       * @returns {boolean}
       */

      module.exports = function isObjectURL(url) {
        return url.startsWith('blob:');
      };
    }, {}],
    778: [function (require, module, exports) {
      "use strict";

      module.exports = function isPreviewSupported(fileType) {
        if (!fileType) return false; // list of images that browsers can preview

        return /^[^/]+\/(jpe?g|gif|png|svg|svg\+xml|bmp|webp|avif)$/.test(fileType);
      };
    }, {}],
    779: [function (require, module, exports) {
      "use strict"; // ___Why not add the mime-types package?
      //    It's 19.7kB gzipped, and we only need mime types for well-known extensions (for file previews).
      // ___Where to take new extensions from?
      //    https://github.com/jshttp/mime-db/blob/master/db.json

      module.exports = {
        md: 'text/markdown',
        markdown: 'text/markdown',
        mp4: 'video/mp4',
        mp3: 'audio/mp3',
        svg: 'image/svg+xml',
        jpg: 'image/jpeg',
        png: 'image/png',
        gif: 'image/gif',
        heic: 'image/heic',
        heif: 'image/heif',
        yaml: 'text/yaml',
        yml: 'text/yaml',
        csv: 'text/csv',
        tsv: 'text/tab-separated-values',
        tab: 'text/tab-separated-values',
        avi: 'video/x-msvideo',
        mks: 'video/x-matroska',
        mkv: 'video/x-matroska',
        mov: 'video/quicktime',
        doc: 'application/msword',
        docm: 'application/vnd.ms-word.document.macroenabled.12',
        docx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        dot: 'application/msword',
        dotm: 'application/vnd.ms-word.template.macroenabled.12',
        dotx: 'application/vnd.openxmlformats-officedocument.wordprocessingml.template',
        xla: 'application/vnd.ms-excel',
        xlam: 'application/vnd.ms-excel.addin.macroenabled.12',
        xlc: 'application/vnd.ms-excel',
        xlf: 'application/x-xliff+xml',
        xlm: 'application/vnd.ms-excel',
        xls: 'application/vnd.ms-excel',
        xlsb: 'application/vnd.ms-excel.sheet.binary.macroenabled.12',
        xlsm: 'application/vnd.ms-excel.sheet.macroenabled.12',
        xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        xlt: 'application/vnd.ms-excel',
        xltm: 'application/vnd.ms-excel.template.macroenabled.12',
        xltx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.template',
        xlw: 'application/vnd.ms-excel',
        txt: 'text/plain',
        text: 'text/plain',
        conf: 'text/plain',
        log: 'text/plain',
        pdf: 'application/pdf',
        zip: 'application/zip',
        '7z': 'application/x-7z-compressed',
        rar: 'application/x-rar-compressed',
        tar: 'application/x-tar',
        gz: 'application/gzip',
        dmg: 'application/x-apple-diskimage'
      };
    }, {}],
    780: [function (require, module, exports) {
      "use strict";

      var secondsToTime = require('./secondsToTime');

      module.exports = function prettyETA(seconds) {
        var time = secondsToTime(seconds); // Only display hours and minutes if they are greater than 0 but always
        // display minutes if hours is being displayed
        // Display a leading zero if the there is a preceding unit: 1m 05s, but 5s

        var hoursStr = time.hours === 0 ? '' : time.hours + "h";
        var minutesStr = time.minutes === 0 ? '' : (time.hours === 0 ? time.minutes : " " + time.minutes.toString(10).padStart(2, '0')) + "m";
        var secondsStr = time.hours !== 0 ? '' : (time.minutes === 0 ? time.seconds : " " + time.seconds.toString(10).padStart(2, '0')) + "s";
        return "" + hoursStr + minutesStr + secondsStr;
      };
    }, {
      "./secondsToTime": 782
    }],
    781: [function (require, module, exports) {
      "use strict";

      var getFileNameAndExtension = require('./getFileNameAndExtension');

      module.exports = function remoteFileObjToLocal(file) {
        return Object.assign({}, file, {
          type: file.mimeType,
          extension: file.name ? getFileNameAndExtension(file.name).extension : null
        });
      };
    }, {
      "./getFileNameAndExtension": 766
    }],
    782: [function (require, module, exports) {
      "use strict";

      module.exports = function secondsToTime(rawSeconds) {
        var hours = Math.floor(rawSeconds / 3600) % 24;
        var minutes = Math.floor(rawSeconds / 60) % 60;
        var seconds = Math.floor(rawSeconds % 60);
        return {
          hours: hours,
          minutes: minutes,
          seconds: seconds
        };
      };
    }, {}],
    783: [function (require, module, exports) {
      "use strict";

      module.exports = function settle(promises) {
        var resolutions = [];
        var rejections = [];

        function resolved(value) {
          resolutions.push(value);
        }

        function rejected(error) {
          rejections.push(error);
        }

        var wait = Promise.all(promises.map(function (promise) {
          return promise.then(resolved, rejected);
        }));
        return wait.then(function () {
          return {
            successful: resolutions,
            failed: rejections
          };
        });
      };
    }, {}],
    784: [function (require, module, exports) {
      "use strict";
      /**
       * Converts list into array
       */

      module.exports = Array.from;
    }, {}],
    785: [function (require, module, exports) {
      "use strict";
      /**
       * Truncates a string to the given number of chars (maxLength) by inserting '...' in the middle of that string.
       * Partially taken from https://stackoverflow.com/a/5723274/3192470.
       *
       * @param {string} string - string to be truncated
       * @param {number} maxLength - maximum size of the resulting string
       * @returns {string}
       */

      var separator = '...';

      module.exports = function truncateString(string, maxLength) {
        // Return the empty string if maxLength is zero
        if (maxLength === 0) return ''; // Return original string if it's already shorter than maxLength

        if (string.length <= maxLength) return string; // Return truncated substring appended of the ellipsis char if string can't be meaningfully truncated

        if (maxLength <= separator.length + 1) return string.slice(0, maxLength - 1) + "\u2026";
        var charsToShow = maxLength - separator.length;
        var frontChars = Math.ceil(charsToShow / 2);
        var backChars = Math.floor(charsToShow / 2);
        return string.slice(0, frontChars) + separator + string.slice(-backChars);
      };
    }, {}],
    786: [function (require, module, exports) {
      "use strict";

      var _require127 = require('preact'),
          h = _require127.h;

      module.exports = function () {
        return h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          fill: "#0097DC",
          width: "66",
          height: "55",
          viewBox: "0 0 66 55"
        }, h("path", {
          d: "M57.3 8.433c4.59 0 8.1 3.51 8.1 8.1v29.7c0 4.59-3.51 8.1-8.1 8.1H8.7c-4.59 0-8.1-3.51-8.1-8.1v-29.7c0-4.59 3.51-8.1 8.1-8.1h9.45l4.59-7.02c.54-.54 1.35-1.08 2.16-1.08h16.2c.81 0 1.62.54 2.16 1.08l4.59 7.02h9.45zM33 14.64c-8.62 0-15.393 6.773-15.393 15.393 0 8.62 6.773 15.393 15.393 15.393 8.62 0 15.393-6.773 15.393-15.393 0-8.62-6.773-15.393-15.393-15.393zM33 40c-5.648 0-9.966-4.319-9.966-9.967 0-5.647 4.318-9.966 9.966-9.966s9.966 4.319 9.966 9.966C42.966 35.681 38.648 40 33 40z",
          fillRule: "evenodd"
        }));
      };
    }, {
      "preact": 595
    }],
    787: [function (require, module, exports) {
      "use strict";

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }
      /* eslint-disable jsx-a11y/media-has-caption */


      var _require128 = require('preact'),
          h = _require128.h,
          Component = _require128.Component;

      var SnapshotButton = require('./SnapshotButton');

      var RecordButton = require('./RecordButton');

      var RecordingLength = require('./RecordingLength');

      var VideoSourceSelect = require('./VideoSourceSelect');

      var SubmitButton = require('./SubmitButton');

      var DiscardButton = require('./DiscardButton');

      function isModeAvailable(modes, mode) {
        return modes.indexOf(mode) !== -1;
      }

      var CameraScreen = /*#__PURE__*/function (_Component14) {
        _inheritsLoose(CameraScreen, _Component14);

        function CameraScreen() {
          return _Component14.apply(this, arguments) || this;
        }

        var _proto77 = CameraScreen.prototype;

        _proto77.componentDidMount = function componentDidMount() {
          var onFocus = this.props.onFocus;
          onFocus();
        };

        _proto77.componentWillUnmount = function componentWillUnmount() {
          var onStop = this.props.onStop;
          onStop();
        };

        _proto77.render = function render() {
          var _this223 = this;

          var _this$props5 = this.props,
              src = _this$props5.src,
              recordedVideo = _this$props5.recordedVideo,
              recording = _this$props5.recording,
              modes = _this$props5.modes,
              supportsRecording = _this$props5.supportsRecording,
              videoSources = _this$props5.videoSources,
              showVideoSourceDropdown = _this$props5.showVideoSourceDropdown,
              showRecordingLength = _this$props5.showRecordingLength,
              onSubmit = _this$props5.onSubmit,
              i18n = _this$props5.i18n,
              mirror = _this$props5.mirror,
              onSnapshot = _this$props5.onSnapshot,
              onStartRecording = _this$props5.onStartRecording,
              onStopRecording = _this$props5.onStopRecording,
              onDiscardRecordedVideo = _this$props5.onDiscardRecordedVideo,
              recordingLengthSeconds = _this$props5.recordingLengthSeconds;
          var hasRecordedVideo = !!recordedVideo;
          var shouldShowRecordButton = !hasRecordedVideo && supportsRecording && (isModeAvailable(modes, 'video-only') || isModeAvailable(modes, 'audio-only') || isModeAvailable(modes, 'video-audio'));
          var shouldShowSnapshotButton = !hasRecordedVideo && isModeAvailable(modes, 'picture');
          var shouldShowRecordingLength = supportsRecording && showRecordingLength;
          var shouldShowVideoSourceDropdown = showVideoSourceDropdown && videoSources && videoSources.length > 1;
          var videoProps = {
            playsinline: true
          };

          if (recordedVideo) {
            videoProps.muted = false;
            videoProps.controls = true;
            videoProps.src = recordedVideo; // reset srcObject in dom. If not resetted, stream sticks in element

            if (this.videoElement) {
              this.videoElement.srcObject = undefined;
            }
          } else {
            videoProps.muted = true;
            videoProps.autoplay = true;
            videoProps.srcObject = src;
          }

          return h("div", {
            className: "uppy uppy-Webcam-container"
          }, h("div", {
            className: "uppy-Webcam-videoContainer"
          }, h("video", _extends({
            /* eslint-disable-next-line no-return-assign */
            ref: function ref(videoElement) {
              return _this223.videoElement = videoElement;
            },
            className: "uppy-Webcam-video  " + (mirror ? 'uppy-Webcam-video--mirrored' : '')
            /* eslint-disable-next-line react/jsx-props-no-spreading */

          }, videoProps))), h("div", {
            className: "uppy-Webcam-footer"
          }, h("div", {
            className: "uppy-Webcam-videoSourceContainer"
          }, shouldShowVideoSourceDropdown ? VideoSourceSelect(this.props) : null), h("div", {
            className: "uppy-Webcam-buttonContainer"
          }, shouldShowSnapshotButton && h(SnapshotButton, {
            onSnapshot: onSnapshot,
            i18n: i18n
          }), shouldShowRecordButton && h(RecordButton, {
            recording: recording,
            onStartRecording: onStartRecording,
            onStopRecording: onStopRecording,
            i18n: i18n
          }), hasRecordedVideo && h(SubmitButton, {
            onSubmit: onSubmit,
            i18n: i18n
          }), hasRecordedVideo && h(DiscardButton, {
            onDiscard: onDiscardRecordedVideo,
            i18n: i18n
          })), shouldShowRecordingLength && h("div", {
            className: "uppy-Webcam-recordingLength"
          }, h(RecordingLength, {
            recordingLengthSeconds: recordingLengthSeconds,
            i18n: i18n
          }))));
        };

        return CameraScreen;
      }(Component);

      module.exports = CameraScreen;
    }, {
      "./DiscardButton": 788,
      "./RecordButton": 790,
      "./RecordingLength": 791,
      "./SnapshotButton": 792,
      "./SubmitButton": 793,
      "./VideoSourceSelect": 794,
      "preact": 595
    }],
    788: [function (require, module, exports) {
      "use strict";

      var _require129 = require('preact'),
          h = _require129.h;

      function DiscardButton(_ref47) {
        var onDiscard = _ref47.onDiscard,
            i18n = _ref47.i18n;
        return h("button", {
          className: "uppy-u-reset uppy-c-btn uppy-Webcam-button",
          type: "button",
          title: i18n('discardRecordedFile'),
          "aria-label": i18n('discardRecordedFile'),
          onClick: onDiscard,
          "data-uppy-super-focusable": true
        }, h("svg", {
          width: "13",
          height: "13",
          viewBox: "0 0 13 13",
          xmlns: "http://www.w3.org/2000/svg",
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-c-icon"
        }, h("g", {
          fill: "#FFF",
          fillRule: "evenodd"
        }, h("path", {
          d: "M.496 11.367L11.103.76l1.414 1.414L1.911 12.781z"
        }), h("path", {
          d: "M11.104 12.782L.497 2.175 1.911.76l10.607 10.606z"
        }))));
      }

      module.exports = DiscardButton;
    }, {
      "preact": 595
    }],
    789: [function (require, module, exports) {
      "use strict";

      var _require130 = require('preact'),
          h = _require130.h;

      module.exports = function (props) {
        return h("div", {
          className: "uppy-Webcam-permissons"
        }, h("div", {
          className: "uppy-Webcam-permissonsIcon"
        }, props.icon()), h("h1", {
          className: "uppy-Webcam-title"
        }, props.hasCamera ? props.i18n('allowAccessTitle') : props.i18n('noCameraTitle')), h("p", null, props.hasCamera ? props.i18n('allowAccessDescription') : props.i18n('noCameraDescription')));
      };
    }, {
      "preact": 595
    }],
    790: [function (require, module, exports) {
      "use strict";

      var _require131 = require('preact'),
          h = _require131.h;

      module.exports = function RecordButton(_ref48) {
        var recording = _ref48.recording,
            onStartRecording = _ref48.onStartRecording,
            onStopRecording = _ref48.onStopRecording,
            i18n = _ref48.i18n;

        if (recording) {
          return h("button", {
            className: "uppy-u-reset uppy-c-btn uppy-Webcam-button",
            type: "button",
            title: i18n('stopRecording'),
            "aria-label": i18n('stopRecording'),
            onClick: onStopRecording,
            "data-uppy-super-focusable": true
          }, h("svg", {
            "aria-hidden": "true",
            focusable: "false",
            className: "uppy-c-icon",
            width: "100",
            height: "100",
            viewBox: "0 0 100 100"
          }, h("rect", {
            x: "15",
            y: "15",
            width: "70",
            height: "70"
          })));
        }

        return h("button", {
          className: "uppy-u-reset uppy-c-btn uppy-Webcam-button",
          type: "button",
          title: i18n('startRecording'),
          "aria-label": i18n('startRecording'),
          onClick: onStartRecording,
          "data-uppy-super-focusable": true
        }, h("svg", {
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-c-icon",
          width: "100",
          height: "100",
          viewBox: "0 0 100 100"
        }, h("circle", {
          cx: "50",
          cy: "50",
          r: "40"
        })));
      };
    }, {
      "preact": 595
    }],
    791: [function (require, module, exports) {
      "use strict";

      var _require132 = require('preact'),
          h = _require132.h;

      var formatSeconds = require('./formatSeconds');

      module.exports = function RecordingLength(_ref49) {
        var recordingLengthSeconds = _ref49.recordingLengthSeconds,
            i18n = _ref49.i18n;
        var formattedRecordingLengthSeconds = formatSeconds(recordingLengthSeconds);
        return h("span", {
          "aria-label": i18n('recordingLength', {
            recording_length: formattedRecordingLengthSeconds
          })
        }, formattedRecordingLengthSeconds);
      };
    }, {
      "./formatSeconds": 795,
      "preact": 595
    }],
    792: [function (require, module, exports) {
      "use strict";

      var _require133 = require('preact'),
          h = _require133.h;

      var CameraIcon = require('./CameraIcon');

      module.exports = function (_ref50) {
        var onSnapshot = _ref50.onSnapshot,
            i18n = _ref50.i18n;
        return h("button", {
          className: "uppy-u-reset uppy-c-btn uppy-Webcam-button uppy-Webcam-button--picture",
          type: "button",
          title: i18n('takePicture'),
          "aria-label": i18n('takePicture'),
          onClick: onSnapshot,
          "data-uppy-super-focusable": true
        }, CameraIcon());
      };
    }, {
      "./CameraIcon": 786,
      "preact": 595
    }],
    793: [function (require, module, exports) {
      "use strict";

      var _require134 = require('preact'),
          h = _require134.h;

      function SubmitButton(_ref51) {
        var onSubmit = _ref51.onSubmit,
            i18n = _ref51.i18n;
        return h("button", {
          className: "uppy-u-reset uppy-c-btn uppy-Webcam-button uppy-Webcam-button--submit",
          type: "button",
          title: i18n('submitRecordedFile'),
          "aria-label": i18n('submitRecordedFile'),
          onClick: onSubmit,
          "data-uppy-super-focusable": true
        }, h("svg", {
          width: "12",
          height: "9",
          viewBox: "0 0 12 9",
          xmlns: "http://www.w3.org/2000/svg",
          "aria-hidden": "true",
          focusable: "false",
          className: "uppy-c-icon"
        }, h("path", {
          fill: "#fff",
          fillRule: "nonzero",
          d: "M10.66 0L12 1.31 4.136 9 0 4.956l1.34-1.31L4.136 6.38z"
        })));
      }

      module.exports = SubmitButton;
    }, {
      "preact": 595
    }],
    794: [function (require, module, exports) {
      "use strict";

      var _require135 = require('preact'),
          h = _require135.h;

      module.exports = function (_ref52) {
        var currentDeviceId = _ref52.currentDeviceId,
            videoSources = _ref52.videoSources,
            onChangeVideoSource = _ref52.onChangeVideoSource;
        return h("div", {
          className: "uppy-Webcam-videoSource"
        }, h("select", {
          className: "uppy-u-reset uppy-Webcam-videoSource-select",
          onChange: function onChange(event) {
            onChangeVideoSource(event.target.value);
          }
        }, videoSources.map(function (videoSource) {
          return h("option", {
            key: videoSource.deviceId,
            value: videoSource.deviceId,
            selected: videoSource.deviceId === currentDeviceId
          }, videoSource.label);
        })));
      };
    }, {
      "preact": 595
    }],
    795: [function (require, module, exports) {
      "use strict";
      /**
       * Takes an Integer value of seconds (e.g. 83) and converts it into a human-readable formatted string (e.g. '1:23').
       *
       * @param {Integer} seconds
       * @returns {string} the formatted seconds (e.g. '1:23' for 1 minute and 23 seconds)
       *
       */

      module.exports = function formatSeconds(seconds) {
        return Math.floor(seconds / 60) + ":" + String(seconds % 60).padStart(2, 0);
      };
    }, {}],
    796: [function (require, module, exports) {
      "use strict";

      var _class, _enableMirror, _temp;

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      function _classPrivateFieldLooseBase(receiver, privateKey) {
        if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
          throw new TypeError("attempted to use private field on non-instance");
        }

        return receiver;
      }

      var id = 0;

      function _classPrivateFieldLooseKey(name) {
        return "__private_" + id++ + "_" + name;
      }

      var _require136 = require('preact'),
          h = _require136.h;

      var _require137 = require('@uppy/core'),
          UIPlugin = _require137.UIPlugin;

      var getFileTypeExtension = require('@uppy/utils/lib/getFileTypeExtension');

      var mimeTypes = require('@uppy/utils/lib/mimeTypes');

      var canvasToBlob = require('@uppy/utils/lib/canvasToBlob');

      var supportsMediaRecorder = require('./supportsMediaRecorder');

      var CameraIcon = require('./CameraIcon');

      var CameraScreen = require('./CameraScreen');

      var PermissionsScreen = require('./PermissionsScreen');
      /**
       * Normalize a MIME type or file extension into a MIME type.
       *
       * @param {string} fileType - MIME type or a file extension prefixed with `.`.
       * @returns {string|undefined} The MIME type or `undefined` if the fileType is an extension and is not known.
       */


      function toMimeType(fileType) {
        if (fileType[0] === '.') {
          return mimeTypes[fileType.slice(1)];
        }

        return fileType;
      }
      /**
       * Is this MIME type a video?
       *
       * @param {string} mimeType - MIME type.
       * @returns {boolean}
       */


      function isVideoMimeType(mimeType) {
        return /^video\/[^*]+$/.test(mimeType);
      }
      /**
       * Is this MIME type an image?
       *
       * @param {string} mimeType - MIME type.
       * @returns {boolean}
       */


      function isImageMimeType(mimeType) {
        return /^image\/[^*]+$/.test(mimeType);
      }

      function getMediaDevices() {
        // bug in the compatibility data
        // eslint-disable-next-line compat/compat
        return navigator.mediaDevices;
      }
      /**
       * Webcam
       */


      module.exports = (_temp = (_enableMirror = /*#__PURE__*/_classPrivateFieldLooseKey("enableMirror"), _class = /*#__PURE__*/function (_UIPlugin19) {
        _inheritsLoose(Webcam, _UIPlugin19);

        // eslint-disable-next-line global-require
        // enableMirror is used to toggle mirroring, for instance when discarding the video,
        // while `opts.mirror` is used to remember the initial user setting
        function Webcam(uppy, opts) {
          var _this224;

          _this224 = _UIPlugin19.call(this, uppy, opts) || this;
          Object.defineProperty(_assertThisInitialized2(_this224), _enableMirror, {
            writable: true,
            value: void 0
          });
          _this224.mediaDevices = getMediaDevices();
          _this224.supportsUserMedia = !!_this224.mediaDevices; // eslint-disable-next-line no-restricted-globals

          _this224.protocol = location.protocol.match(/https/i) ? 'https' : 'http';
          _this224.id = _this224.opts.id || 'Webcam';
          _this224.type = 'acquirer';
          _this224.capturedMediaFile = null;

          _this224.icon = function () {
            return h("svg", {
              "aria-hidden": "true",
              focusable: "false",
              width: "32",
              height: "32",
              viewBox: "0 0 32 32"
            }, h("g", {
              fill: "none",
              fillRule: "evenodd"
            }, h("rect", {
              className: "uppy-ProviderIconBg",
              fill: "#03BFEF",
              width: "32",
              height: "32",
              rx: "16"
            }), h("path", {
              d: "M22 11c1.133 0 2 .867 2 2v7.333c0 1.134-.867 2-2 2H10c-1.133 0-2-.866-2-2V13c0-1.133.867-2 2-2h2.333l1.134-1.733C13.6 9.133 13.8 9 14 9h4c.2 0 .4.133.533.267L19.667 11H22zm-6 1.533a3.764 3.764 0 0 0-3.8 3.8c0 2.129 1.672 3.801 3.8 3.801s3.8-1.672 3.8-3.8c0-2.13-1.672-3.801-3.8-3.801zm0 6.261c-1.395 0-2.46-1.066-2.46-2.46 0-1.395 1.065-2.461 2.46-2.461s2.46 1.066 2.46 2.46c0 1.395-1.065 2.461-2.46 2.461z",
              fill: "#FFF",
              fillRule: "nonzero"
            })));
          };

          _this224.defaultLocale = {
            strings: {
              pluginNameCamera: 'Camera',
              smile: 'Smile!',
              takePicture: 'Take a picture',
              startRecording: 'Begin video recording',
              stopRecording: 'Stop video recording',
              allowAccessTitle: 'Please allow access to your camera',
              allowAccessDescription: 'In order to take pictures or record video with your camera, please allow camera access for this site.',
              noCameraTitle: 'Camera Not Available',
              noCameraDescription: 'In order to take pictures or record video, please connect a camera device',
              recordingStoppedMaxSize: 'Recording stopped because the file size is about to exceed the limit',
              recordingLength: 'Recording length %{recording_length}',
              submitRecordedFile: 'Submit recorded file',
              discardRecordedFile: 'Discard recorded file'
            }
          }; // set default options

          var defaultOptions = {
            onBeforeSnapshot: function onBeforeSnapshot() {
              return Promise.resolve();
            },
            countdown: false,
            modes: ['video-audio', 'video-only', 'audio-only', 'picture'],
            mirror: true,
            showVideoSourceDropdown: false,
            facingMode: 'user',
            preferredImageMimeType: null,
            preferredVideoMimeType: null,
            showRecordingLength: false
          };
          _this224.opts = Object.assign({}, defaultOptions, opts);

          _this224.i18nInit();

          _this224.title = _this224.i18n('pluginNameCamera');
          _classPrivateFieldLooseBase(_assertThisInitialized2(_this224), _enableMirror)[_enableMirror] = _this224.opts.mirror;
          _this224.install = _this224.install.bind(_assertThisInitialized2(_this224));
          _this224.setPluginState = _this224.setPluginState.bind(_assertThisInitialized2(_this224));
          _this224.render = _this224.render.bind(_assertThisInitialized2(_this224)); // Camera controls

          _this224.start = _this224.start.bind(_assertThisInitialized2(_this224));
          _this224.stop = _this224.stop.bind(_assertThisInitialized2(_this224));
          _this224.takeSnapshot = _this224.takeSnapshot.bind(_assertThisInitialized2(_this224));
          _this224.startRecording = _this224.startRecording.bind(_assertThisInitialized2(_this224));
          _this224.stopRecording = _this224.stopRecording.bind(_assertThisInitialized2(_this224));
          _this224.discardRecordedVideo = _this224.discardRecordedVideo.bind(_assertThisInitialized2(_this224));
          _this224.submit = _this224.submit.bind(_assertThisInitialized2(_this224));
          _this224.oneTwoThreeSmile = _this224.oneTwoThreeSmile.bind(_assertThisInitialized2(_this224));
          _this224.focus = _this224.focus.bind(_assertThisInitialized2(_this224));
          _this224.changeVideoSource = _this224.changeVideoSource.bind(_assertThisInitialized2(_this224));
          _this224.webcamActive = false;

          if (_this224.opts.countdown) {
            _this224.opts.onBeforeSnapshot = _this224.oneTwoThreeSmile;
          }

          _this224.setPluginState({
            hasCamera: false,
            cameraReady: false,
            cameraError: null,
            recordingLengthSeconds: 0,
            videoSources: [],
            currentDeviceId: null
          });

          return _this224;
        }

        var _proto78 = Webcam.prototype;

        _proto78.setOptions = function setOptions(newOpts) {
          _UIPlugin19.prototype.setOptions.call(this, Object.assign({}, newOpts, {
            videoConstraints: Object.assign({}, this.opts.videoConstraints, newOpts == null ? void 0 : newOpts.videoConstraints)
          }));
        };

        _proto78.hasCameraCheck = function hasCameraCheck() {
          if (!this.mediaDevices) {
            return Promise.resolve(false);
          }

          return this.mediaDevices.enumerateDevices().then(function (devices) {
            return devices.some(function (device) {
              return device.kind === 'videoinput';
            });
          });
        };

        _proto78.isAudioOnly = function isAudioOnly() {
          return this.opts.modes.length === 1 && this.opts.modes[0] === 'audio-only';
        };

        _proto78.getConstraints = function getConstraints(deviceId) {
          if (deviceId === void 0) {
            deviceId = null;
          }

          var acceptsAudio = this.opts.modes.indexOf('video-audio') !== -1 || this.opts.modes.indexOf('audio-only') !== -1;
          var acceptsVideo = !this.isAudioOnly() && (this.opts.modes.indexOf('video-audio') !== -1 || this.opts.modes.indexOf('video-only') !== -1 || this.opts.modes.indexOf('picture') !== -1);
          var videoConstraints = Object.assign({}, this.opts.videoConstraints || {
            facingMode: this.opts.facingMode
          }, deviceId ? {
            deviceId: deviceId,
            facingMode: null
          } : {});
          return {
            audio: acceptsAudio,
            video: acceptsVideo ? videoConstraints : false
          };
        } // eslint-disable-next-line consistent-return
        ;

        _proto78.start = function start(options) {
          var _this225 = this;

          if (options === void 0) {
            options = null;
          }

          if (!this.supportsUserMedia) {
            return Promise.reject(new Error('Webcam access not supported'));
          }

          this.webcamActive = true;

          if (this.opts.mirror) {
            _classPrivateFieldLooseBase(this, _enableMirror)[_enableMirror] = true;
          }

          var constraints = this.getConstraints(options && options.deviceId ? options.deviceId : null);
          this.hasCameraCheck().then(function (hasCamera) {
            _this225.setPluginState({
              hasCamera: hasCamera
            }); // ask user for access to their camera


            return _this225.mediaDevices.getUserMedia(constraints).then(function (stream) {
              _this225.stream = stream;
              var currentDeviceId = null;
              var tracks = _this225.isAudioOnly() ? stream.getAudioTracks() : stream.getVideoTracks();

              if (!options || !options.deviceId) {
                currentDeviceId = tracks[0].getSettings().deviceId;
              } else {
                tracks.forEach(function (track) {
                  if (track.getSettings().deviceId === options.deviceId) {
                    currentDeviceId = track.getSettings().deviceId;
                  }
                });
              } // Update the sources now, so we can access the names.


              _this225.updateVideoSources();

              _this225.setPluginState({
                currentDeviceId: currentDeviceId,
                cameraReady: true
              });
            }).catch(function (err) {
              _this225.setPluginState({
                cameraReady: false,
                cameraError: err
              });

              _this225.uppy.info(err.message, 'error');
            });
          });
        }
        /**
         * @returns {object}
         */
        ;

        _proto78.getMediaRecorderOptions = function getMediaRecorderOptions() {
          var options = {}; // Try to use the `opts.preferredVideoMimeType` or one of the `allowedFileTypes` for the recording.
          // If the browser doesn't support it, we'll fall back to the browser default instead.
          // Safari doesn't have the `isTypeSupported` API.

          if (MediaRecorder.isTypeSupported) {
            var restrictions = this.uppy.opts.restrictions;
            var preferredVideoMimeTypes = [];

            if (this.opts.preferredVideoMimeType) {
              preferredVideoMimeTypes = [this.opts.preferredVideoMimeType];
            } else if (restrictions.allowedFileTypes) {
              preferredVideoMimeTypes = restrictions.allowedFileTypes.map(toMimeType).filter(isVideoMimeType);
            }

            var filterSupportedTypes = function filterSupportedTypes(candidateType) {
              return MediaRecorder.isTypeSupported(candidateType) && getFileTypeExtension(candidateType);
            };

            var acceptableMimeTypes = preferredVideoMimeTypes.filter(filterSupportedTypes);

            if (acceptableMimeTypes.length > 0) {
              // eslint-disable-next-line prefer-destructuring
              options.mimeType = acceptableMimeTypes[0];
            }
          }

          return options;
        };

        _proto78.startRecording = function startRecording() {
          var _this226 = this;

          // only used if supportsMediaRecorder() returned true
          // eslint-disable-next-line compat/compat
          this.recorder = new MediaRecorder(this.stream, this.getMediaRecorderOptions());
          this.recordingChunks = [];
          var stoppingBecauseOfMaxSize = false;
          this.recorder.addEventListener('dataavailable', function (event) {
            _this226.recordingChunks.push(event.data);

            var restrictions = _this226.uppy.opts.restrictions;

            if (_this226.recordingChunks.length > 1 && restrictions.maxFileSize != null && !stoppingBecauseOfMaxSize) {
              var totalSize = _this226.recordingChunks.reduce(function (acc, chunk) {
                return acc + chunk.size;
              }, 0); // Exclude the initial chunk from the average size calculation because it is likely to be a very small outlier


              var averageChunkSize = (totalSize - _this226.recordingChunks[0].size) / (_this226.recordingChunks.length - 1);
              var expectedEndChunkSize = averageChunkSize * 3;
              var maxSize = Math.max(0, restrictions.maxFileSize - expectedEndChunkSize);

              if (totalSize > maxSize) {
                stoppingBecauseOfMaxSize = true;

                _this226.uppy.info(_this226.i18n('recordingStoppedMaxSize'), 'warning', 4000);

                _this226.stopRecording();
              }
            }
          }); // use a "time slice" of 500ms: ondataavailable will be called each 500ms
          // smaller time slices mean we can more accurately check the max file size restriction

          this.recorder.start(500);

          if (this.opts.showRecordingLength) {
            // Start the recordingLengthTimer if we are showing the recording length.
            this.recordingLengthTimer = setInterval(function () {
              var currentRecordingLength = _this226.getPluginState().recordingLengthSeconds;

              _this226.setPluginState({
                recordingLengthSeconds: currentRecordingLength + 1
              });
            }, 1000);
          }

          this.setPluginState({
            isRecording: true
          });
        };

        _proto78.stopRecording = function stopRecording() {
          var _this227 = this;

          var stopped = new Promise(function (resolve) {
            _this227.recorder.addEventListener('stop', function () {
              resolve();
            });

            _this227.recorder.stop();

            if (_this227.opts.showRecordingLength) {
              // Stop the recordingLengthTimer if we are showing the recording length.
              clearInterval(_this227.recordingLengthTimer);

              _this227.setPluginState({
                recordingLengthSeconds: 0
              });
            }
          });
          return stopped.then(function () {
            _this227.setPluginState({
              isRecording: false
            });

            return _this227.getVideo();
          }).then(function (file) {
            try {
              _this227.capturedMediaFile = file; // create object url for capture result preview

              _this227.setPluginState({
                // eslint-disable-next-line compat/compat
                recordedVideo: URL.createObjectURL(file.data)
              });

              _classPrivateFieldLooseBase(_this227, _enableMirror)[_enableMirror] = false;
            } catch (err) {
              // Logging the error, exept restrictions, which is handled in Core
              if (!err.isRestriction) {
                _this227.uppy.log(err);
              }
            }
          }).then(function () {
            _this227.recordingChunks = null;
            _this227.recorder = null;
          }, function (error) {
            _this227.recordingChunks = null;
            _this227.recorder = null;
            throw error;
          });
        };

        _proto78.discardRecordedVideo = function discardRecordedVideo() {
          this.setPluginState({
            recordedVideo: null
          });

          if (this.opts.mirror) {
            _classPrivateFieldLooseBase(this, _enableMirror)[_enableMirror] = true;
          }

          this.capturedMediaFile = null;
        };

        _proto78.submit = function submit() {
          try {
            if (this.capturedMediaFile) {
              this.uppy.addFile(this.capturedMediaFile);
            }
          } catch (err) {
            // Logging the error, exept restrictions, which is handled in Core
            if (!err.isRestriction) {
              this.uppy.log(err, 'error');
            }
          }
        };

        _proto78.stop = /*#__PURE__*/function () {
          var _stop = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
            var _this228 = this;

            var audioTracks, videoTracks;
            return regeneratorRuntime.wrap(function _callee10$(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    if (this.stream) {
                      audioTracks = this.stream.getAudioTracks();
                      videoTracks = this.stream.getVideoTracks();
                      audioTracks.concat(videoTracks).forEach(function (track) {
                        return track.stop();
                      });
                    }

                    if (!this.recorder) {
                      _context10.next = 4;
                      break;
                    }

                    _context10.next = 4;
                    return new Promise(function (resolve) {
                      _this228.recorder.addEventListener('stop', resolve, {
                        once: true
                      });

                      _this228.recorder.stop();

                      if (_this228.opts.showRecordingLength) {
                        clearInterval(_this228.recordingLengthTimer);
                      }
                    });

                  case 4:
                    this.recordingChunks = null;
                    this.recorder = null;
                    this.webcamActive = false;
                    this.stream = null;
                    this.setPluginState({
                      recordedVideo: null,
                      isRecording: false,
                      recordingLengthSeconds: 0
                    });

                  case 9:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee10, this);
          }));

          function stop() {
            return _stop.apply(this, arguments);
          }

          return stop;
        }();

        _proto78.getVideoElement = function getVideoElement() {
          return this.el.querySelector('.uppy-Webcam-video');
        };

        _proto78.oneTwoThreeSmile = function oneTwoThreeSmile() {
          var _this229 = this;

          return new Promise(function (resolve, reject) {
            var count = _this229.opts.countdown; // eslint-disable-next-line consistent-return

            var countDown = setInterval(function () {
              if (!_this229.webcamActive) {
                clearInterval(countDown);
                _this229.captureInProgress = false;
                return reject(new Error('Webcam is not active'));
              }

              if (count > 0) {
                _this229.uppy.info(count + "...", 'warning', 800);

                count--;
              } else {
                clearInterval(countDown);

                _this229.uppy.info(_this229.i18n('smile'), 'success', 1500);

                setTimeout(function () {
                  return resolve();
                }, 1500);
              }
            }, 1000);
          });
        };

        _proto78.takeSnapshot = function takeSnapshot() {
          var _this230 = this;

          if (this.captureInProgress) return;
          this.captureInProgress = true;
          this.opts.onBeforeSnapshot().catch(function (err) {
            var message = typeof err === 'object' ? err.message : err;

            _this230.uppy.info(message, 'error', 5000);

            return Promise.reject(new Error("onBeforeSnapshot: " + message));
          }).then(function () {
            return _this230.getImage();
          }).then(function (tagFile) {
            _this230.captureInProgress = false;

            try {
              _this230.uppy.addFile(tagFile);
            } catch (err) {
              // Logging the error, except restrictions, which is handled in Core
              if (!err.isRestriction) {
                _this230.uppy.log(err);
              }
            }
          }, function (error) {
            _this230.captureInProgress = false;
            throw error;
          });
        };

        _proto78.getImage = function getImage() {
          var _this231 = this;

          var video = this.getVideoElement();

          if (!video) {
            return Promise.reject(new Error('No video element found, likely due to the Webcam tab being closed.'));
          }

          var width = video.videoWidth;
          var height = video.videoHeight;
          var canvas = document.createElement('canvas');
          canvas.width = width;
          canvas.height = height;
          var ctx = canvas.getContext('2d');
          ctx.drawImage(video, 0, 0);
          var restrictions = this.uppy.opts.restrictions;
          var preferredImageMimeTypes = [];

          if (this.opts.preferredImageMimeType) {
            preferredImageMimeTypes = [this.opts.preferredImageMimeType];
          } else if (restrictions.allowedFileTypes) {
            preferredImageMimeTypes = restrictions.allowedFileTypes.map(toMimeType).filter(isImageMimeType);
          }

          var mimeType = preferredImageMimeTypes[0] || 'image/jpeg';
          var ext = getFileTypeExtension(mimeType) || 'jpg';
          var name = "cam-" + Date.now() + "." + ext;
          return canvasToBlob(canvas, mimeType).then(function (blob) {
            return {
              source: _this231.id,
              name: name,
              data: new Blob([blob], {
                type: mimeType
              }),
              type: mimeType
            };
          });
        };

        _proto78.getVideo = function getVideo() {
          // Sometimes in iOS Safari, Blobs (especially the first Blob in the recordingChunks Array)
          // have empty 'type' attributes (e.g. '') so we need to find a Blob that has a defined 'type'
          // attribute in order to determine the correct MIME type.
          var mimeType = this.recordingChunks.find(function (blob) {
            var _blob$type;

            return ((_blob$type = blob.type) == null ? void 0 : _blob$type.length) > 0;
          }).type;
          var fileExtension = getFileTypeExtension(mimeType);

          if (!fileExtension) {
            return Promise.reject(new Error("Could not retrieve recording: Unsupported media type \"" + mimeType + "\""));
          }

          var name = "webcam-" + Date.now() + "." + fileExtension;
          var blob = new Blob(this.recordingChunks, {
            type: mimeType
          });
          var file = {
            source: this.id,
            name: name,
            data: new Blob([blob], {
              type: mimeType
            }),
            type: mimeType
          };
          return Promise.resolve(file);
        };

        _proto78.focus = function focus() {
          var _this232 = this;

          if (!this.opts.countdown) return;
          setTimeout(function () {
            _this232.uppy.info(_this232.i18n('smile'), 'success', 1500);
          }, 1000);
        };

        _proto78.changeVideoSource = function changeVideoSource(deviceId) {
          this.stop();
          this.start({
            deviceId: deviceId
          });
        };

        _proto78.updateVideoSources = function updateVideoSources() {
          var _this233 = this;

          this.mediaDevices.enumerateDevices().then(function (devices) {
            _this233.setPluginState({
              videoSources: devices.filter(function (device) {
                return device.kind === 'videoinput';
              })
            });
          });
        };

        _proto78.render = function render() {
          if (!this.webcamActive) {
            this.start();
          }

          var webcamState = this.getPluginState();

          if (!webcamState.cameraReady || !webcamState.hasCamera) {
            return h(PermissionsScreen, {
              icon: CameraIcon,
              i18n: this.i18n,
              hasCamera: webcamState.hasCamera
            });
          }

          return h(CameraScreen // eslint-disable-next-line react/jsx-props-no-spreading
          , _extends({}, webcamState, {
            onChangeVideoSource: this.changeVideoSource,
            onSnapshot: this.takeSnapshot,
            onStartRecording: this.startRecording,
            onStopRecording: this.stopRecording,
            onDiscardRecordedVideo: this.discardRecordedVideo,
            onSubmit: this.submit,
            onFocus: this.focus,
            onStop: this.stop,
            i18n: this.i18n,
            modes: this.opts.modes,
            showRecordingLength: this.opts.showRecordingLength,
            showVideoSourceDropdown: this.opts.showVideoSourceDropdown,
            supportsRecording: supportsMediaRecorder(),
            recording: webcamState.isRecording,
            mirror: _classPrivateFieldLooseBase(this, _enableMirror)[_enableMirror],
            src: this.stream
          }));
        };

        _proto78.install = function install() {
          var _this234 = this;

          this.setPluginState({
            cameraReady: false,
            recordingLengthSeconds: 0
          });
          var target = this.opts.target;

          if (target) {
            this.mount(target, this);
          }

          if (this.mediaDevices) {
            this.updateVideoSources();

            this.mediaDevices.ondevicechange = function () {
              _this234.updateVideoSources();

              if (_this234.stream) {
                var restartStream = true;

                var _this234$getPluginSta = _this234.getPluginState(),
                    videoSources = _this234$getPluginSta.videoSources,
                    currentDeviceId = _this234$getPluginSta.currentDeviceId;

                videoSources.forEach(function (videoSource) {
                  if (currentDeviceId === videoSource.deviceId) {
                    restartStream = false;
                  }
                });

                if (restartStream) {
                  _this234.stop();

                  _this234.start();
                }
              }
            };
          }
        };

        _proto78.uninstall = function uninstall() {
          this.stop();
          this.unmount();
        };

        _proto78.onUnmount = function onUnmount() {
          this.stop();
        };

        return Webcam;
      }(UIPlugin)), _class.VERSION = "2.0.1", _temp);
    }, {
      "./CameraIcon": 786,
      "./CameraScreen": 787,
      "./PermissionsScreen": 789,
      "./supportsMediaRecorder": 797,
      "@uppy/core": 645,
      "@uppy/utils/lib/canvasToBlob": 752,
      "@uppy/utils/lib/getFileTypeExtension": 768,
      "@uppy/utils/lib/mimeTypes": 779,
      "preact": 595
    }],
    797: [function (require, module, exports) {
      "use strict";

      module.exports = function supportsMediaRecorder() {
        /* eslint-disable compat/compat */
        return typeof MediaRecorder === 'function' && !!MediaRecorder.prototype && typeof MediaRecorder.prototype.start === 'function';
        /* eslint-enable compat/compat */
      };
    }, {}],
    798: [function (require, module, exports) {
      "use strict";

      var _class, _temp;

      var _require138 = require('@uppy/core'),
          BasePlugin = _require138.BasePlugin;

      var _require139 = require('nanoid'),
          nanoid = _require139.nanoid;

      var _require140 = require('@uppy/companion-client'),
          Provider = _require140.Provider,
          RequestClient = _require140.RequestClient,
          Socket = _require140.Socket;

      var emitSocketProgress = require('@uppy/utils/lib/emitSocketProgress');

      var getSocketHost = require('@uppy/utils/lib/getSocketHost');

      var settle = require('@uppy/utils/lib/settle');

      var EventTracker = require('@uppy/utils/lib/EventTracker');

      var ProgressTimeout = require('@uppy/utils/lib/ProgressTimeout');

      var _require141 = require('@uppy/utils/lib/RateLimitedQueue'),
          RateLimitedQueue = _require141.RateLimitedQueue,
          internalRateLimitedQueue = _require141.internalRateLimitedQueue;

      var NetworkError = require('@uppy/utils/lib/NetworkError');

      var isNetworkError = require('@uppy/utils/lib/isNetworkError');

      function buildResponseError(xhr, err) {
        var error = err; // No error message

        if (!error) error = new Error('Upload error'); // Got an error message string

        if (typeof error === 'string') error = new Error(error); // Got something else

        if (!(error instanceof Error)) {
          error = Object.assign(new Error('Upload error'), {
            data: error
          });
        }

        if (isNetworkError(xhr)) {
          error = new NetworkError(error, xhr);
          return error;
        }

        error.request = xhr;
        return error;
      }
      /**
       * Set `data.type` in the blob to `file.meta.type`,
       * because we might have detected a more accurate file type in Uppy
       * https://stackoverflow.com/a/50875615
       *
       * @param {object} file File object with `data`, `size` and `meta` properties
       * @returns {object} blob updated with the new `type` set from `file.meta.type`
       */


      function setTypeInBlob(file) {
        var dataWithUpdatedType = file.data.slice(0, file.data.size, file.meta.type);
        return dataWithUpdatedType;
      }

      module.exports = (_temp = _class = /*#__PURE__*/function (_BasePlugin9) {
        _inheritsLoose(XHRUpload, _BasePlugin9);

        // eslint-disable-next-line global-require
        function XHRUpload(uppy, opts) {
          var _this235;

          _this235 = _BasePlugin9.call(this, uppy, opts) || this;
          _this235.type = 'uploader';
          _this235.id = _this235.opts.id || 'XHRUpload';
          _this235.title = 'XHRUpload';
          _this235.defaultLocale = {
            strings: {
              timedOut: 'Upload stalled for %{seconds} seconds, aborting.'
            }
          }; // Default options

          var defaultOptions = {
            formData: true,
            fieldName: opts.bundle ? 'files[]' : 'file',
            method: 'post',
            metaFields: null,
            responseUrlFieldName: 'url',
            bundle: false,
            headers: {},
            timeout: 30 * 1000,
            limit: 5,
            withCredentials: false,
            responseType: '',

            /**
             * @typedef respObj
             * @property {string} responseText
             * @property {number} status
             * @property {string} statusText
             * @property {object.<string, string>} headers
             *
             * @param {string} responseText the response body string
             * @param {XMLHttpRequest | respObj} response the response object (XHR or similar)
             */
            getResponseData: function getResponseData(responseText) {
              var parsedResponse = {};

              try {
                parsedResponse = JSON.parse(responseText);
              } catch (err) {
                this.uppy.log(err);
              }

              return parsedResponse;
            },

            /**
             *
             * @param {string} responseText the response body string
             * @param {XMLHttpRequest | respObj} response the response object (XHR or similar)
             */
            getResponseError: function getResponseError(_, response) {
              var error = new Error('Upload error');

              if (isNetworkError(response)) {
                error = new NetworkError(error, response);
              }

              return error;
            },

            /**
             * Check if the response from the upload endpoint indicates that the upload was successful.
             *
             * @param {number} status the response status code
             */
            validateStatus: function validateStatus(status) {
              return status >= 200 && status < 300;
            }
          };
          _this235.opts = Object.assign({}, defaultOptions, opts);

          _this235.i18nInit();

          _this235.handleUpload = _this235.handleUpload.bind(_assertThisInitialized2(_this235)); // Simultaneous upload limiting is shared across all uploads with this plugin.

          if (internalRateLimitedQueue in _this235.opts) {
            _this235.requests = _this235.opts[internalRateLimitedQueue];
          } else {
            _this235.requests = new RateLimitedQueue(_this235.opts.limit);
          }

          if (_this235.opts.bundle && !_this235.opts.formData) {
            throw new Error('`opts.formData` must be true when `opts.bundle` is enabled.');
          }

          _this235.uploaderEvents = Object.create(null);
          return _this235;
        }

        var _proto79 = XHRUpload.prototype;

        _proto79.getOptions = function getOptions(file) {
          var overrides = this.uppy.getState().xhrUpload;
          var headers = this.opts.headers;
          var opts = Object.assign({}, this.opts, overrides || {}, file.xhrUpload || {}, {
            headers: {}
          }); // Support for `headers` as a function, only in the XHRUpload settings.
          // Options set by other plugins in Uppy state or on the files themselves are still merged in afterward.
          //
          // ```js
          // headers: (file) => ({ expires: file.meta.expires })
          // ```

          if (typeof headers === 'function') {
            opts.headers = headers(file);
          } else {
            Object.assign(opts.headers, this.opts.headers);
          }

          if (overrides) {
            Object.assign(opts.headers, overrides.headers);
          }

          if (file.xhrUpload) {
            Object.assign(opts.headers, file.xhrUpload.headers);
          }

          return opts;
        } // eslint-disable-next-line class-methods-use-this
        ;

        _proto79.addMetadata = function addMetadata(formData, meta, opts) {
          var metaFields = Array.isArray(opts.metaFields) ? opts.metaFields : Object.keys(meta); // Send along all fields by default.

          metaFields.forEach(function (item) {
            formData.append(item, meta[item]);
          });
        };

        _proto79.createFormDataUpload = function createFormDataUpload(file, opts) {
          var formPost = new FormData();
          this.addMetadata(formPost, file.meta, opts);
          var dataWithUpdatedType = setTypeInBlob(file);

          if (file.name) {
            formPost.append(opts.fieldName, dataWithUpdatedType, file.meta.name);
          } else {
            formPost.append(opts.fieldName, dataWithUpdatedType);
          }

          return formPost;
        };

        _proto79.createBundledUpload = function createBundledUpload(files, opts) {
          var _this236 = this;

          var formPost = new FormData();

          var _this$uppy$getState10 = this.uppy.getState(),
              meta = _this$uppy$getState10.meta;

          this.addMetadata(formPost, meta, opts);
          files.forEach(function (file) {
            var options = _this236.getOptions(file);

            var dataWithUpdatedType = setTypeInBlob(file);

            if (file.name) {
              formPost.append(options.fieldName, dataWithUpdatedType, file.name);
            } else {
              formPost.append(options.fieldName, dataWithUpdatedType);
            }
          });
          return formPost;
        };

        _proto79.upload = function upload(file, current, total) {
          var _this237 = this;

          var opts = this.getOptions(file);
          this.uppy.log("uploading " + current + " of " + total);
          return new Promise(function (resolve, reject) {
            _this237.uppy.emit('upload-started', file);

            var data = opts.formData ? _this237.createFormDataUpload(file, opts) : file.data;
            var xhr = new XMLHttpRequest();
            _this237.uploaderEvents[file.id] = new EventTracker(_this237.uppy);
            var timer = new ProgressTimeout(opts.timeout, function () {
              xhr.abort();
              queuedRequest.done();
              var error = new Error(_this237.i18n('timedOut', {
                seconds: Math.ceil(opts.timeout / 1000)
              }));

              _this237.uppy.emit('upload-error', file, error);

              reject(error);
            });
            var id = nanoid();
            xhr.upload.addEventListener('loadstart', function () {
              _this237.uppy.log("[XHRUpload] " + id + " started");
            });
            xhr.upload.addEventListener('progress', function (ev) {
              _this237.uppy.log("[XHRUpload] " + id + " progress: " + ev.loaded + " / " + ev.total); // Begin checking for timeouts when progress starts, instead of loading,
              // to avoid timing out requests on browser concurrency queue


              timer.progress();

              if (ev.lengthComputable) {
                _this237.uppy.emit('upload-progress', file, {
                  uploader: _this237,
                  bytesUploaded: ev.loaded,
                  bytesTotal: ev.total
                });
              }
            });
            xhr.addEventListener('load', function (ev) {
              _this237.uppy.log("[XHRUpload] " + id + " finished");

              timer.done();
              queuedRequest.done();

              if (_this237.uploaderEvents[file.id]) {
                _this237.uploaderEvents[file.id].remove();

                _this237.uploaderEvents[file.id] = null;
              }

              if (opts.validateStatus(ev.target.status, xhr.responseText, xhr)) {
                var _body2 = opts.getResponseData(xhr.responseText, xhr);

                var uploadURL = _body2[opts.responseUrlFieldName];
                var uploadResp = {
                  status: ev.target.status,
                  body: _body2,
                  uploadURL: uploadURL
                };

                _this237.uppy.emit('upload-success', file, uploadResp);

                if (uploadURL) {
                  _this237.uppy.log("Download " + file.name + " from " + uploadURL);
                }

                return resolve(file);
              }

              var body = opts.getResponseData(xhr.responseText, xhr);
              var error = buildResponseError(xhr, opts.getResponseError(xhr.responseText, xhr));
              var response = {
                status: ev.target.status,
                body: body
              };

              _this237.uppy.emit('upload-error', file, error, response);

              return reject(error);
            });
            xhr.addEventListener('error', function () {
              _this237.uppy.log("[XHRUpload] " + id + " errored");

              timer.done();
              queuedRequest.done();

              if (_this237.uploaderEvents[file.id]) {
                _this237.uploaderEvents[file.id].remove();

                _this237.uploaderEvents[file.id] = null;
              }

              var error = buildResponseError(xhr, opts.getResponseError(xhr.responseText, xhr));

              _this237.uppy.emit('upload-error', file, error);

              return reject(error);
            });
            xhr.open(opts.method.toUpperCase(), opts.endpoint, true); // IE10 does not allow setting `withCredentials` and `responseType`
            // before `open()` is called.

            xhr.withCredentials = opts.withCredentials;

            if (opts.responseType !== '') {
              xhr.responseType = opts.responseType;
            }

            var queuedRequest = _this237.requests.run(function () {
              _this237.uppy.emit('upload-started', file); // When using an authentication system like JWT, the bearer token goes as a header. This
              // header needs to be fresh each time the token is refreshed so computing and setting the
              // headers just before the upload starts enables this kind of authentication to work properly.
              // Otherwise, half-way through the list of uploads the token could be stale and the upload would fail.


              var currentOpts = _this237.getOptions(file);

              Object.keys(currentOpts.headers).forEach(function (header) {
                xhr.setRequestHeader(header, currentOpts.headers[header]);
              });
              xhr.send(data);
              return function () {
                timer.done();
                xhr.abort();
              };
            });

            _this237.onFileRemove(file.id, function () {
              queuedRequest.abort();
              reject(new Error('File removed'));
            });

            _this237.onCancelAll(file.id, function () {
              queuedRequest.abort();
              reject(new Error('Upload cancelled'));
            });
          });
        };

        _proto79.uploadRemote = function uploadRemote(file) {
          var _this238 = this;

          var opts = this.getOptions(file);
          return new Promise(function (resolve, reject) {
            var fields = {};
            var metaFields = Array.isArray(opts.metaFields) ? opts.metaFields // Send along all fields by default.
            : Object.keys(file.meta);
            metaFields.forEach(function (name) {
              fields[name] = file.meta[name];
            });
            var Client = file.remote.providerOptions.provider ? Provider : RequestClient;
            var client = new Client(_this238.uppy, file.remote.providerOptions);
            client.post(file.remote.url, Object.assign({}, file.remote.body, {
              endpoint: opts.endpoint,
              size: file.data.size,
              fieldname: opts.fieldName,
              metadata: fields,
              httpMethod: opts.method,
              useFormData: opts.formData,
              headers: opts.headers
            })).then(function (res) {
              var token = res.token;
              var host = getSocketHost(file.remote.companionUrl);
              var socket = new Socket({
                target: host + "/api/" + token,
                autoOpen: false
              });
              _this238.uploaderEvents[file.id] = new EventTracker(_this238.uppy);

              _this238.onFileRemove(file.id, function () {
                socket.send('pause', {});
                queuedRequest.abort();
                resolve("upload " + file.id + " was removed");
              });

              _this238.onCancelAll(file.id, function () {
                socket.send('pause', {});
                queuedRequest.abort();
                resolve("upload " + file.id + " was canceled");
              });

              _this238.onRetry(file.id, function () {
                socket.send('pause', {});
                socket.send('resume', {});
              });

              _this238.onRetryAll(file.id, function () {
                socket.send('pause', {});
                socket.send('resume', {});
              });

              socket.on('progress', function (progressData) {
                return emitSocketProgress(_this238, progressData, file);
              });
              socket.on('success', function (data) {
                var body = opts.getResponseData(data.response.responseText, data.response);
                var uploadURL = body[opts.responseUrlFieldName];
                var uploadResp = {
                  status: data.response.status,
                  body: body,
                  uploadURL: uploadURL
                };

                _this238.uppy.emit('upload-success', file, uploadResp);

                queuedRequest.done();

                if (_this238.uploaderEvents[file.id]) {
                  _this238.uploaderEvents[file.id].remove();

                  _this238.uploaderEvents[file.id] = null;
                }

                return resolve();
              });
              socket.on('error', function (errData) {
                var resp = errData.response;
                var error = resp ? opts.getResponseError(resp.responseText, resp) : Object.assign(new Error(errData.error.message), {
                  cause: errData.error
                });

                _this238.uppy.emit('upload-error', file, error);

                queuedRequest.done();

                if (_this238.uploaderEvents[file.id]) {
                  _this238.uploaderEvents[file.id].remove();

                  _this238.uploaderEvents[file.id] = null;
                }

                reject(error);
              });

              var queuedRequest = _this238.requests.run(function () {
                socket.open();

                if (file.isPaused) {
                  socket.send('pause', {});
                }

                return function () {
                  return socket.close();
                };
              });
            }).catch(function (err) {
              _this238.uppy.emit('upload-error', file, err);

              reject(err);
            });
          });
        };

        _proto79.uploadBundle = function uploadBundle(files) {
          var _this239 = this;

          return new Promise(function (resolve, reject) {
            var endpoint = _this239.opts.endpoint;
            var method = _this239.opts.method;

            var optsFromState = _this239.uppy.getState().xhrUpload;

            var formData = _this239.createBundledUpload(files, Object.assign({}, _this239.opts, optsFromState || {}));

            var xhr = new XMLHttpRequest();
            var timer = new ProgressTimeout(_this239.opts.timeout, function () {
              xhr.abort();
              var error = new Error(_this239.i18n('timedOut', {
                seconds: Math.ceil(_this239.opts.timeout / 1000)
              }));
              emitError(error);
              reject(error);
            });

            var emitError = function emitError(error) {
              files.forEach(function (file) {
                _this239.uppy.emit('upload-error', file, error);
              });
            };

            xhr.upload.addEventListener('loadstart', function () {
              _this239.uppy.log('[XHRUpload] started uploading bundle');

              timer.progress();
            });
            xhr.upload.addEventListener('progress', function (ev) {
              timer.progress();
              if (!ev.lengthComputable) return;
              files.forEach(function (file) {
                _this239.uppy.emit('upload-progress', file, {
                  uploader: _this239,
                  bytesUploaded: ev.loaded / ev.total * file.size,
                  bytesTotal: file.size
                });
              });
            });
            xhr.addEventListener('load', function (ev) {
              timer.done();

              if (_this239.opts.validateStatus(ev.target.status, xhr.responseText, xhr)) {
                var body = _this239.opts.getResponseData(xhr.responseText, xhr);

                var uploadResp = {
                  status: ev.target.status,
                  body: body
                };
                files.forEach(function (file) {
                  _this239.uppy.emit('upload-success', file, uploadResp);
                });
                return resolve();
              }

              var error = _this239.opts.getResponseError(xhr.responseText, xhr) || new Error('Upload error');
              error.request = xhr;
              emitError(error);
              return reject(error);
            });
            xhr.addEventListener('error', function () {
              timer.done();
              var error = _this239.opts.getResponseError(xhr.responseText, xhr) || new Error('Upload error');
              emitError(error);
              return reject(error);
            });

            _this239.uppy.on('cancel-all', function () {
              timer.done();
              xhr.abort();
            });

            xhr.open(method.toUpperCase(), endpoint, true); // IE10 does not allow setting `withCredentials` and `responseType`
            // before `open()` is called.

            xhr.withCredentials = _this239.opts.withCredentials;

            if (_this239.opts.responseType !== '') {
              xhr.responseType = _this239.opts.responseType;
            }

            Object.keys(_this239.opts.headers).forEach(function (header) {
              xhr.setRequestHeader(header, _this239.opts.headers[header]);
            });
            xhr.send(formData);
            files.forEach(function (file) {
              _this239.uppy.emit('upload-started', file);
            });
          });
        };

        _proto79.uploadFiles = function uploadFiles(files) {
          var _this240 = this;

          var promises = files.map(function (file, i) {
            var current = parseInt(i, 10) + 1;
            var total = files.length;

            if (file.error) {
              return Promise.reject(new Error(file.error));
            }

            if (file.isRemote) {
              return _this240.uploadRemote(file, current, total);
            }

            return _this240.upload(file, current, total);
          });
          return settle(promises);
        };

        _proto79.onFileRemove = function onFileRemove(fileID, cb) {
          this.uploaderEvents[fileID].on('file-removed', function (file) {
            if (fileID === file.id) cb(file.id);
          });
        };

        _proto79.onRetry = function onRetry(fileID, cb) {
          this.uploaderEvents[fileID].on('upload-retry', function (targetFileID) {
            if (fileID === targetFileID) {
              cb();
            }
          });
        };

        _proto79.onRetryAll = function onRetryAll(fileID, cb) {
          var _this241 = this;

          this.uploaderEvents[fileID].on('retry-all', function () {
            if (!_this241.uppy.getFile(fileID)) return;
            cb();
          });
        };

        _proto79.onCancelAll = function onCancelAll(fileID, cb) {
          var _this242 = this;

          this.uploaderEvents[fileID].on('cancel-all', function () {
            if (!_this242.uppy.getFile(fileID)) return;
            cb();
          });
        };

        _proto79.handleUpload = function handleUpload(fileIDs) {
          var _this243 = this;

          if (fileIDs.length === 0) {
            this.uppy.log('[XHRUpload] No files to upload!');
            return Promise.resolve();
          } // No limit configured by the user, and no RateLimitedQueue passed in by a "parent" plugin
          // (basically just AwsS3) using the internal symbol


          if (this.opts.limit === 0 && !this.opts[internalRateLimitedQueue]) {
            this.uppy.log('[XHRUpload] When uploading multiple files at once, consider setting the `limit` option (to `10` for example), to limit the number of concurrent uploads, which helps prevent memory and network issues: https://uppy.io/docs/xhr-upload/#limit-0', 'warning');
          }

          this.uppy.log('[XHRUpload] Uploading...');
          var files = fileIDs.map(function (fileID) {
            return _this243.uppy.getFile(fileID);
          });

          if (this.opts.bundle) {
            // if bundle: true, we don’t support remote uploads
            var isSomeFileRemote = files.some(function (file) {
              return file.isRemote;
            });

            if (isSomeFileRemote) {
              throw new Error('Can’t upload remote files when the `bundle: true` option is set');
            }

            if (typeof this.opts.headers === 'function') {
              throw new TypeError('`headers` may not be a function when the `bundle: true` option is set');
            }

            return this.uploadBundle(files);
          }

          return this.uploadFiles(files).then(function () {
            return null;
          });
        };

        _proto79.install = function install() {
          if (this.opts.bundle) {
            var _this$uppy$getState11 = this.uppy.getState(),
                capabilities = _this$uppy$getState11.capabilities;

            this.uppy.setState({
              capabilities: Object.assign({}, capabilities, {
                individualCancellation: false
              })
            });
          }

          this.uppy.addUploader(this.handleUpload);
        };

        _proto79.uninstall = function uninstall() {
          if (this.opts.bundle) {
            var _this$uppy$getState12 = this.uppy.getState(),
                capabilities = _this$uppy$getState12.capabilities;

            this.uppy.setState({
              capabilities: Object.assign({}, capabilities, {
                individualCancellation: true
              })
            });
          }

          this.uppy.removeUploader(this.handleUpload);
        };

        return XHRUpload;
      }(BasePlugin), _class.VERSION = "2.0.2", _temp);
    }, {
      "@uppy/companion-client": 640,
      "@uppy/core": 645,
      "@uppy/utils/lib/EventTracker": 746,
      "@uppy/utils/lib/NetworkError": 748,
      "@uppy/utils/lib/ProgressTimeout": 749,
      "@uppy/utils/lib/RateLimitedQueue": 750,
      "@uppy/utils/lib/emitSocketProgress": 755,
      "@uppy/utils/lib/getSocketHost": 769,
      "@uppy/utils/lib/isNetworkError": 776,
      "@uppy/utils/lib/settle": 783,
      "nanoid": 799
    }],
    799: [function (require, module, exports) {
      (function (process) {
        (function () {
          // This file replaces `index.js` in bundlers like webpack or Rollup,
          // according to `browser` config in `package.json`.
          var _require142 = require('./url-alphabet/index.cjs'),
              urlAlphabet = _require142.urlAlphabet;

          if (process.env.NODE_ENV !== 'production') {
            // All bundlers will remove this block in the production bundle.
            if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative' && typeof crypto === 'undefined') {
              throw new Error('React Native does not have a built-in secure random generator. ' + 'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' + 'For secure IDs, import `react-native-get-random-values` ' + 'before Nano ID.');
            }

            if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {
              throw new Error('Import file with `if (!window.crypto) window.crypto = window.msCrypto`' + ' before importing Nano ID to fix IE 11 support');
            }

            if (typeof crypto === 'undefined') {
              throw new Error('Your browser does not have secure random generator. ' + 'If you don’t need unpredictable IDs, you can use nanoid/non-secure.');
            }
          }

          var random = function random(bytes) {
            return crypto.getRandomValues(new Uint8Array(bytes));
          };

          var customRandom = function customRandom(alphabet, size, getRandom) {
            // First, a bitmask is necessary to generate the ID. The bitmask makes bytes
            // values closer to the alphabet size. The bitmask calculates the closest
            // `2^31 - 1` number, which exceeds the alphabet size.
            // For example, the bitmask for the alphabet size 30 is 31 (00011111).
            // `Math.clz32` is not used, because it is not available in browsers.
            var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1; // Though, the bitmask solution is not perfect since the bytes exceeding
            // the alphabet size are refused. Therefore, to reliably generate the ID,
            // the random bytes redundancy has to be satisfied.
            // Note: every hardware random generator call is performance expensive,
            // because the system call for entropy collection takes a lot of time.
            // So, to avoid additional system calls, extra bytes are requested in advance.
            // Next, a step determines how many random bytes to generate.
            // The number of random bytes gets decided upon the ID size, mask,
            // alphabet size, and magic number 1.6 (using 1.6 peaks at performance
            // according to benchmarks).
            // `-~f => Math.ceil(f)` if f is a float
            // `-~i => i + 1` if i is an integer

            var step = -~(1.6 * mask * size / alphabet.length);
            return function () {
              var id = '';

              while (true) {
                var bytes = getRandom(step); // A compact alternative for `for (var i = 0; i < step; i++)`.

                var j = step;

                while (j--) {
                  // Adding `|| ''` refuses a random byte that exceeds the alphabet size.
                  id += alphabet[bytes[j] & mask] || '';
                  if (id.length === size) return id;
                }
              }
            };
          };

          var customAlphabet = function customAlphabet(alphabet, size) {
            return customRandom(alphabet, size, random);
          };

          var nanoid = function nanoid(size) {
            if (size === void 0) {
              size = 21;
            }

            var id = '';
            var bytes = crypto.getRandomValues(new Uint8Array(size)); // A compact alternative for `for (var i = 0; i < step; i++)`.

            while (size--) {
              // It is incorrect to use bytes exceeding the alphabet size.
              // The following mask reduces the random byte in the 0-255 value
              // range to the 0-63 value range. Therefore, adding hacks, such
              // as empty string fallback or magic numbers, is unneccessary because
              // the bitmask trims bytes down to the alphabet size.
              var byte = bytes[size] & 63;

              if (byte < 36) {
                // `0-9a-z`
                id += byte.toString(36);
              } else if (byte < 62) {
                // `A-Z`
                id += (byte - 26).toString(36).toUpperCase();
              } else if (byte < 63) {
                id += '_';
              } else {
                id += '-';
              }
            }

            return id;
          };

          module.exports = {
            nanoid: nanoid,
            customAlphabet: customAlphabet,
            customRandom: customRandom,
            urlAlphabet: urlAlphabet,
            random: random
          };
        }).call(this);
      }).call(this, require('_process'));
    }, {
      "./url-alphabet/index.cjs": 800,
      "_process": 596
    }],
    800: [function (require, module, exports) {
      arguments[4][633][0].apply(exports, arguments);
    }, {
      "dup": 633
    }],
    801: [function (require, module, exports) {
      "use strict";

      require('core-js');

      require('whatwg-fetch');

      require('abortcontroller-polyfill/dist/polyfill-patch-fetch'); // Order matters: AbortController needs fetch which needs Promise.


      require('md-gum-polyfill');

      var ResizeObserver = require('resize-observer-polyfill');

      if (typeof window.ResizeObserver !== 'function') window.ResizeObserver = ResizeObserver; // Needed for Babel

      require("regenerator-runtime/runtime");

      globalThis.Uppy = module.exports = require('.');
    }, {
      ".": 802,
      "abortcontroller-polyfill/dist/polyfill-patch-fetch": 2,
      "core-js": 10,
      "md-gum-polyfill": 588,
      "regenerator-runtime/runtime": 803,
      "resize-observer-polyfill": 599,
      "whatwg-fetch": 624
    }],
    802: [function (require, module, exports) {
      "use strict"; // Core

      exports.Core = require('@uppy/core');
      exports.debugLogger = exports.Core.debugLogger; // Utilities

      exports.server = require('@uppy/companion-client');
      exports.views = {
        ProviderView: require('@uppy/provider-views')
      }; // Stores

      exports.DefaultStore = require('@uppy/store-default');
      exports.ReduxStore = require('@uppy/store-redux'); // UI plugins

      exports.Dashboard = require('@uppy/dashboard');
      exports.DragDrop = require('@uppy/drag-drop');
      exports.DropTarget = require('@uppy/drop-target');
      exports.FileInput = require('@uppy/file-input');
      exports.Informer = require('@uppy/informer');
      exports.ProgressBar = require('@uppy/progress-bar');
      exports.StatusBar = require('@uppy/status-bar');
      exports.ImageEditor = require('@uppy/image-editor'); // Acquirers

      exports.Dropbox = require('@uppy/dropbox');
      exports.GoogleDrive = require('@uppy/google-drive');
      exports.Instagram = require('@uppy/instagram');
      exports.OneDrive = require('@uppy/onedrive');
      exports.Box = require('@uppy/box');
      exports.Facebook = require('@uppy/facebook');
      exports.Unsplash = require('@uppy/unsplash');
      exports.Url = require('@uppy/url');
      exports.Webcam = require('@uppy/webcam');
      exports.ScreenCapture = require('@uppy/screen-capture'); // Uploaders

      exports.AwsS3 = require('@uppy/aws-s3');
      exports.AwsS3Multipart = require('@uppy/aws-s3-multipart');
      exports.Transloadit = require('@uppy/transloadit');
      exports.Tus = require('@uppy/tus');
      exports.XHRUpload = require('@uppy/xhr-upload'); // Miscellaneous

      exports.Form = require('@uppy/form');
      exports.GoldenRetriever = require('@uppy/golden-retriever');
      exports.ReduxDevTools = require('@uppy/redux-dev-tools');
      exports.ThumbnailGenerator = require('@uppy/thumbnail-generator');
      exports.locales = {};
    }, {
      "@uppy/aws-s3": 630,
      "@uppy/aws-s3-multipart": 628,
      "@uppy/box": 634,
      "@uppy/companion-client": 640,
      "@uppy/core": 645,
      "@uppy/dashboard": 666,
      "@uppy/drag-drop": 675,
      "@uppy/drop-target": 676,
      "@uppy/dropbox": 677,
      "@uppy/facebook": 678,
      "@uppy/file-input": 679,
      "@uppy/form": 680,
      "@uppy/golden-retriever": 684,
      "@uppy/google-drive": 686,
      "@uppy/image-editor": 688,
      "@uppy/informer": 691,
      "@uppy/instagram": 692,
      "@uppy/onedrive": 693,
      "@uppy/progress-bar": 694,
      "@uppy/provider-views": 716,
      "@uppy/redux-dev-tools": 717,
      "@uppy/screen-capture": 724,
      "@uppy/status-bar": 727,
      "@uppy/store-default": 728,
      "@uppy/store-redux": 729,
      "@uppy/thumbnail-generator": 732,
      "@uppy/transloadit": 737,
      "@uppy/tus": 740,
      "@uppy/unsplash": 741,
      "@uppy/url": 743,
      "@uppy/webcam": 796,
      "@uppy/xhr-upload": 798
    }],
    803: [function (require, module, exports) {
      /**
       * Copyright (c) 2014-present, Facebook, Inc.
       *
       * This source code is licensed under the MIT license found in the
       * LICENSE file in the root directory of this source tree.
       */
      var runtime = function (exports) {
        "use strict";

        var Op = Object.prototype;
        var hasOwn = Op.hasOwnProperty;
        var undefined; // More compressible than void 0.

        var $Symbol = typeof Symbol === "function" ? Symbol : {};
        var iteratorSymbol = $Symbol.iterator || "@@iterator";
        var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
        var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

        function define(obj, key, value) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
          return obj[key];
        }

        try {
          // IE 8 has a broken Object.defineProperty that only works on DOM objects.
          define({}, "");
        } catch (err) {
          define = function define(obj, key, value) {
            return obj[key] = value;
          };
        }

        function wrap(innerFn, outerFn, self, tryLocsList) {
          // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
          var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
          var generator = Object.create(protoGenerator.prototype);
          var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,
          // .throw, and .return methods.

          generator._invoke = makeInvokeMethod(innerFn, self, context);
          return generator;
        }

        exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion
        // record like context.tryEntries[i].completion. This interface could
        // have been (and was previously) designed to take a closure to be
        // invoked without arguments, but in all the cases we care about we
        // already have an existing method we want to call, so there's no need
        // to create a new function object. We can even get away with assuming
        // the method takes exactly one argument, since that happens to be true
        // in every case, so we don't have to touch the arguments object. The
        // only additional allocation required is the completion record, which
        // has a stable shape and so hopefully should be cheap to allocate.

        function tryCatch(fn, obj, arg) {
          try {
            return {
              type: "normal",
              arg: fn.call(obj, arg)
            };
          } catch (err) {
            return {
              type: "throw",
              arg: err
            };
          }
        }

        var GenStateSuspendedStart = "suspendedStart";
        var GenStateSuspendedYield = "suspendedYield";
        var GenStateExecuting = "executing";
        var GenStateCompleted = "completed"; // Returning this object from the innerFn has the same effect as
        // breaking out of the dispatch switch statement.

        var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and
        // .constructor.prototype properties for functions that return Generator
        // objects. For full spec compliance, you may wish to configure your
        // minifier not to mangle the names of these two functions.

        function Generator() {}

        function GeneratorFunction() {}

        function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that
        // don't natively support it.


        var IteratorPrototype = {};
        define(IteratorPrototype, iteratorSymbol, function () {
          return this;
        });
        var getProto = Object.getPrototypeOf;
        var NativeIteratorPrototype = getProto && getProto(getProto(values([])));

        if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
          // This environment has a native %IteratorPrototype%; use it instead
          // of the polyfill.
          IteratorPrototype = NativeIteratorPrototype;
        }

        var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
        GeneratorFunction.prototype = GeneratorFunctionPrototype;
        define(Gp, "constructor", GeneratorFunctionPrototype);
        define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
        GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"); // Helper for defining the .next, .throw, and .return methods of the
        // Iterator interface in terms of a single ._invoke method.

        function defineIteratorMethods(prototype) {
          ["next", "throw", "return"].forEach(function (method) {
            define(prototype, method, function (arg) {
              return this._invoke(method, arg);
            });
          });
        }

        exports.isGeneratorFunction = function (genFun) {
          var ctor = typeof genFun === "function" && genFun.constructor;
          return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
          // do is to check its .name property.
          (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
        };

        exports.mark = function (genFun) {
          if (Object.setPrototypeOf) {
            Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
          } else {
            genFun.__proto__ = GeneratorFunctionPrototype;
            define(genFun, toStringTagSymbol, "GeneratorFunction");
          }

          genFun.prototype = Object.create(Gp);
          return genFun;
        }; // Within the body of any async function, `await x` is transformed to
        // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
        // `hasOwn.call(value, "__await")` to determine if the yielded value is
        // meant to be awaited.


        exports.awrap = function (arg) {
          return {
            __await: arg
          };
        };

        function AsyncIterator(generator, PromiseImpl) {
          function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);

            if (record.type === "throw") {
              reject(record.arg);
            } else {
              var result = record.arg;
              var value = result.value;

              if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
                return PromiseImpl.resolve(value.__await).then(function (value) {
                  invoke("next", value, resolve, reject);
                }, function (err) {
                  invoke("throw", err, resolve, reject);
                });
              }

              return PromiseImpl.resolve(value).then(function (unwrapped) {
                // When a yielded Promise is resolved, its final value becomes
                // the .value of the Promise<{value,done}> result for the
                // current iteration.
                result.value = unwrapped;
                resolve(result);
              }, function (error) {
                // If a rejected Promise was yielded, throw the rejection back
                // into the async generator function so it can be handled there.
                return invoke("throw", error, resolve, reject);
              });
            }
          }

          var previousPromise;

          function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
              return new PromiseImpl(function (resolve, reject) {
                invoke(method, arg, resolve, reject);
              });
            }

            return previousPromise = // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          } // Define the unified helper method that is used to implement .next,
          // .throw, and .return (see defineIteratorMethods).


          this._invoke = enqueue;
        }

        defineIteratorMethods(AsyncIterator.prototype);
        define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
          return this;
        });
        exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of
        // AsyncIterator objects; they just return a Promise for the value of
        // the final result produced by the iterator.

        exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
          if (PromiseImpl === void 0) PromiseImpl = Promise;
          var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
          return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
          : iter.next().then(function (result) {
            return result.done ? result.value : iter.next();
          });
        };

        function makeInvokeMethod(innerFn, self, context) {
          var state = GenStateSuspendedStart;
          return function invoke(method, arg) {
            if (state === GenStateExecuting) {
              throw new Error("Generator is already running");
            }

            if (state === GenStateCompleted) {
              if (method === "throw") {
                throw arg;
              } // Be forgiving, per 25.3.3.3.3 of the spec:
              // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume


              return doneResult();
            }

            context.method = method;
            context.arg = arg;

            while (true) {
              var delegate = context.delegate;

              if (delegate) {
                var delegateResult = maybeInvokeDelegate(delegate, context);

                if (delegateResult) {
                  if (delegateResult === ContinueSentinel) continue;
                  return delegateResult;
                }
              }

              if (context.method === "next") {
                // Setting context._sent for legacy support of Babel's
                // function.sent implementation.
                context.sent = context._sent = context.arg;
              } else if (context.method === "throw") {
                if (state === GenStateSuspendedStart) {
                  state = GenStateCompleted;
                  throw context.arg;
                }

                context.dispatchException(context.arg);
              } else if (context.method === "return") {
                context.abrupt("return", context.arg);
              }

              state = GenStateExecuting;
              var record = tryCatch(innerFn, self, context);

              if (record.type === "normal") {
                // If an exception is thrown from innerFn, we leave state ===
                // GenStateExecuting and loop back for another invocation.
                state = context.done ? GenStateCompleted : GenStateSuspendedYield;

                if (record.arg === ContinueSentinel) {
                  continue;
                }

                return {
                  value: record.arg,
                  done: context.done
                };
              } else if (record.type === "throw") {
                state = GenStateCompleted; // Dispatch the exception by looping back around to the
                // context.dispatchException(context.arg) call above.

                context.method = "throw";
                context.arg = record.arg;
              }
            }
          };
        } // Call delegate.iterator[context.method](context.arg) and handle the
        // result, either by returning a { value, done } result from the
        // delegate iterator, or by modifying context.method and context.arg,
        // setting context.delegate to null, and returning the ContinueSentinel.


        function maybeInvokeDelegate(delegate, context) {
          var method = delegate.iterator[context.method];

          if (method === undefined) {
            // A .throw or .return when the delegate iterator has no .throw
            // method always terminates the yield* loop.
            context.delegate = null;

            if (context.method === "throw") {
              // Note: ["return"] must be used for ES3 parsing compatibility.
              if (delegate.iterator["return"]) {
                // If the delegate iterator has a return method, give it a
                // chance to clean up.
                context.method = "return";
                context.arg = undefined;
                maybeInvokeDelegate(delegate, context);

                if (context.method === "throw") {
                  // If maybeInvokeDelegate(context) changed context.method from
                  // "return" to "throw", let that override the TypeError below.
                  return ContinueSentinel;
                }
              }

              context.method = "throw";
              context.arg = new TypeError("The iterator does not provide a 'throw' method");
            }

            return ContinueSentinel;
          }

          var record = tryCatch(method, delegate.iterator, context.arg);

          if (record.type === "throw") {
            context.method = "throw";
            context.arg = record.arg;
            context.delegate = null;
            return ContinueSentinel;
          }

          var info = record.arg;

          if (!info) {
            context.method = "throw";
            context.arg = new TypeError("iterator result is not an object");
            context.delegate = null;
            return ContinueSentinel;
          }

          if (info.done) {
            // Assign the result of the finished delegate to the temporary
            // variable specified by delegate.resultName (see delegateYield).
            context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).

            context.next = delegate.nextLoc; // If context.method was "throw" but the delegate handled the
            // exception, let the outer generator proceed normally. If
            // context.method was "next", forget context.arg since it has been
            // "consumed" by the delegate iterator. If context.method was
            // "return", allow the original .return call to continue in the
            // outer generator.

            if (context.method !== "return") {
              context.method = "next";
              context.arg = undefined;
            }
          } else {
            // Re-yield the result returned by the delegate method.
            return info;
          } // The delegate iterator is finished, so forget it and continue with
          // the outer generator.


          context.delegate = null;
          return ContinueSentinel;
        } // Define Generator.prototype.{next,throw,return} in terms of the
        // unified ._invoke helper method.


        defineIteratorMethods(Gp);
        define(Gp, toStringTagSymbol, "Generator"); // A Generator should always return itself as the iterator object when the
        // @@iterator function is called on it. Some browsers' implementations of the
        // iterator prototype chain incorrectly implement this, causing the Generator
        // object to not be returned from this call. This ensures that doesn't happen.
        // See https://github.com/facebook/regenerator/issues/274 for more details.

        define(Gp, iteratorSymbol, function () {
          return this;
        });
        define(Gp, "toString", function () {
          return "[object Generator]";
        });

        function pushTryEntry(locs) {
          var entry = {
            tryLoc: locs[0]
          };

          if (1 in locs) {
            entry.catchLoc = locs[1];
          }

          if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
          }

          this.tryEntries.push(entry);
        }

        function resetTryEntry(entry) {
          var record = entry.completion || {};
          record.type = "normal";
          delete record.arg;
          entry.completion = record;
        }

        function Context(tryLocsList) {
          // The root entry object (effectively a try statement without a catch
          // or a finally block) gives us a place to store values thrown from
          // locations where there is no enclosing try statement.
          this.tryEntries = [{
            tryLoc: "root"
          }];
          tryLocsList.forEach(pushTryEntry, this);
          this.reset(true);
        }

        exports.keys = function (object) {
          var keys = [];

          for (var key in object) {
            keys.push(key);
          }

          keys.reverse(); // Rather than returning an object with a next method, we keep
          // things simple and return the next function itself.

          return function next() {
            while (keys.length) {
              var key = keys.pop();

              if (key in object) {
                next.value = key;
                next.done = false;
                return next;
              }
            } // To avoid creating an additional object, we just hang the .value
            // and .done properties off the next function object itself. This
            // also ensures that the minifier will not anonymize the function.


            next.done = true;
            return next;
          };
        };

        function values(iterable) {
          if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];

            if (iteratorMethod) {
              return iteratorMethod.call(iterable);
            }

            if (typeof iterable.next === "function") {
              return iterable;
            }

            if (!isNaN(iterable.length)) {
              var i = -1,
                  next = function next() {
                while (++i < iterable.length) {
                  if (hasOwn.call(iterable, i)) {
                    next.value = iterable[i];
                    next.done = false;
                    return next;
                  }
                }

                next.value = undefined;
                next.done = true;
                return next;
              };

              return next.next = next;
            }
          } // Return an iterator with no values.


          return {
            next: doneResult
          };
        }

        exports.values = values;

        function doneResult() {
          return {
            value: undefined,
            done: true
          };
        }

        Context.prototype = {
          constructor: Context,
          reset: function reset(skipTempReset) {
            this.prev = 0;
            this.next = 0; // Resetting context._sent for legacy support of Babel's
            // function.sent implementation.

            this.sent = this._sent = undefined;
            this.done = false;
            this.delegate = null;
            this.method = "next";
            this.arg = undefined;
            this.tryEntries.forEach(resetTryEntry);

            if (!skipTempReset) {
              for (var name in this) {
                // Not sure about the optimal order of these conditions:
                if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                  this[name] = undefined;
                }
              }
            }
          },
          stop: function stop() {
            this.done = true;
            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;

            if (rootRecord.type === "throw") {
              throw rootRecord.arg;
            }

            return this.rval;
          },
          dispatchException: function dispatchException(exception) {
            if (this.done) {
              throw exception;
            }

            var context = this;

            function handle(loc, caught) {
              record.type = "throw";
              record.arg = exception;
              context.next = loc;

              if (caught) {
                // If the dispatched exception was caught by a catch block,
                // then let that catch block handle the exception normally.
                context.method = "next";
                context.arg = undefined;
              }

              return !!caught;
            }

            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];
              var record = entry.completion;

              if (entry.tryLoc === "root") {
                // Exception thrown outside of any try block that could handle
                // it, so set the completion value of the entire function to
                // throw the exception.
                return handle("end");
              }

              if (entry.tryLoc <= this.prev) {
                var hasCatch = hasOwn.call(entry, "catchLoc");
                var hasFinally = hasOwn.call(entry, "finallyLoc");

                if (hasCatch && hasFinally) {
                  if (this.prev < entry.catchLoc) {
                    return handle(entry.catchLoc, true);
                  } else if (this.prev < entry.finallyLoc) {
                    return handle(entry.finallyLoc);
                  }
                } else if (hasCatch) {
                  if (this.prev < entry.catchLoc) {
                    return handle(entry.catchLoc, true);
                  }
                } else if (hasFinally) {
                  if (this.prev < entry.finallyLoc) {
                    return handle(entry.finallyLoc);
                  }
                } else {
                  throw new Error("try statement without catch or finally");
                }
              }
            }
          },
          abrupt: function abrupt(type, arg) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];

              if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                var finallyEntry = entry;
                break;
              }
            }

            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
              // Ignore the finally entry if control is not jumping to a
              // location outside the try/catch block.
              finallyEntry = null;
            }

            var record = finallyEntry ? finallyEntry.completion : {};
            record.type = type;
            record.arg = arg;

            if (finallyEntry) {
              this.method = "next";
              this.next = finallyEntry.finallyLoc;
              return ContinueSentinel;
            }

            return this.complete(record);
          },
          complete: function complete(record, afterLoc) {
            if (record.type === "throw") {
              throw record.arg;
            }

            if (record.type === "break" || record.type === "continue") {
              this.next = record.arg;
            } else if (record.type === "return") {
              this.rval = this.arg = record.arg;
              this.method = "return";
              this.next = "end";
            } else if (record.type === "normal" && afterLoc) {
              this.next = afterLoc;
            }

            return ContinueSentinel;
          },
          finish: function finish(finallyLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];

              if (entry.finallyLoc === finallyLoc) {
                this.complete(entry.completion, entry.afterLoc);
                resetTryEntry(entry);
                return ContinueSentinel;
              }
            }
          },
          "catch": function _catch(tryLoc) {
            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
              var entry = this.tryEntries[i];

              if (entry.tryLoc === tryLoc) {
                var record = entry.completion;

                if (record.type === "throw") {
                  var thrown = record.arg;
                  resetTryEntry(entry);
                }

                return thrown;
              }
            } // The context.catch method must only be called with a location
            // argument that corresponds to a known catch block.


            throw new Error("illegal catch attempt");
          },
          delegateYield: function delegateYield(iterable, resultName, nextLoc) {
            this.delegate = {
              iterator: values(iterable),
              resultName: resultName,
              nextLoc: nextLoc
            };

            if (this.method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              this.arg = undefined;
            }

            return ContinueSentinel;
          }
        }; // Regardless of whether this script is executing as a CommonJS module
        // or not, return the runtime object so that we can declare the variable
        // regeneratorRuntime in the outer scope, which allows this module to be
        // injected easily by `bin/regenerator --include-runtime script.js`.

        return exports;
      }( // If this script is executing as a CommonJS module, use module.exports
      // as the regeneratorRuntime namespace. Otherwise create a new empty
      // object. Either way, the resulting object will be used to initialize
      // the regeneratorRuntime variable at the top of this file.
      typeof module === "object" ? module.exports : {});

      try {
        regeneratorRuntime = runtime;
      } catch (accidentalStrictMode) {
        // This module should not be running in strict mode, so the above
        // assignment should always work unless something is misconfigured. Just
        // in case runtime.js accidentally runs in strict mode, in modern engines
        // we can explicitly access globalThis. In older engines we can escape
        // strict mode using a global Function call. This could conceivably fail
        // if a Content Security Policy forbids using Function, but in that case
        // the proper solution is to fix the accidental strict mode problem. If
        // you've misconfigured your bundler to force strict mode and applied a
        // CSP to forbid Function, and you're not willing to fix either of those
        // problems, please detail your unique predicament in a GitHub issue.
        if (typeof globalThis === "object") {
          globalThis.regeneratorRuntime = runtime;
        } else {
          Function("r", "regeneratorRuntime = r")(runtime);
        }
      }
    }, {}]
  }, {}, [801])(801);
});